:PROPERTIES:
:ID:       252394c7-7791-4393-84fe-8ac04743e29d
:END:
#+TITLE: Copyright: Structuring Software Projects
#+CATEGORY: slips
#+TAGS:

**** TODO restructure notes on software/copyright

* fdsa

does anyone have advice for choosing a license for (1) projects that are
[mostly] dotfiles/configuration and (2) a notes project like a zettelkasten?
... i'm having trouble managing attribution and project overhead. I'vellcln
looked a tiny bit into SBOM (e.g. SPDX header comments).

 i'm just generally looking for options, so I don't piss off the "GNU
 Copycorrect Or Else" people too much -- i kid, i kid! Really, i'd just like to
 be aware & consistent.

 And generally, it's been unbelievably helpful for me to learn about
 copyright. In 2013, I was in an EDX copyright class from Harvard that really
 helped (I didn't finish it, but it was formative in how I thought about it).

 In the past few years, I've been following along with SystemCrafters, I got a
 GNU membership and I've doing a lot with emacs & Guix.

SPDX is intended to be machine readable and doesn't jive too good with:

=# -*- muh-file-variables: sometimes mode: muh-language -*-=

... Furthermore, it's difficult to anticipate how to specify practical
"multi-license" caveats (1) on each Git Forge (2) esp. for Guix packages, which
would be more clear if I submitted a patch request (3) when considering
potential redistribution of files, particularly without inventing some "monadic"
way to have the end user pull & regenerated files that can't be redistributed
with .tar.gz (4) actually considering legal consequences down the road (5) when
licensing or source content URLs may change

 e.g. for my emacs config, it's a separate repo with MIT. initially was a copy
 of davilwil's emacs config. In many files, I added henrik from Doom Emacs to
 the copyright header. This is incorrect. daviwil's project is MIT but doomemacs
 is GNU afaik.

 e.g. #2 using `guix import` or using a script to generate a starting point for
 converting package deb/rpm/arch/nix package definitions to guix/nix packages
 (where I would expect to have a script to generate a package definition, but
 not a script to maintain it). Nix has been particularly useful when determining
 how I would deal with `patchelf` issues with dynamic linking in Guix, but
 having such starting point usually biases my thinking and the content would
 effectively be a derivative work.

 #2 is mainly a question about whether the logic in a package qualifies as
 "configuration" -- and what to do when most of the content in a project does
 qualify as configuration, but what does not is exigent (whether original or,
 more problematic, not original)

 A reddit post clarifies some things, but without clarification. "the actual
 configs you send, yes. but, like writing a book, one can just "paraphrase in
 their own words" the config files and copyright no longer applies."

 https://www.reddit.com/r/legaladvice/comments/4ouy7r/us_can_software_configuration_files_be_copyrighted/

 e.g. #3 i have a zettelkasten at dcunited001/zettelkasten with MIT license, but
 i'm running into some grey areas. This doesn't bother me, but in the future, i
 may import some projects containing XML files for cloning sets of repositories
 with Google's repo tool (see https://github.com/ectorepo). I use org-babel to
 analyze the projects (e.g. automated dependency diagrams; recursive traversal
 of package.json to quickly learn about frequent dependencies; analysis on
 keywords). i check out the repo XML to /data/repo and run `repo sync` in
 /data/ecto. but when some files are symlinked, this affects "services" like
 org-roam or the actual content/configuration of automation scripts (or maybe
 hardlinked ... though not a Git repo)

 and I guess e.g. #4 how should I think about content that will be published
 later? (1) there's a project I would like to start called "palettizer" where I
 would attempt to combine data extracted from these "Richard Schmid color
 swatches" with one of the few truly free UV/Vis databases of pigments. I need a
 bit of data to get started, so I've organized some higher-quality palettes from
 images on the web. eventually, these should only constitute data for a separate
 test set -- this begs a question about copyright for testing data instead of
 simply training data, though any test set which eventually generates signals to
 affect the training weights of a redistributed ML model is technically subject
 to some hypothetical copyright constraints of testing data. Regardless, I could
 distribute the project without any copyrighted materials and include a script
 with URLs to download/prep them as a "rake task" or something..... I would only
 care about this if the project eventually became worthy of
 publication/distribution.

 and similarly (2) I've written some org babel scripts to generate cheatsheets &
 refcards (in HTML and LaTeX/PDF). These are in my zettelkasten repository. Some
 of them are original work compiled from references. Others are compiled: after
 manually munging emacs keybindings (via `general-describe-keybindings` or
 `embark-*); after writing a few lines of quick jquery in the browser console;
 or manually deleting most of an HTML webpage and customizing the CSS to make it
 PDF & print-friendly; munging CLI output (on language's package manager) ; or
 running `jq` or `yq` on an API response or `xq` directly on a webpage.

 There's a spectrum of "copyright derivedness" in each of the methods. I don't
 care to sell these things, but are the contributable? some examples are
 here. There is one I generated from the Podman manpage, where I manually
 checked feature compatibility with Kubernetes. Another: Gnus and Info keyboard
 SVGs where the SVG is based on a keyboard intended for a laser cutter to etch a
 custom keyboard. There's one with the firefox sqlite schema converted to
 graphviz PDFs (since i'm fairly paranoid about the digital footprint); and a
 bunch of others that aren't in Github because I generated them from HTML and
 much of the text is pseudo-verbatim.

 https://github.com/dcunited001/zettelkasten/tree/master/cheatsheets

 and the last one for #4... (3) I looked into using org-beamer to generate
 presentations and found a template that does posters. This is one that may
 produce content to monetize, either for myself or for others. The content would
 assemble information about 3D printing materials, including datapoints and
 pictures of polymer units derived from SMILE. I can do much of the work from
 emacs. As described this would qualify as original work (possibly somewhat
 derivative, except for maybe a template). I'm helping some others who are
 founding a makerspace and I was also recently working at a community college's
 Fab Lab. I noticed that details like fonts in the Beamer Poster template have
 been selected specifically for large-format printing. For the makerspace, this
 could help with raising money and could also help other makers, makerspaces and
 educational organizations... in theory (it seems that much of what i work on is
 never noticed).

 the core issue with that last one distinguishing it from the rest of #4 and #3
 is the potential for monetization ... however, the real underlying issue for me
 is practical: i need to limit the overhead (reducing future reorganization
 headaches) while retaining the ability to claim rights to the specific contents
 of my work which are original works, valid/authorized derivative works or valid
 as fair use. I want most of my notes to be fairly public -- potentially
 exporting *some* of it to an HTML website -- and it just helps a ton to put it
 on Github as a single project. Specifying the project & directory structures so
 my one-off scripting sessions, the org-babel workflows/tangles/exports and
 other services/automations is kinda complicated.

 * Reponses

 + Debian copyright clarification
   https://salsa.debian.org/mozilla-team/firefox/-/blob/release/master/debian/copyright

+ WTFPL

* Roam
