:PROPERTIES:
:ID:       2034dfb0-dc90-486b-9427-da6a25730465
:END:
#+TITLE: Emacs: LSP vs Eglot
#+CATEGORY: slips
#+TAGS:

Completion is particularly helpful when (1) you're just the type of programmer
who needs it or (2) you constantly hop between programming languages. So yeh, I
reallllly need LSP.

Eglot may be significantly harder to figure out on your own than LSP.

+ Python was especially confusing for me, since it involves identifying the web
  of components necessary, including jedi, pyright, pylsp, pywrong, etc.
+ In other cases, it's especially easy. Like clangd. It just works and it's
  probably on your system.

This isn't so bad, until you need to make it work on both Arch and Guix, which
maybe is about as complicated as using WSL2 at your dayjob and Linux at
home. The lsp-docker project would resolve quite a bit of ambiguity here, but
unfortunately I've never had an IRL conversation with anyone about
using/configuring LSP (more than simply a reference). People with per-se LSP
familiarity also aren't going to be able to help with whatever your specific
slice of the LSP cartision product:

editor $\otimes$ platform $\otimes$ containerization/packaging $\otimes$ language

For me, like with almost everything else, most of the difficulty lies in not
"just knowing" what keywords to search for or which options are current. This is
harder when:

+ the languages are more popular (python)
+ necessarily involve multi-mode editing (react/jsx)
+ search results are stale/confusing (ansible)
+ LSP is configured differently based on your front-end framework (angular/react/astro/etc)
+ LSP needs to be customized per-project to infer your test paths (pretty much
  anything, but especially JS or frontend req. backend services)

* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
