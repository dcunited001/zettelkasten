:PROPERTIES:
:ID:       ecfa4e3b-2190-4be9-b8af-2e7407d7e26c
:END:
#+TITLE: Emacs: checking a coredump with gdb
#+CATEGORY: slips
#+TAGS:

* Resources

This is almost entirely new territory for me. I really wouldn't be able to do
any of this without these resources and help from =#emacs= on IRC and
elsewhere. My org-roam setup isn't geared towards using footnotes. I try to
attribute things, but it's just too much work to doubly/triply link
things. Footnotes are fairly simple to use, but i'm my tangent stack-frame
already includes about four rabbit-holes right now, so it is what it is.

... also, there really is no intended audience for these notes. They just happen
to be available online.

+ [[https://nixos.mayflower.consulting/blog/2021/09/06/coredumpctl/][Inspecting coredumps like it's 2021]]

** Emacs

+ [[https://emacs.stackexchange.com/questions/14354/how-do-i-debug-an-emacs-crash][How do I debug an emacs crash]] (2015)
+ [[https://www.logikalsolutions.com/wordpress/information-technology/core-dumps-2/][Using your core dumps]] (in Emacs, part two, 2022)
+ [[https://www.reddit.com/r/emacs/comments/rxg6z8/comment/hri3mrs/?utm_source=share&utm_medium=web2x&context=3][What to do when emacs dump core]]

*** Gud

+ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Starting-GUD.html][Starting GUD]] how to start debuggers for multiple languages
+ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/GDB-User-Interface-Layout.html][GDB User Interface Layout]] =(let ...)= some variables before your gdb call to
  change the interface on startup.
+ [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-processes.html#Running-a-debugger-on-a-remote-host][Tramp can start gdb on a remote server]] (but it has limited
  capabilities and/or its difficult)

*** Compilation

+ [[https://earthly.dev/blog/make-flags/][Understanding and using makefile flags]]
+ [[https://practical.li/blog/posts/build-emacs-from-source-on-ubuntu-linux/][Building Emacs From Source on Ubuntu]] (2023)

** GDB

+ [[https://sourceware.org/gdb/onlinedocs/gdb/Startup.html][Startup]]
+ [[https://sourceware.org/gdb/onlinedocs/gdb/Logging-Output.html#Logging-Output][Logging]]
+ [[https://sourceware.org/gdb/onlinedocs/gdb/TUI.html][TUI interface]] a little easier from the terminal ([[https://www.youtube.com/watch?v=mm0b_H0KIRw][video]])

*** Tools

+ [[https://github.com/cyrus-and/gdb-dashboard][GDB Dashboard]] req. the Python API

** Systemd

+ [[https://wiki.archlinux.org/title/Core_dump#Using_systemd][Finding systemd core dumps]] (archwiki)

** Tools

+ [[github:0xswitch/hellf][0xswitch/hellf]] elf-patching python library

* Notes

** Videos
*** [[https://www.youtube.com/watch?v=IqH3Mh-OI-8][Cool stuf about GDB you didn't know]]

***** TODO [[https://github.com/mpsq/emacs-gcc-wayland-devel-builder/blob/main/assets/PKGBUILD][mpsq/emacs-gcc-wayland-devel-builder]] and [[https://gitlab.archlinux.org/archlinux/packaging/packages/emacs/-/blob/main/PKGBUILD?ref_type=heads][emacs-wayland]]

compare this and other builds with the Guix pgtk build

+ [ ] can the source directory remain in the guix build? ... does this req. too
  much space?
+ [ ] add =GDK_BACKEND=pgtk= to launch flags
+ Check +flat whatson+ ... added native comp to pgtk (at 28.2.50, native default
  in 29)

*** Adding coredumps to your debugging toolkit

+ Panics only show one frame
+ Coredumps: triggered by faults/panics/asserts. captures registers/memory for
  later analysis. Data streamed out immediately or stored in NV-RAM (in case of
  immediate reboot.)

**** Coredump components/requirements

+ It saves regions in RAM to binary format.
+ To decode threads, you need the kernel structure your app is running (?). This
  gives you insight into each thread as well as the stack used for each thread.
+ Req. =coredump= config but can be captured (sensor, ring buffer, memory slabs,
  BLE stack, dyn. memery alloc to heap "for lists")
+ You need debugging symbols or you can't really hop from stack frames to
  source.

**** Zephyr Assertion Call Graph


* Emacs

** Emacs Packaging

I'm using =emacs-guix= packages as well as =straight.el=. Using =M-x
locate-library= along with =embark-collect= or =embark-export= provides the
package locations with information about where emacs has loaded them from.

* Arch

On arch, =systemd-coredump= should be found in =/var/lib/systemd/coredump= and,
as I was typing in the command to start gdb, it crashed again. So, this will be
a thinner memory image and I don't need to worry about the =guix shell= profile.

** Coredumpctl

*** Start Quickly

You can inspect the last (or queried) coredump quickly via =sudo coredumpctl
gdb= and then .... just connect to the root process with emacs lol. You'd need
to add some flags for the server, which is a bad idea. Otherwise, you'll need to
export the coredump and unpack it.


*** TODO dump from systemd unit on failure



*** Process coredump

Get info about last coredump

#+begin_src sh :results output table
emacspid="$(lastcore | tr -d '\"')"

# ok this is crazy
nlines="$(coredumpctl info $emacspid --no-pager | cut -d':' -f1 | grep -ne "Message" | cut -d':' -f1)"

coredumpctl info $emacspid --no-pager | head -n$nlines

#+end_src

#+RESULTS:
| PID:        | 4052937                                                                                   | (.emacs-29.0.92-)                                                          |                   |     |      |       |        |       |
| UID:        | 1000                                                                                      | (dc)                                                                       |                   |     |      |       |        |       |
| GID:        | 1000                                                                                      | (dc)                                                                       |                   |     |      |       |        |       |
| Signal:     | 11                                                                                        | (SEGV)                                                                     |                   |     |      |       |        |       |
| Timestamp:  | Thu                                                                                       | 2023-09-21                                                                 | 13:18:05          | EDT | (4h  | 41min | ago)   |       |
| Command     | Line:                                                                                     | /gnu/store/lcf4xm3jaj7pkfg0h23h5y8946syrwfc-profile/bin/emacs              | --fg-daemon       |     |      |       |        |       |
| Executable: | /gnu/store/ip70sppv1xkgvf2ssms5arkaa40r5zba-emacs-next-pgtk-29.0.92/bin/.emacs-29.0.92-real |                                                                            |                   |     |      |       |        |       |
| Control     | Group:                                                                                    | /user.slice/user-1000.slice/user@1000.service/app.slice/gmacs-arch.service |                   |     |      |       |        |       |
| Unit:       | user@1000.service                                                                         |                                                                            |                   |     |      |       |        |       |
| User        | Unit:                                                                                     | gmacs-arch.service                                                         |                   |     |      |       |        |       |
| Slice:      | user-1000.slice                                                                           |                                                                            |                   |     |      |       |        |       |
| Owner       | UID:                                                                                      | 1000                                                                       | (dc)              |     |      |       |        |       |
| Boot        | ID:                                                                                       | cb39ebcaa6434eaab0464cc11b587496                                           |                   |     |      |       |        |       |
| Machine     | ID:                                                                                       | bb2e37c388884959b04f1d829e8de787                                           |                   |     |      |       |        |       |
| Hostname:   | kratos                                                                                    |                                                                            |                   |     |      |       |        |       |
| Storage:    | /var/lib/systemd/coredump/core.\x2eemacs-29\x2e0\x2e92-.1000.cb39ebcaa6434eaab0464cc11b587496.4052937.1695316685000000.zst | (present)                                                                  |                   |     |      |       |        |       |
| Size        | on                                                                                        | Disk:                                                                      | 70.5M             |     |      |       |        |       |
| Message:    | Process                                                                                   | 4052937                                                                    | (.emacs-29.0.92-) | of  | user |  1000 | dumped | core. |

Extract coredump. The =emacs_desktop= variable will be incorrect once you
restore.

#+begin_src sh :results output :var desktop_lock=(desktop-full-lock-name)
emacspid="$(lastcore | tr -d '\"')"
emacscoredumps=/data/dev/emacsdumps

# lastcore output is still quoted
[ -f "$desktop_lock" ] \
    && [ $emacspid -eq "$(cat $desktop_lock)" ] \
           || echo coredumpctl dump "$emacspid" --output "$emacscoredumps/emacs-$(date +%Y-%m_%d-%H-%M).core"

# TODO: change to set to the coredump timestamp
#+end_src

#+RESULTS:
: coredump dump 4052937 --output /data/dev/emacsdumps/emacs-2023-09_21-17-44.core

Check binary for debugging symbols.

#+begin_src sh
objdump --syms $GUIX_EXTRA/emacs-g/emacs-g/bin/.emacs-29.0.92-real
#+end_src

**** coredumpctl offers json output

Run =lastcore= to fetch the last =pid= or =lastcore .pid .uid ...= to fetch more
json fields. Maybe not something to leave around (I donno if it's injection
safe)

#+begin_src sh
#!/bin/sh
dlmtr=' '
while getopts :d: OPT; do
    case $OPT in
        d|+d)
            if [ 1 -lt ${#OPT} ]; then echo "Must be a single character -d"; exit 1; fi
            dlmtr="$OPTARG"
            ;;
        *)
            echo "usage: `basename $0` [+-d ARG} [--] ARGS..."
            exit 2
    esac
done
shift `expr $OPTIND - 1`
OPTIND=1

args=()
until [ 0 -eq $# ]; do args+=($1); shift; done
n_args=${#args[@]}
if [ 0 -eq $n_args ]; then
    #echo "Required: at least one argument"; exit 1; fi
    args=(.pid)
fi

joinargs='"'
joinargs+="\\(${args[0]})"
for ((i=1;i<n_args;i++)); do joinargs+="$dlmtr\\(${args[$i]})"; done
joinargs+='"'

coredumpctl list --json=short | jq '. | last | @text '"$joinargs"

# who knows?
# "\(.pid) \(.gid) \(.uid) \('.fdsa)|fdsa) \(|) \(fdsa) \(|) \(@test) \("\(.evil?')"
#+end_src

* Guix

** Guix Shell

It's still unclear to me whether starting GDB under Emacs to analyze an Emacs
Core Dump will need to be started with the full search path of the =guix
shell=. In any case, I adapted my =gmacs= startup script to do accept a few options

#+begin_quote
Actually, it will, but these paths will need to be injected during a gdb init
script.
#+end_quote

This way, previous generations of the binary can be run exactly as they were
with the rest of the startup scripts on the system.

#+begin_src bash
#!/bin/sh
export GUIX_SOURCE=$_ECTO/guix/guix
export EMACS_SOURCE=$_ECTO/emacs/emacs/src

emacs_profile=$GUIX_EXTRA/emacs-g/emacs-g
search_paths=0

while getopts :Zp: OPT; do
    case $OPT in
        Z|+Z)
            search_paths=1
            ;;
        p|+p)
            emacs_profile="$OPTARG"
            ;;
        *)
            echo "usage: `basename $0` [+-p ARG} [--] ARGS..."
            echo "-p profile/link"
            exit 2
    esac
done
shift `expr $OPTIND - 1`
OPTIND=1

if [ 0 -lt "$search_paths" ]; then
    echo $emacs_profile
    guix shell -E "^EMAIL$" \
         -E 'EMACS_SOURCE' \
         -E 'GUIX_SOURCE' \
         -p $emacs_profile \
         --search-paths
else
    echo guix shell -E "^EMAIL$" \
         -E 'EMACS_SOURCE' \
         -E 'GUIX_SOURCE' \
         -p $emacs_profile -- \
         emacs "$@"
fi
#+end_src

* GDB

** Init Files/Commands

Overview on [[https://sourceware.org/gdb/onlinedocs/gdb/Startup.html][startup]] and [[https://sourceware.org/gdb/onlinedocs/gdb/Initialization-Files.html#Initialization-Files][initialization files]] and [[https://sourceware.org/gdb/onlinedocs/gdb/Command-Files.html#Command-Files][command files]].

The process for creating these files/scripts should be streamlined.

+ the =-*ex= options declare commands and the =-*x= options declare files.
+ for each stage, GDB loads the first file it finds.
+ Other locations are possible, but this is simpler.

Files, in order.

| File (XDG path)                  |                                   |
|----------------------------------+-----------------------------------|
| XDG_CONFIG_HOME/gdb/gdbearlyinit |                                   |
| system.gdbinit                   | can be suppressed by =-nx= option |
| XDG_CONFIG_HOME/gdb/gdbinit      |                                   |
| $(pwd)/.gdbinit                  |                                   |

Stages

+ Early Init :: Command/files specified by =-eiex= and =-eix=
  - restricted to =set= and =source=
+ Init :: Command/files specified by =-iex= and =-ix=.
  - These are applied "before GDB init files get executed and before inferior
    gets loaded."
+ Local Init :: Command/files specified by =-ex= and =-x=





* GDB, first attempt


#+begin_src emacs-lisp
(defun dc/gud-gdb-cmd (cmd dump)
  "form the gdb command to call"
  (format "gdb --fullname %s %s" cmd dump))
#+end_src

Then invoke with:

#+begin_src emacs-lisp
(let ((gdb-many-windows t))
  (gud-gdb (dc/gud-gdb-cmd dc-gdb/corebin-real dc-gdb/coredump)))
#+end_src

The filenames are gnarly, and for some reason there are escaped characters in
the coredump file name. GDB refuses to continue on reading these characters --
it's =zst= compression, not an =coredump=. +I hope the coredump doesn't have
metadata correlated with the filename, though you should be able to send these
files to a new location.+

#+begin_src emacs-lisp
(setq dc-gdb/coredump-hex
      "/var/lib/systemd/coredump/core.\\x2eemacs-29\\x2e0\\x2e92-.1000.cb39ebcaa6434eaab0464cc11b587496.4052937.1695316685000000.zst"
      dc-gdb/coredump
      "/data/dev/emacsdump/core.emacs-29.0.92-1000.cb39ebcaa6434eaab0464cc11b587496.4052937.1695316685000000.zst"
      dc-gdb/corebin
      (file-chase-links "/home/dc/.guix-extra-profiles/emacs-g/emacs-g/bin/emacs")
      dc-gdb/corebin-real
      (file-chase-links "/home/dc/.guix-extra-profiles/emacs-g/emacs-g/bin/.emacs-29.0.92-real"))
#+end_src

That won't work bc it's =zst= compression ... which i thought might be a
problem. I thought there was a chance =gdb= might know what to do with it
though.

This is before I read the bit(s) about =coredumpctl= ...

* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:3daa7903-2e07-4664-8a20-04df51b715de][C/C++ (cpp)]]
+ [[id:a6c90236-e3a9-4223-8afa-d02da892c676][Debug]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
