:PROPERTIES:
:ID:       b4480564-c80f-4993-aefd-89cbec904111
:END:
#+TITLE:     Hack In Guix REPL With Geiser
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]

* Resources
+ [[Guile Hacking Handbook]]

* Config
** Doom/Emacs
+ ensure that =(scheme +guile)= is in =.doom.d/init.el= and =bin/doom upgrade=
** Guix Repl
+ [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-repl.html][Invoking Guix Repl (8.11)]] describes starting a scheme repl with guix loaded
+ If desired, the environment can be isolated via =guix pack=
** Guix Codebase
+ read through [[https://guix.gnu.org/manual/en/html_node/The-Perfect-Setup.html][The Perfect Setup (16.3)]] if hacking on the guix codebase
** Lispy
+ =geiser-racket= needs to be active until =le-scheme.el= no longer calls  =geiser-racket--language= without implementation

* Startup

+ Run =guix repl -q -L $LOAD_PATH --listen=tcp:80=.
+ Then =geiser-connect= and specify the host.
+ From the Scheme buffer, setup =guix-devel-mode=, then run
  =geiser-switch-to-repl=.
+ From here, you should be able to change modules and evaluate code.
  - Some of the functions described in [[https://emacs-guix.gitlab.io/website/manual/latest/emacs-guix.html][Emacs Guix manual]] seem to work.
  - This and the Geiser manual need studying.

** Issues

+ One problem was the =~/.guile= config. The =-q= runs without it.
  - This allows Geiser to connect from within emacs.

* Usage

For more complete info, see [[https://www.nongnu.org/geiser/geiser_5.html][Geiser: Cheatsheet]]

** Keyboard Commands

+ Once connected, run =C-c C-l= to load a buffer into the REPL
  - Most of the common lisp eval bindings like =C-x C-e= apply
  - C-M-x :: geiser-eval-definition
  - C-c C-e C-l :: geiser-add-to-load-path
  - C-c RET C-e :: geiser-expand-last-sexp
    - apparently =C-m= is equivalent to =RET=
  - C-c C-d :: geiser-doc-*
    - use =C-c C-d TAB= on keywords to lookup description in the Guile manual
  - M-. :: geiser-edit-symbol-at-point (return with =M-,= to pop)
+ Other useful commands
  - Universal Arg:
    - C-u C-x C-e :: autoinsert result of geiser-eval-last-sexp
  - C-c C-m C-[xer] ::
  - C-c C-d C-m :: geiser-doc-module
    - lookup a module with =completing-read= and navigate its exported defs
  - C-c C-z :: geiser-switch-to-repl
  - C-c C-a :: geiser-switch-to-repl-and-enter

** Most Essential

- C-c C-d m :: browse definitions within the specified loaded module

* Startup (archived)
Simple:

+ Run =guix repl= to start a Scheme repl with Guix modules loaded
  - Set =LOAD_PATH=path/to/packages/and/systems=
+ Connect to it with =C-c l "= from the scheme buffer
  - use =guix repl= with =--listen=tcp:54321=
  - then connect
+ Connect with =geiser-connect-local= after creating a domain socket
  - run =__socket_dir=/tmp/$(mkdtemp -d)= to create a temp dir for the socket
  - run =guix repl --listen=unix:$__socket_dir/guix_socket=
  - then connect in emacs

** Problems

*** TODO for some reason =C-x C-e= is evaluating scheme with elisp, even though scheme-mode is showing in the modeline

+ manually running =scheme-mode= on the file then evals expressions in the
  geiser repl
*** TODO when starting repl in an external shell, company/autocomplete hangs and waits forever

+ It's apparently not the =geiser-guile--prompt-regexp=
+ the CPU time doesn't show in =doom/toggle-profiler=, so this is happening somewhere between comint & the external geiser process...

*** TODO fix problems with matching the remote prompt
+ NOTE: i seem to be wrong about this. there is some other problem occuring
+ connecting to =guix repl --listen=tcp:91827= shows a prompt with colors whereas the normal prompt is simply orange. the remote prompt always hangs and it seems to be =comint= after an =autodoc=

#+begin_src emacs-lisp
;;; :: NOTE find a better match: "[^@()]+@([^)]*?)> " is incorrect
;; NOTE: this breaks geiser:
; (setq geiser-guile--prompt-regexp "[^@()]+@(.*)> ")
#+end_src
