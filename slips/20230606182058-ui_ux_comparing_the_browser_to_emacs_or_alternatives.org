:PROPERTIES:
:ID:       994f1fc6-f8c1-4423-8b77-889d3458c336
:END:
#+TITLE: UI/UX: Comparing the Browser to Emacs or Alternatives
#+CATEGORY: slips
#+TAGS:

* Plain Text

Unlike the browser, emacs gives you regexes and the full range of unix
commands. Furthermore, not only can you use any programming language you've
configured, you can also use =org-babel= to notate processing steps in plain
text.

... In other words: think of that very special =C-f= keybinding in the browser
or that =C-g= binding no one ever told you about, since the browser isn't
self-documenting.

Well you get like an infinity of those. Sure, emacs can be a PITA
sometimes... but even vanilla emacs has some of the most useful functions, like:

+ =M-x man=
+ =M-x info=
+ =M-:= to =eval-expression=

Furthermore, emacs follows conventions with its keybindings and, since emacs is
complicated, most modes/packages follow those conventions. So almost any command
that evaluates a statement in a language, you can prefix with the universal
argument =C-u= to insert the results into the buffer. This is infinitely more
useful than the hollow advice "Use the commandline, Luke!"

+ C-u M-! :: insert results of shell command
+ C-u M-& :: insert results of shell command (async)
+ C-u M-: :: insert results of =eval-expression=, whether a variable or command.

So when you are skilled with text transformations, this is unbelievably valuable.

* Pros/Cons of the Browser

** The browser has some useful functionality, like:

+ A developer console with spooky warnings when you open it on facebook
+ The ability to add/modify/remove CSS, which is useful when you want to
  print a document that lacks a PDF format or just "edit a PDF" by cobbling
  together =<img />= and other tags
+ Or the ability to remove "add blocker protection" from most websites by
  entering the inspector, deleting the outermost modal element and moving the
  main content =<div>= or =<article>= to be a child of the =<body>= tag. Unless
  it's a source like Washington Post, who doesn't actually send the article
  until you sign in, then any other "add-blocker blocker" is like hilariously
  trivial.

** Still the browser kinda sucks ... since it:

+ lacks a lisp that "just works", though javascript was scheme-inspired
+ lacks access to shell commands (which you don't want in a browser!)
+ probably records every keystroke you enter into the URL bar
+ forwards hundreds of variables to fingerprint your browser usage (like window
  size, display size, OS/version, browser/version, etc) and you really can't
  avoid identifying yourself
+ has fantastic search that, though it indexes the collective sum of human
  knowledge in addition to the collective scum of SEO marking, doesn't natively
  limit your results to the set of information you deem relevant to yourself
  ... which is infinitessimal in comparison. I can ALWAYS find information on my
  computer because the domain of the search is usually megabytes/gigabytes
  instead of petabytes/exabytes of indexed/manipulated data.

** Browser Performance Limitations

Sure, there are some extensions here and there ... but they are always
single-threaded and not something you want to write/maintain. the extensions
have to pass data from the backend to the frontend (their structure mirrors that
of an actual webpage). This is a bit dicey to work with in practice. Worse, the
sandbox model of the browser means that quite a few extensions need to be
instantiated on a per-page basis. This is not unlike an Emacs mode actually

But the preprocessing of DOM is not memory friendly. You see, to get the
"widgets to load a little faster" the browser preallocates a shitton of RAM,
which yes is cached to disk after a preconfigured amount of time in most cases
-- which you did configure, didn't you? You did? I'm surprised, but does that
single value really accomodate the range of behavior that pages can exhibit?
Further, the sandboxing means it doesn't share these resources well, the browser
eats your I/O when you switch to an old tab that's loaded from cache and
startups using frontend frameworks don't give a shit about performance until it
affects whether "the widgets load fast enough." At that point, some halfassed
attempt to handle technical debt will be undertaken, but not really.

*** Our Software Is Free You Ingrate

Now all this resource utilization would maybe be justified if the FAANG Five
would ever redesign the UI/UX of the browser to help you avoid "death by 1,000
tabs" ... but they won't because that undermines their ability to make their
services "free" by monetizing "advertising" since no one would pay for this
shit. I find most advertising to be ironic, since I make on average $3,000 per
year in the good ole "Sea to Shining Sea"

This would all be fine, more or less, since you can lead a horse to water, but
it still probably won't delete it's TikTok account or give a shit about drinking
from the firehose of information or tech manuals you need to read in order to
deal with this stuff. The issue for me is not whether people are "doing it
wrong" since they just don't understand, but rather that the way corporations
compete over & divvy up market share means it minimizes & marginalizes the
communities of people who might help others use technology consciously -- where
I mean consciously as in being aware of things.

This is something like the [[wiki:Tragedy_of_the_Commons][Tragedy of the Commons]], but it's not that one. It's
probably in this list of [[https://en.wikipedia.org/wiki/Template:Unintended_consequences][Unintended Consequences]]. It's definitely downstream
from a [[https://en.wikipedia.org/wiki/Free-rider_problem][Free-rider Problem]], but it's not that per se, since that concerns the
micro/macro-economic dynamics. It definitely counts as [[https://en.wikipedia.org/wiki/Tyranny_of_small_decisions][Tyranny of Small
Decisions]], but that describes how the situation arises, but not the nature of
the problem: that we mostly are never exposed to what technology usage /could
look like/ and that our education/government institutions basically indoctrinate
people to continue using tech /as we all think it is supposed to look like./ So
the evolution of the system as a whole ceases to evolve, especially given that
"improving the browser-based UI/UX" is tantamount to [[https://en.wikipedia.org/wiki/Hutber%27s_law][Hutber's Law]]. [[https://en.wikipedia.org/wiki/Abilene_paradox][Abilene
paradox]] is also relevant, since the corporations developing this UI/UX
paradigm really think that you think you want the "javascript widgets" to load a
little faster ... when it's just the entire UI/UX paradigm that's flawed.

* Canvas Markdown

An example of the limitations of the browser achieving a particular social scale
is the Canvas education platform ... which I really like except for it's lack of
markdown support. That you wouldn't have an overwhelming number of teachers
demanding this gives you an idea of how much influence the browser and WYSIWIG
editors (Office) have had in shaping public consciousness on what's
possible/normal to expect from tech tools. HTML is considered difficult, where
you can get most of the same benefits with Markdown. This is a relevant feature
that's been demanded by users of the platform going back to 2014. Safe to say
... it's basically never going to happen.

+ See this 2014 issue from the [[https://github.com/instructure/canvas-lms/issues/503][instructure/canvas-lms]] repository
+ (2019) [[https://github.com/artevelde-uas/canvas-lms-markdown-editor-plugin][artevelde-uas/canvas-lms-markdown-editor-plugin]] (3rd party with two
  github stars)
+ (2020) [[https://www.robbyburns.com/blog/eliminating-canvas-stress-by-writing-content-in-markdown][Eliminating Canvas Stress By Writing Content In Markdown]]

Canvas is otherwise pretty sophisticated since it integrates into like 50 API's
wherever it's implemented. Most impressive is ability to, perhaps, unseat
Oracle-based products known and loved by HR departments in any sufficiently
large organization.

Canvas doesn't include its markdown plugin by default. For some reason, this
requires a plugin, since it's not there by default ... which basically means it
will never be used. Lacking this plugin makes it very difficult to quickly edit
course content on Canvas. While markdown generally doesn't have many security
issues, going about requesting this requires an Act of God. If it's an extension
that's added, but must be activated on individual courses, then it won't make a
difference because basically no existing course will ever see it activated. Even
if it's added by default to new courses, if old course definitions are used as
templates or starting points, it's possible that you'd have to enter the admin
settings for the course and change it individually.

#+begin_quote
That is what adding unnecessary conditional dependencies does, by
the way: it very quickly sends probabilities to zero.
#+end_quote

But system administrators know that there's no point in adding it if no one will
ever see it. Until it's supported first-party, it's just not going to be
something that teachers notice. If it's not something that can been enabled by
default or is first-party, then they'd have to petition their school district or
university's technology department en masse. But if it was first-party, then
probably most Canvas LMS users would include at least some markdown in their
courses. Further complicating things, the sheer number of integrations means
that any possible changes to the software are necessarily seasonal. The IT
department is just going to default to "nope, maybe later."

I hadn't really asked for this because I have Emacs, where I can define custom
CSS for an =org-mode= exporter to generate whatever HTML I want. I could convert
the org docs to =odf= and then =docx= if I wanted a challenge. So anyways, it's
not my problem and basically no one would have to know I was editing in
org-mode. It wouldn't work 100% of the time, but often enough and I'd be the one
editing docs or pages anyways.

** Browser Extensions are just like this

Sure, your browser can do that, but how many people actually have that
installed/configured. If it's not first-party, you can't really assert its
security with confidence without reviewing the code /yourself/. You can expose
yourself to the unknown risk if you want, but it's harder to ask an organization
to do that.

** Why no markdown?

Why wouldn't you include markdown? Well the more effort you put into creating
structured text, the more hesitant you'll be to switch systems. If it was
markdown, considering another system would mean you'd estimate that transforming
your course content wouldn't take very much effort. Instead, it seems like a ton
of work if your first experience with digital/remote education included only the
options:

+ HTML using Canvas-specific CSS styling (see [[https://www.youtube.com/watch?v=rF6e_LLX6_s&pp=ygUbY2FudmFzIGxtcyBtYXJrZG93biBjb252ZXJ0][youtube video]])
+ and a WYSIWIG editor that you'll have open in 50 tabs (which you wouldn't
  accidentally close, right?)

Basically, the only ways I could rationalize not having this by default: it is a
security concern (it's NOT) or it's some kind of customer/content retention
strategy.

* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:858dca33-ab45-4552-ba43-c964d1aceae0][Canvas LMS]]
+ [[id:cea7d11c-8357-4e4f-90b3-fa8210eff796][AI]]
