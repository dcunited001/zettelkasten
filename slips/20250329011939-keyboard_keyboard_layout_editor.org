:PROPERTIES:
:ID:       6989c9f2-2f9b-4d71-a045-127e6b5ca6a1
:END:
#+TITLE: Keyboard: Keyboard Layout Editor
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:3d2330da-5a95-408a-b940-7d2b3b0c7fb2][Keyboard]]
+ [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]]
+ [[id:f92bb944-0269-47d4-b07c-2bd683e936f2][Wayland]]

* KLE

Keyboard Layout Editor

** Serialization

Oh boy. Is this a relic of XKB Geometry?

+ uses =++k= in a for loop (c++ programmer)

|-----+-------------------+------+---------------------------------------------------|
| key | prop              |    i | misc                                              |
|-----+-------------------+------+---------------------------------------------------|
| r   | rotation_angle    |      |                                                   |
| rx  | rotation_x        |      |                                                   |
| ry  | rotation_y        |      |                                                   |
|-----+-------------------+------+---------------------------------------------------|
| a   | align             |      |                                                   |
| f   | default.textSize  |      |                                                   |
| f2  | textSize[i]       | 0-11 |                                                   |
| fa  | textSize          |      |                                                   |
| p   | profile           |      |                                                   |
| c   | color             |      |                                                   |
| t   | default.textColor |      | sets two values, only sets default when it splits |
| t   | textColor         | 0-11 | splits, calls reorderLabelsIn                     |
|-----+-------------------+------+---------------------------------------------------|
| w   | width,width2      |      |                                                   |
| h   | height,height2    |      |                                                   |
| w2  | width2            |      |                                                   |
| h2  | height2           |      |                                                   |
| x   | x                 |      |                                                   |
| y   | y                 |      |                                                   |
| x2  | x2                |      |                                                   |
| y2  | y2                |      |                                                   |
| n   | nub               |      |                                                   |
| l   | stepped           |      |                                                   |
| d   | decal             |      |                                                   |
| g   | ghost             |      |                                                   |
| sm  | sm                |      |                                                   |
| sb  | sb                |      |                                                   |
| st  | st                |      |                                                   |
|-----+-------------------+------+---------------------------------------------------|

Assumes:

+ if an object is a string, it's a key. Otherwise, a property
  modification.
+ keyboard metadata must be the first row
+ other rows are either arrays/objects

** Keys (strings)

If it's a key, then it sets positions for the next entry.

#+begin_example typescript
current.x += current.width;
current.width = current.height = 1;
#+end_example

and resets defaults for the next string of keys.

#+begin_example typescript
current.x2 = current.y2 = current.width2 = current.height2 = 0;
current.nub = current.stepped = current.decal = false;
#+end_example

** Properties

*** Rotation

Must be specified by the first key in a row.

* Scripting
:PROPERTIES:
:header-args+: :var kbd="img/kle/ansi-104.json"
:END:

kinda absurd (you can merge properties into vars used inside blocks, but not in
block definitions ... idk)

#+name: kbd
#+begin_src emacs-lisp
kbd
;; also, this doesn't work: #+begin_src jq :in-file kbd
;; neither does this:  #+begin_src jq :in-file (identity kbd)
#+end_src

#+RESULTS: kbd
: img/kle/ansi-104.json

#+begin_src restclient :jq ".presets[1]" :results silent value file :file "img/kle/ansi-104.json" :mkdirp yes :eval no
:kle-layouts = https://www.keyboard-layout-editor.com/layouts.json
:headers = <<
Accept: application/json
User-Agent: Emacs
#

GET :kle-layouts
:headers
#+end_src

#+name: nrowsOfN
#+begin_src jq :in-file img/kle/ansi-104.json
.data as $data | $data | map(length)
#+end_src

#+RESULTS: nrowsOfN
: [
:   20,
:   25,
:   26,
:   19,
:   22,
:   23
: ]

#+name: kbdKeysTest
#+begin_src jq :in-file img/kle/ansi-104.json :results silent
.data[] | map(strings // null)
#+end_src

Indexs of keys

#+name: kbdKeys
#+begin_src jq :in-file img/kle/ansi-104.json :results silent
.data | map(to_entries | map(. |= (.value | type != "string") // .key) | map(numbers))
#+end_src

dState, as in state-machine deltas

#+name: kbdDstate
#+begin_src jq :in-file img/kle/ansi-104.json :results silent
.data | map(to_entries | map(. |= (.value | type != "object") // .key) | map(numbers))
#+end_src

#+begin_src restclient :jq "map([.owner.login, .name, .size])[] | @csv" :results table :jq-args "--raw-output"
:gh-graphql-url = https://api.github.com/graphql
:gh-url-base = https://api.github.com
:gh-org = vyos
:gh-url-path = orgs/:gh-org/repos
:gh-token := (auth-source-pass-get 'secret "api.github.com/dcunited001^ghub")

:headers = <<
Accept: application/vnd.github+json
Authorization: Bearer :gh-token
X-GitHub-Api-Version: 2022-11-28
User-Agent: Emacs
#

GET :gh-url-base/:gh-url-path
:headers

# nope, just use :jq and :jq-args above.
# -> jq-set-var :repo-sizes map(.owner)
# -> jq-set-var :repo-sizes map(. | "(.owner.login)")
#+end_src

DO YOU HAVE A FUCKING ZIPPER?

#+name: kbdKeysTable
#+begin_src jq :in-file img/kle/ansi-104.json :var k=kbdKeys :jq-args "--raw-output"
# .data[0] | getpath($k | fromjson | map(map([.])))
# $k | fromjson | map(map([.]))
# .data[] | getpath([0])

.data as $data | ($k | fromjson) as $k |
  $data[] | to_entries | map(getpath($k))

  #reduce . as $e ([]; . += getpath($e))
#+end_src

#+RESULTS: kbdKeysTable

* wtf jq

** notables

#+name: testTable
| fdsa | asdf | hjkl |
| qwer | rewq | yuio |
| zxcv | bnm, | ,mnb |


#+name: jqTables
#+begin_src jq :var tbl=testTable
$testTable
#+end_src

#+RESULTS: jqTables

#+name: youcanhaztabl
#+begin_src emacs-lisp :var tbl=testTable :results verbatim
;; (json-encode (mapcar (lambda (k v) (flatten-list (list k v))) tbl))
;; (json-encode (-map-indexed (lambda (i v) (append (int-to-string i) v)) tbl))
;; (-map-indexed (lambda (i v) (cons (int-to-string i) v)) tbl)
;; (json-encode-array (-map-indexed (lambda (i v) (cons (int-to-string i) v)) tbl))
(json-encode-array tbl)

;;(json-encode tbl)
;;(-map-indexed (lambda (i v) (list (int-to-string i) v)) tbl)
#+end_src

#+RESULTS: youcanhaztabl
: "[[\"fdsa\",\"asdf\",\"hjkl\"],[\"qwer\",\"rewq\",\"yuio\"],[\"zxcv\",\"bnm,\",\",mnb\"]]"

** dammit

#+name: kbd__WTF__JQ
#+begin_src jq :in-file img/kle/ansi-104.json :results silent
.data as $data | $data
  | .[] | to_entries | map(.value | select(strings))
#  | map(paths(type == "string"))
#  | {keys: map(paths(type == "string")), dstates: map(paths(type == "object")) } #as $zip


#  | $data | ($zip | .keys)  #|map(pick($zip | .dstates))
#+end_src

#+name: kbdRowKeyState
#+begin_src jq :in-file img/kle/ansi-104.json
.data as $data | $data | map([paths(type == "object"),.])
#+end_src

#+RESULTS: kbdRowKeyState
#+begin_example
[
  [
    [
      1
    ],
    [
      6
    ],
    [
      11
    ],
    [
      16
    ],
    [
      "Esc",
      {
        "x": 1
      },
      "F1",
      "F2",
      "F3",
      "F4",
      {
        "x": 0.5
      },
      "F5",
      "F6",
      "F7",
      "F8",
      {
        "x": 0.5
      },
      "F9",
      "F10",
      "F11",
      "F12",
      {
        "x": 0.25
      },
      "PrtSc",
      "Scroll Lock",
      "Pause\nBreak"
    ]
  ],
  [
    [
      0
    ],
    [
      14
    ],
    [
      16
    ],
    [
      20
    ],
    [
      {
        "y": 0.5
      },
      "~\n`",
      "!\n1",
      "@\n2",
      "#\n3",
      "$\n4",
      "%\n5",
      "^\n6",
      "&\n7",
      "*\n8",
      "(\n9",
      ")\n0",
      "_\n-",
      "+\n=",
      {
        "w": 2
      },
      "Backspace",
      {
        "x": 0.25
      },
      "Insert",
      "Home",
      "PgUp",
      {
        "x": 0.25
      },
      "Num Lock",
      "/",
      "*",
      "-"
    ]
  ],
  [
    [
      0
    ],
    [
      14
    ],
    [
      16
    ],
    [
      20
    ],
    [
      24
    ],
    [
      {
        "w": 1.5
      },
      "Tab",
      "Q",
      "W",
      "E",
      "R",
      "T",
      "Y",
      "U",
      "I",
      "O",
      "P",
      "{\n[",
      "}\n]",
      {
        "w": 1.5
      },
      "|\n\\",
      {
        "x": 0.25
      },
      "Delete",
      "End",
      "PgDn",
      {
        "x": 0.25
      },
      "7\nHome",
      "8\n↑",
      "9\nPgUp",
      {
        "h": 2
      },
      "+"
    ]
  ],
  [
    [
      0
    ],
    [
      13
    ],
    [
      15
    ],
    [
      {
        "w": 1.75
      },
      "Caps Lock",
      "A",
      "S",
      "D",
      "F",
      "G",
      "H",
      "J",
      "K",
      "L",
      ":\n;",
      "\"\n'",
      {
        "w": 2.25
      },
      "Enter",
      {
        "x": 3.5
      },
      "4\n←",
      "5",
      "6\n→"
    ]
  ],
  [
    [
      0
    ],
    [
      12
    ],
    [
      14
    ],
    [
      16
    ],
    [
      20
    ],
    [
      {
        "w": 2.25
      },
      "Shift",
      "Z",
      "X",
      "C",
      "V",
      "B",
      "N",
      "M",
      "<\n,",
      ">\n.",
      "?\n/",
      {
        "w": 2.75
      },
      "Shift",
      {
        "x": 1.25
      },
      "↑",
      {
        "x": 1.25
      },
      "1\nEnd",
      "2\n↓",
      "3\nPgDn",
      {
        "h": 2
      },
      "Enter"
    ]
  ],
  [
    [
      0
    ],
    [
      2
    ],
    [
      4
    ],
    [
      6
    ],
    [
      8
    ],
    [
      10
    ],
    [
      12
    ],
    [
      14
    ],
    [
      16
    ],
    [
      20
    ],
    [
      {
        "w": 1.25
      },
      "Ctrl",
      {
        "w": 1.25
      },
      "Win",
      {
        "w": 1.25
      },
      "Alt",
      {
        "w": 6.25
      },
      "",
      {
        "w": 1.25
      },
      "Alt",
      {
        "w": 1.25
      },
      "Win",
      {
        "w": 1.25
      },
      "Menu",
      {
        "w": 1.25
      },
      "Ctrl",
      {
        "x": 0.25
      },
      "←",
      "↓",
      "→",
      {
        "x": 0.25,
        "w": 2
      },
      "0\nIns",
      ".\nDel"
    ]
  ]
]
#+end_example
