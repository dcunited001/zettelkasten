:PROPERTIES:
:ID:       6989c9f2-2f9b-4d71-a045-127e6b5ca6a1
:END:
#+TITLE: Keyboard: Keyboard Layout Editor
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:3d2330da-5a95-408a-b940-7d2b3b0c7fb2][Keyboard]]
+ [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]]
+ [[id:f92bb944-0269-47d4-b07c-2bd683e936f2][Wayland]]

* KLE

Keyboard Layout Editor

** Serialization

Oh boy. Is this a relic of XKB Geometry?

+ uses =++k= in a for loop (c++ programmer)

|-----+-------------------+------+---------------------------------------------------|
| key | prop              |    i | misc                                              |
|-----+-------------------+------+---------------------------------------------------|
| r   | rotation_angle    |      |                                                   |
| rx  | rotation_x        |      |                                                   |
| ry  | rotation_y        |      |                                                   |
|-----+-------------------+------+---------------------------------------------------|
| a   | align             |      |                                                   |
| f   | default.textSize  |      |                                                   |
| f2  | textSize[i]       | 0-11 |                                                   |
| fa  | textSize          |      |                                                   |
| p   | profile           |      |                                                   |
| c   | color             |      |                                                   |
| t   | default.textColor |      | sets two values, only sets default when it splits |
| t   | textColor         | 0-11 | splits, calls reorderLabelsIn                     |
|-----+-------------------+------+---------------------------------------------------|
| w   | width,width2      |      |                                                   |
| h   | height,height2    |      |                                                   |
| w2  | width2            |      |                                                   |
| h2  | height2           |      |                                                   |
| x   | x                 |      |                                                   |
| y   | y                 |      |                                                   |
| x2  | x2                |      |                                                   |
| y2  | y2                |      |                                                   |
| n   | nub               |      |                                                   |
| l   | stepped           |      |                                                   |
| d   | decal             |      |                                                   |
| g   | ghost             |      |                                                   |
| sm  | sm                |      |                                                   |
| sb  | sb                |      |                                                   |
| st  | st                |      |                                                   |
|-----+-------------------+------+---------------------------------------------------|

Assumes:

+ if an object is a string, it's a key. Otherwise, a property
  modification.
+ keyboard metadata must be the first row
+ other rows are either arrays/objects

** Keys (strings)

If it's a key, then it sets positions for the next entry.

#+begin_example typescript
current.x += current.width;
current.width = current.height = 1;
#+end_example

and resets defaults for the next string of keys.

#+begin_example typescript
current.x2 = current.y2 = current.width2 = current.height2 = 0;
current.nub = current.stepped = current.decal = false;
#+end_example

** Properties

*** Rotation

Must be specified by the first key in a row.

* Scripting

kinda absurd (you can merge properties into vars used inside blocks, but not in
block definitions ... idk)

#+name: kbd
#+begin_src emacs-lisp
kbd
;; also, this doesn't work: #+begin_src jq :in-file kbd
;; neither does this:  #+begin_src jq :in-file (identity kbd)
#+end_src

#+RESULTS: kbd
: img/kle/ansi-104.json

#+begin_src restclient :jq ".presets[1]" :results silent value file :file "img/kle/ansi-104.json" :mkdirp yes :eval no
:kle-layouts = https://www.keyboard-layout-editor.com/layouts.json
:headers = <<
Accept: application/json
User-Agent: Emacs
#

GET :kle-layouts
:headers
#+end_src

#+name: kbdCount
#+begin_src jq :in-file img/kle/ansi-104.json
.data as $data | $data | map(length)
#+end_src

#+RESULTS: kbdCount
: [
:   20,
:   25,
:   26,
:   19,
:   22,
:   23
: ]

#+name: kbdTest
#+header: :in-file img/kle/ansi-104.json :results output silent
#+begin_src jq
.data[] | map(strings // null)
#+end_src

** Construct Paths

Paths of keys

#+name: kbdKeys
#+header: :in-file img/kle/ansi-104.json :results output silent
#+begin_src jq 
.data | to_entries | 
  map(.key as $k | .value | to_entries |
       map(. |= [$k,(.value | type != "string") // .key]) |
     map(select(last | numbers)))
#+end_src
 

Paths of state-changes

#+name: kbdStates
#+header: :in-file img/kle/ansi-104.json :results output silent
#+begin_src jq
# :results silent
.data | to_entries |
  map(.key as $k | .value | to_entries |
       map(. |= [$k,(.value | type != "object") // .key]) |
     map(select(last | numbers)))
#+end_src
 
Check counts

+ Nope =code :wrap example json :jq-args "--raw-output"=
+ Only variables? Requires =:cmd-line "jq -n"= (without =:in-file= or =:stdin=)
+ Won't produce a table. I think bc =range(...)= ???

#+name: kbdTypeCounts
#+header: :in-file img/kle/ansi-104.json :results silent
#+begin_src jq :var kbdKeys=kbdKeys kbdStates=kbdStates
# it needs the base datastructure anyways
# [($kbdKeys | fromjson) | length, ($kbdStates | fromjson) | length]
#. | ($kbdKeys | fromjson[0] | length)
range(0;.data | length) |
  ($kbdKeys | fromjson) as $kbdKeys |
  ($kbdStates | fromjson) as $kbdStates |
  reduce . as $i ([]; . += [
                          $i,
                          ($kbdKeys[$i] | length),
                          ($kbdStates[$i] | length)
                        ])  | @csv
        
#+end_src

** Zip Paths

When in doubt .... map,map,reduce

#+name: kbdKeyPaths
#+header: :in-file img/kle/ansi-104.json
#+begin_src jq :var kbdKeys=kbdKeys kbdStates=kbdStates :results silent
# it needs the base datastructure anyways
# [($kbdKeys | fromjson) | length, ($kbdStates | fromjson) | length]
#. | ($kbdKeys | fromjson[0] | length)
($kbdKeys | fromjson) as $kbdKeys |
  .data as $data | $kbdKeys |
  map(
      map(
          reduce . as $p ([];
                          . += [$p, ($data | getpath($p))]
                         )))
#+end_src

Paths and States

#+name: kbdKeyStates
#+header: :in-file img/kle/ansi-104.json :results silent
#+begin_src jq :var kbdKeys=kbdKeys kbdStates=kbdStates
($kbdStates | fromjson) as $kbdStates |
  .data as $data | $kbdStates |
  map(
      map(
          reduce . as $p ([];
                          . += [$p, ($data | getpath($p))]
                         )))
#+end_src

** Output Tables

+ There are problems with =`=, even when quoted
+ Using =@text= is redundant
+ Does not allow escape ="($data | \(getpath($p))" | sub("`", "\`"))=
+ Use lisp for table construction instead

#+name: egJsonStr
#+begin_src json
[{ "foo": [
    ["bar",
     1,
     [{ "baz": ["a"] }]]],
   "qux": {
       "abc": 123,
       "def": { "456": {}}
   }
 }]
#+end_src



#+name: vecsToList
#+begin_src emacs-lisp :var jsonStr=egJsonStr :results value
(json-read-from-string jsonStr)

#+end_src

#+RESULTS: vecsToList
: [((foo . [["bar" 1 [((baz . ["a"]))]]]))]

#+name: kbdKeysTable
#+header: :in-file img/kle/ansi-104.json :results value table
#+begin_src emacs-lisp :var kbdKeyPaths=kbdKeyPaths kbdKeyStates=kbdKeyStates 
;; (mapcar (lambda (keyrow)
;;         (list (mapcar #'list keyrow)))
;;         (json-read-from-string kbdKeyPaths))
#+end_src

#+RESULTS: kbdKeysTable
| a | b | c |
| d | e | f |



** Build Paths

* wtf jq

** notables

#+name: testTable
| fdsa | asdf | hjkl |
| qwer | rewq | yuio |
| zxcv | bnm, | ,mnb |


#+name: jqTables
#+begin_src jq :var tbl=testTable
$testTable
#+end_src

#+RESULTS: jqTables

#+name: youcanhaztabl
#+begin_src emacs-lisp :var tbl=testTable :results verbatim
;; (json-encode (mapcar (lambda (k v) (flatten-list (list k v))) tbl))
;; (json-encode (-map-indexed (lambda (i v) (append (int-to-string i) v)) tbl))
;; (-map-indexed (lambda (i v) (cons (int-to-string i) v)) tbl)
;; (json-encode-array (-map-indexed (lambda (i v) (cons (int-to-string i) v)) tbl))
(json-encode-array tbl)

;;(json-encode tbl)
;;(-map-indexed (lambda (i v) (list (int-to-string i) v)) tbl)
#+end_src

#+RESULTS: youcanhaztabl
: "[[\"fdsa\",\"asdf\",\"hjkl\"],[\"qwer\",\"rewq\",\"yuio\"],[\"zxcv\",\"bnm,\",\",mnb\"]]"

** dammit

#+name: kbd__WTF__JQ
#+begin_src jq :in-file img/kle/ansi-104.json :results silent
.data as $data | $data
  | .[] | to_entries | map(.value | select(strings))
#  | map(paths(type == "string"))
#  | {keys: map(paths(type == "string")), dstates: map(paths(type == "object")) } #as $zip


#  | $data | ($zip | .keys)  #|map(pick($zip | .dstates))
#+end_src
