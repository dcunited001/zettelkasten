:PROPERTIES:
:ID:       2c2ac2bc-8f09-4f7f-a691-dd4d0c0056d9
:END:
#+TITLE: FRC: Structure of Projects
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]

* Docs
+ [[https://docs.wpilib.org/en/stable/docs/contributing/wpilib/index.html][Developing with allwpilib]]

* Resources



* WPI Lib

** Gradle

Reports dumped here =./build/reports/problems/=

*** Tasks

Task Groups

| Application | Build        | Build Dependents | Build Setup       | CompileCommands |
| DeployUtils | Distribution | Documentation    | Gradle Enterprise | Help            |
| IDE         | JNI          | NativeUtils      | Publishing        | Run examples    |
| Shadow      | Toolchains   | Verification     | VSCode            | WPILib          |
| Rules       |              |                  |                   |                 |

List with =./gradlew :tasks --group $group=

**** WPILib

| generateCppVersion     | Generates the wpilib version class                          |
| generateJavaVersion    | Generates the wpilib version class                          |
| runCpp                 | Run the apriltagDev executable                              |

**** Documentation

| createDoxygenTemplates |                                                             |
| doxygen                |                                                             |
| javadoc                | Generates Javadoc API documentation for the 'main' feature. |

Docs get built and go here =find . -wholename '*build/docs/javadoc'=

#+begin_example
./wpiunits/build/docs/javadoc
./wpilibNewCommands/build/docs/javadoc
./apriltag/build/docs/javadoc
./wpinet/build/docs/javadoc
./romiVendordep/build/docs/javadoc
./developerRobot/build/docs/javadoc
./wpiutil/build/docs/javadoc
./wpimath/build/docs/javadoc
./cameraserver/build/docs/javadoc
./cameraserver/multiCameraServer/build/docs/javadoc
./hal/build/docs/javadoc
./wpilibjIntegrationTests/build/docs/javadoc
./wpilibj/build/docs/javadoc
./cscore/build/docs/javadoc
./wpilibjExamples/build/docs/javadoc
./epilogue-processor/build/docs/javadoc
./fieldImages/build/docs/javadoc
./epilogue-runtime/build/docs/javadoc
./xrpVendordep/build/docs/javadoc
./ntcore/build/docs/javadoc
#+end_example



*** =.gradle= files

Files not named =build.gradle= and directories containing =*.gradle= files

#+begin_src sh :dir /data/ecto/frc/wpilibsuite/allwpilib :results output verbatim
find . -name "*.gradle" -type f -print | tree -I 'build.gradle' --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── .
    ├── apriltag
    ├── buildSrc
    ├── cameraserver
    │   └── multiCameraServer
    ├── crossConnIntegrationTests
    ├── cscore
    ├── datalogtool
    │   └── publish.gradle
    ├── developerRobot
    ├── docs
    ├── epilogue-processor
    ├── epilogue-runtime
    ├── fieldImages
    │   └── publish.gradle
    ├── glass
    │   └── publish.gradle
    ├── hal
    ├── msvcruntime
    ├── ntcore
    ├── ntcoreffi
    ├── outlineviewer
    │   └── publish.gradle
    ├── processstarter
    │   └── publish.gradle
    ├── roborioteamnumbersetter
    │   └── publish.gradle
    ├── romiVendordep
    ├── settings.gradle
    ├── shared
    │   ├── ceres.gradle
    │   ├── config.gradle
    │   ├── cppDesktopTestTask.gradle
    │   ├── cppJavaDesktopTestTask.gradle
    │   ├── examplecheck.gradle
    │   ├── googletest.gradle
    │   ├── java
    │   │   ├── javacommon.gradle
    │   │   └── javastyle.gradle
    │   ├── javacpp
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   ├── javaDesktopTestTask.gradle
    │   ├── jni
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   ├── libssh.gradle
    │   ├── opencv.gradle
    │   ├── plugins
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   └── resources.gradle
    ├── simulation
    │   ├── halsim_ds_socket
    │   ├── halsim_gui
    │   ├── halsim_ws_client
    │   ├── halsim_ws_core
    │   ├── halsim_ws_server
    │   └── halsim_xrp
    ├── sysid
    │   └── publish.gradle
    ├── thirdparty
    │   ├── googletest
    │   │   └── publish.gradle
    │   └── imgui_suite
    │       └── publish.gradle
    ├── wpical
    │   └── publish.gradle
    ├── wpigui
    │   └── publish.gradle
    ├── wpilibc
    │   └── publish.gradle
    ├── wpilibcExamples
    │   └── publish.gradle
    ├── wpilibcIntegrationTests
    ├── wpilibj
    ├── wpilibjExamples
    │   └── publish.gradle
    ├── wpilibjIntegrationTests
    ├── wpilibNewCommands
    ├── wpimath
    ├── wpinet
    ├── wpiunits
    ├── wpiutil
    └── xrpVendordep

53 directories, 33 files
#+end_example
** java package structure

(may not be 100% accurate)

The wpilibj target's package dependencies:

[[file:img/frc/wpilibj-package-dependencies.svg]]

There are also =package.svg= files for each package: =find . -type f -name
package.svg=

#+begin_example
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/event/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/util/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/motorcontrol/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/shuffleboard/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/sysid/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/drive/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/internal/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/simulation/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/livewindow/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/counter/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/smartdashboard/package.svg
#+end_example

**** Core

#+begin_src sh
find . -type d -wholename '*src/main/java/edu/wpi*' -print \
    | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
    | grep -v examples | grep '/wpilibj/' \
    | tree --fromfile .
#+end_src

#+begin_example
.
└── edu
    └── wpi
        └── first
            └── wpilibj
                ├── can
                ├── commands
                │   ├── command2
                │   ├── emptyclass
                │   ├── instantcommand
                │   ├── parallelcommandgroup
                │   ├── paralleldeadlinegroup
                │   ├── parallelracegroup
                │   ├── sequentialcommandgroup
                │   └── subsystem2
                ├── counter
                ├── drive
                ├── event
                ├── fixtures
                ├── internal
                ├── livewindow
                ├── mockhardware
                ├── motorcontrol
                ├── romi
                ├── shuffleboard
                ├── simulation
                ├── smartdashboard
                ├── sysid
                ├── templates
                │   ├── commandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── commandbasedskeleton
                │   ├── educational
                │   ├── robotbaseskeleton
                │   ├── romicommandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── romieducational
                │   ├── romitimed
                │   ├── timed
                │   ├── timedskeleton
                │   ├── timeslice
                │   ├── timesliceskeleton
                │   ├── xrpcommandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── xrpeducational
                │   └── xrptimed
                ├── test
                ├── util
                └── xrp
#+end_example
**** Misc

#+begin_src sh
 find . -type d -wholename '*src/main/java/edu/wpi*' -print \
     | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
     | grep -v examples | grep -v '/wpilibj/' \
     | tree --fromfile .
#+end_src

#+RESULTS
#+begin_example
.
└── edu
    └── wpi
        └── first
            ├── apriltag
            │   └── jni
            ├── cameraserver
            ├── cscore
            │   └── raw
            ├── epilogue
            │   ├── logging
            │   │   └── errors
            │   └── processor
            ├── fields
            ├── hal
            │   ├── can
            │   ├── communication
            │   ├── simulation
            │   └── util
            ├── math
            │   ├── controller
            │   │   ├── proto
            │   │   └── struct
            │   ├── estimator
            │   ├── filter
            │   ├── geometry
            │   │   ├── proto
            │   │   └── struct
            │   ├── interpolation
            │   ├── jni
            │   ├── kinematics
            │   │   ├── proto
            │   │   └── struct
            │   ├── optimization
            │   ├── path
            │   ├── proto
            │   ├── spline
            │   │   ├── proto
            │   │   └── struct
            │   ├── struct
            │   ├── system
            │   │   ├── plant
            │   │   │   ├── proto
            │   │   │   └── struct
            │   │   ├── proto
            │   │   └── struct
            │   ├── trajectory
            │   │   ├── constraint
            │   │   └── proto
            │   └── util
            ├── net
            ├── networktables
            ├── units
            │   ├── collections
            │   └── mutable
            ├── util
            │   ├── cleanup
            │   ├── concurrent
            │   ├── datalog
            │   ├── function
            │   ├── protobuf
            │   ├── sendable
            │   └── struct
            │       └── parser
            ├── vision
            ├── wpilibj
            └── wpilibj2
                └── command
                    ├── button
                    └── sysid
#+end_example

**** Examples

#+begin_src sh
find . -type d -wholename '*src/main/java/edu/wpi*' -print \
    | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
    | grep examples \
    | tree --fromfile .
#+end_src

#+begin_example
└── edu
    └── wpi
        └── first
            └── wpilibj
                └── examples
                    ├── addressableled
                    ├── apriltagsvision
                    ├── arcadedrive
                    ├── arcadedrivexboxcontroller
                    ├── armsimulation
                    │   └── subsystems
                    ├── canpdp
                    ├── differentialdrivebot
                    ├── differentialdriveposeestimator
                    ├── digitalcommunication
                    ├── dma
                    ├── drivedistanceoffboard
                    │   └── subsystems
                    ├── dutycycleencoder
                    ├── dutycycleinput
                    ├── elevatorexponentialprofile
                    ├── elevatorexponentialsimulation
                    │   └── subsystems
                    ├── elevatorprofiledpid
                    ├── elevatorsimulation
                    │   └── subsystems
                    ├── elevatortrapezoidprofile
                    ├── encoder
                    ├── eventloop
                    ├── flywheelbangbangcontroller
                    ├── gettingstarted
                    ├── gyro
                    ├── gyromecanum
                    ├── hatchbotinlined
                    │   ├── commands
                    │   └── subsystems
                    ├── hatchbottraditional
                    │   ├── commands
                    │   └── subsystems
                    ├── hidrumble
                    ├── httpcamera
                    ├── i2ccommunication
                    ├── intermediatevision
                    ├── mecanumbot
                    ├── mecanumcontrollercommand
                    │   └── subsystems
                    ├── mecanumdrive
                    ├── mecanumdriveposeestimator
                    ├── mechanism2d
                    ├── motorcontrol
                    ├── potentiometerpid
                    ├── quickvision
                    ├── rapidreactcommandbot
                    │   └── subsystems
                    ├── relay
                    ├── romireference
                    │   ├── commands
                    │   └── subsystems
                    ├── selectcommand
                    ├── shuffleboard
                    ├── simpledifferentialdrivesimulation
                    ├── solenoid
                    ├── statespacearm
                    ├── statespaceelevator
                    ├── statespaceflywheel
                    ├── statespaceflywheelsysid
                    ├── swervebot
                    ├── swervecontrollercommand
                    │   └── subsystems
                    ├── swervedriveposeestimator
                    ├── sysidroutine
                    │   └── subsystems
                    ├── tankdrive
                    ├── tankdrivexboxcontroller
                    ├── ultrasonic
                    ├── ultrasonicpid
                    ├── unittest
                    │   └── subsystems
                    └── xrpreference
                        ├── commands
                        └── subsystems
#+end_example
** Java Package Structure (UML)

**** Get package names

Modified to +ensure the =class= lines have open & closed braces+ remove the class lines

#+name: wpilibPuml
#+begin_src emacs-lisp
"img/frc/package-dependencies.puml"
#+end_src

#+name: wpilibPkgs
#+begin_src sh :results output table :var puml=wpilibPuml
cat $puml | grep edu.wpi.first | grep -v class \
    | sed -E "s/ +--> +/\n/g" | tr -d ' ' \
    | grep edu.wpi.first | sort | uniq
#+end_src

#+RESULTS: wpilibPkgs
| edu.wpi.first.apriltag                   |
| edu.wpi.first.apriltag.jni               |
| edu.wpi.first.cameraserver               |
| edu.wpi.first.cscore                     |
| edu.wpi.first.cscore.raw                 |
| edu.wpi.first.epilogue                   |
| edu.wpi.first.epilogue.logging           |
| edu.wpi.first.epilogue.logging.errors    |
| edu.wpi.first.hal                        |
| edu.wpi.first.hal.can                    |
| edu.wpi.first.hal.simulation             |
| edu.wpi.first.hal.util                   |
| edu.wpi.first.math                       |
| edu.wpi.first.math.controller            |
| edu.wpi.first.math.controller.proto      |
| edu.wpi.first.math.controller.struct     |
| edu.wpi.first.math.estimator             |
| edu.wpi.first.math.filter                |
| edu.wpi.first.math.geometry              |
| edu.wpi.first.math.geometry.proto        |
| edu.wpi.first.math.geometry.struct       |
| edu.wpi.first.math.interpolation         |
| edu.wpi.first.math.kinematics            |
| edu.wpi.first.math.kinematics.proto      |
| edu.wpi.first.math.kinematics.struct     |
| edu.wpi.first.math.numbers               |
| edu.wpi.first.math.path                  |
| edu.wpi.first.math.proto                 |
| edu.wpi.first.math.spline                |
| edu.wpi.first.math.spline.proto          |
| edu.wpi.first.math.spline.struct         |
| edu.wpi.first.math.struct                |
| edu.wpi.first.math.system                |
| edu.wpi.first.math.system.plant          |
| edu.wpi.first.math.system.plant.proto    |
| edu.wpi.first.math.system.plant.struct   |
| edu.wpi.first.math.system.proto          |
| edu.wpi.first.math.system.struct         |
| edu.wpi.first.math.trajectory            |
| edu.wpi.first.math.trajectory.constraint |
| edu.wpi.first.math.trajectory.proto      |
| edu.wpi.first.networktables              |
| edu.wpi.first.units                      |
| edu.wpi.first.units.collections          |
| edu.wpi.first.units.measure              |
| edu.wpi.first.units.mutable              |
| edu.wpi.first.util                       |
| edu.wpi.first.util.concurrent            |
| edu.wpi.first.util.datalog               |
| edu.wpi.first.util.function              |
| edu.wpi.first.util.protobuf              |
| edu.wpi.first.util.sendable              |
| edu.wpi.first.util.struct                |
| edu.wpi.first.vision                     |
| edu.wpi.first.wpilibj                    |
| edu.wpi.first.wpilibj2.command           |
| edu.wpi.first.wpilibj2.command.button    |
| edu.wpi.first.wpilibj2.command.sysid     |
| edu.wpi.first.wpilibj.counter            |
| edu.wpi.first.wpilibj.drive              |
| edu.wpi.first.wpilibj.event              |
| edu.wpi.first.wpilibj.livewindow         |
| edu.wpi.first.wpilibj.motorcontrol       |
| edu.wpi.first.wpilibj.romi               |
| edu.wpi.first.wpilibj.shuffleboard       |
| edu.wpi.first.wpilibj.simulation         |
| edu.wpi.first.wpilibj.smartdashboard     |
| edu.wpi.first.wpilibj.sysid              |
| edu.wpi.first.wpilibj.util               |
| edu.wpi.first.wpilibj.xrp                |

#+name: wpilibPkgsTop
#+begin_src sh :results output table :var puml=wpilibPuml pkgs=wpilibPkgs
echo ${pkgs[@]} | tr ' ' '\n' |
    sed -E 's/(\w+\.\w+\.\w+\.\w+)\..+/\1/g' | sort | uniq
#+end_src

#+RESULTS: wpilibPkgsTop
| edu.wpi.first.apriltag      |
| edu.wpi.first.cameraserver  |
| edu.wpi.first.cscore        |
| edu.wpi.first.epilogue      |
| edu.wpi.first.hal           |
| edu.wpi.first.math          |
| edu.wpi.first.networktables |
| edu.wpi.first.units         |
| edu.wpi.first.util          |
| edu.wpi.first.vision        |
| edu.wpi.first.wpilibj       |
| edu.wpi.first.wpilibj2      |

**** Filter the graph

... really requires awk.

it needs at least one class or it renders as a Seq diagram instead of Class.

#+begin_src sh :results output verbatim raw :var puml=wpilibPuml pkgs=wpilibPkgsTop
for pkg in ${pkgs[@]}; do
  f=img/frc/pkguml/$pkg.puml
  cat > $f <<EOF
@startuml
    !pragma layout smetana
    skinparam backgroundcolor transparent
    set namespaceSeparator none
    hide circle
    hide empty fields
    hide empty methods
EOF
  grep -e $pkg $puml >> $f
  echo @enduml >> $f
  plantuml -tsvg $f

  echo "$(basename $f)"
  echo
  echo "[[file:$(dirname $f)/$(basename $f .puml).svg]]"
  echo
done
#+end_src

#+RESULTS:
edu.wpi.first.apriltag.puml

[[file:img/frc/pkguml/edu.wpi.first.apriltag.svg]]

edu.wpi.first.cameraserver.puml

[[file:img/frc/pkguml/edu.wpi.first.cameraserver.svg]]

edu.wpi.first.cscore.puml

[[file:img/frc/pkguml/edu.wpi.first.cscore.svg]]

edu.wpi.first.epilogue.puml

[[file:img/frc/pkguml/edu.wpi.first.epilogue.svg]]

edu.wpi.first.hal.puml

[[file:img/frc/pkguml/edu.wpi.first.hal.svg]]

edu.wpi.first.math.puml

[[file:img/frc/pkguml/edu.wpi.first.math.svg]]

edu.wpi.first.networktables.puml

[[file:img/frc/pkguml/edu.wpi.first.networktables.svg]]

edu.wpi.first.units.puml

[[file:img/frc/pkguml/edu.wpi.first.units.svg]]

edu.wpi.first.util.puml

[[file:img/frc/pkguml/edu.wpi.first.util.svg]]

edu.wpi.first.vision.puml

[[file:img/frc/pkguml/edu.wpi.first.vision.svg]]

edu.wpi.first.wpilibj.puml

[[file:img/frc/pkguml/edu.wpi.first.wpilibj.svg]]

edu.wpi.first.wpilibj2.puml

[[file:img/frc/pkguml/edu.wpi.first.wpilibj2.svg]]



** HTML/CSS :noexport:

Deleted some stuff

#+begin_src css
pre {
    padding: 0;
    margin: 0.2em;
    font-size: 8px;
}

h3,h4 {
  margin: 0.2em;
  padding: 0;
}

@media print {
  .outline-4 {
    break-inside: avoid;
  }
}
#+end_src

* Docker

Use =wpilib/ubuntu-base:{22,24}.04= for most tasks, except those requiring
cross-compilation.

** Gradle in Docker

#+begin_example yaml
---
version: "3.8"
services:
  wpilib:
    image: wpilib/ubuntu-base:24.04
    user: "1000:1000"
    tty: true
    working_dir: /home/ubuntu/src/wpilibsuite/allwpilib
    volumes:
      - type: bind
        source: /data/ecto/frc/wpilibsuite
        target: /home/ubuntu/src/wpilibsuite
#+end_example

Run =docker compose up= then get a shell, run =bash= for indoor plumbing. Move into
=~/src/wpilibsuite/allwpilib= and run =./gradlew=. It will install gradle from a
remote source.

Now run =./gradlew tasks=. it does a bunch of things (in parallel), including:

- constructing build & config caches
- discovering projects, where =allwpilib= is the root project



** Build WPI Docs

Run =./gradlew javadoc= or  =./gradlew javadoc --rerun= to regen

*** Add [[https://github.com/talsma-ict/umldoclet/blob/main/usage.md][talsma-ict/umldoclet]]

+ [[https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html][Gradle Docs on javadoc]]

Tried this, but I'm not even sure that the dependency gets downloaded. simply
adding the configuration into =generateJavaDocs(type: Javadoc)= doesn't work.

Using the [[https://github.com/talsma-ict/umldoclet/blob/main/usage.md#commandline][CLI method]] with raw =javadoc= commands would be simpler, at first.
However, it requires extracting =classpath= and a few other pieces of from
gradle's run context.

**** Solution: Invoke =docs:generateJavaDocsML= from the =docs:= task namespace

Add the following patch. Then run with =./gradlew docs:generateJavaDocsUML
--rerun=. You'll want to enable/disable the =sources= as needed (i'm surprised it
even works)

+ This will generate a second =javadocs= build target that contains the svg's.
+ Run =find . -name '*.svg'= to find them. There are almost no other SVGs in the
  project.
+ You can save the PUML files (when running the [[https://github.com/talsma-ict/umldoclet/pull/269][javadoc plugin in verbose]])
  - =options.addBooleanOption "createPumlFiles", true=

#+begin_src diff
diff --git a/docs/build.gradle b/docs/build.gradle
index 43d150f0e3..9b18dd7e01 100644
--- a/docs/build.gradle
+++ b/docs/build.gradle
@@ -177,13 +177,20 @@ tasks.register("zipCppDocs", Zip) {
     into '/'
 }

+apply plugin: 'java'
+
 // Java
 configurations {
+    umlDoclet
     javaSource {
         transitive false
     }
 }

+dependencies {
+    umlDoclet "nl.talsmasoftware:umldoclet:2.2.1"
+}
+
 task generateJavaDocs(type: Javadoc) {
     classpath += project(":wpilibj").sourceSets.main.compileClasspath
     options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
@@ -247,6 +254,31 @@ task generateJavaDocs(type: Javadoc) {
     }
 }

+// shows up as docs:generateJavaDocsUML
+task generateJavaDocsUML(type: Javadoc) {
+    classpath += project(":wpilibj").sourceSets.main.compileClasspath
+
+    options.docletpath = configurations.umlDoclet.files.asType(List)
+    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
+    // options.addStringOption "failOnCyclicPackageDependencies", "true"
+
+    dependsOn project(':wpilibj').generateJavaVersion
+    // source project(':apriltag').sourceSets.main.java
+    // source project(':cameraserver').sourceSets.main.java
+    // source project(':cscore').sourceSets.main.java
+    // source project(':epilogue-runtime').sourceSets.main.java
+    // source project(':hal').sourceSets.main.java
+    // source project(':ntcore').sourceSets.main.java
+    // source project(':wpilibNewCommands').sourceSets.main.java
+    source project(':wpilibj').sourceSets.main.java
+    // source project(':wpimath').sourceSets.main.java
+    // source project(':wpinet').sourceSets.main.java
+    // source project(':wpiunits').sourceSets.main.java
+    // source project(':wpiutil').sourceSets.main.java
+    // source project(':romiVendordep').sourceSets.main.java
+    // source project(':xrpVendordep').sourceSets.main.java
+}
+
 tasks.register("zipJavaDocs", Zip) {
     archiveBaseName = zipBaseNameJava
     destinationDirectory = outputsFolder

#+end_src

** Containers

In 2025, containers are built from Ubuntu 22.04

See [[https://github.com/wpilibsuite/docker-images/blob/main/Makefile#L58-84][Makefile in wpilibsuite/docker-images]]
** GH Actions

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
# most of their repos have .github directories
find . -type d -wholename "*.github/workflows" -print #| tree -a --fromfile .
# grep -e matrix $(find . -wholename '*.github*' -name "*.yml")
#+end_src

These images are used to build

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
find . -type d -name ".github" -exec grep -nrE '(image|container): ' \{\} + \
    | grep -v "\"\"" | grep -v "{{" | sed -E 's/.*: //g' | tr -d '"' | tr -d ',' \
    | sort | uniq

# sed -E 's/.*[0-9]+: +//g' | sed -e 's/: '
# find . -type d -name ".github" -exec grep -nrE 'docker.io' \{\} +
# find . -type d -name ".github" -exec grep -nrE '(image|container): ' \{\} +
#+end_src

#+RESULTS:
#+begin_src grep
docker.io/wpilib/opensdk-ubuntu:20.04
ubuntu:20.04
ubuntu:22.04
wpilib/aarch64-cross-ubuntu:bookworm-22.04
wpilib/aarch64-cross-ubuntu:bullseye-22.04
wpilib/raspbian-cross-ubuntu:bookworm-22.04
wpilib/raspbian-cross-ubuntu:bullseye-22.04
wpilib/roborio-cross-ubuntu:2024-22.04
wpilib/roborio-cross-ubuntu:2025-22.04
wpilib/roborio-cross-ubuntu:2025-24.04
wpilib/systemcore-cross-ubuntu:2025-22.04
wpilib/systemcore-cross-ubuntu:2025-24.04
wpilib/ubuntu-base:22.04
wpilib/ubuntu-base:24.04
#+end_src

** Dockerfiles

Dockerfiles

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
find . -name '*Dockerfile*' | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_src grep
.
└── .
    ├── Axon
    │   ├── containers
    │   │   └── mobilenet
    │   │       ├── base
    │   │       │   └── Dockerfile
    │   │       ├── dataset
    │   │       │   └── Dockerfile
    │   │       ├── metrics
    │   │       │   └── Dockerfile
    │   │       ├── test
    │   │       │   └── Dockerfile
    │   │       ├── tflite
    │   │       │   └── Dockerfile
    │   │       └── training
    │   │           └── Dockerfile
    │   └── Dockerfile
    ├── DetectCoral
    │   └── mobilenet
    │       ├── base
    │       │   └── Dockerfile
    │       ├── dataset
    │       │   └── Dockerfile
    │       ├── metrics
    │       │   └── Dockerfile
    │       ├── test
    │       │   └── Dockerfile
    │       ├── tflite
    │       │   └── Dockerfile
    │       └── training
    │           └── Dockerfile
    ├── docker-images
    │   ├── aarch64-cross-ubuntu
    │   │   └── Dockerfile.bookworm
    │   ├── cross-ubuntu-py
    │   │   ├── Dockerfile.py311
    │   │   ├── Dockerfile.py312
    │   │   └── Dockerfile.py313
    │   ├── debian-base
    │   │   └── Dockerfile.bookworm
    │   ├── gazebo-ubuntu
    │   │   └── Dockerfile
    │   ├── opensdk
    │   │   └── ubuntu
    │   │       └── Dockerfile
    │   ├── raspbian-cross-ubuntu
    │   │   └── Dockerfile.bookworm
    │   ├── roborio-cross-ubuntu
    │   │   └── Dockerfile.2025
    │   ├── systemcore-cross-ubuntu
    │   │   └── Dockerfile.2025
    │   ├── ubuntu-base
    │   │   ├── Dockerfile.22.04
    │   │   └── Dockerfile.24.04
    │   └── ubuntu-minimal-base
    │       ├── Dockerfile.22.04
    │       └── Dockerfile.24.04
    ├── opencv
    │   └── modules
    │       ├── highgui
    │       │   └── misc
    │       │       └── plugins
    │       │           └── plugin_gtk
    │       │               ├── Dockerfile-ubuntu-gtk2
    │       │               └── Dockerfile-ubuntu-gtk3
    │       └── videoio
    │           └── misc
    │               ├── plugin_ffmpeg
    │               │   ├── Dockerfile-ffmpeg
    │               │   └── Dockerfile-ubuntu
    │               └── plugin_gstreamer
    │                   └── Dockerfile
    └── WPILibPi
        ├── azure-docker
        │   └── Dockerfile
        └── Dockerfile

43 directories, 34 files
#+end_src


* Platform Issues
** VM

** Docker

*** Steam Container

The nonguix "Steam Container" provides a good map for customizations to =/dev= for
devices, etc that are required to fully encapsulate a runtime that spawns
subordinate processes

- Steam pressure vessel functions and steam launches wrapped processes, partly
  because it needs to do so within a WINE "pseudo-container" while also spawning
  processes for games with Linux builds)

** Guix

To some extent, it should be possible to build an FHS Guix container that
addresses these, but that's just a risky prospect.

+ gradlew not available: difficulties packaging kotlin =>1.0.0=, only available in
  the =guix-android= channel.
+ vscode proprietary extensions required for functionality
+ JNI used deeply thoughout applications and must be linked/referenced
  throughout with pinned versions
  - i.e. if build scripts, in wpilib or in external deps don't expose config
    options or otherwise produce artifacts with incorrect =rpath=, etc, then
    artifacts will partially function, leading to very difficult debugging.
  - binaries produced will not be portable
  - there's a hard requirement on Ubuntu already (for wpilib), which leads me to
    suspect that some paths/configs are not exposed in config or are tedious to
    setup/support
