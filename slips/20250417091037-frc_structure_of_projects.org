:PROPERTIES:
:ID:       2c2ac2bc-8f09-4f7f-a691-dd4d0c0056d9
:END:
#+TITLE: FRC: Structure of Projects
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]

* Docs
+ [[https://docs.wpilib.org/en/stable/docs/contributing/wpilib/index.html][Developing with allwpilib]]

* Resources


* Java
** Misc Libs
*** com.fasterxml.jackson

Provides annotations used

** Tooling
+ [[https://github.com/Mechanical-Advantage/URCL][Mechanical-Advantage/URCL]] Unofficial REV-Compatible Logger
+ org.littletonrobotics.akit
+ doglog

** Vision

+ org.photonvision

** Sim

+ maple-sim: physics sim

** Hardware Libs
These can be downloaded from the vendor deps.

+ com.studica.frc :: mecanum wheel library?
+ [[https://codedocs.revrobotics.com/java/com/revrobotics/package-summary.html][com.revrobotics]] :: NEO motors
  + revlib: spark flex, spark max, color sensor v3
+ com.ctre.phoenix6 :: CTRE libraries
  + pheonix6-replay: for Hoot Replay
+ thriftylib
+ lumynlabs: ConnectorX

** UML Doclet

My notes are a bit scattered (and not everything is online)

*** Linking to external packages

| java          | https://docs.oracle.com/en/java/javase/11/docs/api/    |
| wpilib        | https://github.wpilib.org/allwpilib/docs/release/java/ |
| photonvision  | https://javadocs.photonvision.org/release/             |
| pathplanner   | https://pathplanner.dev/api/java/                      |
| ctre phoenix6 | https://api.ctr-electronics.com/phoenix6/release/java/ |

Adding these URLs to links in the javadoc options will resolve to externally
hosted docs (even in the SVG)

#+begin_src groovy
javadoc {
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/' // , ... , ...
    }
}
#+end_src

* WPI Lib

Running gradle tasks inside of a docker container

#+begin_src shell
docker run --rm -it -u 1000:1000  \
    -v "$(pwd)":/home/ubuntu/project -w /home/ubuntu/project \
    wpilib/ubuntu-base:24.04

# then run ./gradlew :tasks
#+end_src

+ May need to clean out gradles' intermediate build artifacts when jumping from
  native to docker

** Gradle

Reports dumped here =./build/reports/problems/=

*** Tasks

Task Groups

| Application | Build        | Build Dependents | Build Setup       | CompileCommands |
| DeployUtils | Distribution | Documentation    | Gradle Enterprise | Help            |
| IDE         | JNI          | NativeUtils      | Publishing        | Run examples    |
| Shadow      | Toolchains   | Verification     | VSCode            | WPILib          |
| Rules       |              |                  |                   |                 |

List with =./gradlew :tasks --group $group=

**** WPILib

| generateCppVersion  | Generates the wpilib version class |
| generateJavaVersion | Generates the wpilib version class |
| runCpp              | Run the apriltagDev executable     |

**** Documentation

| createDoxygenTemplates |                                                             |
| doxygen                |                                                             |
| javadoc                | Generates Javadoc API documentation for the 'main' feature. |

Docs get built and go here =find . -wholename '*build/docs/javadoc'=

#+begin_example
./wpiunits/build/docs/javadoc
./wpilibNewCommands/build/docs/javadoc
./apriltag/build/docs/javadoc
./wpinet/build/docs/javadoc
./romiVendordep/build/docs/javadoc
./developerRobot/build/docs/javadoc
./wpiutil/build/docs/javadoc
./wpimath/build/docs/javadoc
./cameraserver/build/docs/javadoc
./cameraserver/multiCameraServer/build/docs/javadoc
./hal/build/docs/javadoc
./wpilibjIntegrationTests/build/docs/javadoc
./wpilibj/build/docs/javadoc
./cscore/build/docs/javadoc
./wpilibjExamples/build/docs/javadoc
./epilogue-processor/build/docs/javadoc
./fieldImages/build/docs/javadoc
./epilogue-runtime/build/docs/javadoc
./xrpVendordep/build/docs/javadoc
./ntcore/build/docs/javadoc
#+end_example

*** Project Tasks
***** TODO move to a gradle tasks cheatsheet?

**** Basics
Build

| assemble        | Assembles the outputs of this project.                                |
| build           | Assembles and tests this project.                                     |
| buildDependents | Assembles and tests this project and all projects that depend on it.  |
| buildNeeded     | Assembles and tests this project and all projects it depends on.      |
| classes         | Assembles main classes.                                               |
| clean           | Deletes the build directory.                                          |
| jar             | Assembles a jar archive containing the classes of the 'main' feature. |
| testClasses     | Assembles test classes.                                               |

Build Setup

| init            | Initializes a new Gradle build.                      |
| updateDaemonJvm | Generates or updates the Gradle Daemon JVM criteria. |
| wrapper         | Generates Gradle wrapper files.                      |

Documentation

| javadoc | Generates Javadoc API documentation for the 'main' feature. |

IDE

| cleanEclipse | Cleans all Eclipse files.    |
| eclipse      | Generates all Eclipse files. |

NativeUtils

| vendordep | Install vendordep JSON file from URL or local wpilib folder |

Verification

| check | Runs all checks.     |
| test  | Runs the test suite. |

**** DeployUtils

| deploy                                     | Deploy all artifacts on all targets                  |
| deployfrcJavaroborio                       | Deploys frcJava to roborio                           |
| deployfrcStaticFileDeployroborio           | Deploys frcStaticFileDeploy to roborio               |
| deployjrefrcJavaroborio                    | Deploys jrefrcJava to roborio                        |
| deploynativeZipsfrcJavaroborio             | Deploys nativeZipsfrcJava to roborio                 |
| deployprogramKillroborioroborio            | Deploys programKillroborio to roborio                |
| deployprogramStartfrcJavaroborio           | Deploys programStartfrcJava to roborio               |
| deployroborio                              | Deploy task for roborio                              |
| deployrobotCommandfrcJavaroborio           | Deploys robotCommandfrcJava to roborio               |
| deployStandalone                           | Deploy all artifacts on all targets                  |
| deployStandalonefrcJavaroborio             | Deploys frcJava to roborio as Standalone             |
| deployStandalonefrcStaticFileDeployroborio | Deploys frcStaticFileDeploy to roborio as Standalone |
| deployStandalonejrefrcJavaroborio          | Deploys jrefrcJava to roborio as Standalone          |
| deployStandalonenativeZipsfrcJavaroborio   | Deploys nativeZipsfrcJava to roborio as Standalone   |
| deployStandaloneprogramKillroborioroborio  | Deploys programKillroborio to roborio as Standalone  |
| deployStandaloneprogramStartfrcJavaroborio | Deploys programStartfrcJava to roborio as Standalone |
| deployStandaloneroborio                    | Standalone deploy task for roborio                   |
| deployStandalonerobotCommandfrcJavaroborio | Deploys robotCommandfrcJava to roborio as Standalone |
| discoverroborio                            | Determine the address(es) of target roborio          |
| listTypeClasses                            | Lists all type classes for targets and cache methods |
| listTypeClassesroborio                     | Lists all type classes for a target                  |


**** GradleRIO

| DataLogTool                          | Run the tool DataLogTool                        |
| deployStageroborioAfterProgramKill   | Deploy stage AfterProgramKill for roborio       |
| deployStageroborioAfterProgramStart  | Deploy stage AfterProgramStart for roborio      |
| deployStageroborioBeforeProgramKill  | Deploy stage BeforeProgramKill for roborio      |
| deployStageroborioBeforeProgramStart | Deploy stage BeforeProgramStart for roborio     |
| deployStageroborioFileDeploy         | Deploy stage FileDeploy for roborio             |
| deployStageroborioFileRetreival      | Deploy stage FileRetreival for roborio          |
| deployStageroborioProgramKill        | Deploy stage ProgramKill for roborio            |
| deployStageroborioProgramStart       | Deploy stage ProgramStart for roborio           |
| explainRepositories                  | Explain all Maven Repos present on this project |
| Glass                                | Run the tool Glass                              |
| InstallAllTools                      | Install All Tools                               |
| OutlineViewer                        | Run the tool OutlineViewer                      |
| PathWeaver                           | Run the tool PathWeaver                         |
| PathWeaverInstall                    | Install the tool PathWeaver                     |
| roboRIOTeamNumberSetter              | Run the tool roboRIOTeamNumberSetter            |
| RobotBuilder                         | Run the tool RobotBuilder                       |
| RobotBuilderInstall                  | Install the tool RobotBuilder                   |
| ShuffleBoard                         | Run the tool ShuffleBoard                       |
| ShuffleBoardInstall                  | Install the tool ShuffleBoard                   |
| SmartDashboard                       | Run the tool SmartDashboard                     |
| SmartDashboardInstall                | Install the tool SmartDashboard                 |
| SysId                                | Run the tool SysId                              |
| wpical                               | Run the tool wpical                             |
| wpiVersions                          | Print all versions of the wpi block             |

**** Help

| buildEnvironment         | Displays all buildscript dependencies declared in root project '$project'.   |
| dependencies             | Displays all dependencies declared in root project '$project'.               |
| dependencyInsight        | Displays the insight into a specific dependency in root project '$project'.  |
| help                     | Displays a help message.                                                     |
| javaToolchains           | Displays the detected java toolchains.                                       |
| outgoingVariants         | Displays the outgoing variants of root project '$project'.                   |
| projects                 | Displays the sub-projects of root project '$project'.                        |
| properties               | Displays the properties of root project '$project'.                          |
| resolvableConfigurations | Displays the configurations that can be resolved in root project '$project'. |
| tasks                    | Displays the tasks runnable from root project '$project'.                    |

*** Code Generation
:PROPERTIES:
:header-args:shell+: :dir (expand-file-name "frc/wpilibsuite/allwpilib/wpilibjExamples" (getenv "_ECTO"))
:END:

+ These json scripts are set in [[https://github.com/wpilibsuite/allwpilib/blob/fb399eef3dc4ef41d3c99966c0182ad194c0a817/wpilibjExamples/build.gradle#L68-L77][./wpilibjExamples/build.gradle]]
+ Some are mentioned later in my notes (in java package structure)
+ Not as exciting as I thought, since I assumed the snippets were for code
  generation. They are, but for the docs site.
+ The =wpilib{c,j}Examples= subprojects have their own builds, so the classes in
  here don't appear on the [[director][wpilib docs site]] (or in my regular =:javadocs= build)
  - somehow the javadoc built anyways. It's mostly useless (produces
    "ReplaceMeClass" for commands, snippets, templates)
  - searching Replace in the extension source leads to [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/vscode-wpilib/src/shared/generator.ts#L147-L158][./src/shared/generator.ts]]
    which defines =generateCopyJava= and =generateCopyCpp=
  - There are no references to =snippets= in the wpilib extension. Again, these
    are doc snippets -- I was hoping to find examples of reflection, if not
    code snippets.
+ For the VSCode new project tool, [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/wpilib-utility-standalone/src/projectcreator.ts#L179-L193][setupBaseSelects]] handles finding the projects
  that can be generated.
  - The actual templates/examples are loaded by:
    - [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/vscode-wpilib/src/shared/exampletemplateapi.ts#L80][src/shared/exampletemplateapi.ts]]
    - [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/vscode-wpilib/src/shared/vendorexamples.ts][src/shared/vendorexamples.ts]]
    - [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/vscode-wpilib/src/shared/examples.ts][src/shared/examples.ts]]
  - This is how the VSCode extension can provide access to the templates like
    [[https://github.com/CrossTheRoadElec/Phoenix6-Examples][CrossTheRoadElec/Pheonix6-Examples]]
  - The templates are created by =generateCopy{Java,Cpp}=, +completely outside of
    gradle+ ... which I guess makes sense (it'll be a new project entirely.)
    - nevermind... On template generation, the snippet source gets installed
      into the local extension source on
    - And it appears that [[https://github.com/wpilibsuite/vscode-wpilib/blob/ab3a347c94ec18d1ee5189b0583ed92843d00a19/templatebuilder.gradle#L11-L59][templatebuilder.gradle]] handles code generation
    - Nope, the gradle task (from [[https://github.com/wpilibsuite/vscode-wpilib/commit/0fdd7bb8e3c07842c3440bdfd92fea725d506bac][2021]]) handles pulling the templates/examples,
      whereas typescript (mostly from 2018, later) will handle local copies (and
      VSCode's project context switch)

#+begin_example shell
vscodeData=$HOME/wpilib/2025/vscode/VSCode-linux-x64/data
wpiExt=$vscodeData/extensions/wpilibsuite.vscode-wpilib-2025.3.2
wpiExamples=$wpiExt/resources/{java,cpp}/src/{examples,templates}
#+end_example

**** Templates

#+begin_src shell :results output table
jq -rj 'map("\(.foldername),\(.name)") | join("\n")' \
    src/main/java/edu/wpi/first/wpilibj/templates/templates.json \
    | sort
#+end_src

#+RESULTS:
| commandbased         | Command Robot                     |
| commandbasedskeleton | Command Robot Skeleton (Advanced) |
| educational          | Educational Robot                 |
| robotbaseskeleton    | RobotBase Skeleton (Advanced)     |
| romicommandbased     | Romi - Command Robot              |
| romieducational      | Romi - Educational Robot          |
| romitimed            | Romi - Timed Robot                |
| timedskeleton        | Timed Skeleton (Advanced)         |
| timed                | Timed Robot                       |
| timesliceskeleton    | Timeslice Skeleton (Advanced)     |
| timeslice            | Timeslice Robot                   |
| xrpcommandbased      | XRP - Command Robot               |
| xrpeducational       | XRP - Educational Robot           |
| xrptimed             | XRP - Timed Robot                 |

**** Commands

#+begin_src shell :results output table
jq -rj 'map("\(.foldername),\(.name)") | join("\n")' \
    src/main/java/edu/wpi/first/wpilibj/commands/commands.json \
    | sort
#+end_src

#+RESULTS:
| command2               | Command                |
| emptyclass             | Empty Class            |
| instantcommand         | InstantCommand         |
| parallelcommandgroup   | ParallelCommandGroup   |
| paralleldeadlinegroup  | ParallelDeadlineGroup  |
| parallelracegroup      | ParallelRaceGroup      |
| sequentialcommandgroup | SequentialCommandGroup |
| subsystem2             | Subsystem              |

**** Snippets

#+begin_src shell :results output table
jq -rj 'map("\(.foldername),\(.name)") | join("\n")' \
    src/main/java/edu/wpi/first/wpilibj/snippets/snippets.json \
    | sort
#+end_src

#+RESULTS:
| accelerometercollision | AccelerometerCollisionDetection |
| accelerometerfilter    | AccelerometerFilter             |
| adxlaccelerometers     | ADXLAccelerometers              |
| analogaccelerometer    | AnalogAccelerometer             |
| analogencoder          | AnalogEncoder                   |
| analoginput            | AnalogInput                     |
| analogpotentiometer    | AnalogPotentiometer             |
| analogtrigger          | AnalogTrigger                   |
| builtinaccelerometer   | BuiltInAccelerometer            |
| digitalinput           | DigitalInput                    |
| dutycycleencoder       | DutyCycleEncoder                |
| encoderdrive           | EncoderDrive                    |
| encoder                | Encoder                         |
| encoderhoming          | EncoderHoming                   |
| limitswitch            | LimitSwitch                     |

**** Examples


#+begin_src shell :results output table
jq -rj 'map("\(.foldername),\(.name)") | join("\n")' \
    src/main/java/edu/wpi/first/wpilibj/examples/examples.json \
    | sort
#+end_src

#+RESULTS:
| addressableled                    | Addressable LED                         |
| apriltagsvision                   | AprilTags Vision                        |
| arcadedrive                       | Arcade Drive                            |
| arcadedrivexboxcontroller         | Arcade Drive Xbox Controller            |
| armsimulation                     | ArmSimulation                           |
| canpdp                            | PDP CAN Monitoring                      |
| differentialdrivebot              | DifferentialDriveBot                    |
| differentialdriveposeestimator    | DifferentialDrivePoseEstimator          |
| digitalcommunication              | Digital Communication Sample            |
| dma                               | DMA                                     |
| drivedistanceoffboard             | DriveDistanceOffboard                   |
| dutycycleencoder                  | Duty Cycle Encoder                      |
| dutycycleinput                    | Duty Cycle Input                        |
| elevatorexponentialprofile        | Elevator with exponential profile       |
| elevatorexponentialsimulation     | Elevator Exponential Profile Simulation |
| elevatorprofiledpid               | Elevator with profiled PID controller   |
| elevatorsimulation                | ElevatorSimulation                      |
| elevatortrapezoidprofile          | Elevator with trapezoid profiled PID    |
| encoder                           | Encoder                                 |
| eventloop                         | EventLoop                               |
| flywheelbangbangcontroller        | Flywheel BangBangController             |
| gettingstarted                    | Getting Started                         |
| gyro                              | Gyro                                    |
| gyromecanum                       | Gyro Mecanum                            |
| hatchbotinlined                   | 'Inlined' Hatchbot                      |
| hatchbottraditional               | 'Traditional' Hatchbot                  |
| hidrumble                         | HID Rumble                              |
| httpcamera                        | HTTP Camera                             |
| i2ccommunication                  | I2C Communication Sample                |
| intermediatevision                | Intermediate Vision                     |
| mecanumbot                        | MecanumBot                              |
| mecanumcontrollercommand          | MecanumControllerCommand                |
| mecanumdrive                      | Mecanum Drive                           |
| mecanumdriveposeestimator         | MecanumDrivePoseEstimator               |
| mechanism2d                       | Mechanism2d                             |
| motorcontrol                      | Motor Control                           |
| potentiometerpid                  | Potentiometer PID                       |
| quickvision                       | Simple Vision                           |
| rapidreactcommandbot              | Rapid React Command Bot                 |
| relay                             | Relay                                   |
| romireference                     | RomiReference                           |
| selectcommand                     | Select Command Example                  |
| shuffleboard                      | Shuffleboard                            |
| simpledifferentialdrivesimulation | SimpleDifferentialDriveSimulation       |
| solenoid                          | Solenoids                               |
| statespacearm                     | StateSpaceArm                           |
| statespaceelevator                | StateSpaceElevator                      |
| statespaceflywheel                | StateSpaceFlywheel                      |
| statespaceflywheelsysid           | StateSpaceFlywheelSysId                 |
| swervebot                         | SwerveBot                               |
| swervecontrollercommand           | SwerveControllerCommand                 |
| swervedriveposeestimator          | SwerveDrivePoseEstimator                |
| sysidroutine                      | SysIdRoutine                            |
| tankdrive                         | Tank Drive                              |
| tankdrivexboxcontroller           | Tank Drive Xbox Controller              |
| ultrasonicpid                     | Ultrasonic PID                          |
| ultrasonic                        | Ultrasonic                              |
| unittest                          | UnitTesting                             |
| xrpreference                      | XRP Reference                           |

*** =.gradle= files

Files not named =build.gradle= and directories containing =*.gradle= files

#+begin_src sh :dir /data/ecto/frc/wpilibsuite/allwpilib :results output verbatim
find . -name "*.gradle" -type f -print | tree -I 'build.gradle' --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── .
    ├── apriltag
    ├── buildSrc
    ├── cameraserver
    │   └── multiCameraServer
    ├── crossConnIntegrationTests
    ├── cscore
    ├── datalogtool
    │   └── publish.gradle
    ├── developerRobot
    ├── docs
    ├── epilogue-processor
    ├── epilogue-runtime
    ├── fieldImages
    │   └── publish.gradle
    ├── glass
    │   └── publish.gradle
    ├── hal
    ├── msvcruntime
    ├── ntcore
    ├── ntcoreffi
    ├── outlineviewer
    │   └── publish.gradle
    ├── processstarter
    │   └── publish.gradle
    ├── roborioteamnumbersetter
    │   └── publish.gradle
    ├── romiVendordep
    ├── settings.gradle
    ├── shared
    │   ├── ceres.gradle
    │   ├── config.gradle
    │   ├── cppDesktopTestTask.gradle
    │   ├── cppJavaDesktopTestTask.gradle
    │   ├── examplecheck.gradle
    │   ├── googletest.gradle
    │   ├── java
    │   │   ├── javacommon.gradle
    │   │   └── javastyle.gradle
    │   ├── javacpp
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   ├── javaDesktopTestTask.gradle
    │   ├── jni
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   ├── libssh.gradle
    │   ├── opencv.gradle
    │   ├── plugins
    │   │   ├── publish.gradle
    │   │   └── setupBuild.gradle
    │   └── resources.gradle
    ├── simulation
    │   ├── halsim_ds_socket
    │   ├── halsim_gui
    │   ├── halsim_ws_client
    │   ├── halsim_ws_core
    │   ├── halsim_ws_server
    │   └── halsim_xrp
    ├── sysid
    │   └── publish.gradle
    ├── thirdparty
    │   ├── googletest
    │   │   └── publish.gradle
    │   └── imgui_suite
    │       └── publish.gradle
    ├── wpical
    │   └── publish.gradle
    ├── wpigui
    │   └── publish.gradle
    ├── wpilibc
    │   └── publish.gradle
    ├── wpilibcExamples
    │   └── publish.gradle
    ├── wpilibcIntegrationTests
    ├── wpilibj
    ├── wpilibjExamples
    │   └── publish.gradle
    ├── wpilibjIntegrationTests
    ├── wpilibNewCommands
    ├── wpimath
    ├── wpinet
    ├── wpiunits
    ├── wpiutil
    └── xrpVendordep

53 directories, 33 files
#+end_example
** java package structure

(may not be 100% accurate)

The wpilibj target's package dependencies:

[[file:img/frc/wpilibj-package-dependencies.svg]]

There are also =package.svg= files for each package: =find . -type f -name
package.svg=

#+begin_example
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/event/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/util/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/motorcontrol/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/shuffleboard/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/sysid/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/drive/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/internal/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/simulation/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/livewindow/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/counter/package.svg
./docs/build/docs/javadoc/edu/wpi/first/wpilibj/smartdashboard/package.svg
#+end_example

**** Core

#+begin_src sh
find . -type d -wholename '*src/main/java/edu/wpi*' -print \
    | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
    | grep -v examples | grep '/wpilibj/' \
    | tree --fromfile .
#+end_src

#+begin_example
.
└── edu
    └── wpi
        └── first
            └── wpilibj
                ├── can
                ├── commands
                │   ├── command2
                │   ├── emptyclass
                │   ├── instantcommand
                │   ├── parallelcommandgroup
                │   ├── paralleldeadlinegroup
                │   ├── parallelracegroup
                │   ├── sequentialcommandgroup
                │   └── subsystem2
                ├── counter
                ├── drive
                ├── event
                ├── fixtures
                ├── internal
                ├── livewindow
                ├── mockhardware
                ├── motorcontrol
                ├── romi
                ├── shuffleboard
                ├── simulation
                ├── smartdashboard
                ├── sysid
                ├── templates
                │   ├── commandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── commandbasedskeleton
                │   ├── educational
                │   ├── robotbaseskeleton
                │   ├── romicommandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── romieducational
                │   ├── romitimed
                │   ├── timed
                │   ├── timedskeleton
                │   ├── timeslice
                │   ├── timesliceskeleton
                │   ├── xrpcommandbased
                │   │   ├── commands
                │   │   └── subsystems
                │   ├── xrpeducational
                │   └── xrptimed
                ├── test
                ├── util
                └── xrp
#+end_example
**** Misc

#+begin_src sh
 find . -type d -wholename '*src/main/java/edu/wpi*' -print \
     | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
     | grep -v examples | grep -v '/wpilibj/' \
     | tree --fromfile .
#+end_src

#+RESULTS
#+begin_example
.
└── edu
    └── wpi
        └── first
            ├── apriltag
            │   └── jni
            ├── cameraserver
            ├── cscore
            │   └── raw
            ├── epilogue
            │   ├── logging
            │   │   └── errors
            │   └── processor
            ├── fields
            ├── hal
            │   ├── can
            │   ├── communication
            │   ├── simulation
            │   └── util
            ├── math
            │   ├── controller
            │   │   ├── proto
            │   │   └── struct
            │   ├── estimator
            │   ├── filter
            │   ├── geometry
            │   │   ├── proto
            │   │   └── struct
            │   ├── interpolation
            │   ├── jni
            │   ├── kinematics
            │   │   ├── proto
            │   │   └── struct
            │   ├── optimization
            │   ├── path
            │   ├── proto
            │   ├── spline
            │   │   ├── proto
            │   │   └── struct
            │   ├── struct
            │   ├── system
            │   │   ├── plant
            │   │   │   ├── proto
            │   │   │   └── struct
            │   │   ├── proto
            │   │   └── struct
            │   ├── trajectory
            │   │   ├── constraint
            │   │   └── proto
            │   └── util
            ├── net
            ├── networktables
            ├── units
            │   ├── collections
            │   └── mutable
            ├── util
            │   ├── cleanup
            │   ├── concurrent
            │   ├── datalog
            │   ├── function
            │   ├── protobuf
            │   ├── sendable
            │   └── struct
            │       └── parser
            ├── vision
            ├── wpilibj
            └── wpilibj2
                └── command
                    ├── button
                    └── sysid
#+end_example

**** Examples

#+begin_src sh
find . -type d -wholename '*src/main/java/edu/wpi*' -print \
    | sed -e 's/.*src\/main\/java\/edu\/wpi/edu\/wpi/g' \
    | grep examples \
    | tree --fromfile .
#+end_src

#+begin_example
└── edu
    └── wpi
        └── first
            └── wpilibj
                └── examples
                    ├── addressableled
                    ├── apriltagsvision
                    ├── arcadedrive
                    ├── arcadedrivexboxcontroller
                    ├── armsimulation
                    │   └── subsystems
                    ├── canpdp
                    ├── differentialdrivebot
                    ├── differentialdriveposeestimator
                    ├── digitalcommunication
                    ├── dma
                    ├── drivedistanceoffboard
                    │   └── subsystems
                    ├── dutycycleencoder
                    ├── dutycycleinput
                    ├── elevatorexponentialprofile
                    ├── elevatorexponentialsimulation
                    │   └── subsystems
                    ├── elevatorprofiledpid
                    ├── elevatorsimulation
                    │   └── subsystems
                    ├── elevatortrapezoidprofile
                    ├── encoder
                    ├── eventloop
                    ├── flywheelbangbangcontroller
                    ├── gettingstarted
                    ├── gyro
                    ├── gyromecanum
                    ├── hatchbotinlined
                    │   ├── commands
                    │   └── subsystems
                    ├── hatchbottraditional
                    │   ├── commands
                    │   └── subsystems
                    ├── hidrumble
                    ├── httpcamera
                    ├── i2ccommunication
                    ├── intermediatevision
                    ├── mecanumbot
                    ├── mecanumcontrollercommand
                    │   └── subsystems
                    ├── mecanumdrive
                    ├── mecanumdriveposeestimator
                    ├── mechanism2d
                    ├── motorcontrol
                    ├── potentiometerpid
                    ├── quickvision
                    ├── rapidreactcommandbot
                    │   └── subsystems
                    ├── relay
                    ├── romireference
                    │   ├── commands
                    │   └── subsystems
                    ├── selectcommand
                    ├── shuffleboard
                    ├── simpledifferentialdrivesimulation
                    ├── solenoid
                    ├── statespacearm
                    ├── statespaceelevator
                    ├── statespaceflywheel
                    ├── statespaceflywheelsysid
                    ├── swervebot
                    ├── swervecontrollercommand
                    │   └── subsystems
                    ├── swervedriveposeestimator
                    ├── sysidroutine
                    │   └── subsystems
                    ├── tankdrive
                    ├── tankdrivexboxcontroller
                    ├── ultrasonic
                    ├── ultrasonicpid
                    ├── unittest
                    │   └── subsystems
                    └── xrpreference
                        ├── commands
                        └── subsystems
#+end_example
** Java Package Structure (UML)

**** Get package names

Modified to +ensure the =class= lines have open & closed braces+ remove the class lines

#+name: wpilibPuml
#+begin_src emacs-lisp
"img/frc/package-dependencies.puml"
#+end_src

#+name: wpilibPkgs
#+begin_src sh :results output table :var puml=wpilibPuml
cat $puml | grep edu.wpi.first | grep -v class \
    | sed -E "s/ +--> +/\n/g" | tr -d ' ' \
    | grep edu.wpi.first | sort | uniq
#+end_src

#+RESULTS: wpilibPkgs
| edu.wpi.first.apriltag                   |
| edu.wpi.first.apriltag.jni               |
| edu.wpi.first.cameraserver               |
| edu.wpi.first.cscore                     |
| edu.wpi.first.cscore.raw                 |
| edu.wpi.first.epilogue                   |
| edu.wpi.first.epilogue.logging           |
| edu.wpi.first.epilogue.logging.errors    |
| edu.wpi.first.hal                        |
| edu.wpi.first.hal.can                    |
| edu.wpi.first.hal.simulation             |
| edu.wpi.first.hal.util                   |
| edu.wpi.first.math                       |
| edu.wpi.first.math.controller            |
| edu.wpi.first.math.controller.proto      |
| edu.wpi.first.math.controller.struct     |
| edu.wpi.first.math.estimator             |
| edu.wpi.first.math.filter                |
| edu.wpi.first.math.geometry              |
| edu.wpi.first.math.geometry.proto        |
| edu.wpi.first.math.geometry.struct       |
| edu.wpi.first.math.interpolation         |
| edu.wpi.first.math.kinematics            |
| edu.wpi.first.math.kinematics.proto      |
| edu.wpi.first.math.kinematics.struct     |
| edu.wpi.first.math.numbers               |
| edu.wpi.first.math.path                  |
| edu.wpi.first.math.proto                 |
| edu.wpi.first.math.spline                |
| edu.wpi.first.math.spline.proto          |
| edu.wpi.first.math.spline.struct         |
| edu.wpi.first.math.struct                |
| edu.wpi.first.math.system                |
| edu.wpi.first.math.system.plant          |
| edu.wpi.first.math.system.plant.proto    |
| edu.wpi.first.math.system.plant.struct   |
| edu.wpi.first.math.system.proto          |
| edu.wpi.first.math.system.struct         |
| edu.wpi.first.math.trajectory            |
| edu.wpi.first.math.trajectory.constraint |
| edu.wpi.first.math.trajectory.proto      |
| edu.wpi.first.networktables              |
| edu.wpi.first.units                      |
| edu.wpi.first.units.collections          |
| edu.wpi.first.units.measure              |
| edu.wpi.first.units.mutable              |
| edu.wpi.first.util                       |
| edu.wpi.first.util.concurrent            |
| edu.wpi.first.util.datalog               |
| edu.wpi.first.util.function              |
| edu.wpi.first.util.protobuf              |
| edu.wpi.first.util.sendable              |
| edu.wpi.first.util.struct                |
| edu.wpi.first.vision                     |
| edu.wpi.first.wpilibj                    |
| edu.wpi.first.wpilibj2.command           |
| edu.wpi.first.wpilibj2.command.button    |
| edu.wpi.first.wpilibj2.command.sysid     |
| edu.wpi.first.wpilibj.counter            |
| edu.wpi.first.wpilibj.drive              |
| edu.wpi.first.wpilibj.event              |
| edu.wpi.first.wpilibj.livewindow         |
| edu.wpi.first.wpilibj.motorcontrol       |
| edu.wpi.first.wpilibj.romi               |
| edu.wpi.first.wpilibj.shuffleboard       |
| edu.wpi.first.wpilibj.simulation         |
| edu.wpi.first.wpilibj.smartdashboard     |
| edu.wpi.first.wpilibj.sysid              |
| edu.wpi.first.wpilibj.util               |
| edu.wpi.first.wpilibj.xrp                |

#+name: wpilibPkgsTop
#+begin_src sh :results output table :var puml=wpilibPuml pkgs=wpilibPkgs
echo ${pkgs[@]} | tr ' ' '\n' |
    sed -E 's/(\w+\.\w+\.\w+\.\w+)\..+/\1/g' | sort | uniq
#+end_src

#+RESULTS: wpilibPkgsTop
| edu.wpi.first.apriltag      |
| edu.wpi.first.cameraserver  |
| edu.wpi.first.cscore        |
| edu.wpi.first.epilogue      |
| edu.wpi.first.hal           |
| edu.wpi.first.math          |
| edu.wpi.first.networktables |
| edu.wpi.first.units         |
| edu.wpi.first.util          |
| edu.wpi.first.vision        |
| edu.wpi.first.wpilibj       |
| edu.wpi.first.wpilibj2      |

**** Filter the graph

... really requires awk.

it needs at least one class or it renders as a Seq diagram instead of Class.

#+begin_src sh :results output verbatim raw :var puml=wpilibPuml pkgs=wpilibPkgsTop
for pkg in ${pkgs[@]}; do
  f=img/frc/pkguml/$pkg.puml
  cat > $f <<EOF
@startuml
    !pragma layout smetana
    skinparam backgroundcolor transparent
    set namespaceSeparator none
    hide circle
    hide empty fields
    hide empty methods
EOF
  grep -e $pkg $puml >> $f
  echo @enduml >> $f
  plantuml -tsvg $f

  echo "$(basename $f)"
  echo
  echo "[[file:$(dirname $f)/$(basename $f .puml).svg]]"
  echo
done
#+end_src

#+RESULTS:
edu.wpi.first.apriltag.puml

[[file:img/frc/pkguml/edu.wpi.first.apriltag.svg]]

edu.wpi.first.cameraserver.puml

[[file:img/frc/pkguml/edu.wpi.first.cameraserver.svg]]

edu.wpi.first.cscore.puml

[[file:img/frc/pkguml/edu.wpi.first.cscore.svg]]

edu.wpi.first.epilogue.puml

[[file:img/frc/pkguml/edu.wpi.first.epilogue.svg]]

edu.wpi.first.hal.puml

[[file:img/frc/pkguml/edu.wpi.first.hal.svg]]

edu.wpi.first.math.puml

[[file:img/frc/pkguml/edu.wpi.first.math.svg]]

edu.wpi.first.networktables.puml

[[file:img/frc/pkguml/edu.wpi.first.networktables.svg]]

edu.wpi.first.units.puml

[[file:img/frc/pkguml/edu.wpi.first.units.svg]]

edu.wpi.first.util.puml

[[file:img/frc/pkguml/edu.wpi.first.util.svg]]

edu.wpi.first.vision.puml

[[file:img/frc/pkguml/edu.wpi.first.vision.svg]]

edu.wpi.first.wpilibj.puml

[[file:img/frc/pkguml/edu.wpi.first.wpilibj.svg]]

edu.wpi.first.wpilibj2.puml

[[file:img/frc/pkguml/edu.wpi.first.wpilibj2.svg]]



** HTML/CSS :noexport:

Deleted some stuff

#+begin_src css
pre {
    padding: 0;
    margin: 0.2em;
    font-size: 8px;
}

h3,h4 {
  margin: 0.2em;
  padding: 0;
}

@media print {
  .outline-4 {
    break-inside: avoid;
  }
}
#+end_src
* Robot Builder

I've been looking for info on Java reflection, particularly for code generation,
whether =*.puml= or =*.java=. I had come across this earlier, but I guess I forgot
(I couldn't really run it on my laptop in 2024)

+ Swing app, can generate Java, C++, and Wiring Diagram
+ Uses velocity templates =*.vm= supplied with config in =*.yaml= files
  - field types/values/mappings defined in [[https://github.com/wpilibsuite/RobotBuilder/blob/e9d848f6a5f8767b486f6e81d241a6efa2384f71/src/main/resources/PaletteDescription.yaml#L95][./src/main/resources/PaletteDescription.yaml]]
+ robotbuilder.RobotBuilder :: Main class, no CLI args
+ Comments in code mark locations where RobotBuilder should update logic (where
  possible, until the comments are removed). Pretty nice.

Ideas (probably not useful)

+ Transform =*.vm== into Yasnippet/VSCode snippets? (they're nested with specific api)
+ Extract useful data after saving RobotBuilder state to YAML?
  - oof. macros in the yaml like ansible. better to add new =*.yaml.vm= templates.
    - or just extract class-specific content from =*.puml=
    - or by modifying the generated tests to output fields

** Robot Builder 2

Same thing with a few more abstractions, but slightly less support for hardware
so far.

+ Typescript/React/Electron. Long ts f-strings that look like Guix G-Expressions.
+ Not bundled with WPILib VSCode, so probably not ready for primetime. Not clear
  how to save/import/export (no yaml/json)
+ Supports new Epilogue logger
+ Generates subsystems with state-machines (nice)
+ Includes an intermediate representation

** Caveats

Generators are great, as long as you have the intuition/foresight to use them.

+ Need to know when to "cutover" from generated code to working in an IDE.
  - Should also be very comfortable throwing code away (it should be easy to rip
    out; loosely coupled). This is more difficult unless you know the
    language/framework/generators pretty well.
+ IMO great to use RobotBuilder as a group to brainstorm or off-season
  - Great for exploring the intended programming interfaces & the validations
    help you learn intended design constraints.
  - It clarifies the fields required for basic sensors, motors, controllers,
    subsystems; less likely to fat-finger constants early on.
+ Being able to generate single-file templates (or snippets) would be helpful.
  - But here, there's quite a bit of coupling (references between subsystems,
    from container to components, provided/calculated values, etc)..
  - means the snippets would require either: shared configuration or a large
    number of variables being entered whenever the snippet's used
  - ... robotics is a bit hard & verbose. (see HAL)

*** VCS & Managing Generated Code

+ Using VCS as early as possible makes it more clear what's being changed (a
  learning opportunity sometimes; what I did with the WPILib 2025 migration
  tool)
  - For this to be useful, you need to know =git stash= and =git stash pop= ...
  - W/o being adjusted to staging git hunks/lines, this will seem cumbersome.
  - Here, seeing the diffs is not useful when the changesets are large ... on
    the second/third attempt, it may be very useful (though half the lines
    added/removed will be imports.)
  - Need to disable the IDE's auto-linting... otherwise your =git diff= is
    garbled. This shouldn't affect RobotBuilder v1 (uses regexp for Java/C++
    comment parsing), but only the files you open will be formatted (without
    a =git hook=)
+ It's always possible to maintain a second source tree to copy over from, but
  prone to errors.
  - Using the editor's auto-imports will help (but this is sometimes/usually
    part of the language's linter)
+ Can also push to private repo, then designate one local checkout for
  RobotBuilder changes and another checkout for IDE changes/testing (separate
  laptop).
  - Requires each driver/navigator pair can anticipate on how changes elsewhere
    will need to be +merged+ rebased in from =git=
  - Ensure everyone sets [[https://git-scm.com/book/en/v2/Git-Tools-Rerere][git config --global rerere.enabled true]]
    - I don't see merge conflicts. (What are the consequences/drawbacks? idk)

Using the XRP to teach java early on will help a ton, I think.

*** Traps

+ Generated code usually has loose coupling (easy to add/remove), but creates
  flat abstraction patterns that still shape how you think (esp. early on;
  similar to cargo culting).
  - Need to be able to step back and quickly compare against alternative designs
  - Corollary: tight coupling in generated code creates interdependencies that
    make code inflexible. Unlikely to be caused by the generators, but instead
    by the code edited thereafter.
  - Generator logic also mirrors the abstractions seen in the framework not the
    domain (somewhat backwards, but it depends on the type of programming you're
    doing... if the domain abstractions matter, your project is likely bigger &
    more complex anyways)
+ Generators should impress the idea =composition >> extension= (i.e. interfaces
  over inheritance, usually) or at least someone with experience should help
  frame/articulate this

* Docker

Use =wpilib/ubuntu-base:{22,24}.04= for most tasks, except those requiring
cross-compilation.

** Gradle in Docker

#+begin_example yaml
---
version: "3.8"
services:
  wpilib:
    image: wpilib/ubuntu-base:24.04
    user: "1000:1000"
    tty: true
    working_dir: /home/ubuntu/src/wpilibsuite/allwpilib
    volumes:
      - type: bind
        source: /data/ecto/frc/wpilibsuite
        target: /home/ubuntu/src/wpilibsuite
#+end_example

Run =docker compose up= then get a shell, run =bash= for indoor plumbing. Move into
=~/src/wpilibsuite/allwpilib= and run =./gradlew=. It will install gradle from a
remote source.

Now run =./gradlew tasks=. it does a bunch of things (in parallel), including:

- constructing build & config caches
- discovering projects, where =allwpilib= is the root project



** Build WPI Docs

Run =./gradlew javadoc= or  =./gradlew javadoc --rerun= to regen

*** Add [[https://github.com/talsma-ict/umldoclet/blob/main/usage.md][talsma-ict/umldoclet]]

+ [[https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html][Gradle Docs on javadoc]]

Tried this, but I'm not even sure that the dependency gets downloaded. simply
adding the configuration into =generateJavaDocs(type: Javadoc)= doesn't work.

Using the [[https://github.com/talsma-ict/umldoclet/blob/main/usage.md#commandline][CLI method]] with raw =javadoc= commands would be simpler, at first.
However, it requires extracting =classpath= and a few other pieces of from
gradle's run context.

**** Solution: Invoke =docs:generateJavaDocsML= from the =docs:= task namespace

Add the following patch. Then run with =./gradlew docs:generateJavaDocsUML
--rerun=. You'll want to enable/disable the =sources= as needed (i'm surprised it
even works)

+ This will generate a second =javadocs= build target that contains the svg's.
+ Run =find . -name '*.svg'= to find them. There are almost no other SVGs in the
  project.
+ You can save the PUML files (when running the [[https://github.com/talsma-ict/umldoclet/pull/269][javadoc plugin in verbose]])
  - =options.addBooleanOption "createPumlFiles", true=

#+begin_src diff
diff --git a/docs/build.gradle b/docs/build.gradle
index 43d150f0e3..9b18dd7e01 100644
--- a/docs/build.gradle
+++ b/docs/build.gradle
@@ -177,13 +177,20 @@ tasks.register("zipCppDocs", Zip) {
     into '/'
 }

+apply plugin: 'java'
+
 // Java
 configurations {
+    umlDoclet
     javaSource {
         transitive false
     }
 }

+dependencies {
+    umlDoclet "nl.talsmasoftware:umldoclet:2.2.1"
+}
+
 task generateJavaDocs(type: Javadoc) {
     classpath += project(":wpilibj").sourceSets.main.compileClasspath
     options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
@@ -247,6 +254,31 @@ task generateJavaDocs(type: Javadoc) {
     }
 }

+// shows up as docs:generateJavaDocsUML
+task generateJavaDocsUML(type: Javadoc) {
+    classpath += project(":wpilibj").sourceSets.main.compileClasspath
+
+    options.docletpath = configurations.umlDoclet.files.asType(List)
+    options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
+    // options.addStringOption "failOnCyclicPackageDependencies", "true"
+
+    dependsOn project(':wpilibj').generateJavaVersion
+    // source project(':apriltag').sourceSets.main.java
+    // source project(':cameraserver').sourceSets.main.java
+    // source project(':cscore').sourceSets.main.java
+    // source project(':epilogue-runtime').sourceSets.main.java
+    // source project(':hal').sourceSets.main.java
+    // source project(':ntcore').sourceSets.main.java
+    // source project(':wpilibNewCommands').sourceSets.main.java
+    source project(':wpilibj').sourceSets.main.java
+    // source project(':wpimath').sourceSets.main.java
+    // source project(':wpinet').sourceSets.main.java
+    // source project(':wpiunits').sourceSets.main.java
+    // source project(':wpiutil').sourceSets.main.java
+    // source project(':romiVendordep').sourceSets.main.java
+    // source project(':xrpVendordep').sourceSets.main.java
+}
+
 tasks.register("zipJavaDocs", Zip) {
     archiveBaseName = zipBaseNameJava
     destinationDirectory = outputsFolder

#+end_src

** Containers

In 2025, containers are built from Ubuntu 22.04

See [[https://github.com/wpilibsuite/docker-images/blob/main/Makefile#L58-84][Makefile in wpilibsuite/docker-images]]
** GH Actions

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
# most of their repos have .github directories
find . -type d -wholename "*.github/workflows" -print #| tree -a --fromfile .
# grep -e matrix $(find . -wholename '*.github*' -name "*.yml")
#+end_src

These images are used to build

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
find . -type d -name ".github" -exec grep -nrE '(image|container): ' \{\} + \
    | grep -v "\"\"" | grep -v "{{" | sed -E 's/.*: //g' | tr -d '"' | tr -d ',' \
    | sort | uniq

# sed -E 's/.*[0-9]+: +//g' | sed -e 's/: '
# find . -type d -name ".github" -exec grep -nrE 'docker.io' \{\} +
# find . -type d -name ".github" -exec grep -nrE '(image|container): ' \{\} +
#+end_src

#+RESULTS:
#+begin_src grep
docker.io/wpilib/opensdk-ubuntu:20.04
ubuntu:20.04
ubuntu:22.04
wpilib/aarch64-cross-ubuntu:bookworm-22.04
wpilib/aarch64-cross-ubuntu:bullseye-22.04
wpilib/raspbian-cross-ubuntu:bookworm-22.04
wpilib/raspbian-cross-ubuntu:bullseye-22.04
wpilib/roborio-cross-ubuntu:2024-22.04
wpilib/roborio-cross-ubuntu:2025-22.04
wpilib/roborio-cross-ubuntu:2025-24.04
wpilib/systemcore-cross-ubuntu:2025-22.04
wpilib/systemcore-cross-ubuntu:2025-24.04
wpilib/ubuntu-base:22.04
wpilib/ubuntu-base:24.04
#+end_src

** Dockerfiles

Dockerfiles

#+begin_src sh :results output code :wrap src grep :dir /data/ecto/frc/wpilibsuite
find . -name '*Dockerfile*' | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_src grep
.
└── .
    ├── Axon
    │   ├── containers
    │   │   └── mobilenet
    │   │       ├── base
    │   │       │   └── Dockerfile
    │   │       ├── dataset
    │   │       │   └── Dockerfile
    │   │       ├── metrics
    │   │       │   └── Dockerfile
    │   │       ├── test
    │   │       │   └── Dockerfile
    │   │       ├── tflite
    │   │       │   └── Dockerfile
    │   │       └── training
    │   │           └── Dockerfile
    │   └── Dockerfile
    ├── DetectCoral
    │   └── mobilenet
    │       ├── base
    │       │   └── Dockerfile
    │       ├── dataset
    │       │   └── Dockerfile
    │       ├── metrics
    │       │   └── Dockerfile
    │       ├── test
    │       │   └── Dockerfile
    │       ├── tflite
    │       │   └── Dockerfile
    │       └── training
    │           └── Dockerfile
    ├── docker-images
    │   ├── aarch64-cross-ubuntu
    │   │   └── Dockerfile.bookworm
    │   ├── cross-ubuntu-py
    │   │   ├── Dockerfile.py311
    │   │   ├── Dockerfile.py312
    │   │   └── Dockerfile.py313
    │   ├── debian-base
    │   │   └── Dockerfile.bookworm
    │   ├── gazebo-ubuntu
    │   │   └── Dockerfile
    │   ├── opensdk
    │   │   └── ubuntu
    │   │       └── Dockerfile
    │   ├── raspbian-cross-ubuntu
    │   │   └── Dockerfile.bookworm
    │   ├── roborio-cross-ubuntu
    │   │   └── Dockerfile.2025
    │   ├── systemcore-cross-ubuntu
    │   │   └── Dockerfile.2025
    │   ├── ubuntu-base
    │   │   ├── Dockerfile.22.04
    │   │   └── Dockerfile.24.04
    │   └── ubuntu-minimal-base
    │       ├── Dockerfile.22.04
    │       └── Dockerfile.24.04
    ├── opencv
    │   └── modules
    │       ├── highgui
    │       │   └── misc
    │       │       └── plugins
    │       │           └── plugin_gtk
    │       │               ├── Dockerfile-ubuntu-gtk2
    │       │               └── Dockerfile-ubuntu-gtk3
    │       └── videoio
    │           └── misc
    │               ├── plugin_ffmpeg
    │               │   ├── Dockerfile-ffmpeg
    │               │   └── Dockerfile-ubuntu
    │               └── plugin_gstreamer
    │                   └── Dockerfile
    └── WPILibPi
        ├── azure-docker
        │   └── Dockerfile
        └── Dockerfile

43 directories, 34 files
#+end_src


* Platform Issues
** VM

** Docker

*** Steam Container

The nonguix "Steam Container" provides a good map for customizations to =/dev= for
devices, etc that are required to fully encapsulate a runtime that spawns
subordinate processes

- Steam pressure vessel functions and steam launches wrapped processes, partly
  because it needs to do so within a WINE "pseudo-container" while also spawning
  processes for games with Linux builds)

** Guix

To some extent, it should be possible to build an FHS Guix container that
addresses these, but that's just a risky prospect.

+ gradlew not available: difficulties packaging kotlin =>1.0.0=, only available in
  the =guix-android= channel.
+ vscode proprietary extensions required for functionality
+ JNI used deeply thoughout applications and must be linked/referenced
  throughout with pinned versions
  - i.e. if build scripts, in wpilib or in external deps don't expose config
    options or otherwise produce artifacts with incorrect =rpath=, etc, then
    artifacts will partially function, leading to very difficult debugging.
  - binaries produced will not be portable
  - there's a hard requirement on Ubuntu already (for wpilib), which leads me to
    suspect that some paths/configs are not exposed in config or are tedious to
    setup/support
