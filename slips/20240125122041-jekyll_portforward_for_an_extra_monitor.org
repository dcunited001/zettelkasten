:PROPERTIES:
:ID:       93eda366-8ab5-4500-b193-2352b23bd832
:END:
#+TITLE: Jekyll: portforward for an extra monitor
#+CATEGORY: slips
#+TAGS:


#+begin_src emacs-lisp :eval never
(setq-local dc/org-tangle-root "")
#+end_src

* Chrome Flags on Guix


On Guix to get the =VisBug= extension, I needed to =flatpak --user install
com.google.Chrome= which doesn't allow passing =--chrome-flags=.

+ To do so in flatpak, you have to edit the chrome flags file in: =$(flatpak
  --installations | head -n1)/../../.var=, which isn't so flexible.
+ These flags are is necessary to get an isolated profile, which is useful for
  other things (like safely exchanging HAR files without a microscope). I used
  to complain all the time about how they "killed the site-specific browser"
  ... but no one bothered to tell me about making individual profiles.
+ Otherwise, the visbug extension is unavailable in Guix chromium -- while it is
  available on arch chromium. i'm not sure which extension is equivalent to this
  in Firefox, though I suspect there's a hotkey that basically does the same
  thing (it used to be FireBug ... whence VisBug)

* SSH Reverse Port Forwarding Script

This script may change, but I don't plan on keeping this up to date. It's just
hard to manage all my windows (or emacs frames), so having the laptop be
completely dedicated to browser debugging is great.

** Quick getopts

Emacs =sh-mode= includes =sh-while-getopts= which is super handy and bound to
=C-c C-o= ... o for opts

#+headers: :tangle-mode (identity #o744) :mkdirp yes
#+begin_src sh :tangle (expand-file-name ".bin/jtunnel" dc/org-tangle-root)
#!/bin/bash

_env_file=$(pwd)/.env
while getopts :p:P:e:f OPT; do
    case $OPT in
        p|+p)
            _webp="$OPTARG"
            ;;
        P|+P)
            _livep="$OPTARG"
            ;;
        e|+e)
            _env_file="$OPTARG"
            ;;
        f|+f)
            _ssh_fg=1
            ;;
        *)
            echo "usage: ${0##*/} [+-e ARG] [+-f ARG] [+-p ARG] [+-P ARG] [--] ARGS..."
            exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

[[ ! -f $_env_file ]] && echo "-e .env file does not exist" && exit 1

[[ $# -eq 0 ]] && echo "requires host arg" && exit 1
RHOST=$1
shift 1
#+end_src

** Define the port mappings

#+begin_src sh :tangle (expand-file-name ".bin/jtunnel" dc/org-tangle-root)
# cat $_env_file
# echo $_JEKYLL_PORT

# read the .env file
source $_env_file

# wrap port-mapping in a monoid (in case we don't have a full port-mapping)
[[ -z "$_JEKYLL_PORT" ]] && _JEKYLL_PORT=4000
[[ -z "$_JEKYLL_LIVE_RELOAD_PORT" ]] && _JEKYLL_LIVE_RELOAD_PORT=35729
[[ -z "$_webp" ]] && _webp=$_JEKYLL_PORT
[[ -z "$_livep" ]] && _livep=$_JEKYLL_LIVE_RELOAD_PORT

LHOST=127.0.0.1
_jekyll_port_remap="-R $LHOST:$_webp:$LHOST:$_JEKYLL_PORT"
_jekyll_live_remap="-R $LHOST:$_livep:$LHOST:$_JEKYLL_LIVE_RELOAD_PORT"

# echo $_jekyll_port_remap
# echo $_jekyll_live_remap
#+end_src

**** Alternative port mappings

NOTE: below assumed I wanted the remote/local ports to have an offset, so it's
not tangled here.

+ the livereload port was based off the jekyll web port, but this requires
  updating things in the .env file and elsewhere
+ instead, I would just like to assume that the .env file is the source of truth
  and map remote/local ports 1-to-1 with that
+ passing -p/-P can still override this
+ when jekyll uses absolute_url, the port-mappings break down, so the remote
  port really needs to be the same

#+begin_example sh
# web: (4000 + n) => (40000) (web)
# livereload: (4000 + n) => (44000 + n) (live)
[[ -z "$_webp" ]] && _webp="$((_JEKYLL_PORT+36000))"
[[ -z "$_livep" ]] && _livep="$((_JEKYLL_PORT+40000))"
echo "_JEKYLL_PORT: $_JEKYLL_PORT"
echo "_JEKYLL_LIVE_RELOAD_PORT: $_JEKYLL_LIVE_RELOAD_PORT"
#+end_example

*** Start the tunnel

pass =-f= to the script to keep the tunnel in foreground

#+begin_src sh :tangle (expand-file-name ".bin/jtunnel" dc/org-tangle-root)
_ssh_opts="-N"
[[ -z "$_ssh_fg" ]] && _ssh_opts="-fN"

ssh $_ssh_opts $_jekyll_port_remap \
    $_jekyll_live_remap \
    $RHOST

# TODO: this $! doesn't %work,so it's still a bit hard to kill the ssh tunnel
# without passing -f to foreground. if -f is passed, this won't execute.

_ssh_pid="$!"
echo "PID: $_ssh_pid"
if [[ $? -eq 0 ]]; then
    echo SSH started successfully
fi
#+end_src

* Roam
+ [[id:f913598b-a449-48bc-a010-f2c01e2c28ef][Jekyll]]
+ [[id:1fd23f33-ec84-47e2-b326-dce568f1ae83][Web Design]]
+ [[id:38638b3e-e023-460e-9670-84776e61468e][Browser]]
