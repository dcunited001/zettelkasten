:PROPERTIES:
:ID:       e762af95-9077-4c41-95be-4eb4dc2f06bd
:END:
#+TITLE: Crypto: GPG Agent and pinentry-tty
#+CATEGORY: slips
#+TAGS:

I would strongly recommend avoiding =pinentry-tty= or =pinentry-curses= where
possible. That such friction would occur was obvious, but I thought I understood
more about how things interacted, like =ttyname= and =$(tty)=, such that it
would work as expected.

AFAIK (now), the input redirection (and "grabbing") is sufficient on
pinentry to hopefully avoid keyloggers. This might be the point of the
=pinentry= program entirely... and perhaps uses the assuan protocol for IPC in
additon to a few other pieces to accomplish such.

* Should I just trust X11?

I learned a lot, but would have progressed a bit faster with feedback.  I just
don't trust things unless I understand a sufficient amount of the system, but
whether I care depends on the level of trust I am placing in something. Since
GnuPG is a kind of "trust bottleneck" it seemed worthwhile to go the extra miles
to avoid this, esp given that my workflow often involves using VTY's almost as
alternative desktops via =screen= or =emacs-client -nw=.

* kmscon, workflows for IPC, etc.

Much of this would be easier with =kmscon= (easier keybinding and multimonitor
handling) or if =loadkeys= was a bit easier to grok ... but no, we can't have
nice things like =kmscon= or =guix= if they aren't unix porn. It's amazing to me
the kind of things which aren't well explored because they are exactly the kinds
of things seem like possibilities to IQ 130+ users that often justify (in your
head) what differentiates possibilities in Linux from possibilities in
proprietary operating systems that enforce a narrow range of Window Manager
possibilities, only stealing from Linux/i3 at the very last minute (I'm looking
at you windows). The range of functionality/customization that's reasonably
available to users should not be so constrained by enforcing 99% of desktops to
running window managers that Bill Lumburgh feels are marketable to +95% of
people.

** Completely unexplored UI/UX workflows

I'm sorry, there are much better UI/UX workflows that are basically completely
unexplored. I've analyzed a shit-ton of dotfiles. Most do not contain nearly
enough notification/dmenu scripts or window title/class tagging or hotkey
configurations or emacs frame/window mgmt besides the very basics... even iterm2
profiles have amazing possibilities (though not exactly compatible with other
dotfiles/environment management). i guess the people who use them only work at
apple or something...

** "Hacker" Aesthetic

then in movies and on screens in youtube, there's always
those tmux or GNU screen overlays with:

+ the matrix
+ top with queries for IPC tracking or file watchers
+ spooky text spontaneously plunking lines on a tiled grid of terminals

That's for:

+ Reacting to network signals in real time
+ or for managing debugging for IPC development
+ serial streams to i2c
+ managing state or process invocation of debugging sessions using =gdb=
+ teeing log streams to grep for events (iterm2 basically does this with an API
  for event handling)
+ launching/troubleshooting service managers ... other than systemd
+ visibility on sockets/services instantiated by other scripts
+ debugging the socket/stream interactions for your =pscsd=, =scdaemon= and
  maybe =ccid= using =pcsc-spy= or such tools.

But you never /really/ see anyone do this. Or hear anyone discuss how doing this
work without confining yourself to a single context of work or single
application. The problem with doing this on traditional window managers is that
if something fucks up your computer, you have to click 10,000 to repeat restore
application configurations that you accumulated over years. You also can't:

+ easily template values in the registry (without being a microsoft guy)
+ or template multiple installations of apple applications (along with their
  =<plist>= configs ... without paying for your iOS developer license and doing
  this with XCode)
+ or diff config files to demonstrate what settings are changed. ever diff two
  screenshots in a microsoft textbook? exactly.

You cannot rapidly adapt/share configurations or even really talk about them if
they are not plain text.

This is hard, yes. It appeals to maybe 5% of computer users: stock brokers,
programmers, hackers, data scientists, etc ... but we are the productive ones
(or at least we should be... lmao). Why the fuck should we have to suffer such a
loss of network effects in facilitating exchange of information related to
productively using a computer, simply because it's not marketable to 95% of
customers who I guess have money (though I'm not sure why).

Where's that aesthetic come from if there's no footprint on Github?  ... yeh,
well besides being normal in the 1980's, I guess some hollywood director or
cyberpunk auteur saw some guy one time and thought the aesthetic was cool. It's
not simply a superficial aesthetic ... it's fucking functional and
task-oriented. However, without =kmscon= you basically _can not_ get these
"hacker aesthetic" workflows to run on multiple displays. In other words ... it
doesn't exist in any practical form in reality -- in a console, a terminal is
another thing ... but again, i guess /in theory/ there are people who use the
event-driven workflows that iterm2 features enable, but where are they? Does
anyone even know how useful this is if you can do it quickly? And it really
shouldn't be so difficult to create these profiles. with screen/tmux it's
not. for example, screen is a superset of bash basically.

If you aren't familiar with launching X11 from terminal then you probably
shouldn't be using things like i3 or wayland.  Regardless, being comfortable in
the console is /extremely valuable/ when you need it, though you can get by
without it. There are gotchas if you don't have enough experience and you begin
integrating it into your workflow: e.g. screenlocking is a bit of a problem.

</rant>

* Roam
+ [[id:c2afa949-0d1c-4703-b69c-02ffa854d4f4][Cryptography]]
+ [[id:f92bb944-0269-47d4-b07c-2bd683e936f2][Wayland]]
+ [[id:e2acb6f6-8279-4500-b423-659ce89ecbb0][kmscon]]
+ [[id:7c990485-430a-467a-bc6b-ed2fdd7dc4dc][Terminal]]
