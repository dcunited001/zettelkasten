:PROPERTIES:
:ID:       7e6d74bb-4042-4d14-88b2-f901a7e9708a
:END:
#+TITLE: Cloud: Comparing AWS and GCP
#+CATEGORY: slips
#+TAGS:

* Docs

* Resources
** AWS

+ [[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html][AWS Organizations: Terminology/Concepts]]
+ [[https://tecflair.com/how-to-reduce-amazon-ec2-costs-part-1/][How to Reduce AWS Costs]]

*** IAM

+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html][IAM Identities (users, groups, roles)]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#rotate-credentials][Rotating access keys for IAM users requiring long-term credentials]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html][Getting Started]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html][Security Best Practices]]
+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-ad.html][Connect to a Microsoft AD directory]] (don't if you can help it)

AD:

+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/attributemappingsconcept.html][Supported directory attributes]]
+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-users-groups-AD.html][Provision users/groups from AD]]

IdP:

+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-idp.html][Connect to an external IdP]]

*** Hybrid

SSM ([[https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html][systems manager]])

+ [[https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html][Setting up Systems Manager for hybrid and multicloud environments]]
+ [[https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-minimum-s3-permissions.html][SSM Agent communications with AWS managed S3 buckets]]: describes the buckes an
  SSM agent might need access to.

** GCP

+ [[https://cloud.google.com/iam/docs/understanding-roles][Predefined roles reference]]
+ [[https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy][Resource Hierarchy]]
+ [[https://cloud.google.com/resource-manager/docs/creating-managing-organization][Creating and managing organization resources]]

*** IAM

+ [[https://cloud.google.com/architecture/identity/overview-google-authentication][Overview of Google identity management]]
+ [[https://cloud.google.com/iam/docs/overview][IAM Overview]]
+ [[https://cloud.google.com/iam/docs/access-change-propagation][Access Change Propagation]]
+ GCP doesn't have ABAC, but does have [[https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials][Short-lived Credentials]],
  [[https://cloud.google.com/iam/docs/tags-access-control][tag-based access control]] and [[https://cloud.google.com/iam/docs/conditions-overview][IAM Conditions]] ([[https://www.reddit.com/r/googlecloud/comments/oasw5x/does_google_cloud_iam_have_abac/][source]])
+ [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#integrating_active_directory_and_google_cloud][AD Integration]] and [[https://cloud.google.com/architecture/identity/reference-architectures#active_directory_as_idp_and_authoritative_source][Active Directory as IdP and Authoritative Source]]

*** Hybrid

+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-patterns-and-practices][Patterns/practices]]
+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-architecture-patternshttps://cloud.google.com/architecture/hybrid-and-multi-cloud-architecture-patterns][Architecture]]
+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-network-topologies][Network topologies]]

Authentication

+ [[https://cloud.google.com/architecture/patterns-for-authenticating-corporate-users-in-a-hybrid-environment][Design Patterns]] for [[https://cloud.google.com/architecture/authenticating-corporate-users-in-a-hybrid-environment][Authenticating workforce users in a hybrid environment]]

* Comparison

** Pricing

** Concepts

*** Accounts

Both clouds are organized as DAG's, though GCP is more of a tree. Thus, these
data structures have all the benefits and problems that DAG's are subject
to. See multiple inheritance vs. other design patterns in programming/devops.
This also pops up in image management and docker multi-stage builds.

**** Correspondance

| Google Cloud     | AWS                                                       |
|------------------+-----------------------------------------------------------|
| Organization     | Organizational Root (OR)                                  |
| Folder           | Organizational Unit (OR)                                  |
| Project          | [Management or Member] Accounts                           |
| Resources        | [Shared] Resources                                        |
|------------------+-----------------------------------------------------------|
| n/a              | Service Control Policies (SCP)                            |
|------------------+-----------------------------------------------------------|
| Resource Manager | AWS Organizations, Control Tower, Resource Access Manager |
|                  |                                                           |

+ AWS, policies can be applied to users/groups/roles. In GCP, there are
  predefined roles, but thy are applied to users. Both are bundles of
  permissions.

**** Best practices

+ Your resource hierarchy should reflect your organization's structure.
+ Grant permissions/policies/roles according to least priviledge. Grants should
  start at the smallest scope.
+ In GCP, group projects along trust boundaries
+ In GCP, it's easier to add/remove users to groups than to update a policy.

**** In AWS

***** Basic Models

+ Accounts are organized under OU and OR
+ OR has_many OU
+ OU belongs_to OU (or OR)
+ Resources belong_to Account (whether it's a mgmt or member account)

All acounts and OU's can have exactly one parent.

***** Organizations

+ AWS Organization :: CRUD the OU's and apply SCP's
+ AWS Control Tower :: set up permissions/automation for account management
+ AWS Resource Access Manager :: share resources across accounts.

***** Accounts

+ There can only be one Management account per Organization. It's responsible
  for billing.


***** From the AWS Docs:

[[file:img/aws/aws-ou-diagram.png]]

**** In GCP

An organization is the top-level entity with sub/folders under it.

***** Sub/folders

These may categorize regions or business areas. Setting folders for each
business unit makes its personnel accountable for billing or approval of
access/resources.

+ strucuring this is difficult because you have to move/delete active resources
  before deleting subfolders.
+ Moving subfolders without thinking about policies above/below them will tend
  to cause great chaos engineering, esp if you're just a lowly team member who's
  not omniscient.
+ Like IP Addressing, you probably want the categorization to just be correct
  (or not awful) because it's realllly difficult to change later.

***** Roles

+ Organization Admin :: define IAM policies, set resource hierachy, assign IAM
  roles. Cannot perform some actions.
+ Project Creator :: create projects

***** Accounts

Super admins exist for Cloud Identity and Google Workspace.

+ Assign org admin role
+ point of contact
+ control lifecycle of super admin roles and the organization resource

***** Projects

+ ID's are immutable

*** Pricing

**** Billing

|                | AWS                                                      | GCP                                    |
|----------------+----------------------------------------------------------+----------------------------------------|
| Billed entity  | By account or a single per-org billing account           | many billing accounts per GCP account. |
| Rollup         | to the account (and org when using consolidated billing) | Rollup by project.                     |
| policies       | only to IAM principles; not heritable.                   | Billing policies: any level            |
| Org Admin      | a root user to admin the account                         | can be a super user                    |
| account admins | account admins assigned a role                           | can be Google Users or Groups in GCP   |

**** Payment Models

***** AWS

+ Two pay-as-you-go models for EC2: on-demand and spot pricing.

+ Reserved Instances :: There are standard and convertible
+ Savings Plans :: Agree to pay now/later for hourly spend on VM's

From [[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-convertible-exchange.html][Exchange Convertible Reserved Instances]]

#+begin_quote
... as long as the new Convertible Reserved Instance is of an equal or higher value than the Convertible Reserved Instances that you are exchanging.

When you exchange your Convertible Reserved Instance, the number of instances
for your current reservation is exchanged for a number of instances that cover
the equal or higher value of the configuration of the new Convertible Reserved
Instance.
#+end_quote

***** Google

+ Sustained Usage Discounts :: based on usage threshold
+ Commitment Price :: GCP allows you to maintain commitments and swap the VM's
  underneath (I'm not sure whether AWS allows this)

*** IAM

Both clouds can connect to external IdP (identity providers).

|                          | AWS  | GCP |
|--------------------------+------+-----|
| AD Integration           | yes  | yes |
| Tag-based access control | ABAC | yes |

+ principal :: the "who" includes Google accounts, service accounts, Cloud
  Identity and Google Groups.
+ role :: the "can do what" which is a bundle of permissions.
+ policies :: a role binding consisting of =principles + roles=


In AWS  whereas GCP

IAM Policy Types:

|                    | AWS                                           | GCP                                |
|--------------------+-----------------------------------------------+------------------------------------|
| IAM Policy types   | AWS-managed, customer-managed, inline         | basic, predefined and custom       |
| IAM Policy Mapping | Policies are bound to IAM dentities           | Policies assoc roles to principles |
| IAM Roles          | Roles /are/ identities (assumed by IAM users) | Roles are permission collections   |
| Focus              | User-centric                                  | Group/Account centric              |
| Identity Mgmt      | Within IAM                                    | Outside IAM                        |

Service Accounts

|                | AWS       | GCP        |
|----------------+-----------+------------|
| access mgmt    | IAM Roles | IAM Groups |
| principal type |           |            |
| authentication |           |            |

***** TODO review IAM Scenarios (13)


**** AWS

+ IAM Identity :: maps to an AWS Account. This represents a human user or
  programmatic workload (to be authenticated/authorized to perform actions in
  AWS).
+ IAM User :: Identity within an AWS Account. Prefer temporary credentials (use vault)
+ AWS Account Root IAM User :: AWS Accounts begin with a single per-account =root= user, initially assoc to
  the email address who created the account. Avoid using the root user.
+ IAM User Group :: collection of IAM users managed as a unit
+ IAM Role :: Identity within an AWS account, but not assoc to a specific
  person. You can temporarily =become= an IAM role by [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-console.html][switching roles]].


+ IAM Identity =has_many= IAM Policies
+ IAM Identities are assigned IAM policies, which are not [[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html][Service control
  policies (SCP)]], which are applied to OU's and the OR

Prefer IAM Roles over IAM Users

Prefer [[https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html][IAM Identity Center]] users, which provides the following benefits:

+ A central set of identities and assignments
+ Access to accounts across an entire AWS Organization
+ Connection to your existing identity provide
+ Temporary credentials
+ Multi-factor authentication (MFA)
+ Self-service MFA configuration for end-users
+ Administrative enforcement of MFA usage
+ Single sign-on to all AWS account entitlements

***** Policies

+ In AWS granting programmatic & [AWS Mgmt?] console access are handled
  separately

+ RBAC :: role-based
+ ABAC :: attribute-based (conditional on resource attr /and/ identity)

***** Service Accounts

=ec2_instance.application.instance_profile = IAMRole.role123=

+ Instance Profile :: A container for an IAM role attached to an application on
  an EC2 container. Managed via Console/CLI/API
+ Cross-account role access for fine-grained access to resources in another
  account.

***** [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-ad.html][LDAP/AD]]:

I'm going to assume that the IAM resource hierarchy (which includes OU's) maps
more closely to AD, which is probably a big sell for the corporate types. I
guess? ... dammit.

*Create a self-managed directory in AD*

This is an external source. I would avoid it if possible, since it may rely on a
network connection or present caching problems ... I've long-forgotten anything
I know about AD, so yeh.

*Create directory in AWS-managed Microsoft AD*

This uses AWS Directory Service and can integrate other

***** Hybrid Cloud

*AWS SSM*

Amazon requires IAM accounts for the agent-based SSM. Its agent needs access to
buckets for various functions.  SSM faciliates the following management of
hybrid/multi-cloud resources:

+ Application management
+ Change management
+ Node management
+ Operations management

**** GCP

Accounts are created/managed outside of GCP and IAM manages
roles/permissions/mapping.

***** Policies/Roles

IAM Roles

+ Basic :: viewers, editors, owners (project)
+ Predefined :: various roles can have limits on specific resource types
  (e.g. computeAdmin to compute resources)
+ Custom :: Only applied to project/organization (not folders). You bundle the
  permissions yourself.

IAM Conditions

+ useful for temporary access or to limit where GCP API requests can originate.
+ specified in role bindings of a resource's IAM policy.
+ each condition can contain multiple logical expressions

Best Practices

+ Projects should group resources along trust boundary. Recognize inheritance.
+ Prefer granting roles to groups instead of users.
+ Service accounts should be named clearly. The =serviceAccountUser= role
  provides access to all resources in the service account.
+ Identity-Aware Proxy (IAP) lets you establish a central auth. layer for HTTPS
  apps. Thus, it gives you an app-level access control (instead of or in
  addition to network-level firewalls)

***** Service Accounts

These are intended to mediate service-to-service authentication (via IAM)

***** Hybrid Cloud


***** LDAP/AD

From Cloud Identity, admins can manage GCP resources using credentials in extant
LDAP/AD systems.

#+begin_quote
According to numerous sources, this is mostly useful when firing people. The
ability to do so is apparently a selling point and/or a feature of good design
... it must be nice to work in an environment where people want to get rid of
you but can't.

Tell me more about the problems we're having with logging. What was it again?
#+end_quote

*Google Cloud Directory Sync*

Managed AD. One way syncronization from LDAP. Custom mappings and exclusion
rules.

*Federating GCP with AD*

+ Provisioning :: one way; changes in AD are only pushed to GCP.
  - Creating users in AD will propagate to Google IAM objects, which can be
    referenced elsewhere in GCP before the new users ever login. I'm guessing
    this is/was a selling point of AD for AWS.
+ SSO :: GCP delegates authentication to AD using SAML. Only AD manages
  credentials.

****** [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#choosing_the_right_mapping][Decisions for Federating]]

From GCP Docs: [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#choosing_the_right_mapping][Choosing the right mapping]] for federating AD to GCP with
connectors.

What resources you'll need

[[file:img/gcp/federating-gcp-with-ad-decision-fleets-instances.svg]]

What domains to configure

[[file:img/gcp/federating-gcp-with-ad-decision-domains.svg]]



* AWS

** Policies

Service control policies (SCP) are not IAM policies...

+ RBAC :: role-based
+ ABAC :: attribute-based (conditional on resource attr /and/ identity)

*** SCP-001

aka [[https://hero.fandom.com/wiki/SCP-001][Mekhane]], apparently:

#+begin_quote
I am complete. I am incomplete.

A cog is missing. It was always there.

Humanity climbs to a singular point.

The machinery turns ahead and behind. Humanity falls to oblivion.

I am alien to them. I am of them.

They pour their minds out onto the page.

The cogs begin to fit together.

I do not yet exist and I am zero.

I exist through all time and I am one.

I speak into my not-past.

	~ Mekhane's inner monologue in "01110101 01101110 01100010 01110010 01101111 01101011 01100101 01101110".
#+end_quote

That shit is wierd as hell.

* Roam
+ [[id:8a6898ca-2c09-47aa-9a34-a74a78f6f823][Cloud]]
+ [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][DevOps]]
