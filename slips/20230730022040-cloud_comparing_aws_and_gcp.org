:PROPERTIES:
:ID:       7e6d74bb-4042-4d14-88b2-f901a7e9708a
:END:
#+TITLE: Cloud: Comparing AWS and GCP
#+CATEGORY: slips
#+TAGS:

* Docs
+ [[https://comparecloud.in/][CloudCompare.in]] a huge matrix comparing various neologisms used.

* Resources
+ [[https://codeburst.io/vpc-networking-gcp-v-s-aws-77a80bc7cfe2][VPC Networking: GCP vs. AWS]]

** AWS

+ [[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html][AWS Organizations: Terminology/Concepts]]
+ [[https://tecflair.com/how-to-reduce-amazon-ec2-costs-part-1/][How to Reduce AWS Costs]]

*** Reference Architectures

+ [[https://aws.amazon.com/architecture/?cards-all.sort-by=item.additionalFields.sortDate&cards-all.sort-order=desc&awsf.content-type=*all&awsf.methodology=*all&awsf.tech-category=*all&awsf.industries=*all&awsf.business-category=*all][AWS Architecture Center]]
+ [[https://github.com/awslabs][awslabs]] (github org)
+ [[https://github.com/aws-samples][aws-samples]] (github org)
  - [[https://github.com/aws-samples?q=&type=all&language=cobol&sort=][AWS Cobol Samples]] (lol)

*** IAM

+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html][IAM Identities (users, groups, roles)]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#rotate-credentials][Rotating access keys for IAM users requiring long-term credentials]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html][Getting Started]]
+ [[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html][Security Best Practices]]
+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-ad.html][Connect to a Microsoft AD directory]] (don't if you can help it)

AD:

+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/attributemappingsconcept.html][Supported directory attributes]]
+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-users-groups-AD.html][Provision users/groups from AD]]

IdP:

+ [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-idp.html][Connect to an external IdP]]

*** CloudShell/CLI

+ [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjQ3snDiMSAAxWFFFkFHVkoCiwQFnoECCQQAQ&url=https%3A%2F%2Fdocs.aws.amazon.com%2Fcloudshell%2Flatest%2Fuserguide%2Fvm-specs.html&usg=AOvVaw0KZmoBXclqSX9oka9_jNdp&opi=89978449][AWS CloudShell compute environment]]

*** Hybrid

SSM ([[https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html][systems manager]])

+ [[https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html][Setting up Systems Manager for hybrid and multicloud environments]]
+ [[https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-minimum-s3-permissions.html][SSM Agent communications with AWS managed S3 buckets]]: describes the buckes an
  SSM agent might need access to.

*** Networking

+ [[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html][AWS Regions and Zones]]
+ [[https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html][Subnets for your VPC]]
+ [[https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html][VPCs and subnets: IP Adressing]]
+ VPC: [[https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html][Configure route tables]]
+ [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/Welcome.html][Route 53]]

*** Security

**** [[https://docs.aws.amazon.com/kms/latest/developerguide/overview.html][Amazon KMS]]

+ [[https://docs.aws.amazon.com/kms/latest/developerguide/overview.html][Developer guide]]
+ Operations requiring access to private keys must proceed through the KMS api.
+ Symmetric keys: encrypt/decrypt or generate HMAC (separate key type)
+ Aysymmetric keys: encrypt/decrypt, sign/verify

*** Messaging & Stream Processing

**** Amazon MSK

Managed Kafka on Amazon


** GCP

+ [[Designing resilient systems][Designing resilient systems]]

*** IAM

+ [[https://cloud.google.com/iam/docs/understanding-roles][Predefined roles reference]]
+ [[https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy][Resource Hierarchy]]
+ [[https://cloud.google.com/resource-manager/docs/creating-managing-organization][Creating and managing organization resources]]
+ [[https://cloud.google.com/architecture/identity/overview-google-authentication][Overview of Google identity management]]
+ [[https://cloud.google.com/iam/docs/overview][IAM Overview]]
+ [[https://cloud.google.com/iam/docs/access-change-propagation][Access Change Propagation]]
+ GCP doesn't have ABAC, but does have [[https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials][Short-lived Credentials]],
  [[https://cloud.google.com/iam/docs/tags-access-control][tag-based access control]] and [[https://cloud.google.com/iam/docs/conditions-overview][IAM Conditions]] ([[https://www.reddit.com/r/googlecloud/comments/oasw5x/does_google_cloud_iam_have_abac/][source]])
+ [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#integrating_active_directory_and_google_cloud][AD Integration]] and [[https://cloud.google.com/architecture/identity/reference-architectures#active_directory_as_idp_and_authoritative_source][Active Directory as IdP and Authoritative Source]]
+ [[https://cloud.google.com/iam/docs/service-account-overview][Service Accounts]]

*** CloudShell/CLI

+ Cloud Shell: [[https://cloud.google.com/shell/docs][Docs]] and [[https://cloud.google.com/shell/docs/how-to][How-To Guides]]
+ [[https://cloud.google.com/sdk/gcloud/][gcloud docs]] and [[https://cloud.google.com/sdk/docs/cheatsheet][cheatsheet]]
+ [[https://cloud.google.com/storage/docs/gsutil][gsutil docs]]
+ [[https://cloud.google.com/bigquery/docs/bq-command-line-tool][linbq docs]]

*** Hybrid

+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-patterns-and-practices][Patterns/practices]]
+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-architecture-patternshttps://cloud.google.com/architecture/hybrid-and-multi-cloud-architecture-patterns][Architecture]]
+ [[https://cloud.google.com/architecture/hybrid-and-multi-cloud-network-topologies][Network topologies]]

Authentication

+ [[https://cloud.google.com/architecture/patterns-for-authenticating-corporate-users-in-a-hybrid-environment][Design Patterns]] for [[https://cloud.google.com/architecture/authenticating-corporate-users-in-a-hybrid-environment][Authenticating workforce users in a hybrid environment]]

*** Networking

+ [[https://cloud.google.com/vpc/docs/vpc][VPC Networks]]
  - [[https://cloud.google.com/compute/docs/regions-zones][Regions and Zones]]
  - [[https://cloud.google.com/compute/docs/regions-zones/zone-virtualization][Zone Virtualization]]
  - [[https://cloud.google.com/vpc/docs/routes][Routes]]
+ [[https://cloud.google.com/vpc/network-pricing#ipaddress][IP Pricing]]
+ [[https://cloud.google.com/compute/docs/internal-dns][Internal DNS]]
+ [[https://cloud.google.com/dns/docs/][Cloud DNS]]
+ [[https://cloud.google.com/vpc/docs/subnets][Subnets]]

*** Security

*** Messaging & Stream Processing

[[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjpup7OyMaAAxXkD1kFHa-UCBYQFnoECA8QAQ&url=https%3A%2F%2Fwww.linkedin.com%2Fpulse%2Fapache-kafka-vs-google-cloud-pubsub-which-messaging-system-de-luca&usg=AOvVaw1TFxOy1wWfGEvN9qheIgxn&opi=89978449][Apache Kafka vs GCP Pub/Sub]]


* Free Tiers

IDK what i'm talkin about ... but these are usually things I wish were easier to
come by. I'm still kicking myself for not knowing what SSH =JumpProxy= was until
2022. It should've been like 2015, if I had been anywhere else.

** General Comparison

Both platforms offer programs for startups, the larger of which require
application, a team and usually an accelerator program.

Both platforms give you:

+ A git forge
+ Reasonable database options

*** AWS

+ Free tier products are 12-month trials or always free, though it's a bit hard
  to distinguish between free-tier and 12-month trials.
+ There's no $300 credits, except for startups. Solo founders can get $1,000.

**** Free Tier

+ Roughly 20% more serverless than GCP
+ Better options for free pub/sub (SQS, SNS, EventBridge)
+ Gives you a WAF for free
+ A free 30GB SSD for a year
+ Free database/application migrations (but GCP inter-region rates are cheap)
+ Free prometheus, which is still probably quite a bit of work to use, depending
  on what metrics/scheduling is set up by default and how disparate your
  services are

**** Trial Tier

+ 750hrs/month of: EC2, RDS, Cache, MQ
+ Reasonable 50GB for Container Registry
+ Hosted chef or puppet
+ Various Trials

*** GCP

+ Free tier: $300 + $100 for businesses. If you don't use it, you lose it.
+ It's a runway that gives you enough to deal with the networking costs so you
  can learn, get a project started or test how GCP would work.
+ There are more free-tier machine learning services (vs. trial-tier), enough to
  experiment with them

With the exception of the lack of free networking options it's on par with what
you get from AWS. It's hard to tell which is better without actually using them
and I'm not exactly a high-paying customer.

** Load Balancing

mTLS allows you to access services via Yubikey PIV. It would be valuable if you
wanted to reduce the auth load when working on your own. On the backend, there's
a bit more networking req. to ensure this is secure. There's more work from the
PaaS to manage the TLS tunnels, but it's otherwise a feature that's restricted.

*** AWS

+ 750+ one load balancer per month, if always on (trial tier)
+ Only Application or Classic, so no mTLS unless you pass through the TLS
  negotiation.

*** GCP

+ Doesn't offer any load balancing in the free tier.
+ mTLS also req. more expensive LBs.

** VPN

More networking products are required if you want split-horizon DNS

*** AWS

No free option AFAIK.

*** GCP

+ At least $37 per month, per tunnel, plus egress/etc.

** Cloud SQL

*** AWS

*** GCP

Offers Bigtable and Firestore, both of which are meet the need, but Postgres is
not free.

** Containers

*** AWS

There's ECS and EKS. Same thing, slightly different airline miles. The overhead
in complexity when dealing with repackaged offerings of open source services
makes sense for a team ... but not for a single person.

*** GKE

One free GKE cluster. Either you run containers on autopilot and pay for usage
or you pay for the nodes. This doesn't help if you want Hashicorp Vault. It


* Notes

** IAM Setup


*** Should Regions Be Folders/OU's?

My first thoughts are no, since region occurs as a parameter for many Terraform
providers. This would duplicate projects across region-folders, which creates
more complexity in most situations. Also, this tightly binds the Terraform
resource management logic to these assumptions, which also forces many of your
terraform projects to neatly fit to a single region.

Not doing this can imply that some invocations of a Terraform plan should create
additional resources or not, based on the region. Whether this is an issue
depends on how flexible your Terraform plans are and how idiosyncratic a
region's resources or network topology could be.

**** Traps

There are a few major problems with fucking up your OU/Folder structure:

+ IAM Roles: How much of your selection/assignment of IAM roles is tied to the
  organization of your resources/projects/folders? It could be inflexible.
+ Security: is it broke? Don't fix it. Regulatory compliance may be disrupted, etc.
+ Costs: now you need more load balancers ... maybe
+ Consensus (on operations: who do I email; who is responsible for what?)
+ It can't easily be changed without creating a second tree of folders where you
  gradually migrate things out

In massive cloud clients (those with multi-cloud, on-prem and many resources),
these aren't huge issues, as reimplementing things across providers gives their
personnel more insight/experience. A larger footprint they have multiple
organizations registered in individual cloud providers or have folder trees can
have multiple roots.

For small clients, it's also not such a big deal, since they have much less to
manage, far fewer roles to assign and far less consequences. It affects less
people, thus there should be less to think about -- though for larger
organizations, if you have confidence in your people this distributes the
computation. IDK, really.

For medium/large clients, it can be a big problem. Moving files around your
computer is never fun, especially in programming projects. It also just doesn't
seem like a productive thing ... until you realize you can save money. You're
basically doing the same thing here, except actual people are involved, there
are no refactoring tools and no person really understands the full scope of how
things connect.

Once a small group forms that consensus on how the folders/OU's for a large
corporation with 100+ projects to support many products & integrations, only
then can you consider the possibilities for alternate structures. However, like
the difference between differentiating on three variables and /differentiating
along all but three variables/, then considering the possible designs which also
satisfy path dependency issues is a lot of work. Find a very nice guy, suggest
him to be promoted and put him in charge: there are no answers for large
organizations where you check all the boxes and everyone is happy.

**** Costs

... TODO: think/elaborate more on this.

***** 12,000 ways to make money

There are like 12,000+ quotas that show up for me in GCP .... that's basically
proxy for the number of ways you can be billed. The GCP setup tasks include
hints on the folder structure. You may want to experiment on this with Terraform
under a top-level subfolder... but API calls are only available while supplies
last (just kidding, they're cheap).

I'm not sure I can complete the setup task, since my increase in quota doesn't
make the warning disappear)

***** Subnets

Subnets will need to be associated to regions anyways, regardless of how your
folders/OUs are set up.


**** Security

Managing roles.

**** Networking

There should be a Networking folder that contains network operations &
maintainence projects. The important takeaway from the Towers of Hanoi section
below: when network connectivity breaks for some entity at an OSI level (vlan,
routing, tls/port, application), then all services dependent on its function may
fail without some alternative. The lower the level of failure then, roughly, the
larger the cascade through services connected at higher levels.

Since networking is so interconnected while also being a dependency to
everything else, you can't have it break. Changes in networking should not
affect running projects. I lack the experience, but I think this implies you
need one or more terraform modules:

+ to share across many terraform projects which discover parameters for network
  dependencies.
+ the module(s) should then reference your provider's network APIs.
+ the modules should be capable of intelligently providing multiple instances of
  resources, where your services need redundancy. This can be avoided somewhat
  by shifting the complexity into a networking GCP/Terraform project that uses
  DNS/VIPs as references where possible.
+ the modules should be capable of supplying forward migration configuration to
  dependent Terraform projects where or ,more simply, when it's necessary.

Since you can scale horizontally in the cloud and use SOA to decouple services
from dependencies on explicit state/configuration, then in many cases you could
avoid the need for pushing logic for some of the above (e.g forward migration)
into the TF project.

Or just write you a self-healing gossip protocol and call it a day, since that's
what's required for running a decent botnet. Then you don't migrate, everything
just interfaces through multiple tiers of servers that push updates to connected
devices which process them according to the authority of the server/devices.
It's amazing how difficult things like that are. That's a fairly flat topology
though and doesn't easily permit granular control.

***** Examples

Examples of business requirements that may make this complicated:

*Retail or Fast-food locations requiring access to services through multiple
tunnels.*

Chick-fil-a uses kubernetes and each store needs a network with redundant paths
to WAN and redundant connections to cloud services. Customers should also be
able to place orders for a specific store where a cook receives the order on a
ticket.

A service discovery pattern will avoid the need to centrally track the _stub
networks_ -- i.e. store turns the computers on, they discover connection info
and establish the tunnel. Then to track orders across multiple stores, there are
several possibilities:

+ the registers and iphone ordering apps use a separate networks (and service)
  which has pros/cons, including consistency of data available for order ticket
  tracking and for tracking revenue.
+ they share a common gateway reachable through the wifi network or 4g/5g
  network and devices either connect to it through common routes or the traffic
  is routed best effort.
+ there is software deployed at each location which consolidates data to make
  available. here, there is still a need to fetch data.

In any case, it's really simpler if you have many internal subnets deployed in
the cloud, each with a Network LB or VPN that client devices can reach. You can
further consolidate with a VIP that forwards specific connections for a store
region (or cloud region) to these subnets. The latter avoids the need to
distribute connection path configuration to devices ... though you'll still need
to distribute certificates/etc.

The need to create many subnets here means that region deployments, VIP
forwarding configuration, folder structure and IP addressing requires additional
networking services from the cloud. SOA allows you to parameterize, inject
layers of abstraction, etc to settle on areas of your infrastructure/services
that don't need to be "aware" of other parts of the design. So in many ways, how
you solve the problem ultimately won't increase costs by an order of
magnitude... but the wrong approaches definitely could.

***** Towers of Hanoi

The reason Cisco made so much money from Smartnet contracts is because those
pizza boxes must simply function, otherwise nothing works. With route/switch and
firewalls, once your networks are of sufficient size and esp. once you have
redundancy, then making small changes just turns things into a tower of hanoi:

+ add the networks to HA1
+ update devices connected to HA2
+ change the routes for traffic through HA1
+ update relevant firewall rules and test

Now complete a complementary process (in reverse) to complete the changes that
allow HA1 to push traffic to the new WAN networks (if changes were to disrupt
HA). Which is essentially the same as the solution to towers of hanoi. Once
that's done, recursively repeat the process for other devices, like HA2, to
reach the final state.

/If you don't have HA, then there are many route & switch config changes were
it's almost impossible to persist connectivity./

Anyways, it's the same for Cloud, but everything is software-defined. If you're
draining resources from one folder structure, you need to iterate through
similar recursive processes ... but you have to create the mirrored resources
before you drain. And, if your SOA design is strong, you may avoid the need for
the obligatory "It /was/ DNS" joke.

Only once you identify the least connected nodes in your cloud dependency graph
can you begin to plan an IP addressing or Folder/OU migration. There may be a
pattern of approaching this which involves "transition" states as well where you
create a desired intermediate state that allows you to untangle things to resort
them into new categories, while satisfying path dependencies. The edges in your
dependency graph can be organized into types (network/service/role dependencies,
etc.) and where these overlap among many projects, those can be migrated at the
same time.

It's really no different than migrating to a new system of organizing your art
stuff in a new room or tools/parts in a workshop or : [[https://www.amazon.com/Organizing-Inside-Out-Second-Foolproof/dp/0805075895][Organizing from the Inside
Out]]. You can't put things in more than one place, you can nest common items
within sub/containers, etc. For the cloud, to prevent the many-to-one constraint
on sub/folders, you can use something like labels/tags or metadata.

* Coursera Notes

These are mostly notes from the coursera course comparing the two platforms.

** Accounts

Both clouds are organized as DAG's, though GCP is more of a tree. Thus, these
data structures have all the benefits and problems that DAG's are subject
to. See multiple inheritance vs. other design patterns in programming/devops.
This also pops up in image management and docker multi-stage builds.

*** Correspondance

| Google Cloud     | AWS                                                       |
|------------------+-----------------------------------------------------------|
| Organization     | Organizational Root (OR)                                  |
| Folder           | Organizational Unit (OR)                                  |
| Project          | [Management or Member] Accounts                           |
| Resources        | [Shared] Resources                                        |
|------------------+-----------------------------------------------------------|
| n/a              | Service Control Policies (SCP)                            |
|------------------+-----------------------------------------------------------|
| Resource Manager | AWS Organizations, Control Tower, Resource Access Manager |
|                  |                                                           |

+ AWS, policies can be applied to users/groups/roles. In GCP, there are
  predefined roles, but thy are applied to users. Both are bundles of
  permissions.

*** Best practices

+ Your resource hierarchy should reflect your organization's structure.
+ Grant permissions/policies/roles according to least priviledge. Grants should
  start at the smallest scope.
+ In GCP, group projects along trust boundaries
+ In GCP, it's easier to add/remove users to groups than to update a policy.

*** In AWS

**** Basic Models

+ Accounts are organized under OU and OR
+ OR has_many OU
+ OU belongs_to OU (or OR)
+ Resources belong_to Account (whether it's a mgmt or member account)

All acounts and OU's can have exactly one parent.

**** Organizations

+ AWS Organization :: CRUD the OU's and apply SCP's
+ AWS Control Tower :: set up permissions/automation for account management
+ AWS Resource Access Manager :: share resources across accounts.

**** Accounts

+ There can only be one Management account per Organization. It's responsible
  for billing.


**** From the AWS Docs:

[[file:img/aws/aws-ou-diagram.png]]

*** In GCP

An organization is the top-level entity with sub/folders under it.

[[https://www.hava.io/blog/organisational-and-design-tips-for-google-cloud][Organisational and Design Tips for Google Cloud]]

**** Sub/folders

These may categorize regions or business areas. Setting folders for each
business unit makes its personnel accountable for billing or approval of
access/resources.

+ strucuring this is difficult because you have to move/delete active resources
  before deleting subfolders.
+ Moving subfolders without thinking about policies above/below them will tend
  to cause great chaos engineering, esp if you're just a lowly team member who's
  not omniscient.
+ Like IP Addressing, you probably want the categorization to just be correct
  (or not awful) because it's realllly difficult to change later.

**** Roles

+ Organization Admin :: define IAM policies, set resource hierachy, assign IAM
  roles. Cannot perform some actions.
+ Project Creator :: create projects

**** Accounts

Super admins exist for Cloud Identity and Google Workspace.

+ Assign org admin role
+ point of contact
+ control lifecycle of super admin roles and the organization resource

**** Projects

+ ID's are immutable

** Pricing

*** Billing

|                | AWS                                                      | GCP                                    |
|----------------+----------------------------------------------------------+----------------------------------------|
| Billed entity  | By account or a single per-org billing account           | many billing accounts per GCP account. |
| Rollup         | to the account (and org when using consolidated billing) | Rollup by project.                     |
| policies       | only to IAM principles; not heritable.                   | Billing policies: any level            |
| Org Admin      | a root user to admin the account                         | can be a super user                    |
| account admins | account admins assigned a role                           | can be Google Users or Groups in GCP   |

*** Payment Models

**** AWS

+ Two pay-as-you-go models for EC2: on-demand and spot pricing.

+ Reserved Instances :: There are standard and convertible
+ Savings Plans :: Agree to pay now/later for hourly spend on VM's

From [[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-convertible-exchange.html][Exchange Convertible Reserved Instances]]

#+begin_quote
... as long as the new Convertible Reserved Instance is of an equal or higher value than the Convertible Reserved Instances that you are exchanging.

When you exchange your Convertible Reserved Instance, the number of instances
for your current reservation is exchanged for a number of instances that cover
the equal or higher value of the configuration of the new Convertible Reserved
Instance.
#+end_quote

**** Google

+ Sustained Usage Discounts :: based on usage threshold
+ Commitment Price :: GCP allows you to maintain commitments and swap the VM's
  underneath (I'm not sure whether AWS allows this)

** Console/API

I feel like there's a few things missing for both here.

| Category   | AWS                   | GCP                        |
|------------+-----------------------+----------------------------|
| Builds     | make                  | bazel, gradle, maven, make |
| VCS        | git                   | git                        |
| CLI        |                       | gcloud, gsutil, linbq      |
| Packages   | npm                   | npm, nvm, pip              |
| DevOps     |                       | terraform, composer        |
| Containers | kubectl               | docker, helm, kubectl      |
| Data       | jq                    | mysql                      |
| Archive    | tar, unzip            | tar                        |
| ML         |                       | tensorflow                 |
| Systems    | sudo, ps (procps)     | sudo                       |
| Remote     | ssh, tmux             | ssh                        |
| Shell      | bash, zsh, powershell | bash, sh                   |
| Editors    | vim, nano             | emacs, vim                 |
| Docs       | man                   | man                        |
| Misc       | wget                  |                            |

*** AWS

+ aws :: main CLI for AWS

*** GCP

+ gcloud :: main CLI for GCP
+ gsutil :: access to Cloud Storage
+ linbq :: CLI for BigQuery

Must explicitly enable API's per context.

** Networking

Regions

|                           | AWS                                                               | GCP                                                             |
|---------------------------+-------------------------------------------------------------------+-----------------------------------------------------------------|
| Region                    | Geographic area;                                                  | Geographic area (that also satisfies RTT in optimal conditions) |
| Region Availability Zones | data centers clustered in 3 availability zones                    | at least 3 per region                                           |
| RTT                       | not specified; redundant low-latency connections b/w avail. zones | For a single region, less than 1ms between VMs                  |
| Enabling Regions          | per-account (restricted by Organizational SCP)                    | per-project (defalt region/zone)                                |

Availalability Zones

|                              | AWS                                                 | GCP |
|------------------------------+-----------------------------------------------------+-----|
| Phys Distance betweeen zones | < 60 miles                                          |     |
| Isolation                    | physically separate, independent utilities/security |     |

PoP

|            | AWS                                                                 | GCP                                                     |
|------------+---------------------------------------------------------------------+---------------------------------------------------------|
| Name       | Edge Locations (CDN services) and Local Zones (low-latency compute) | PoP                                                     |
| Products   | Edge Locations (Cloudfront, Route 53, AWS WAF, AWS Shield)          | Cloud CDN, edge caching (for App Engine, Cloud Storage) |
| Connection |                                                                     | Google Fiber from PoP to data centers                   |

Functional benefits of region/zone selection

| Data Security and Compliance                           |
| Control over transport, firewalls, latency             |
| Redundancy and Control Over *Failure Modes* (buckling) |

VPC

|                     | AWS                                                                       | GCP                                                     |
|---------------------+---------------------------------------------------------------------------+---------------------------------------------------------|
| IP Space            | Specify Custom IP Address Space (ip4 and optional ip6 CIDR blocks)        |                                                         |
| IP Assignment       | AWS req. a VPC and a subnet before machines get IP addresses              | Any VM that starts gets an internal IP address          |
| VPC scope           | Regional                                                                  | Global                                                  |
| Route scope         | Regional                                                                  | Global                                                  |
| Subnets             | Address spaces must not overlap (for VPC in region/zone/subnet)           | VPC/subnets must have distinct address space per-region |
| Subnet/Zone mapping | Different Zones require separate subnets                                  | Zones in a single region /could/ share subnets          |
| Peering             | Use AWS Transit Gateways for inter-region peering                         |                                                         |
| Security boundaries | Per-Region: AWS Network Firewall; Per-VPC: Network ACL's, Security Groups | Firewall Rules (global)                                 |

IP Addressing

|                       | AWS                   | GCP                     |
|-----------------------+-----------------------+-------------------------|
| Publicly Routable     | Public IP, Elastic IP | Public IP, External IP  |
| Not Publicly Routable | Private IP            | Internal IP, Private IP |

IP Pricing per hour (per month)

|                                   | AWS                        | GCP                           |
|-----------------------------------+----------------------------+-------------------------------|
| Eph. Public IP                    | No charge (in 2024: 0.005) | 0.002 to 0.004 (0.72 to 1.44) |
| Attached Static Public IP         | 0.005 (1.80)               | 0.004 (1.44)                  |
| Unattached Static Public IP       | 0.005 (1.80)               | 0.01 (7.20)                   |
| Static Public IP (NAT/forwarding) | ?                          | 0.00                          |
| Eph. Private IP                   | 0.00 ?                     | 0.00                          |
| Static Private IP                 | 0.00 ?                     | 0.00                          |

DNS

|                     | AWS | GCP   |
| Low-latency Routing | yes | nyes? |
| Geographic Routing  | yes | yes   |

Routing Tables

|                             | AWS                  | GCP                  |
|-----------------------------+----------------------+----------------------|
| Main Routing Table Assoc To | VPC                  | +Global+ VPC Network |
| Subnet Routes               | Subnet Routing Table | Main Routing Table   |
| Rout                        |                      |                      |

*** AWS

**** Questions

+ When deploying global applications, how does the regionality of VPC/routing
  affect design for OU/Account?

**** Regions and Zones

+ Abstractions: =Regions > Availability Zones=
+ Identifiers: =<region>-<zone>

For [[Regions and Zones][region/zone abstractions]], AWS offers:

+ Regions and Availability Zones
+ Local Zones :: forward posture of computing resources closer to users. This is
  not simply a CDN, but a CDN would probably suffice in most cases.
+ Wavelength Zones :: low-latency to 5G networks
+ AWS Outposts :: extend AWS infrastructure, services, APIs, tools to on-prem

#+begin_quote
If you distribute your instances across multiple Availability Zones and one
instance fails, you can design your application so that an instance in another
Availability Zone can handle requests.

You can also use Elastic IP addresses to mask the failure of an instance in one
Availability Zone by rapidly remapping the address to an instance in another
Availability Zone.
#+end_quote

**** VPC

VPC's can extend outside of a region if you have a local zone set up for that
region.

***** Subnets

Subnets are per Availability Zone and can be:

+ ip4 only
+ dual stack
+ ip6 only

Subnet Types

| Type            | Internet                          | Routes                     | Desc                  |
|-----------------+-----------------------------------+----------------------------+-----------------------|
| Public Subnet   | Yes                               |                            |                       |
| Private Subnet  | No Direct Route (req. NAT Device) |                            |                       |
| VPN-only Subnet | No Routes                         | Site-to-Site via VPGateway |                       |
| Isolated Subnet | No Routes                         | None outside VPC           | Intra-VPC Access Only |

***** IP Addressing

+ Auto-assign IP :: configure the auto-assign IP settings (to automatically
  req. a /public/ IPv4 or IPv6 address for network interfaces)
+ Resource-based Name (RBN) :: specify hostname type for EC2 instances and
  configure how DNS A & AAAA record queries are handled.

| Type    | Desc                                                                                |
| Private | Req. NAT gateway for internet, otherwise comm. with AWS nets and AWS-connected nets |
| Elastic | static & public IPs, assoc/dissoc with instances/interfaces                         |
| Public  | allows inbound/outbound communication                                               |

#+begin_quote
You can bring part or all of your own public IPv4 address range or IPv6 address
range to your AWS account. You continue to own the address range, but AWS
advertises it on the internet by default.
#+end_quote

***** Route 53 DNS

**** Routing

Subnet to Routing Table associations:

+ custom subnet route table
+ implicit association (to main route table)
+ explict associate (to main route table)

***** Configure Route Tables

Concepts (from [[https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html][AWS Docs: Configure Route Tables]], many more details omitted)

| Concept                        | Definition                                                                                                         |
|--------------------------------+--------------------------------------------------------------------------------------------------------------------|
| Destination                    | It is what it is (a CIDR range)                                                                                    |
| Target                         | The via that traffic is forwarded: GW, net interface or connection.                                                |
| Local Route                    | Default route for comm. within a VPC                                                                               |
| Propagation                    | VPN routes are auto-managed when propagation enabled on VPC's VP GW (see [[https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNRoutingTypes.html][Site-to-site VPN Routing]])                 |
| Route Table Association        | Mapping/assoc between a route table and a subnet, internet GW or VP GW                                             |
|--------------------------------+--------------------------------------------------------------------------------------------------------------------|
| Main Route Table               | Automatically created per-VPC. Controls routing for subnets lacking explicit route table assoc                     |
| Custom Route Table             | Custom routes for your VPC.                                                                                        |
| Subnet Route Table             | Table assoc to a subnet                                                                                            |
| Gateway Route Table            | Table assoc to a Internet GW or VP GW                                                                              |
| Edge Association (Route Table) | Table routing inbound VPC traffic to an appliance (assoc to Inet GW or VP GW, specify target net ifx of appliance) |
| Transit Gateway Route Table    | Table Assoc to a Transit GW (see [[https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html][Transit GW Route Tables]])                                                          |
| Local Gateway Route Table      | Table assoc to an Outposts Local GW (see [[https://docs.aws.amazon.com/outposts/latest/userguide/outposts-local-gateways.html][Local GW in Outposts User Guide]])                                          |

***** Main Route Table

+ Can't be deleted, but per-subnet can be replaced by a custom route table
+

*** GCP

+ Abstractions: =Regions > Zones > Clusters=
+ Clusters are logically grouped into zones

#+begin_quote
Customer workloads are maintained in the fewest number of clusters possible.

Usually, your zonal workload is contained in a single cluster.

However, zone-to-cluster mappings might include additional clusters in cases
where additional capacity or specialized hardware is not available in the
primary cluster for the map.

... zone-to-cluster mapping seldom change, changes do occur as the capacity
needs and underlying hardware offerings evolve. clusters are:

+ added to a zone to increase capacity
+ removed from a zone when they're decommissioned
#+end_quote

**** VPC

The VPC's are global and subnets are per-region.

#+begin_quote
The size of a subnet can be increased by expanding the range of IP addresses
allocated to it. Doing so won’t affect already configured virtual machines.
#+end_quote

+ VPC's belong to projects, so when multiple regions (usually folders)
  instantiate projects, then their VPC's need Peerings to related projects.
+ Otherwise, a shared VPC can be set up across multiple projects.

***** Cloud DNS

+ uses Google's global anycast name servers to serve your DNS Zones from
  redundant locations
+ runs on the same infrastructure as Google

***** IP Addressing

| Internal                                         | External                                                              |
|--------------------------------------------------+-----------------------------------------------------------------------|
| Allocated from subnet range to VMs by DHCP       | assigned from a pool (ephemeral) or reserved (static)                 |
| DHCP lease renewal: 24h                          | or BYOIP (Google handles address advertisement & RIR stuff)           |
| IP + VM Name: registered with network-scoped DNS | VMs don't know their own external IP (it's mapped to the internal IP) |

+ VM-to-external-IP mapping is handled transparently by VPC

****** Internal Hostname Resolution

+ the hostname is equivalent to the instance name
+ FQDN: =[hostname].[zone].c.[project-id].internal=

Per-instance: Each has a metadata service also acting as DNS resolver.

+ This is provided as part of the compute engine via =169.254.169.254=.
+ This is configured on the instance via DHCP
+ The resolver provides answers for internal/external addresses

****** External Hostname Resolution

Instances with external IPs can allow connections from hosts outside the
project. e.g.

+ Users can connect using the external IP
+ Admins can publish public DNS records pointing to the instance

Public DNS records are not published automatically.

+ but DNS records for external addresses can be published (outside of GCP) using
  extant DNS servers.
+ DNS zones can be hosted using Cloud DNS.

**** Firewalls

+ VPC's share logic from globally distributed firewall rules

***** Questions

+ How do you control the order of firewall rules?
+ How are the firewall policy GOTO statements working out?

**** Routing

Routes are defined at the VPC Network level. Routes:

+ apply to VM-egress traffic
+ forward traffic to the most specific route
+ define destination in CIDR
+ Match packets by dest. IP address in matching firewall rules.

Routes are created when:

+ A network is created (enabling traffic delivery from anywhere)
+ A subnet is created (enabling traffic to VM's in the same VPC)

| Type    | Route         | Next Hop                                     | Notes                                                      |
|---------+---------------+----------------------------------------------+------------------------------------------------------------|
| Sysgen  | Default Route | Default internet GW                          | Applies to whole VPC network. Can be removed/replaced      |
| Sysgen  | Subnet Route  | VPC Network (fwd pax to VMs & Int. LBs)      | Applies to whole VPC network. Managed automatically by GCP |
| Custom  | Static Route  | Static route next hop                        |                                                            |
| Custom  | Dynamic Route | Peer of a BGP session on a Cloud Router      | Auto. managed based on  learned routes from Cloud Routers  |
| Peering | Subnet Route  | Peer VPC Network (fwd pax to VMs & Int. LBs) | Applies to whole VPC net                                   |
| Peering | Custom Route  | Next hop in the peer VPC network             |                                                            |
| Policy  | PBR           | Internal passthrough Network LB              | Evaluated before other routes are evaluated                |

The table is from [[https://cloud.google.com/vpc/docs/routes][VPC Docs on Routes]], where there's quite a bit more information on use cases
and esp. on each type of route.

+ See [[https://cloud.google.com/vpc/docs/routes#instancerouting][Applicability and order]]

***** System-generated routes

These apply to all the VM's in a VM network. Two system-generated route types
are created on VPC network creation:

+ Default Route
+ Subnet Route that defines paths to each subnet in the VPC network

***** Custom Routes

For details about [[https://cloud.google.com/vpc/docs/routes#static-route-next-hops][static route next hop]], see the original table's linked
considerations for:

+ Instances and internal passthrough Net LB
+ Next hop instances
+ Internal passthrough Net LB next hops
+ Class VPN tunnel next hops

See the VPC [[https://cloud.google.com/vpc/docs/vpc#routing_for_hybrid_networks][dynamic routing mode]], which determines how routes apply to VMs.

***** Peering Routes

Peering custom routes can be static/dynamic. For the latter, see the dynamic
routing mode (of the VPC importing the routes)

***** Policy-based Routes

These routes are not exchanged through VPC Network Peering.

****** TODO can you delegate to PBR to preemtively handle layer-4 DDoS?

Or would the specificity of necessary rules place too much load on the GCP
routing/fw components?

***** Instance routing tables

These are not really covered in the GCP doc on VPC Routing, but are in the
Coursera class.

**** Misc Topics

***** Shared Networks and Virtualized Zones

#+begin_quote
+ Multiple projects can share a VPC network to enable cross-project connectivity
+ an organization can peer a shared VPC network to enable cross-organizational
  connectivity.

Our zone virtualization mapping algorithm attempts to:

+ assign the same zone-to-cluster map to all projects that share a VPC network
+ or extend their VPC network via VPC peering.
#+end_quote

[[file:img/gcp/zone-virt-cluster-mapping.png]]

#+begin_quote
Default zone-to-cluster mappings are selected on a per-project basis so that
every customer experiences the same capabilities and performance.
#+end_quote

Use for multi-project applications, share a VPC network for Zone-to-cluster
"hinting." Other factors that will affect this include: VM hardware selection or
a cluster's capacity.

#+begin_quote
+ As a best practice, applications spread across groups of projects should use a
  shared VPC network for consistent zone-to-cluster mappings.
+ For cluster separation between projects, use different zones in the same
  region or zones in multiple regions, to ensure diversity.
#+end_quote

Outages are reported on a per-zone basis, but some clusters in the affected zone
may still be operational. GCP recommends =$$$= so applications running in
various regions are distributed across multiple zones. See [[https://cloud.google.com/architecture/scalable-and-resilient-apps#design_for_high_availability][multi-zonal
architectures]]

***** VM Live Migration

See [[https://cloud.google.com/compute/docs/instances/setting-vm-host-options#maintenanceevents][VM host maintenance policy]] and [[https://cloud.google.com/compute/docs/instances/live-migration-process][VM Live Migration Process]]

Basically ... a far more difficult version of "Proxmox VM Migration"

[[file:img/gcp/vm-live-migration.svg]]

** IAM

Both clouds can connect to external IdP (identity providers).

|                          | AWS  | GCP |
|--------------------------+------+-----|
| AD Integration           | yes  | yes |
| Tag-based access control | ABAC | yes |

+ principal :: the "who" includes Google accounts, service accounts, Cloud
  Identity and Google Groups.
+ role :: the "can do what" which is a bundle of permissions.
+ policies :: a role binding consisting of =principles + roles=


In AWS  whereas GCP

IAM Policy Types:

|                    | AWS                                           | GCP                                |
|--------------------+-----------------------------------------------+------------------------------------|
| IAM Policy types   | AWS-managed, customer-managed, inline         | basic, predefined and custom       |
| IAM Policy Mapping | Policies are bound to IAM dentities           | Policies assoc roles to principles |
| IAM Roles          | Roles /are/ identities (assumed by IAM users) | Roles are permission collections   |
| Focus              | User-centric                                  | Group/Account centric              |
| Identity Mgmt      | Within IAM                                    | Outside IAM                        |

Service Accounts

|                | AWS                      | GCP                                                      |
|----------------+--------------------------+----------------------------------------------------------|
| access mgmt    | IAM Roles                | IAM Groups                                               |
| principal type | role -> instance profile | IAM service account (S/A) -> GCP Instances               |
| authentication |                          | S/A has email address, but use keys instead of passwords |

**** TODO review IAM Scenarios (13)


*** AWS

+ IAM Identity :: maps to an AWS Account. This represents a human user or
  programmatic workload (to be authenticated/authorized to perform actions in
  AWS).
+ IAM User :: Identity within an AWS Account. Prefer temporary credentials (use vault)
+ AWS Account Root IAM User :: AWS Accounts begin with a single per-account =root= user, initially assoc to
  the email address who created the account. Avoid using the root user.
+ IAM User Group :: collection of IAM users managed as a unit
+ IAM Role :: Identity within an AWS account, but not assoc to a specific
  person. You can temporarily =become= an IAM role by [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-console.html][switching roles]].


+ IAM Identity =has_many= IAM Policies
+ IAM Identities are assigned IAM policies, which are not [[https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html][Service control
  policies (SCP)]], which are applied to OU's and the OR

Prefer IAM Roles over IAM Users

Prefer [[https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html][IAM Identity Center]] users, which provides the following benefits:

+ A central set of identities and assignments
+ Access to accounts across an entire AWS Organization
+ Connection to your existing identity provide
+ Temporary credentials
+ Multi-factor authentication (MFA)
+ Self-service MFA configuration for end-users
+ Administrative enforcement of MFA usage
+ Single sign-on to all AWS account entitlements

**** Policies

+ In AWS granting programmatic & [AWS Mgmt?] console access are handled
  separately

+ RBAC :: role-based
+ ABAC :: attribute-based (conditional on resource attr /and/ identity)

**** Service Accounts

=ec2_instance.application.instance_profile = IAMRole.role123=

+ Instance Profile :: A container for an IAM role attached to an application on
  an EC2 container. Managed via Console/CLI/API
+ Cross-account role access for fine-grained access to resources in another
  account.

**** [[https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-ad.html][LDAP/AD]]:

I'm going to assume that the IAM resource hierarchy (which includes OU's) maps
more closely to AD, which is probably a big sell for the corporate types. I
guess? ... dammit.

*Create a self-managed directory in AD*

This is an external source. I would avoid it if possible, since it may rely on a
network connection or present caching problems ... I've long-forgotten anything
I know about AD, so yeh.

*Create directory in AWS-managed Microsoft AD*

This uses AWS Directory Service and can integrate other

**** Hybrid Cloud

*AWS SSM*

Amazon requires IAM accounts for the agent-based SSM. Its agent needs access to
buckets for various functions.  SSM faciliates the following management of
hybrid/multi-cloud resources:

+ Application management
+ Change management
+ Node management
+ Operations management

*** GCP

Accounts are created/managed outside of GCP and IAM manages
roles/permissions/mapping.

**** Policies/Roles

IAM Roles

+ Basic :: viewers, editors, owners (project)
+ Predefined :: various roles can have limits on specific resource types
  (e.g. computeAdmin to compute resources)
+ Custom :: Only applied to project/organization (not folders). You bundle the
  permissions yourself.

IAM Conditions

+ useful for temporary access or to limit where GCP API requests can originate.
+ specified in role bindings of a resource's IAM policy.
+ each condition can contain multiple logical expressions

Best Practices

+ Projects should group resources along trust boundary. Recognize inheritance.
+ Prefer granting roles to groups instead of users.
+ Service accounts should be named clearly. The =serviceAccountUser= role
  provides access to all resources in the service account.
+ Identity-Aware Proxy (IAP) lets you establish a central auth. layer for HTTPS
  apps. Thus, it gives you an app-level access control (instead of or in
  addition to network-level firewalls)

**** Service Accounts (S/A)

These are intended to mediate service-to-service authentication (via IAM)

Three types of service accounts:

+ User-Managed ::
+ Default ::
+ Google-Managed ::

S/A keys:

+ Google automatically manages these, but you can create/manage them (e.g. when
  accessing S/A from outside of GCP or specifying an alternate key rotation policy)
+ Each S/A public/private RSA keypair is used, to generate temporary S/A account
  credentials and to sign blobs & JWT's. The S/A key refers to the private key.

| Google-Managed                                                    | User-Managed                                                                |
|-------------------------------------------------------------------+-----------------------------------------------------------------------------|
| all S/A have Google-managed keypair                               | Up to 10 keypair per S/A. Generate with IAM API or locally and upload (PIV) |
| Google stores both public/private, latter not directly accessible | User resp. for private key                                                  |
| Each public key can sign for up to 2 weeks.                       |                                                                             |

**** Hybrid Cloud


**** LDAP/AD

From Cloud Identity, admins can manage GCP resources using credentials in extant
LDAP/AD systems.

#+begin_quote
According to numerous sources, this is mostly useful when firing people. The
ability to do so is apparently a selling point and/or a feature of good design
... it must be nice to work in an environment where people want to get rid of
you but can't.

Tell me more about the problems we're having with logging. What was it again?
#+end_quote

*Google Cloud Directory Sync*

Managed AD. One way syncronization from LDAP. Custom mappings and exclusion
rules.

*Federating GCP with AD*

+ Provisioning :: one way; changes in AD are only pushed to GCP.
  - Creating users in AD will propagate to Google IAM objects, which can be
    referenced elsewhere in GCP before the new users ever login. I'm guessing
    this is/was a selling point of AD for AWS.
+ SSO :: GCP delegates authentication to AD using SAML. Only AD manages
  credentials.

***** [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#choosing_the_right_mapping][Decisions for Federating]]

From GCP Docs: [[https://cloud.google.com/architecture/identity/federating-gcp-with-active-directory-introduction#choosing_the_right_mapping][Choosing the right mapping]] for federating AD to GCP with
connectors.

What resources you'll need

[[file:img/gcp/federating-gcp-with-ad-decision-fleets-instances.svg]]

What domains to configure

[[file:img/gcp/federating-gcp-with-ad-decision-domains.svg]]

* AWS

** Policies

Service control policies (SCP) are not IAM policies...

+ RBAC :: role-based
+ ABAC :: attribute-based (conditional on resource attr /and/ identity)

*** SCP-001

aka [[https://hero.fandom.com/wiki/SCP-001][Mekhane]], apparently:

#+begin_quote
I am complete. I am incomplete.

A cog is missing. It was always there.

Humanity climbs to a singular point.

The machinery turns ahead and behind. Humanity falls to oblivion.

I am alien to them. I am of them.

They pour their minds out onto the page.

The cogs begin to fit together.

I do not yet exist and I am zero.

I exist through all time and I am one.

I speak into my not-past.

	~ Mekhane's inner monologue in "01110101 01101110 01100010 01110010 01101111 01101011 01100101 01101110".
#+end_quote

That shit is wierd as hell.

* Roam
+ [[id:8a6898ca-2c09-47aa-9a34-a74a78f6f823][Cloud]]
+ [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][DevOps]]
