:PROPERTIES:
:ID:       49332a7c-bc38-4002-bd48-de566798ccf3
:END:
#+TITLE: Nyxt 3: Old Config
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:aeff1aef-75d5-4666-8a70-a81025c5c01b][Nyxt]]
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:aeff1aef-4321-4666-8a70-a81025c5c01b][Lisp]]

* Babel
#+begin_src emacs-lisp
(setq-local nyxt-config (expand-file-name "~/.config/nyxt")
            nyxt-pkg (expand-file-name "~/.local/share/nyxt/extensions"))
#+end_src

* Docs

** Lisp

+ [[https://www.sbcl.org/manual/index.html][SBLC Manual]]
+ [[https://www.sbcl.org/manual/asdf.html#Top][ASDF Manual]]

* Resources

+ [[https://github.com/shaunsingh/nix-darwin-dotfiles/blob/9a434ffd912b781d01bc92abd6317c0fcfaa6cdb/configs/nyxt/commands.lisp][shaunsingh/nix-darwin-dotfiles]]
+ [[github:aartaka/nyxt-config][aartaka/nyxt-config]]

* Setup

** ASDF

My configs need a few packages. I'd like to source the code locally instead of
installing packages. I'm not sure of options for managing Nyxt packages.

See [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/documents/README.org#branch-management][nyxt.asd]] for example of an =asdf= system declaration.

** Dependencies
*** nx-tailor

** REPL

Seriously, probably try the REPL-features earlier rather than later...

+ Nyxt's autodocumenting features are fantastic, but the REPL will just make it
  way easier to learn.
+ A common-lisp setup in emacs with no more than the =sly= packages should hook
  into your completion nicely.
+ Symbols complete with no LSP server/process required, since code is data is
  code is data ... then reflection is easy.
+ Jumping to source while connected to the =slynk= REPL just works, using
  =xref=.

***** TODO revisit the following later after more time (not my first rodeo)

#+begin_quote
I have consult, xref, eldoc, vertico, etc. set up, but it should work with
minimal tweaks in other completion systems. If you haven't set up ivy, company,
helm, consult, etc... then that may pose some challenges.

Otherwise, it just all falls into place.

NO LSP REQUIRED. No half-patched template typescript projects that import junk
from =npm= while requiring platform/project specific configuration. Your runtime
already runs your code, so those configurations should remain where code runs.

Formatters are also an entire class of problems that you generally avoid.

Can also easily connect to REPL on the network (though jumping to source there
may requires the same path-mapping shenanigans as LSP)
#+end_quote

*** SLY

Mainly follow the [[https://github.com/atlas-engineer/nyxt/blob/master/documents/README.org#L77][dev guide]].

#+begin_quote
Note to Self (from 2012-2014): Slime has be outmoded by Sly
#+end_quote

+ start-slynk :: run from nyxt, check for =port= using =list-messages=
+ sly-connect :: run from emacs

**** TODO Required? =(asdf:load-system :slynk)=

Also, note =(reset-asdf-registries)= does seem to be required, unless you don't
hook into nyxt's package loading. (e.g. quicklisp, which i'm not sure is
recommended; or other methods)

**** TODO how to send desktop notifications on REPL start, etc?


* Notes

I'm not sure how to set up a completely separate profile to isolate the
programmability from long-term browsing sessions.

** Common Lisp

*** Classes & Slots

These are eqivalent, but naively reevaluating does't affect the browser.

#+begin_src common-lisp
(define-configuration browser
  ;; it doesn't run anything that overwrites the defaults...
  ;; other settings are taking effect either.
  ((external-editor-program (list "alacritty --command vim"))))
#+end_src

Use =(slot-value ...)=

#+begin_src common-lisp
(defmethod customize-instance ((browser browser) &key)
  ;; old theme code: just set dark mode
  ;; (setf (slot-value browser 'theme) theme:+dark-theme+)

  ;; Alter the instance of the browser's theme slot
  (setf (slot-value browser 'external-editor-program)
        ;; '("gmacsclient" "-c")
        '("alacritty --command vim")))
#+end_src

***** TODO learn more...

#+begin_src common-lisp
(with-slots ((a obj1-slot-a) ... ) obj1 ... )
#+end_src


*** Combinating

"Method Combination" ... hmm close

#+begin_quote
_method_ *n.* an object that is part of a generic function and which provides
information about how that generic function should behave when its arguments are
objects of certain classes or with certain identities.

_method combination_ *n.* 1. generally, the composition of a set of methods to
produce an effective method for a generic function. 2. an object of type
method-combination, which represents the details of how the method
combination[1] for one or more specific generic functions is to be performed.
#+end_quote

** Source

*** libraries/analysis

+ The CL code in [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/libraries/analysis/README.org?plain=1#L5][libraries/analysis/*.lisp]] implements a tokenizer for processing
  natural language (probably within nyxt's output itself).

|-------------------------+----------------------------------------------------|
| file                    | class                                              |
|-------------------------+----------------------------------------------------|
| text-rank.lisp          | (defclass document-vertex (document) ... )         |
| analysis.lisp           | (defclass document () ... )                        |
| analysis.lisp           | (defclass document-collection () ... )             |
| composite-sequence.lisp | (defclass sequence-model (node) ... )              |
| composite-sequence.lisp | (defclass node () ... )                            |
| composite-sequence.lisp | (defclass element-node (node) ... )                |
| data.lisp               | (defclass language-data () ... )                   |
| dbscan.lisp             | (defclass document-cluster (document-vertex) ... ) |
|-------------------------+----------------------------------------------------|

Some detail is omitted from the tables.

** Automation

*** Notifications

Is there an interface for this?

+ The [[https://github.com/atlas-engineer/nyxt/blob/630287ca5ac6bb05719ba899f0270f33b7b58294/libraries/password-manager/password-keepassxc.lisp#L7][password:keepassxc-interface]] class shows how to interface with CLI

** Packages

I tried some of these, but can't quite get =asdf= working

*** [[https://git.migalmoreno.com/nx-tailor][migalmoreno/nx-tailor]]

See [[https://git.migalmoreno.com/nx-tailor/tree/README.md][README.md]]

#+begin_src sh :dir (identity nyxt-pkg)
git clone https://git.migalmoreno.com/nx-tailor
#+end_src

Just trying out the examples for now

#+begin_src common-lisp :tangle (expand-file-name "tailor.lisp" nyxt-config)
(define-configuration tailor:tailor-mode
  ((tailor:auto-p :time)
   (tailor:light-theme-threshold (* 8 60 60))
   (tailor:dark-theme-threshold (* 21.5 60 60))
   (tailor:main '(modus-operandi . modus-vivendi))
   (tailor:themes
    (list
     (make-instance 'tailor:user-theme
                    :name 'modus-operandi
                    :background-color "white"
                    :on-background-color "black"
                    :primary-color "#093060"
                    :secondary-color "#dfdfdf"
                    :on-secondary-color "#f0f0f0"
                    :accent-color "#8f0075"
                    :on-accent-color "#005a5f"
                    :font-family "Iosevka")
     (make-instance 'tailor:user-theme
                    :name 'modus-vivendi
                    :dark-p t
                    :background-color "black"
                    :on-background-color "white"
                    :primary-color "#c6eaff"
                    :secondary-color "#323232"
                    :on-secondary-color "#a8a8a8"
                    :accent-color "#afafef"
                    :on-accent-color "#a8a8a8"
                    :font-family "Iosevka")))))
#+end_src

Some other code is needed in =config.lisp= in order to add =tailor-mode= to
=web-buffers=. Once =tailor-mode= is active in a buffer, run =M-x load-theme=.

#+begin_src common-lisp
(define-configuration web-buffer
 ((default-modes `(tailor:tailor-mode ,@%slot-default%))))
#+end_src


* Tasks

** nyxt

*** TODO checkout Nyxt packages
+ [ ] [[https://github.com/aartaka/nx-search-engines][aartaka/nx-search-engines]] (contains completion for many [[https://github.com/aartaka/nx-search-engines/blob/master/search-engines.lisp][search engines]])
+ [ ] [[https://github.com/aartaka/nx-kaomoji][aartaka/nx-kaomoji]]

*** Try emitting graphviz from Nyxt using [[https://github.com/michaelw/cl-dot/blob/master/package.lisp][cl-dot]]

*** TODO review [[https://github.com/migalmoreno/nx-tailor][migalmoreno/nx-tailor]] source


*** TODO Configure & Try features

Maybe purchase the [[https://nyxt.atlas.engineer/extension/invader.org][invader theme]]

** Automation

+ scripting nyxt :: run with --headless, --no-socket and etc
+ extracting content :: using lisp or javascript
+ nyxt/mode/password:password-mode :: look into keypassxc/yubikey and gpg
+ Process Mode :: watch files/directories, run commands

*** Desktop/Customization

Auto rules is a good way to enforce policy for browsing specific apps. If
applied alongside custom wrapper scripts or Desktop files, then SSB's can be
supported

+ Auto Rules :: match-(domain|host|url|regex|scheme)
+ format-status-(tabs|modes) ::


* Config

#+begin_src gitignore :tangle .gitignore
auto-config.3.lisp
#+end_.local*
#+end_src

create window with buffer from CLI:

#+begin_src shell
nyxt --remote --quit --eval '
  (make-window (make-buffer :url "https://en.wikipedia.org/wiki/Tomato"))'
#+end_src

** config.lisp

#+begin_src lisp :tangle config.lisp
;; -*- mode: common-lisp -*-
;;* Nyxt
(in-package #:nyxt-user)
#+end_src

*** Modules

#+begin_src lisp :tangle config.lisp
;;** Modules

;;*** nyxt-user

;; (defmacro define-nyxt-user-system[-and-load]  name
;;   &rest args
;;   &key depends-on components &allow-other-keys)

(reset-asdf-registries)
(define-nyxt-user-system-and-load nyxt-user/basic-config
  :components ("status" "search-engines" "keys")
  :depends-on ("cl-dot"
               ;; "invader"
               )
  ;; (define-nyxt-user-system-and-load nyxt-user/invader-proxy
  ;;     :depends-on ("invader")
  )
#+end_src

*** Profiles

#+begin_src lisp :tangle config.lisp
;;** Profiles

;; to start an alternate configuration (this is easier)
;; nyxt --profile nosave --socket /tmp/nyxt-nosave.socket

;; also, I tried a few things to fully separate out an alternate config, but
;; couldn't quite get it to work. it's simpler to use defmethod to dispatch on
;; the profile type to customize each (e.g. custom theme per profile)
#+end_src

*** Browser

#+begin_src lisp :tangle config.lisp
;;** Browser

(define-configuration browser
    ((restore-session-on-startup-p nil)
     (theme theme:+dark-theme+ :doc "Setting dark theme.")))
;;((restore-session-on-startup-p :never-restore))
#+end_src

*** UI

#+begin_src lisp :tangle config.lisp
;;** UI

;;*** Prompt

;; when results only present a single source, hide it
(define-configuration prompt-buffer
    ((hide-single-source-header-p t)))

;;*** Editor

;; (define-configuration browser
;;   ((external-editor-program (list "terminator" "-x" "vim"))))

;; otherwise access via a handle on a (browser browser)
;;
;; (defmethod-instalce
;; (setf (slot-value browser 'external-editor-program)
;;       '("alacritty --command vim"))

;;*** Theme

;;**** Invader

;; ISSUE: ASDF won't compile compile this or any other modules

;; CAUSE: the SBCL compiling this wasn't the SBCL that Guix got Nyxt got
;; compiled with. A Guix profile needs to propagate SBCL (or something) and
;; some environment constraints on CL/SBCL/ASDF are needed

;; TODO: still not loading
#+end_src

*** Keys

#+begin_src lisp :tangle config.lisp
;;** Keys

(define-configuration input-buffer
    ((override-map
      (let ((map (make-keymap "override-map")))
        (define-key map "f1 f5" 'execute-command "C-space" 'nothing)))))
#+end_src

Keyboard setup:

- autoloads if =#:nyxt-user= namespace is configured to load

#+begin_src lisp :tangle keys.lisp
;; -*- mode: common-lisp -*-
(in-package #:nyxt-user)

;;** Keybindings

;;*** Noob Bindings

;; a list of bindings to focus on learning
(defvar *dc/noob-keymap* (make-keymap "noob-map"))

(define-key *dc/noob-keymap*
  "f1 m" 'nyxt/mode/message:list-messages
  "f1 f2 b" 'nyxt/mode/history:buffer-history-tree
  "f1 f2 B" 'nyxt/mode/buffer-listing:buffers-panel
  "f1 f2 h" 'nyxt/mode/history:history-tree
  "f1 f2 ." 'nyxt/mode/document:headings-panel
  "f1 f2 w" 'nyxt/mode/watch:watch-mode
  "f1 f2 p" 'nyxt/mode/preview:preview-mode
  "f1 f2 k" 'delete-current-buffer

  ;; only possible from macro editor
  ;; "f1 f2 M" 'nyxt/mode/macro-edit/save-macro
  "f1 f2 M" 'nyxt/mode/macro-edit:edit-macro)

(define-mode dc/noob-mode ()
  "Dummy mode for custom noob bindings in *dc/noob-keymap*."
  ((keyscheme-map
    (nkeymaps/core:make-keyscheme-map
     nyxt/keyscheme:emacs *dc/noob-keymap*))))
#+end_src

*** Bookmarks

#+begin_src lisp :tangle config.lisp
;;** Bookmarks

(defmethod files:resolve ((profile nyxt:nyxt-profile) (file nyxt/mode/bookmark:bookmarks-file))
  "Reroute the bookmarks to the config directory."
  #p"~/.config/nyxt/bookmarks.lisp")
#+end_src

Rerouted from =$XDG_DATA_HOME/nyxt= to =bookmarks.lisp=

#+begin_src lisp :tangle bookmarks.lisp
((:url "https://cloud.google.com/sdk/docs/cheatsheet#getting_started" :title "The gcloud CLI cheat sheet  |  Google Cloud CLI Documentation" :date "2023-06-08T04:35:41.228282Z" :tags ("gcloud"))
 (:url "http://doc.norang.ca/org-mode.html" :title "Org Mode - Organize Your Life In Plain Text!" :date "2023-06-09T23:26:26.610974Z" :tags ("agenda"))
 (:url "https://homelab.khuedoan.com/" :title "Khue's Homelab" :date "2023-06-08T03:57:59.743084Z" :tags ("homelab")))
#+end_src


*** Search

#+begin_src lisp :tangle config.lisp
;;** Search

#+end_src

Autoloads: =search-engines.lisp=

#+begin_src lisp :tangle search-engines.lisp
(in-package #:nyxt-user)

;; the context-buffer search-engines are sorted alphabetically
;; and *dc/search-engines* is appended to the slot value
;; https://github.com/atlas-engineer/nyxt/blob/97c0b4164df88e9e610b3237d7e304539abae618/source/buffer.lisp#L592
(defvar *dc/search-engines*
  (list
   ;; google:
   ;;
   ;; - &udm=14 disables AI results (supposedly; for now)
   ;; - &tbs=li:1 disable fuzzy search
   '("g"
     "https://google.com/search?q=~a&udm=14&tbs=li:1"
     "https://google.com")
   '("go"
     "https://google.com/search?q=~a&udm=14"
     "https://google.com")
   '("gfuzz"
     "https://google.com/search?q=~a"
     "https://google.com")
   '("doi"
     "https://dx.doi.org/~a"
     "https://dx.doi.org/")
   '("py"
     "https://docs.python.org/3/search.html?q=~a"
     "Python 3 (Docs)")
   '("ansd"
     "https://docs.ansible.com/ansible/latest/index.html#stq=~a&stp=1"
     "Ansible (Docs)")
   '("ansg"
     "https://galaxy.ansible.com/search?deprecated=false&keywords=~a&order_by=-download_count&page=1"
     "Ansible (Galaxy)")

   ;; github
   '("gh"
     "https://github.com/~a"
     "Github (URL)")
   '("ghi"
     "https://github.com/search?q=~a&type=issues"
     "Github (Issues)")
   '("ghp"
     "https://github.com/search?q=~a&type=pullrequests"
     "Github (Pull Reqs)")
   '("ght"
     "https://github.com/search?q=~a&type=topics"
     "Github (Topics)")
   '("npm"
     "https://www.npmjs.com/search?q=~a"
     "NPM")
   '("kdesrc"
     "https://lxr.kde.org/ident?v=kf6-qt6&_i=~a"
     "KDE Sources"))
  "List of search engines.")

;; TODO: consider using ©hárß for urls without search
;; '("á©" "https://galaxy.ansible.com/community") ; no URL for community

(define-configuration
 context-buffer
 "Go through the search engines above and make-search-engine out of them."
 ((search-engines
   (append
    (mapcar (lambda (engine) (apply 'make-search-engine engine))
            ,*dc/search-engines*)
    %slot-default%))))
#+end_src

*** Defaults

Default Modes

+ added: force-https-mode, emacs-mode, reduce-tracking-mode
+ already enabled: hint-mode

#+begin_src lisp :tangle config.lisp
;;** Defaults

(define-configuration buffer
  ;; (:web-buffer :prompt-buffer :editor-buffer)
  "Sets emacs-mode and mouse/noob bindings everywhere."
  ((default-modes
    `(:dc/noob-mode
      :emacs-mode
      force-https-mode
      reduce-tracking-mode

      ,@%slot-value%))))
#+end_src


TODO: add to default modes

| search-buffer-mode | no-procrastinate-mode         |
| document-mode      | bookmark-frequent-visits-mode |
| password-mode      | certificate-exception-mode    |
| bookmark-mode      | autofill-mode                 |
| annotate-mode      | spell-check-mode              |
| history-mode       |                               |

**** UI

 + small-web-mode :: for gopher/gemini (a major mode, i think)
 + style-mode ::
 + reading-line-mode

**** Nyxt UI

+ repeat-mode

**** Policy

+ no-sound-mode
+ no-webgl-mode

**** Automation

 + bookmark-frequent-visits-mode
 + bookmarklets
 + user-script-mode

**** Systems & Security

 + watch-mode :: refresh every N minutes
 + proxy-mode :: analyze/intercept traffic (for non-malicious purposes)
 + remembrance-mode
 + process-mode :: display formatted content from system commands
 + process-mode + tts-mode :: alerts

**** Programming

+  preview-mode

**** Common Lisp

+ macro-edit-mode
+ editor-mode
+ repl-mode
+ history-migration-mode
  - (does this import or append another history source)

**** Interactive

+ expedition-mode

** Modules

| user   | $XDG_CONFIG_HOME/{$desktop-,}mimeapps.list            |
| admin  | $XDG_CONFIG_DIRS/{$desktop-,}mimeapps.list            |
| distro | $XDG_DATA_DIRS/applications/{$desktop-,}mimeapps.list |

*** Status Glyphs

#+begin_src lisp :tangle status.lisp
;; BSD 2-Clause License

;; Copyright (c) 2020, Artyom Bologov <aartaka@protonmail.com>
;; All rights reserved.

;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:

;; 1. Redistributions of source code must retain the above copyright notice, this
;;    list of conditions and the following disclaimer.

;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.

;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(in-package #:nyxt-user)

;; from https://github.com/aartaka/nyxt-config/blob/master/status.lisp

(define-configuration :status-buffer
  "Display modes as short glyphs."
  ((glyph-mode-presentation-p t)))

(define-configuration :force-https-mode ((glyph "ϕ")))
(define-configuration :user-script-mode ((glyph "u")))
(define-configuration :blocker-mode ((glyph "β")))
(define-configuration :proxy-mode ((glyph "π")))
(define-configuration :reduce-tracking-mode ((glyph "τ")))
(define-configuration :certificate-exception-mode ((glyph "χ")))
(define-configuration :style-mode ((glyph "ϕ")))
(define-configuration :cruise-control-mode ((glyph "σ")))

(define-configuration status-buffer
  "Hide most of the status elements but URL and modes."
  ((style (str:concat
           %slot-value%
           (theme:themed-css (theme *browser*)
                             `("#controls,#tabs"
                               :display none !important))))))

(defmethod format-status-load-status ((status status-buffer))
  "A fancier load status."
  (spinneret:with-html-string
      (:span (if (and (current-buffer)
                      (web-buffer-p (current-buffer)))
                 (case (slot-value (current-buffer) 'nyxt::status)
                   (:unloaded "∅")
                   (:loading "∞")
                   (:finished ""))
                 ""))))

#+end_src

*** Tailor Theme

Never quite got this to work. I think a namespacing issue, but it could've been
the =asdf= module setup.

#+begin_src lisp :tangle tailor.lisp
(define-configuration tailor:tailor-mode
  ((tailor:auto-p :time)
   (tailor:light-theme-threshold (* 8 60 60))
   (tailor:dark-theme-threshold (* 21.5 60 60))
   (tailor:main '(modus-operandi . modus-vivendi))
   (tailor:themes
    (list
     (make-instance 'tailor:user-theme
                    :name 'modus-operandi
                    :background-color "white"
                    :on-background-color "black"
                    :primary-color "#093060"
                    :secondary-color "#dfdfdf"
                    :on-secondary-color "#f0f0f0"
                    :accent-color "#8f0075"
                    :on-accent-color "#005a5f"
                    :font-family "Iosevka")
     (make-instance 'tailor:user-theme
                    :name 'modus-vivendi
                    :dark-p t
                    :background-color "black"
                    :on-background-color "white"
                    :primary-color "#c6eaff"
                    :secondary-color "#323232"
                    :on-secondary-color "#a8a8a8"
                    :accent-color "#afafef"
                    :on-accent-color "#a8a8a8"
                    :font-family "Iosevka")))))
#+end_src
