:PROPERTIES:
:ID:       bf33c47f-71e2-48de-bd9b-f47342255275
:END:
#+TITLE: FRC: Teams
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]

* Resources
[[https://github.com/search?q=topic%3Afrc+created%3A%3E2022-01-01+stars%3A%3E5&type=Repositories&ref=advsearch&l=&l=&s=updated&o=desc][Github Search: topic:frc created:>2022-01-01 stars:>5]] (order by updated,desc)

* Local Teams

** 401

Blacksburg VA

*** [[https://github.com/team401/2024-Robot-Code][team401/2024-Robot-Code]]

+ Uses [[https://github.com/aidnem/secretary-of-state][aidnem/secretary-of-state]] to transform CSV description of state machines
  into mermaid diagrams. Pretty cool.
+ Also includes models/configs to animate the robot in AdvantageScope
+ GH Actions to run unit tests

* Teams With Starred Projects

** 6328 Mechanical Advantage

Littleton, MA

+ [[https://github.com/Mechanical-Advantage/RobotCode2025Public][Mechanical-Advantage/RobotCode2025Public]]

** 6738 Excalibur

Modi'in, Israel

+ [[https://github.com/ExcaliburFRC/Crescendo2024][ExcaliburFRC/Crescendo2024]]
+ [[https://github.com/ExcaliburFRC/Reefscape2025][ExcaliburFRC/Reefscape2025]]
+ [[https://github.com/ExcaliburFRC/ChargedUp2023][ExcaliburFRC/ChargedUp2023]]

** 846 Funky Monkeys

San Jose, CA

+ [[https://github.com/Team846/pongo][Team846/pongo]] 2025 (C++)
+ [[https://github.com/Team846/MonkeyVision_AT][Team846/MonkeyVision_AT]] AprilTag Detection (Python)
+ [[https://github.com/Team846/MonkeyVision_GPD][Team846/MonkeyVision_GPD]] Game Piece Detection (Python)

** 6343 Steel Ridge Robotics

RidgeField, WA

+ [[https://github.com/SteelRidgeRobotics/2025Pickles][SteelRidgeRobotics/2025Pickles]] 2025 (Java Swerve Base)
+ [[https://github.com/SteelRidgeRobotics/2025Reefscape][SteelRidgeRobotics/2025Reefscape]] 2025 (Python)
+ [[https://github.com/SteelRidgeRobotics/2024MetalMelody][SteelRidgeRobotics/2024MetalMelody]] 2024 (Python)
  - useful diagram/tables with [[https://github.com/SteelRidgeRobotics/2024MetalMelody/blob/main/docs/hardware_software_specification.md][./docs/hardware_software_specification.md]]

** 364 Fusion

Gulfport, MS

+ [[https://github.com/TeamFusion364/PracticalNeoSwerve][TeamFusion364/PracticalNeoSwerve]]
+ [[https://github.com/TeamFusion364/PracticalTalonSwerve][TeamFusion364/PracticalTalonSwerve]]

** 1073 The Force Team

+ [[https://github.com/FRCTeam1073-TheForceTeam/robot2025][FRCTeam1073-TheForceTeam/robot2025]]
  - Vision coprocessor, Lidar (separate thread), Diagnostics
+ [[https://github.com/FRCTeam1073-TheForceTeam/Localize2025][FRCTeam1073-TheForceTeam/Localize2025]]

* 2025 Finals

| Winner   | 1690 | 4414 | 2073 | 5166 |
| Finalist | 1323 | 2910 | 4272 | 5026 |

The other teams don't seem to have code on Github.

** Iron Panthers
Burlingame, CA

+ [[https://github.com/Iron-Panthers/FRC-2025][Iron-Panthers/FRC-2025]]
  - AdvantageKit, PathPlannerLib, Phoenix5+6, Photonlib
  - No advantage kit. Six main subsystem packages, each using HAL (IO only)
    - Simulation supported through type-based polymorphism (in constants).
  - Case statements in each =*Constants.java= file, which are linked into other
    files as needed. These are supported with enums that facilitate =case=
    statements elsewhere. They do use the =switch/case= pattern-matching for this
  - Objects like =[Module(...), Module(...), ...]= for swerve-module params are
    created in =*Constant= classes, assumed constant and linked elsewherex
+ [[https://github.com/Iron-Panthers/FRC-2024][Iron-Panthers/FRC-2024]]
  - Separate Subsystems (vendor-based Data Injection?)
+ [[https://github.com/Iron-Panthers/FRC-2023][Iron-Panthers/FRC-2023]]
  - separate =frc.robot.commands= package
  - a [[https://github.com/Iron-Panthers/FRC-2023/blob/main/src/main/java/frc/robot/subsystems/NetworkWatchdogSubsystem.java][NetworkWatchdogService]] subsystem

** 2910 Jack In The Bot

Mill Creek, WA

+ [[https://github.com/FRCTeam2910/2024CompetitionRobot-Public][FRCTeam2910/2024CompetitionRobot-Public]]
  + Limelight, PathPlanner, Phoenix5+6
  + Combines Phoenix6 Libs with =IO= Pattern
  + State Machines in =Superstructure.java= with =case= statements
