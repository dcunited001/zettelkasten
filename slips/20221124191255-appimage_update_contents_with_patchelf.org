:PROPERTIES:
:ID:       700ba45a-a93b-4f66-be59-bab97b15a6ad
:END:
#+TITLE: Appimage: update contents with patchelf
#+CATEGORY: slips
#+TAGS:

+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:7edab00d-1a52-4a27-b83a-f64639e84a77][Guix: installing matlab]]

Raise3D's ideamaker is available as an appimage -- kudos for "doing it right" when the source
is closed, i.e. making it simple for distributions other than the jurassics.

  #+begin_quote
  Matlab could learn quite a bit from these guys, although managing
  an appimage's dependencies is not so easy when it involves acceleration
  (GPU/CUDA/CV and managing AMD compatibility) or hardware for signals
  processing, etc.
  #+end_quote

This reddit post [[https://www.reddit.com/r/GUIX/comments/y4a7o2/fhs_container_support_merged/][FHS container support merged!]] contains more info on how to get
appimages to run.
  
* On Guix

This requires patching some of the bundled' contents with =patchelf=. See
[[https://ryantm.github.io/nixpkgs/builders/images/appimagetools/][pkgs.appimagetools from Nixos]] for more info

** Determine the appimage type

This is a type2 non-ISO9660 appimage.

+ It's files are in an embedded filesystem at the end of the executable.
+ Blender does the same thing (AFAIK) to package it's bundled =python310.zip=,
  which is why the [[https://github.com/mamut-m/blender_notebook][mamut-m/blender_notebook]] jupyter kernel blows up (AFAIK).

#+begin_src bash
# define $ideamaker
# load guix devdebug profile
file -k $ideamaker
#+end_src

#+RESULTS:
#+begin_src bash
$ideamaker: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=41b865b367a5540cb273cc842bbeaf6a707810d9, stripped\012- data
#+end_src

This step is only required when using the Nixos =appimageTools.wrapType2= tools.

** Probe the binary

#+begin_src bash
# define $ideamaker
# load guix devdebug profile
patchelf --print-interpreter $ideamaker
patchelf --print-rpath $ideamaker
patchelf --print-soname $ideamaker
patchelf --print-needed $ideamaker
#+end_src

+ interpreter :: /lib64/ld-linux-x86-64.so.2
+ rpath :: n/a
+ soname :: n/a
+ needed :: 4 libs
  - libdl.so.2 :: dynamic loader
  - libpthread.so.0 :: posix thread managment
  - libz.so.1 :: compression
  - libc.so.6 :: system call interfaces for linux

#+begin_quote
no, i didn't actually know what the above do. i would probably never otherwise
be exposed to this. it's all fairly basic stuff i guess.

sadly, i've never done systems programming, i'm fairly isolated and knowledgable
people i encounter in my thus far hermetically sealed life quite frequently mask
their experience or level of knowledge (for some reason or another, usually to
retain flexibility) ... so low-level implementation details and acronyms are
lost on me.

i don't fit into anyone's pecking order. the system did not produce me, the
system cannot measure me. the system thinks it understands its measure, but it
doesn't understand its ruler: too much is based on judging by distance to
performance of peers in recent cohorts who have mostly indistinguishable
experiences. i just really don't fit into much of anything. i'm not great at
explaining things, but when you are an anomaly and combine various fields, you
have to explain everything you do. people just don't understand, but i stay poor
anyways, making me dependent and thus placing me below everyone else in the
pecking order.

it is what it is. at least everything is getting better.
#+end_quote

*** The file can be opened in emacs =elf-mode=

I'm not sure how to configure emacs to load this mode by default on large binary
files. In this case, =elf-mode= is not super-useful as it only lists the
=dynsym= table ([[https://www.oreilly.com/library/view/learning-linux-binary/9781782167105/ch02s04.html][link]], [[https://blog.k3170makan.com/2018/10/introduction-to-elf-format-part-vi.html][link]] and [[https://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html][linuxbase.org]])

** Extract the contents

Run the appimage with =--extract-contents= or see the above reddit post for
instructions. The appimage offset is needed:

#+begin_src bash
# from the appimage directory
manifest=~/.config/guix/manifests/raise3d.scm
appimageoffset=$(guix shell --container --emulate-fhs --network --preserve="^DISPLAY$" -m $manifest -- ./$ideamaker --appimage-offset)
#+end_src

+ The binaries in the app will need to be patched with =patchelf=.
+ =LD_LIBRARY_PATH= and =LIBRARY_PATH= will need to be set appropriately
+ You may need development inputs for some packages. If so, use =guix shell -D=

#+begin_src bash
# thanks to #nonguix irc channel for the help
guix shell -CNF --preserve='^QT_DEBUG_' libsm sqlite libgpg-error p11-kit -D ungoogled-chromium libtasn1 gmp e2fsprogs glu glib:bin gcc:lib --preserve='^DISPLAY$' --preserve='^XAUTHORITY$' --preserve='^DBUS_' --share=$XAUTHORITY --share=/sys/dev --share=/sys/devices --share=/tmp --expose=/dev/dri --expose=/var/run/dbus -- ./$ideamaker --appimage-extract-and-run
#+end_src

***** TODO configure LD_LIBRARY_PATH to allow the app to run using its own binaries

** Patch the Binary

#+begin_src bash
# define ideamaker
interpreter=$GUIX_DEVTOOLS/lib/ld-linux-x86-64.so.2
patchelf --set-interpreter $ideamaker
#+end_src

*** Use Guix-Shell Instead

Alternately, one can construct a purpose-built =guix shell= with what's below.

+ The =-F= option makes the derivation's singleton profile function as though
  the standard POSIX filesystem is entirely in tact.
+ The =-C= option makes it operate like a container, isolating the process.
  Speficially, I'm not sure how.

#+begin_src bash
__deps="guix shell -FC coreutils findutils grep sed diffutils patch gawk tar gzip bzip2 xz lzip fuse fuse-exfat glibc zlib patchelf"
guix shell
#+end_src

I always forget about this method. It's seriously handy.

**** Quick Rant

+ to find this list of packages, look at =./gnu/system.scm= in the guix project
  - find the definitions for =%base-packages= and infer
  - if you're confused about what to include, think of a programming
    project/language that definitely "has it", whatever it is you need
  - run =guix graph python | dot -Tpng -opython3.png= and rifle through the
    pages of a greybeard's stolen tome.
  - other packages whose dependency graphs you should check: coreutils, bash
    (vs. zsh vs. fish), glibc, blender, etc.
  - literally all the answers are here. the =guix graph= functionality
    single-handedly justifies having guix installed on your system. I'm sure
    other package managers make this possible -- it's just much harder.
    _Because_ /LISP IS HOMOICONIC/, guix can do this easily.
    - Did you know: [[https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/][javascript was almost a lisp (scheme)]], but it's not, so no
      paredit for you. and that's why we can't have nice things. now you have to
      get clojurescript to do backflips over gulp/webpack/es6/babel, a hundred
      oneliners from npm and some other trio of faceless neologisms ... if you
      want to use lisp in frontend. the boilerplate is an intense, ever-shifting
      sea of dread and broken projects.
    - while freecad/blender have scripting repls that permit recording UI
      macros, you can't parameterize those recorded macros with lambdas (for
      better or worse) because it's python. but python is what the people
      demand.
  - this, and other tools like it, help you learn FAST.
    - emacs =M-x find-grep= is a godsend, when you have the source on your
      machine. it's a shame that sourcegraph has so many service dependencies
      (why you need k3s on your machine and why you need to turn if on/off)
    - as long as your search is not bounded to the entire internet (looking at
      you google), then you can easily find the answers you need. the source
      code /is/ documentation ... especially the tests.

... okay, rant over.

** Provide needed dynamic libs

GNU C removed libpthreads recently, so i may need a specific Guix profile.

+ Stated more precisely,
  [[https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html][libpthreads
  and libdl were integrated into the glibc project]], which is why it's tough
  to find definite references to these symbols in the Guix project.
