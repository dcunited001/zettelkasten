:PROPERTIES:
:ID:       700ba45a-a93b-4f66-be59-bab97b15a6ad
:END:
#+TITLE: Appimage: update contents with patchelf
#+CATEGORY: slips
#+TAGS:

+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:7edab00d-1a52-4a27-b83a-f64639e84a77][Guix: installing matlab]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
+ [[id:cbfc2dba-7692-46a3-9c69-9edda1f91126][3D Printing]]

Raise3D's ideamaker is available as an appimage -- kudos for "doing it right" when the source
is closed, i.e. making it simple for distributions other than the jurassics.

This reddit post [[https://www.reddit.com/r/GUIX/comments/y4a7o2/fhs_container_support_merged/][FHS container support merged!]] contains more info on how to get
appimages to run.
  
* On Guix

This requires patching some of the bundled' contents with =patchelf=. See
[[https://ryantm.github.io/nixpkgs/builders/images/appimagetools/][pkgs.appimagetools from Nixos]] for more info

** Determine the appimage type

This is a type2 non-ISO9660 appimage.

+ It's files are in an embedded filesystem at the end of the executable.
+ Blender does the same thing (AFAIK) to package it's bundled =python310.zip=,
  which is why the [[https://github.com/mamut-m/blender_notebook][mamut-m/blender_notebook]] jupyter kernel blows up (AFAIK).

#+begin_src bash
# define $ideamaker
# load guix devdebug profile
file -k $ideamaker
#+end_src

#+RESULTS:
#+begin_src bash
$ideamaker: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=41b865b367a5540cb273cc842bbeaf6a707810d9, stripped\012- data
#+end_src

This step is only required when using the Nixos =appimageTools.wrapType2= tools.

** Probe the binary

#+begin_src bash
# define $ideamaker
# load guix devdebug profile
patchelf --print-interpreter $ideamaker
patchelf --print-rpath $ideamaker
patchelf --print-soname $ideamaker
patchelf --print-needed $ideamaker
#+end_src

+ interpreter :: /lib64/ld-linux-x86-64.so.2
+ rpath :: n/a
+ soname :: n/a
+ needed :: 4 libs
  - libdl.so.2 :: dynamic loader
  - libpthread.so.0 :: posix thread managment
  - libz.so.1 :: compression
  - libc.so.6 :: system call interfaces for linux

#+begin_quote
no, i didn't actually know what the above do. i would probably never otherwise
be exposed to this. it's all fairly basic stuff i guess.

sadly, i've never done systems programming, i'm fairly isolated and knowledgable
people i encounter in my thus far hermetically sealed life quite frequently mask
their experience or level of knowledge (for some reason or another, usually to
retain flexibility) ... so low-level implementation details and acronyms are
lost on me.

i don't fit into anyone's pecking order. the system did not produce me, the
system cannot measure me. the system thinks it understands its measure, but it
doesn't understand its ruler: too much is based on judging by distance to
performance of peers in recent cohorts who have mostly indistinguishable
experiences. i just really don't fit into much of anything. i'm not great at
explaining things, but when you are an anomaly and combine various fields, you
have to explain everything you do. people just don't understand, but i stay poor
anyways, making me dependent and thus placing me below everyone else in the
pecking order.

it is what it is. at least everything is getting better.
#+end_quote

*** The file can be opened in emacs =elf-mode=

I'm not sure how to configure emacs to load this mode by default on large binary
files. In this case, =elf-mode= is not super-useful as it only lists the
=dynsym= table ([[https://www.oreilly.com/library/view/learning-linux-binary/9781782167105/ch02s04.html][link]], [[https://blog.k3170makan.com/2018/10/introduction-to-elf-format-part-vi.html][link]] and [[https://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html][linuxbase.org]])

** Patch the Binary

#+begin_src bash
# define ideamaker
interpreter=$GUIX_DEVTOOLS/lib/ld-linux-x86-64.so.2
patchelf --set-interpreter $ideamaker
#+end_src

*** Use Guix-Shell Instead

Alternately, one can construct a purpose-built =guix shell= with what's below.

+ -F :: makes the derivation's singleton profile function as though
  the standard POSIX filesystem is entirely in tact.
+ -C :: makes it operate like a container, isolating the process.
  Speficially, I'm not sure how.
+ -N :: allow network access to containers

#+begin_src bash
deps="guix shell -FC coreutils findutils grep sed diffutils patch gawk tar gzip bzip2 xz lzip glibc zlib patchelf"
guix shell -CNF $deps
#+end_src

I always forget about this method. It's seriously handy. See the rant below.

*** Provide needed dynamic libs

GNU C removed libpthreads recently, so i may need a specific Guix profile.

+ Stated more precisely,
  [[https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html][libpthreads
  and libdl were integrated into the glibc project]], which is why it's tough
  to find definite references to these symbols in the Guix project.

** Run the appimage

The app needs to be extracted to be run. This is because the app needs fuse in
order to mount and because fuse requires =setuid= permission for users to mount
filesystems [[https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces][without access to the global mount namespace]].

+ The binaries in the app will need to be patched with =patchelf=.
+ =LD_LIBRARY_PATH= and =LIBRARY_PATH= will need to be set appropriately
+ You may need development inputs for some packages. If so, use =guix shell -D=
+ When you mount the contents from the appimage offset, you can use other tools
  outside the guix container to view the filetree.
  - if extracting and running in place, it's not clear to me where the mount
    ends up.
+ If QT plugin issues arise, =export QT_DEBUG_PLUGINS=1= and pass
  =--preserve='^QT_DEBUG_'= to guix shell.

The guix manifest is in [[https://github.com/dcunited001/ellipsis/blob/master/CAD.org][CAD.org]] in my dotfiles. Since it requires development
dependencies, it can't simply use =(specifications->manifest '(...))=. This
manifest has better notes on the dependencies (see the =(gnu package ...)=
module includes for more info)

*** Set up Environment

#+begin_src bash
# TODO update library path with my other desktop search paths
# - e.g. so a consistent experience is attained (some windows/menu's are blacked out)
export LD_LIBRARY_PATH # ...
export LIBRARY_PATH


# pick a framebuffer
# QT_QPA_PLATFORM=linuxfb- # requires other dependencies
QT_QPA_PLATFORM=xcb # will default to this
#+end_src

*** Mount the contents

Get the appimage offset. Note that you are actually executing the appimage (to
pass it the =--appimage-offset= which will cause it to terminate before reaching
its content, unless it's evil)

#+begin_src bash
# from the appimage directory
manifest=~/.config/guix/manifests/raise3d.scm
appimageoffset=$(guix shell --container --emulate-fhs --network -m $manifest -- ./$ideamaker --appimage-offset)

appmount=raise3d
mkdir $appmount
sudo mount $appmount -o offset=$appimageoffset
#+end_src

**** Launch the binary using =ungoogled-chromium= as a base

#+begin_src bash
deps="libsm sqlite libgpg-error p11-kit"
otherdeps=
devbase=ungoogled-chromium
# devbase=qutebrowser
devdeps="libtasn1 gmp libomp e2fsprogs glu glib:bin gobject-introspection gcc-toolchain" # gcc:lib

# thanks to #nonguix irc channel for the help
guix shell -CNF $deps $otherdeps -D $devbase $devdeps --preserve='^QT_DEBUG_' --preserve="^QT_QPA_PLATFORM" \
    --preserve='^DISPLAY$' --preserve='^XAUTHORITY$' --preserve='^DBUS_' \
    --share=$XAUTHORITY --share=/sys/dev --share=/sys/devices --share=/tmp \
    --expose=/dev/dri --expose=/var/run/dbus \
    -- ./AppRun
#+end_src

It may need to run from the =./raise3d= dir or I may need to call
=./raise3d/usr/bin/ideamaker(.real)?=.

+ Running ./Raise3d/AppRun: missing =libgomp.so.1=. the lib is in the =guix
  shell env= but not in the =AppImage= afaik. However, it's not linked and that
  feels janky.
+ Running =cd raise3d && usr/bin/ideamaker.real= is not the right way to call
  the startup script AFAIR, but it gives a =libquazip.so.1= error, which is in
  the =AppImage= path. AFAIR, I have some of the shared lib dependencies doubled
  up and the =AppRun= exec runs some different setup (setting r/paths or
  something)

This is for OpenMP, which I'm fairly surprised has been integrated into the
Raise3D application build. This makes sense for cross-platform builds of fast
code used for slicing (CUDA's memory/caching makes sense for these problems) and
IIRC OpenMP is an open interface to write once and build/run on multiple
heterogenous GPU's ... iirc

Here we have a more complete list of deps:

#+begin_src sh
patchelf --print-needed usr/bin/ideamaker.real

# libquazip.so.1
# libdl.so.2
# libGLU.so.1
# libgomp.so.1
# libz.so.1
# libcurl.so.4
# libcork.so.1
# libQt5Widgets.so.5
# libQt5Gui.so.5
# libQt5Network.so.5
# libQt5SerialPort.so.5
# libQt5Core.so.5
# libGL.so.1
# libpthread.so.0
# libstdc++.so.6
# libm.so.6
# libgcc_s.so.1
# libc.so.6
#+end_src

a few of the others are App Image's =/usr/lib= directory, which maybe needs to
be added to LD_LIBRARY_PATH ... if allowing that to be messed with is allll good
man.

**** Finish resolving the patchelf issue

I really wanted to determine whether lib64 would be a problem. Running the
appimage using the FHS method circumvents:

+ the need to patch the interpreter
+ the need to recursively patch dependencies (like python/julia libs pulling
  down blobs)

Generally if it's not a programming language, then the first issue is maybe once
per script, but fairly simple if necessary. Everything else is basically the
same. However, I can't say that I'm correct about how deeply the FHS method
addresses those latter issues. Using docker, VM's or remote development will
circumvent them in most cases (another reason for a VPN to my homelab or cloud)

***** TODO try these options to circumvent issues running raise3d

+ [ ] try to edit the =libgomp= package so it creates the other symlink
  ... however, there are probably a few other deps missing.
+ [ ] get =fuse= installed on the system and just use the =guix shell= to
  troubleshoot the app initialization. this /may/ require some patchelf
+ [ ] configure =LD_LIBRARY_PATH= to allow the app to run using its own binaries
+ [ ] just run a VM or maybe a docker container where X11 display is shared

I can't quite write to some directories within the appimage.

*** Extract the contents

Run the appimage with =--extract-contents=.

**** Extract and run in place

#+begin_src bash
# thanks to #nonguix irc channel for the help
deps="libsm sqlite libgpg-error p11-kit"
otherdeps=
devbase=ungoogled-chromium
devdeps="libtasn1 gmp e2fsprogs glu glib:bin gobject-introspection gcc:lib"

# thanks to #nonguix irc channel for the help
guix shell -CNF $deps $otherdeps -D $devbase $devdeps --preserve='^QT_DEBUG_' --preserve="^QT_QPA_PLATFORM" \
    --preserve='^DISPLAY$' --preserve='^XAUTHORITY$' --preserve='^DBUS_' \
    --share=$XAUTHORITY --share=/sys/dev --share=/sys/devices --share=/tmp \
    --expose=/dev/dri --expose=/var/run/dbus \
#+end_src

* Quick Rant

+ to find this list of packages used for guix shell above, look at
  =./gnu/system.scm= in the guix project
  - find the definitions for =%base-packages= and infer
  - if you're confused about what to include, think of a programming
    project/language that definitely "has it", whatever it is you need
  - run =guix graph python | dot -Tpng -opython3.png= and rifle through the
    pages of a greybeard's stolen tome.
  - other packages whose dependency graphs you should check: coreutils, bash
    (vs. zsh vs. fish), glibc, blender, etc.
  - literally all the answers are here. the =guix graph= functionality
    single-handedly justifies having guix installed on your system. I'm sure
    other package managers make this possible -- it's just much harder.
    _Because_ /LISP IS HOMOICONIC/, guix can do this easily.
    - Did you know: [[https://thenewstack.io/brendan-eich-on-creating-javascript-in-10-days-and-what-hed-do-differently-today/][javascript was almost a lisp (scheme)]], but it's not, so no
      paredit for you. and that's why we can't have nice things. now you have to
      get clojurescript to do backflips over gulp/webpack/es6/babel, a hundred
      oneliners from npm and some other trio of faceless neologisms ... if you
      want to use lisp in frontend. the boilerplate is an intense, ever-shifting
      sea of dread and broken projects.
    - while freecad/blender have scripting repls that permit recording UI
      macros, you can't parameterize those recorded macros with lambdas (for
      better or worse) because it's python. but python is what the people
      demand.
  - this, and other tools like it, help you learn FAST.
    - emacs =M-x find-grep= is a godsend, when you have the source on your
      machine. it's a shame that sourcegraph has so many service dependencies
      (why you need k3s on your machine and why you need to turn if on/off)
    - as long as your search is not bounded to the entire internet (looking at
      you google), then you can easily find the answers you need. the source
      code /is/ documentation ... especially the tests.

... okay, rant over.
