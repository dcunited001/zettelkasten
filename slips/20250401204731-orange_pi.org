:PROPERTIES:
:ID:       35cdd063-b646-4141-83ea-fcac8b337875
:END:
#+TITLE: Orange Pi
#+CATEGORY: slips
#+TAGS:

This is a bit of a mess, since I didn't anticipate a need to reorganize -- and I
quickly accumulated quite a bit. The top-level is for orange-pi, but I may move
this to rockchip generally.

I own the OrangePi 5+, but I will likely be working with an older & smaller
version ... so i'll need the pinouts for both. Since this is device-specific,
I'll create headings for those.

* Roam
+ [[id:708d6f59-64ad-473a-bfbb-58d663bde4f0][IoT]]
+ [[id:584f8339-a893-40ab-b808-7b4f7046313c][Hardware]]

* Docs

+ [[http://www.orangepi.org/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-5-plus.html][Orange Pi 5 Plus Resources]]: manuals, schematics, step file, tools, images
  - The manual is basically a PDF of the wiki page for the device
+ [[https://uthings.uniud.it/building-mainline-u-boot-and-linux-kernel-for-orange-pi-boards][Building mainline U-boot and Linux Kernel for Orange Pi boards]]

** Repos

+ [[https://github.com/orangepi-xunlong/orangepi-build][orangepi-xunlong/orangepi-build]]
  - in [[https://github.com/orangepi-xunlong/orangepi-build/blob/36a2f27f9b2d064331e4e22ccd384e0d269dbd31/scripts/compilation.sh#L371-L387][./scripts/compilation.sh]]:
    - =compile_kernel()=
    - [[https://github.com/orangepi-xunlong/orangepi-build/blob/36a2f27f9b2d064331e4e22ccd384e0d269dbd31/scripts/compilation.sh#L113-L129][compile_uboot()]]
    - most functions use =dpkg-deb= to wrap in a package.
+ [[https://github.com/orangepi-xunlong/firmware][orangepi-xunlong/firmware]]
+ [[https://github.com/orangepi-xunlong/u-boot-orangepi][orangepi-xunlong/u-boot-orangepi]]
+ [[https://github.com/orangepi-xunlong/wiringOP][orangepi-xunlong/wiringOP]]
  - [[https://github.com/orangepi-xunlong/wiringOP/blob/37b32bc8a046ea59bd6855f4e8baa77fa7ef0c51/gpio/gpio.1#L4][gpio manpage]]

+ [[https://github.com/orangepi-xunlong/wiringOP-Python/tree/next][orangepi-xunlong/wiringOP-python]] next branch
+ [[https://github.com/orangepi-xunlong/linux-orangepi][orangepi-xunlong/linux-orangepi]] see branches for Linux 6.6+

* Resources

* Issues

* Topics

** Other Wifi

*** Dual Band Intel 7260NGW =iwlwifi=

+ NVMe 2230 dual band wifi
+ The =iwlwifi= is spec'd in =/etc/modprobe.d/iwlwifi.conf= with comments to remove,
  but =lsmod= shows it loaded with one reference. =lspci -vv= shows the
  module/driver recognized.
+ Shows up as a wireless device; not configurable.
+ Removing the modprobe should enable the device, but idk why it's disabled.

#+begin_src shell
remove iwlwifi \
(/sbin/lsmod | grep -o -e ^iwlmvm -e ^iwldvm -e ^iwlwifi | xargs /sbin/rmmod) \
&& /sbin/modprobe -r mac80211
#+end_src

Wasn't sure whether it would work, but the necessary devicetree config may be
included with the kernel.

+ Rock 5b Wifi? via [[https://github.com/Joshua-Riek/ubuntu-rockchip/issues/588][#588]] [[https://github.com/Joshua-Riek/ubuntu-rockchip/issues/563#issuecomment-1892690075][ubuntu-rockchip#563]] pointing to [[https://askubuntu.com/questions/1360175/intel-wifi-6-ax210-wifi-not-working-after-update][intel wifi 6 doesn't
  work after upgrade]]?


** FRC Photovision

*** Setup

OrangePi .img files are in the [[https://github.com/PhotonVision/photonvision/releases/tag/v2025.3.1][photovision releases]]. See PV docs [[https://docs.photonvision.org/en/latest/docs/quick-start/quick-install.html#install-the-latest-image-of-photonvision-for-your-coprocessor][Install
photovision .img for your coprocessor]] for other images.

**** Build

[[https://github.com/PhotonVision/photonvision?tab=readme-ov-file#out-of-source-dependencies][Out-of-source deps]] included:

+ JNI code for [[https://mrcal.secretsauce.net/][mrcal]]: [[https://github.com/PhotonVision/mrcal-java][PhotonVision/mrcal-java]]
+ [[https://github.com/PhotonVision/thirdparty-opencv][OpenCV for Java with GStreamer/Protobuf/etc custom flags]]

It gets built by [[https://github.com/PhotonVision/photon-image-modifier][PhotonVision/photon-image-modifier]].

+ cloud-init :: ./OPi5_CIDATA/{[[https://github.com/PhotonVision/photon-image-modifier/blob/main/OPi5_CIDATA/meta-data][meta-data]],[[https://github.com/PhotonVision/photon-image-modifier/blob/main/OPi5_CIDATA/network-config][network-config]],[[https://github.com/PhotonVision/photon-image-modifier/blob/main/OPi5_CIDATA/user-data][user-data]]}
  - brings up networking, handles "en" vs "eth" interfaces
  - sets hostname, ubuntu user/pass/groups, ssh (pass auth)
+ [[https://github.com/PhotonVision/photon-image-modifier/blob/main/install.sh][install.sh]] calls [[https://github.com/PhotonVision/photon-image-modifier/blob/main/install_opi5.sh][install_opi5.sh]]
  - The latter would serve as a good guide for installing into a Debian.
+ [[https://github.com/PhotonVision/photon-image-modifier/blob/main/.github/workflows/main.yml#L36-L53][GH Workflows]] build on [[https://github.com/Joshua-Riek/ubuntu-rockchip][Joshua-Riek/ubuntu-rockchip]]
  - uses this board profile: [[https://github.com/Joshua-Riek/ubuntu-rockchip/blob/main/config/boards/orangepi-5-pro.sh][./config/boards/orangepi-5-pro.sh]]
  - with this u-boot package: [[https://github.com/Joshua-Riek/ubuntu-rockchip/tree/main/packages/u-boot-radxa-rk3588/debian][./packages/u-boot-radxa-rk3588/debian]]

***** Extra Packages

+ traceroute/ping (in dev? ICMP can run from other hosts)

**** Installation

Write to an SD card. If the OrangePi is new and boots to TF(SD), eMMC, or NVMe,
then it will boot. Also copy =*.img= to a USB.

TODO: After boot, mount the USB (unless...). And flash to eMMC. Then reboot.

Check BIOS settings to ensure that eMMC has priority. Disabling other boot makes
this process more complicated -- the device will always prefer the configured
boot sequence. When there are multiple methods, it stops at the first it finds

+ This can cause issues with u-boot & device tree if it u-boot points the next
  boot phase to a dev-tree on the wrong disk.

**** Networking

The image expects 1+ LAN interfaces and a wifi interface.

+ Since it's ARM, you'll need only the NVMe for the OPe or a USB WiFi ...
  Anything connected to the CPU may necessitate building u-boot (with
  reconfigured drivers)
  - rpi-blacklist.conf :: broadcom wifi (brcmfmac, brcmutil); bluetooth (btbcm);
    hci_uart. the file's only referenced by RPi builds (but idk)
+ The ISOs Photonvision services are preconfigured to bind to =photovision.local:5800=
  - Outside of the bound subnet, requires =mDNS= connectivity/forwarding

TODO: verify what they bind to when WiFi's missing

*** Configure

+ WorkingDirectory :: /opt/photonvision


** Kernel

*** ubuntu-rockchip

+ [[https://github.com/Joshua-Riek/ubuntu-rockchip][Joshua-Riek/ubuntu-rockchip]]

  
*** DietPi


[[https://github.com/MichaIng/DietPi][MichaIng/DietPi]]

+ [[https://github.com/MichaIng/build][MichaIng/build]] Forked from Armbian Linux Build Framework
  - accumulated [[https://github.com/MichaIng/build/tree/b7ab97f8873e7fc5d6db1ed5351bcd2a35a93577/patch/u-boot/u-boot-rockchip64][u-boot patches for rockchip64]] (aka what could have ever possibly
    went wrong)
+ [[https://github.com/MichaIng/hacks][MichaIng/hacks]] sets up a [[https://github.com/MichaIng/hacks/blob/main/screen_ssh_sessions.sh][screen config]]

Minimized Ubuntu Images with a Wide selection of boards

+ [[https://github.com/search?q=repo%3AMichaIng%2FDietPi%20rk3588&type=code][GH Search on rk3588]]

*** Orange Pi

[[https://github.com/orangepi-xunlong/linux-orangepi][orangepi-xunlong/linux-orangepi]] see branches for Linux 6.6+

+ [[https://github.com/orangepi-xunlong/linux-orangepi/tree/orange-pi-6.6-rk35xx/arch/arm64/boot/dts/rockchip][rockchip device tree]] and [[https://github.com/orangepi-xunlong/linux-orangepi/blob/orange-pi-6.6-rk35xx/arch/arm64/boot/dts/rockchip/Makefile][Makefile]]
+ [[https://github.com/orangepi-xunlong/linux-orangepi/blob/018b9c0bc2d5130651a7a1dfc33e46028037fba4/arch/arm64/configs/defconfig#L50][arch/arm64/configs/defconfig]] var =CONFIG_ARCH_ROCKCHIP= gets set here (and in
  the arm7 defconfig)

Then =CONFIG_ARCH_ROCKCHIP= affects:

+ drivers/phy/Makefile
+ drivers/soc/Makefile
+ drivers/clk/Makefile
+ arch/arm64/boot/dts/rockchip/Makefile: include device trees

And some other armv7-a files

** Commands

*** gpio
 
|------------------------+----------------------------------------------------|
| gpio mode 4 output     | Set pin 4 to output                                |
| gpio -g mode 23 output | Set GPIO pin 23 to output (same as WiringPi pin 4) |
| gpio mode 1 pwm        | Set pin 1 to PWM mode                              |
| gpio pwm 1 512         | Set pin 1 to PWM value 512 - half brightness       |
| gpio export 17 out     | Set GPIO Pin 17 to output                          |
| gpio export 0 in       | Set GPIO Pin 0 (SDA0) to input.                    |
| gpio -g read 0         | Read GPIO Pin 0 (SDA0)                             |
|------------------------+----------------------------------------------------|


** Guix

*** Rockchip System

+ [[https://codeberg.org/fishinthecalculator/guix-deployments/src/ee5f8d7b2cfc8b44a0f7de4049f95f2fb0a05615/modules/fishinthecalculator/tarapia/system/config.scm#L59-L65][fishinthecalculator/guix-deployments]] (author of gocix & sops) has a pinebook
  system running on =rk3399= with a few build variants. There's some
  tooling/scripts in the its system directory.

  + It extends the =u-boot-pinebook-pro-rk3399-bootloader=
  + Both systems specify a list of =initrd-modules= for the hardware
  + I don't see any =devicetree= config (which may be completely in-tree for the
    Arm kernel kernel)


*** U-Boot

The package in [[(define-public u-boot-orangepi-r1-plus-lts-rk3328
  (make-u-boot-rockchip-package "orangepi-r1-plus-lts" 'rk3328))][gnu/packages/bootloaders.scm]]

#+begin_src scheme
(define-public u-boot-orangepi-r1-plus-lts-rk3328
  (make-u-boot-rockchip-package "orangepi-r1-plus-lts" 'rk3328))
#+end_src

... Inherits from a bootloader package, generated by
=make-u-boot-rockchip-package=, also in [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bootloaders.scm?h=master#n1153][gnu/packages/bootloaders.scm]]

#+begin_src scheme
(define* (make-u-boot-rockchip-package board soc #:optional configs)
  "Return the U-Boot package for BOARD with AAarch64 Rockchip SOC
(System on Chip)."
  (let* ((board (string-append board "-" (symbol->string soc)))
         (base (make-u-boot-package board "aarch64-linux-gnu"
                                    #:configs configs)))
    (package
      (inherit base)
      (arguments
       (substitute-keyword-arguments (package-arguments base)
         ((#:phases phases)
          #~(modify-phases #$phases
              (add-after 'unpack 'set-environment
                (lambda* (#:key inputs #:allow-other-keys)
                  (setenv "BL31" (search-input-file inputs "/bl31.elf"))))))))
      (inputs (modify-inputs (package-inputs base)
                (append (match soc
                          ('rk3588 arm-trusted-firmware-rk3588)
                          ('rk3399 arm-trusted-firmware-rk3399)
                          ('rk3328 arm-trusted-firmware-rk3328))))))))
#+end_src

The bootloader in [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/bootloader/u-boot.scm?h=master#n224][gnu/bootloader/u-boot.scm]] (which inherits from the package)

#+begin_src scheme
(define u-boot-orangepi-r1-plus-lts-rk3328-bootloader
  (bootloader
   (inherit u-boot-rockchip-bootloader)
   (package u-boot-orangepi-r1-plus-lts-rk3328)))
#+end_src

The system image in [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/system/images/orangepi-r1-plus-lts-rk3328.scm?h=master#n44][gnu/system/images/orangepi-r1-plus-lts-rk3328.scm]] refers to
the =u-boot-...-bootloader= package

#+begin_src scheme
(define orangepi-r1-plus-lts-rk3328-barebones-os
  (operating-system
    (host-name "windmolen")
    (timezone "Europe/Amsterdam")
    (locale "en_US.utf8")
    (bootloader (bootloader-configuration
                  (bootloader u-boot-orangepi-r1-plus-lts-rk3328-bootloader)
                  (targets '("/dev/mmcblk0"))))
    (initrd-modules '())
    (kernel linux-libre-arm64-generic)
    (file-systems (cons (file-system
                          (device (file-system-label "my-root"))
                          (mount-point "/")
                          (type "ext4")) %base-file-systems))
    (services
     (cons* (service agetty-service-type
                     (agetty-configuration (extra-options '("-L")) ;no carrier detect
                                           (baud-rate "1500000")
                                           (term "vt100")
                                           (tty "ttyS2")))
            (service dhcp-client-service-type)
            (service ntp-service-type) %base-services))))
#+end_src

** Docs

*** Sections to review

It repeats kinda a lot of content, but there are some very useful commands to
know in here.

+ 40 pin interface GPIO, I2C, UART, SPI, CAN and PWM tests

*** Convert from wiki

Pandoc would be too much. I'm just looking to browse the useful commands while
retaining the original context

#+begin_src shell :results output org raw  :eval no
grep  -E "(^=+|\\$ '''|# ''')" /tmp/orangepi-5-plus.wiki \
    | grep -vE '^# ' \
    | sed -E 's/<span.*>(.*)<\/span>/\1/g' \
    | sed -E 's/^<p>//' | sed -E 's/<\/p>$//' \
    | sed -E 's/^<li>//' | sed -E 's/<\/li>$//' \
    | sed -E 's/^= /* /' | sed -E 's/^== /** /' | sed -E 's/^=== /*** /' | sed -E 's/^==== /**** /' \
    | sed -E 's/ =+$//' | sed -E "s/'''/=/g" \
    | sed -E 's/^(.+@.+:.+[$#]) /+ \1 /g' \
    | sed 's/&lt;/</g' | sed 's/&gt;/>/g' | sed 's/&nbsp;/ /g' | sed "s/&quot;/'/g" | sed 's/&amp;/&/g'

# included &gt; &lt; &quot; &nbsp; &amp;
# still includes a few artifacts
# some of the user@host:~$
#+end_src

This is somewhat pointless, as the manual is a PDF printout of the same file
they generate the wiki page with


* Rockchip RK3588
** Docs
+ [[https://www.rock-chips.com/uploads/pdf/2022.8.26/192/RK3588%20Brief%20Datasheet.pdf][Datasheet]]
+ [[https://docs.radxa.com/en/compute-module/cm5/radxa-os/mali-gpu][Switch GPU Driver]] from Mali to Panthor (OpenGL compatibility info)
  - you want mali: OpenGL ES + OpenCL + 8K HDMI

*** Linux

+ [[https://wiki.nixos.org/wiki/NixOS_on_ARM/Orange_Pi_5_Plus][NixOS on ARM: Orange Pi 5 Plus]]
  - [[https://nixos.wiki/wiki/NixOS_on_ARM/Orange_Pi_5][On Orange Pi 5]]
+ [[https://rocknix.org/devices/orange-pi/orange-pi-5/][RockNix for RK3588]]. See [[https://www.youtube.com/watch?v=K3dByIl0RAs][video]]
  - Apparently not based on Nix.
  - Derivative of [[https://github.com/JustEnoughLinuxOS/distribution][JelOS]]?

+ [[https://github.com/dvdjv/socle][dvdjv/socle]] NixOS on RK3588-based SoC (sounds like it works)
+ [[https://gitlab.com/K900/nix/-/tree/master/hacks?ref_type=heads][K900/nix ./hacks/orangepi5max]]
+ [[https://github.com/fb87/nixos-orangepi-5x][fb87/nixos-orangepi-5x]]
+ [[https://github.com/nabam/nixos-rockchip][nabam/nixos-rockchip]]
+ [[https://github.com/ryan4yin/nixos-rk3588?tab=readme-ov-file][ryan4yin/nixos-rk3588]] maybe works, comes with caveats
  - it maybe benefits to build from Armbian (see below)

#+begin_quote
Regarding RK3588/RK3588s, a significant amount of work has been done by Armbian
on their kernel, and device tree. Therefore, by integrating these components
from Armbian with the NixOS rootfs, we can create a complete NixOS system.
#+end_quote

*** UEFI

This seems to be the way to go. It's a bit complicated though.

+ [[https://github.com/edk2-porting/edk2-rk3588][edk2-porting/edk2-rk3588]]

*** TF-A

Collabora posts:

+ [[https://www.collabora.com/news-and-blog/blog/2024/02/21/almost-a-fully-open-source-boot-chain-for-rockchips-rk3588/][Almost a fully open-source boot chain for Rockchip's RK3588]]
+ [[https://www.collabora.com/news-and-blog/news-and-events/kernel-613-a-flawless-end-of-the-year.html][Kernel 6.13: A flawless end of the year]]

rk3588 early boot details:

+ [[https://soliddowant.github.io/2024/01/23/rk3588-cluster-4][RK3588 Cluster Part 4: RK3588 boot process and U-Boot NVMe support]]

Guix [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/firmware.scm?h=master#n1190][arm-trusted-firmware-rk3588]]

*** U-Boot

+ [[https://docs.u-boot.org/en/latest/board/rockchip/index.html][U-Boot Board-Specific Doc for Rockchip]]

Don't soft-brick by faulty u-boot to eMMC: [[https://community.mnt.re/t/guix-and-reform/173/43][Guix and Reform]]

+ Collabora Forum: [[RK3588 Mainline Kernel support][Mainline Kernel Support]] (rk3588 features)

*** MNT Reform

An open platform that can run on a RK 3588Q chip ([[https://mntre.com/documentation/reform-rcore-rk3588-manual.pdf][specs]])

+ [[https://floss.social/@vagrantc/114154024787459911][floss.social thread]]
  + lykso/mnt-reform-nonguix #4 [[https://issues.guix.gnu.org/48266][Support dynamic loading of modules from initrd]]
    - [[https://codeberg.org/lykso/mnt-reform-nonguix/pulls/4/files#diff-941ef2783739952cd525f040bb389b1cfd9a1c2f][./mnt-reform/rk3588/templates/reform2.tmpl]]
    - "code is a translation of [[https://source.mnt.re/reform/reform-rk3588-uboot/-/blob/main/build.sh?ref_type=heads][reform/reform-rk3588-uboot]]"

+ Guix [[https://issues.guix.gnu.org/77090][patch to add linux-libre mnt/reform variant]]

+ [[https://source.mnt.re/reform/reform-tools/-/blob/1.69/initramfs-tools/reform.conf?ref_type=tags][modules needed for initramfs]] on MNT Reform hardware (open platform that can
  run on rk3588)

*** Device Tree

A lot of info for Device Tree setup is required to build a custom information.
This maps the operating system to the hardware componets (and the drivers...)

+ [[https://github.com/devicetree-org/devicetree-specification/releases/download/v0.4/devicetree-specification-v0.4.pdf][device-tree-specification-v0.4]]

*** Misc

+ [[U-Boot Reference Manual][2011 U-Boot Reference Manual]]
+ 2024 [[https://www.nuvoton.com/export/resource-files/en-us--UM_EN_MA35H0_U-boot.pdf][NuMicro MA35H0 U-Boot User Manual]] (ARM Cortex A35)

Unrelated to the specific hardware, but lots of images detailing the U-Boot
process: [[https://ww1.microchip.com/downloads/aemDocuments/documents/MPU64/ProductDocuments/SupportingCollateral/Booting_Application_Workloads_on_PIC64GX_White_Paper.pdf][Booting Application Workloads (including Linux) on Microchip PIC64GX]]

** Resources

** Topics


* Orange Pi 5 Plus

+ The OrangePi 5x boards are too good for the price.
+ Quite a lot of chinese blobs in the builds though.
  - That just is what it is. Not sure whether it's better/worse than someone
    else's blobs.
+ But it's like 3-5x better than a Pi for the same price.
  - eMMC is superfast.
  - RAM is cheap and fast.
  - 2x ethernet @ 2.5Gbps makes some things more possible (idk where to find a
    2.5 Gpbs switch though)
+ The OPI 5+ is going to get hot. And it's not easy to keep cool. Apparently
  thermal throttling kicks in very quickly. You'll need to buy the heatsink+fan
  jacket combo.

** Docs

The main support doc is [[http://www.orangepi.org/orangepiwiki/index.php/Orange_Pi_5_Plus#40_pin_interface_GPIO.2C_I2C.2C_UART.2C_SPI.2C_CAN_and_PWM_test][Orange Pi 5 Plus wiki]], which is autogenerated. The same
info is available as a PDF from the main site.

** Resources

** Topics
*** Pinouts

The pinouts are a bit mixed up. I'm assuming that various capabilities are
available at different points after boot.

The source for pinouts is the [[http://www.orangepi.org/orangepiwiki/index.php/Orange_Pi_5_Plus#40_pin_interface_GPIO.2C_I2C.2C_UART.2C_SPI.2C_CAN_and_PWM_test][Orange Pi 5 Plus wiki]].

#+begin_quote
Caveat Emptor: beware of fat fingers.
#+end_quote

**** Voltage

|-------+-----+-----+-----+---+---+----+-----+----+----+----+----+----|
| Pin   |   1 |   2 |   4 | 6 | 9 | 14 |  17 | 20 | 25 | 30 | 34 | 39 |
|-------+-----+-----+-----+---+---+----+-----+----+----+----+----+----|
| Value | 3.3 | 5.0 | 5.0 | G | G |  G | 3.3 |  G |  G |  G |  G |  G |
|-------+-----+-----+-----+---+---+----+-----+----+----+----+----+----|

Colors:

|--------+-------------+-----------------------|
| Fn     | Color       | Pins                  |
|--------+-------------+-----------------------|
| ???    | Dark Green  | 27,28                 |
| 3.3 V  | Light Green | 1,17                  |
| 5.0 V  | Red         | 2,4                   |
| Ground | Black       | 6,9,14,20,25,30,34,39 |
|--------+-------------+-----------------------|

**** UART

|------+-----------------|
| RX   | Receive         |
| TX   | Transmit        |
| RTSN | Request To Send |
| CTSN | Clear To Send   |
|------+-----------------|

6 Total UARTs available

|-------+-------+-------+-------+-------+-------|
| UART1 | UART3 | UART4 | UART6 | UART7 | UART8 |
|-------+-------+-------+-------+-------+-------|

UART Pins:

|----------+----+----+-----+-----+----------|
| UART bus | RX | TX | RTS | CTS | DTBO     |
|----------+----+----+-----+-----+----------|
| UART1_M1 | 27 | 28 |   7 |  29 | uart1-m1 |
| UART3_M1 | 18 | 16 |     |     | uart3-m1 |
| UART4_M2 | 19 | 23 |     |     | uart4-m2 |
| UART6_M1 | 10 |  8 |  22 |  32 | uart6-m1 |
| UART7_M2 | 24 | 26 |     |     | uart7-m2 |
| UART8_M1 | 40 | 35 |  38 |  36 | uart8-m1 |
|----------+----+----+-----+-----+----------|

+ The 4th column is the corresponding configuration in DTBO
+ I added the =RTSN= and =CTSN= from the pinout diagram on the main product overview

**** CAN Bus

+ Must be enabled in hardware

|------------+-----+----------|
| CAN        | Pin | Move PWM |
|------------+-----+----------|
| CAN0_RX_M0 |   3 | PWM1_M0  |
| CAN0_TX_M0 |   5 | PWM0_M0  |
|------------+-----+----------|

**** PWM

The PWMs are more consistently identified by their register value.

|----------+----------+-----+----------+----------+---------+----------|
| Register | PWM      | Pin | DTBO     | Alt PWM  | Alt PIN | Alt DBTO |
|----------+----------+-----+----------+----------+---------+----------|
| fd8b0000 | PWM0_M0  |   5 | pwm0-m0  | PWM0_M2  |      22 | pwm0-m2  |
| fd8b0010 | PWM1_M0  |   3 | pwm1-m0  | PWM1_M2  |      32 | pwm1-m2  |
| febe0030 | PWM11_M0 |  12 | pwm11-m0 |          |         |          |
| febf0000 | PWM12_M0 |  14 | pwm12-m0 |          |         |          |
| febf0010 | PWM13_M0 |  16 | pwm13-m0 |          |         |          |
| febf0020 | PWM14_M0 |  33 | pwm14-m0 | PWM14_M2 |       7 | pwm14-m0 |
|----------+----------+-----+----------+----------+---------+----------|

The main pinout image identifies =PWM11= as =PWM11_IR_M0=

Use =orangepi-config= to enable the Alt PIN Configuration.

+ =PWM0_M0= and =PWM0_M2=
+ =PWM1_M0= and =PWM1_M2=
+ =PWM14_M0= and =PWM14_M2=
  
These PWM pin configs "cannot be used at the same time. They are all the same
PWM, but they are connected to different pins. Please don’t think that they are
two different PWM bus."

After enabling the =PWM= pins, then reboot and check =/sys/class/pwm/pwmchipX=,
where the numbering _does not at all_ correspond to the pins.

**** SPI

|---------+------+------+-----+-----+------|
| SPI Bus | MOSI | MISO | CLK | CS0 |  CS1 |
|---------+------+------+-----+-----+------|
| SPI0_M2 |   19 |   21 |  23 |  24 |   26 |
| SPI4_M1 |   12 |   31 |  35 |  40 |   38 |
| SPI4_M2 |    8 |   10 |  22 |  31 | none |
|---------+------+------+-----+-----+------|

DTBO configuration

|---------+--------------------+--------------------+------------------------|
| SPI0_M2 | spi0-m2-cs0-spidev | spi0-m2-cs1-spidev | spi0-m2-cs0-cs1-spidev |
| SPI4_M1 | spi4-m1-cs0-spidev | spi4-m1-cs1-spidev | spi4-m1-cs0-cs1-spidev |
| SPI4_M2 | spi4-m2-cs0-spidev |                    |                        |
|---------+--------------------+--------------------+------------------------|

#+begin_quote
_For SPI4_M1_: In the Linux System, Pin 40 is closed by default. It needs to be
opened manually using =orangepi-config=
#+end_quote

**** I2C

|---------+---------+---------+---------+---------+---------|
| I2C bus | I2C2_M0 | I2C2_M4 | I2C4_M3 | I2C5_M3 | I2C8_M2 |
|---------+---------+---------+---------+---------+---------|
| SDA     |       3 |      10 |      22 |      27 |      29 |
| SCL     |       5 |       8 |      32 |      28 |       7 |
| DTBO    | i2c2-m0 | i2c2-m4 | i2c4-m3 | i2c5-m3 | i2c8-m2 |
|---------+---------+---------+---------+---------+---------|

*** Components

|-----------+-----------+--------------+--------+----------|
|           | MFG       | Model        |        | Notes    |
|-----------+-----------+--------------+--------+----------|
| Clock     | AnalogTek | AT8563S      | H2438B |          |
| SPI Flash | Mouser    | W25Q256JWPIQ |        |          |
| SPI Flash | XMC       | [[https://www.xmcwh.com/en/site/product_con/227][XM25QU128C]]   |        | Near USB |
|-----------+-----------+--------------+--------+----------|

**** SPI Flash

The schematics show a Mouser component (6x5 mm), but the only chips that match
on the board are the clock and the XMC SPI flash.

*** Boot Config

From the schematics

|-------+-------+--------+------+-------+---------------------|
| Level | R_up  | R_down |  ADC | V     | Boot Mode           |
|-------+-------+--------+------+-------+---------------------|
|     1 | DNP   | 100 K  |    0 | 0.0 V | USB (maskrom)       |
|     2 | 100 K | 20 K   |  682 | 0.3 V | SD Card-USB         |
|     3 | 100 K | 51 K   | 1365 | 0.6 V | eMMC-USB            |
|     4 | 100 K | 100 K  | 2047 | 0.9 V | FSPI M0 USB         |
|     5 | 100 K | 200 K  | 2730 | 1.2 V | FSPI M1 USB         |
|     6 | 100 K | 499 K  | 3412 | 1.5 V | FSPI M2 USB         |
|     7 | 100 K | DNP    | 4095 | 1.8 V | Retry (from 6 to 1) |
|-------+-------+--------+------+-------+---------------------|

+ Level 7: =FSPI_M2-FSPI_M1-FSPI_M0-EMMC-SD Card-USB=

*** Hardware Functions

These are the values from the =Linux System Adaptation= table.

CPU/etc

| GPU | VPU | NPU |

#+begin_quote
The arch build does not support =NPU= or =Chromium hard solution video=
#+end_quote

Disk

| eMMC Extension ports |
| TF card start        |
| SPI+NVME start       |

Video/Audio/Camera

| HDMI TX1 Video     | HDMI TX1 Audio      |
| HDMI TX2 Video     | HDMI TX2 Audio      |
| HDMI RX Video      | HDMI RX Audio       |
| MIPI LCD display   | MIPI LCD Touch      |
| OV13850 camera     | OV13855 camera      |
| Onboard MIC        | SPK Horn            |
| headphone playback | headphone recording |

#+begin_quote
Plus =Chromium hard solution video= whatever that is

Also, the Android build supports a =HDMI CEC= function for remote control via
other HDMI devices. The docs for Linux don't seem to cover this.
#+end_quote

USB

| USB2.0X2        | USB3.0X2            |
| Type-C USB3.0   | Type-C ADB Function |
| Type-C DP Video | Type-C DP Audio     |

Network

| 2.5G PCIe network port X2 | 2.5G PCIe network port light |

Wireless

#+begin_quote
the official kernel builds support drivers for these M.2 E-key devices
#+end_quote

| AP6275P-WIFI   | AP6275P-BT   |
| AX200-WIFI     | AX200-BT     |
| AX210-WIFI     | AX210-BT     |
| RTL8852BE-WIFI | RTL8852BE-BT |

The =infrared function= "requires the use of the official remote" (yeah right)

HDMI CEC

GPIO/etc

| 40PIN GPIO        | 40PIN UART |
| 40PIN I2C         | 40PIN CAN  |
| 40PIN SPI         | 40PIN PWM  |
| Debug serial port |            |

Misc

| MaskROM button        | switch button |
| FAN interface         | RTC Chip      |
| Three-color LED light |               |

RTC is a clock with a battery interface (if reset is needed)

Reboot/Poweroff

| REBOOT command restarts | Poweroff command shutdown |

