:PROPERTIES:
:ID:       141adfa6-e58a-4b39-a812-02863ebf5428
:END:
#+TITLE: IVRE: Running and Extracting Schema
#+CATEGORY: slips
#+TAGS:

I was able to dump the postgres schema using the processes described in
[[#uv-docker][UV/Docker]] and [[#postgres-db-schema][Postgres DB Schema]] (the last section)

[[file:img/ivre-schema.svg]]

* Roam
+ [[id:d0d5896c-0cf5-4fa7-bf37-a2e3499c69d2][Red Team]]
+ [[id:afe1b2f0-d765-4b68-85d0-2a9983fa2127][Containers]]
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][Networking]]

* Docs

+ [[https://doc.ivre.rocks/en/latest/overview/principles.html#purposes][IVRE Purposes]] an important concept for large parts of the codebase & service
  integration.
  - Only now do i notice the graphviz on the purposes page... lmao
+ File Paths for IVRE are set [[https://github.com/ivre/ivre/blob/master/ivre/config.py#L354-L379][here in config.py]]
+ maxmind is a geoip database (req. license)


** Data

+ [[https://datatracker.ietf.org/doc/draft-dulaunoy-dnsop-passive-dns-cof/][PassiveDNS: Common Output Format]] used for =view= purpose (also used by PyPDNS)
+ [[https://github.com/phaag/nfdump][Netflow]] used for =flow= purpose: collect with zeek, argus or [[https://github.com/phaag/nfdump][phaag/nfdump]]
  - Could also visualize using [[https://github.com/ntop/ntopng][ntop/ntopng]] with [[https://github.com/ntop/nprobe][ntop/nprobe]]. See [[https://www.ntop.org/guides/ntopng/using_with_other_tools/nprobe.html][ntop with
    nprobe]] and [[https://www.ntop.org/guides/ntopng/using_with_other_tools/nprobe_collector_mode.html][ntop with nprobe (collector mode)]]

+ IVRE PG Schema: [[file:img/ivre-pg-schema.sql][img/ivre-pg-schema.sql]]
+ IVRE PG Dump: [[file:img/ivre-pg-schema.sql][img/ivre-pg-dump.sql]]
+ IVRE Schema (n_* tables only): [[https:img/ivre-schema.svg][img/ivre-schema.svg]]

** Multi Stage Builds

[[https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae][Advanced Multi Stage Build Patterns]]: +you can't substitute images for layers to
a build stage? (without a dynamic image name). I'm so sorry to hear about that+
+ Nevermind . . . you just use the "magic" build tag. Nice (yeh, I really had no
  contact with the outside world for about a decade).
+ Still, it's somewhat elsewhere in Guix (it's also reproducible). Different
  aspects are more manageable.
  - 100x easier to manage compile flags & branches for lower level dependencies.
  - With Guix you actually compile the software. Smaller images are easier,
    though there are some isues there.
  - It's somewhat more difficult to manage canonical names for images & tags
    (though who knows how those got up in the cloud like that) although it's
    just less of a thing you do.

* IVRE Commands

#+begin_src shell
ivre ipcalc 127.0.0.1 # 2130706433
ivre ipcalc 127.0.0.2 # 2130706434 lol

# (that is what it is, after all: isomorphic to integers;
#   the dots are an illusion)
#+end_src

+ See [[https://doc.ivre.rocks/en/latest/overview/principles.html#storing-data][Storing Data]] for subcommands like =scan2db= and =passiverecon2db=
+ See [[https://doc.ivre.rocks/en/latest/overview/principles.html#accessing-data][Accessing Data]] for subcommands like =ipdata=, =flowcli= and =view=

Some interesting commands

| localscan | generate scan results via =netstat= or =ss=                 |
| macdata   | query passive db to perform ARP resolution (see ipdata) |
| macinfo   | query vendors for specified MAC (see ipinfo)            |
| ipdata    | manage metadata assoc. to ip (e.g. AS number)           |
| iphost    | translate IP to DNS via passive lookup                  |
| getmoduli | use with fastgcd                                        |
| auditdom  | produce a scan result for DNS                           |

Scans

| runscans | Run +massive+ nmap/zmap scans with input *and output* transformation (don't scan massive) |

To database

| airodump2db     |                                        |
| arp2db          | I import data from ARP; requires =scapy= |
| flow2db         |                                        |
| p0f2db          |                                        |
| passiverecon2db |                                        |
| scan2db         |                                        |
| weblog2db       |                                        |
| zeek2db         |                                        |


* UV Build

arch builds without =sqlalchemy= ... so I went with =uv=

#+begin_src shell
ln -s docker/data/ivre.arch.conf data/ivre.arch.conf

uv venv
source .venv/bin/activate
uv pip install -r requirements-all.txt

# check deps
tree -d -L1 .venv/lib/python3.13/site-packages/

# build
./setup.py build
./setup.py install # no sudo required (installs to $VIRTUAL_ENV/bin/ivre)
#+end_src

** Config

+ Need to set =KNOWN_PORTS=

**** Updated Config

Edit config in =./docker/data/ivre.arch.conf=, but host data in =./data=. Same as the
conf for =docker-compose.yml= except the paths are relative (except for sqlite
paths ... damit)

+ +link from another data directory: =ln -s docker/data/ivre.arch.conf
  data/ivre.arch.conf=.+
+ Can't link the config files (the =IVRE_CONF= file will be silently ignored)

So here, the paths are set as below, using the same =NMAP.*= and =IPDATA_URLS=
config below... I can ingest data with my =uv= environment, then compare the
=./data= and =./docker/data= directories, merging in what I need to view the results
in the web ... maybe.

#+begin_src python
DEBUG = True
DEBUG_DB = True

# mongo is required for DB
DB="mongodb:///ivre"
DB_PASSIVE="sqlite:///data/ivre.passive.sqlite"
# DB_NMAP="sqlite:///data/ivre.nmap.sqlite" # mongo/postgres only?
# DB_VIEW="sqlite:///data/ivre.view.sqlite" # mongo/postgres only?
DB_DATA = "maxmind:data/geoip"

AGENT_MASTER_PATH="./data/agent"
NMAP_SHARE_PATH="./data/nmap"
DATA_PATH="./data"
GEOIP_PATH="./data/geoip"
#+end_src


**** DB Setup

| command                     | tables      |                   |
|-----------------------------+-------------+-------------------|
| ivre ipinfo --init          |             |                   |
| ivre scancli --init         | ivre.hosts  |                   |
| ivre view --init            | ivre.views  |                   |
| ivre flowcli --init         | ivre.flows  |                   |
| ivre runscansagentdb --init | ivre.agents | ivre.runningscans |



**** DB Usage

Use the following options to move data to/from databases

+ --from-db=mongodb:///ivre :: extract from a running db
+ --to-db=sqlite:///data/some.sqlite :: import into a sqlite

* UV/Docker

** Update configs

Change the =docker-compose.yaml=

#+begin_src yaml
# add ivrepg service:
services:
  ivrepg:
    image: postgres
    container_name: ivrepg
    restart: always
    shm_size: 256mb
    ports: ["5432:5432"]
    environment:
      POSTGRES_DB: ivre
      POSTGRES_USER: ivre
      POSTGRES_PASSWORD: ivre
  # ...
  # update depends (ivreuwsgi,ivreclient) -> ivrepg
  ivreuwsgi:
    depends_on:
      - ivredb
      - ivrepg
  # ...
  ivreclient:
    # ...
    depends_on:
      - ivredb
      - ivrepg
#+end_src

Change both configs: =ivre.conf= and =ivre.arch.conf=

#+begin_src python
DEBUG = True
DEBUG_DB = True

# mongo is required for DB
DB="mongodb:///ivre"
DB_PASSIVE="postgresql://ivre:ivre@localhost/ivre"
DB_NMAP="postgresql://ivre:ivre@localhost/ivre"
DB_VIEW="postgresql://ivre:ivre@localhost/ivre"

# DB_PASSIVE="sqlite:///data/ivre.passive.sqlite"
# DB_NMAP="sqlite:///data/ivre.nmap.sqlite"
# DB_VIEW="sqlite:///data/ivre.view.sqlite"
# DB_DATA = "data/geoip"
DB_DATA = "maxmind:data/geoip"
#+end_src

Start =docker compose=

* Notes

** Status

*** Config

**** Docker images

I build the images with these commands (after generating the tar)

#+begin_src shell
docker pull debian:12
docker build -t ivre/base docker/base-local
for img in client agent web web-doku web-uwsgi ; do
    docker build -t "ivre/$img" "docker/$img";
done
#+end_src

I made these changes to the =./docker/base-local/Dockerfile=

#+begin_example diff
diff --git a/docker/base-local/Dockerfile b/docker/base-local/Dockerfile
index 23e639b3..f35496ed 100644
--- a/docker/base-local/Dockerfile
+++ b/docker/base-local/Dockerfile
@@ -13,7 +13,7 @@
#
# You should have received a copy of the GNU General Public License
# along with IVRE. If not, see <http://www.gnu.org/licenses/>.
-
+# ARG PIPREQ=requirements-sqlite.txt
FROM debian:12 AS builder

ENV DEBIAN_FRONTEND noninteractive
@@ -21,9 +21,8 @@ ENV DEBIAN_FRONTEND noninteractive
# Install pip then install IVRE
ADD ivre.tar ./
RUN apt-get -q update && \
-    apt-get -qy --no-install-recommends install python3-pip && \
-    pip3 install --break-system-packages /ivre
-
+    apt-get -qy --no-install-recommends install build-essential python3.11-dev libpq-dev python3-pip && \
+    pip3 install --break-system-packages -r "/ivre/requirements-all.txt" /ivre

FROM debian:12
LABEL maintainer="Pierre LALET <pierre@droids-corp.org>"
@@ -45,4 +44,4 @@ COPY --from=builder /usr/local/share/ivre /usr/local/share/ivre
RUN sed -ri 's#$#-docker#' /usr/local/lib/python*/dist-packages/ivre/VERSION && \
sed -ri 's#(VERSION = .*)(['\''"])$#\1-docker\2#' /usr/local/lib/python*/dist-packages/ivre/__init__.py

-RUN echo 'DB = "mongodb://ivredb/"' > /etc/ivre.conf
+RUN echo 'DB = "mongodb://ivredb"' > /etc/ivre.conf
#+end_example

**** File Tree

The volumes are in the =./docker= directory

#+begin_src
ls -al docker
#+end_src

#+begin_example
drwxr-xr-x 13 1000   1000   4096 May 20 13:15 .
drwxr-xr-x 14 1000   1000   4096 May 19 21:34 ..
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 agent
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 base
drwxr-xr-x  2 1000   1000   4096 May 19 19:57 base-local
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 client
drwxr-xr-x  4 1000   1000   4096 May 20 14:59 data
-rw-r--r--  1 1000   1000   2416 May 20 14:51 docker-compose.yml
drwxr-xr-x 14 http http 4096 May 19 12:22 dokuwiki_data
drwxr-xr-x  2 root root 4096 May 19 12:22 ivre-share
-rw-r--r--  1 1000   1000   2807 May 19 11:51 Vagrantfile
drwxr-xr-x  4  999 root 4096 May 20 15:15 var_lib_mongodb
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 web
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 web-doku
drwxr-xr-x  2 1000   1000   4096 May 19 11:51 web-uwsgi
#+end_example
**** ivre.conf

This DB configuration is needed, but the image needs to install
=requirements-all.txt=

#+begin_example python
DEBUG = True
IPDATA_URLS = {
    'GeoLite2-City.tar.gz':
    'https://ivre.rocks/data/tests/db/GeoLite2-City.tar.gz',
    'GeoLite2-City-CSV.zip':
    'https://ivre.rocks/data/tests/db/GeoLite2-City-CSV.zip',
    'GeoLite2-Country.tar.gz':
    'https://ivre.rocks/data/tests/db/GeoLite2-Country.tar.gz',
    'GeoLite2-Country-CSV.zip':
    'https://ivre.rocks/data/tests/db/GeoLite2-Country-CSV.zip',
    'GeoLite2-ASN.tar.gz':
    'https://ivre.rocks/data/tests/db/GeoLite2-ASN.tar.gz',
    'GeoLite2-ASN-CSV.zip':
    'https://ivre.rocks/data/tests/db/GeoLite2-ASN-CSV.zip',
    'iso3166.csv': 'https://ivre.rocks/data/tests/db/iso3166.csv',
    'BGP.raw': 'https://ivre.rocks/data/tests/db/data-raw-table',
}
NMAP_SCAN_TEMPLATES["default"]["pings"] = []
NMAP_SCAN_TEMPLATES["default"]["scans"] = "T"
NMAP_SCAN_TEMPLATES["default"]["osdetect"] = False
NMAP_SCAN_TEMPLATES["default"]["traceroute"] = False
NMAP_SCAN_TEMPLATES["http"] = NMAP_SCAN_TEMPLATES["default"].copy()
NMAP_SCAN_TEMPLATES["http"]["ports"] = "T:80"
NMAP_SCAN_TEMPLATES["http"]['scripts_categories'] = []
NMAP_SCAN_TEMPLATES["http"]['scripts_exclude'] = []
NMAP_SCAN_TEMPLATES["http"]['scripts_force'] = ["http-title", "http-screenshot"]
NMAP_SCAN_TEMPLATES["http"]['extra_options'] = ["--open"]
AGENT_MASTER_PATH = "/tmp/var_lib/ivre/master"
#+end_example

This =./docker/data/ivre.conf= is based on [[https://github.com/ivre/ivre/blob/master/.github/workflows/files/ivre.conf#L1][.github/workflows/files/ivre.conf]]. I
added what's below to the above, hoping to start with some basic nmap scan data.

#+begin_example python
DEBUG = True
DEBUG_DB = True

# mongo is required for DB
DB="mongodb:///ivre"
DB_PASSIVE="sqlite:///data/ivre.passive.sqlite"
DB_NMAP="sqlite:///data/ivre.nmap.sqlite"
DB_VIEW="sqlite:///data/ivre.view.sqlite"
DB_DATA = "/data/geoip"
# DB_DATA = "maxmind:///$shareData/ivre/geoip"

AGENT_MASTER_PATH="/data/agent"
NMAP_SHARE_PATH="/data/nmap"
DATA_PATH="/data"
GEOIP_PATH="/data/geoip"
#+end_example

**** Compose

#+begin_example yaml
version: "3"
services:
  ivredb:
    image: mongo
    container_name: ivredb
    restart: always
    ports: ["27017:27017"]
    volumes:
      - ivre:/data
      - ./var_lib_mongodb:/data/db
  ivreuwsgi:
    image: ivre/web-uwsgi
    container_name: ivreuwsgi
    restart: always
    depends_on:
      - ivredb
    volumes:
      - ./dokuwiki_data:/var/www/dokuwiki/data
      - ivre:/data
    environment:
      - "IVRE_CONF=/data/ivre.conf"
      - "DEBUG_DB=1"
  ivredoku:
    image: ivre/web-doku
    container_name: ivredoku
    restart: always
    volumes:
      - ./dokuwiki_data:/var/www/dokuwiki/data
    #   - ivre:/data
    # environment:
    #   - "IVRE_CONF=/data/ivre.conf"
    #   - "DEBUG_DB=1"
  ivreweb:
    image: ivre/web
    container_name: ivreweb
    restart: always
    ports: ["80:80"]
    depends_on:
      - ivreuwsgi
      - ivredoku
    volumes:
      - ./dokuwiki_data:/var/www/dokuwiki/data
    #   - ivre:/data
    # environment:
    #   - "IVRE_CONF=/data/ivre.conf"
    #   - "DEBUG_DB=1"
  ivreclient:
    image: ivre/client
    container_name: ivreclient
    depends_on:
      - ivredb
    working_dir: /data
    volumes:
      - ./ivre-share:/ivre-share
      - ivre:/data
    environment:
      - "IVRE_CONF=/data/ivre.conf"
      - "DEBUG_DB=1"
    stdin_open: true
    tty: true

volumes:
  ivre:
    driver: local
    driver_opts:
      type: bind
      device: ${PWD}/docker/data
      o: bind
#+end_example
* Configuration

The configs merge (see docs on [[https://doc.ivre.rocks/en/latest/install/config.html][IVRE_CONF]], which has highest priority)

** Docker Compose

*** Doesn't recognize configs

Can't get the service dependencies to acknowledge config changes

+ DEBUG_DB :: doesn't seem to do anything.
  - this is bc it only affects those services connecting to the database
+ IVRE_CONF :: is recognized by the =ivreclient= service only

*** Database

This seems to only affect =ivreclient= (this is because =ivreweb-uwsgi= runs as
=nobody= and I was mounting under root)

**** Can't Import sqlalchemy

+ Likely means the image is specific to mongo. May need to extend a =Dockerfile=
  or two.
+ The service dependencies isolate the software running in the container: they
  only have what they need (& connect to services). These connect to the db
  - ivre/web-uwsgi :: needs sqlalchemy and?
  - ivre/{client,agent} :: need sqlalchemy only

#+begin_src shell :results output verbatim code :wrap example diff
diff /data/ecto/hacknet/ivre/ivre/docker/base{,-local} && echo
#+end_src

#+RESULTS:
#+begin_example diff
diff /data/ecto/hacknet/ivre/ivre/docker/base/Dockerfile /data/ecto/hacknet/ivre/ivre/docker/base-local/Dockerfile
16a17,27
> FROM debian:12 AS builder
>
> ENV DEBIAN_FRONTEND noninteractive
>
> # Install pip then install IVRE
> ADD ivre.tar ./
> RUN apt-get -q update && \
>     apt-get -qy --no-install-recommends install python3-pip && \
>     pip3 install --break-system-packages /ivre
>
>
22c33
< # Install pip, get IVRE, uninstall pip
---
> # Install Python
24,26c35
<     apt-get -qy --no-install-recommends install python3 python3-pip git ca-certificates && \
<     pip3 install --break-system-packages git+https://github.com/ivre/ivre && \
<     apt-get -qy --purge autoremove python3-pip git && \
---
>     apt-get -qy --no-install-recommends install python3 ca-certificates && \
27a37,42
>
> COPY --from=builder /usr/local/etc/bash_completion.d/ivre /usr/local/etc/bash_completion.d/ivre
> COPY --from=builder /usr/local/lib/python3.11 /usr/local/lib/python3.11
> COPY --from=builder /usr/local/bin/ivre /usr/local/bin/ivre
> COPY --from=builder /usr/local/share/doc/ivre /usr/local/share/doc/ivre
> COPY --from=builder /usr/local/share/ivre /usr/local/share/ivre
#+end_example

The =requirements{,sqlite}.txt= files only differ by exchanging =pymongo= for
=sqlalchemy<2=. +This is sufficent for running the client only.+ (see below)

#+begin_src shell :results output verbatim code :wrap example diff
diff /data/ecto/hacknet/ivre/ivre/requirements-{all,sqlite}.txt && echo
#+end_src

#+RESULTS:
#+begin_example diff
1,4c1
> bandit
> black
> bottle
> codespell
---
< sqlalchemy<2
6,14d2
> docutils!=0.18
> elasticsearch
> elasticsearch-dsl
> flake8
> mypy
> psycopg2
> pylint
> pymongo>=3.7
> pymongo[srv]>=3.7
16,22c4
> rstcheck[sphinx]
> Sphinx
> sphinxcontrib-httpdomain
> sphinx_rtd_theme
> sphinx-lint
> sqlalchemy<2
> tinydb
---
< bottle
#+end_example

**** Need to ensure mongodb also exists

Mongo is needed because the =sqlite= and =postgresql= backends +can't+ may not
function without it.

#+begin_quote
correction: i may have built the derivative images on top of =--target builder=.
Completing the install for =requirements-all.txt= avoids this, but results in
significantly inflated derivative images.
#+end_quote

+ The =base-local= image needs to build with =requirements-all.txt= which requires
  adding =build-essential python3.11-dev libpq-dev= to the second layer's =apt-get
  install=.
+ Adding =python3{,.11}-dev= is insufficient: it needs =build-essential=
  - =error: command 'x86_64-linux-gnu-gcc' failed: No such file or directory=

*** Initialization

Need to resolve =sqlachemy= and =mongodb= issues first.

#+begin_quote
Didn't really resolve the above.
#+end_quote

From =docker attach ivreclient=

#+begin_src shell
# yes | oh infinite whys
yes | ivre ipinfo --init # --to-db="sqlite://data/ivre.sqlite
yes | ivre scancli --init
yes | ivre view --init
yes | ivre flowcli --init
yes | ivre runscansagentdb --init
#+end_src

**** Failures

Services

+ From =mongo= container doesn't seem to record any data. it also doesn't accept
  connections (always times out, even when port mapping is set)
  - From host, =mongosh localhost:27017= succeeds, but =show dbs= does not list =ivre=
    database (because other containers via =docker-compose.yml= cannot connect,
    they also cannot init the local)

Initialization

+ I /think/ that using sqlite url's requires separate database files, but wow the
  product is really trying to shoo you away from sqlite entirely.

Initialization

+ ivre ipinfo --init :: only succeeds from =ivre/base=, not =ivre/client=
  - =File "/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/default.py", line 598, in connect=
    - =return self.dbapi.connect(*cargs, **cparams)=
  - =sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open
    database file=
  - in ivre/base, its fine
+ ivre scancli --init :: fails
  - =ivre:Cannot get database for DBNmap from sqlite:/data/ivre.sqlite=
  - modulename, classname = cls.backends[db_type] :: swallows the error, no
    =cls.backend[db_type]=
+ ivre view --init :: fails
  - =ivre:Cannot get database for DBView from sqlite:/data/ivre.sqlite=
  - modulename, classname = cls.backends[db_type] :: swallows the error, no
    =cls.backend[db_type]=
+ ivre flowcli --init :: timeout if run from =ivre/base= or =ivre/client= because
  it's trying to reach =localhost:27017= via docker network, unless port mapping
  is setup in =docker_compose.yml=
+ ivre runscansagentdb --init :: same timeout for =mongodb=


* Images

+ base, from =debian:12=
  - =RUN echo 'DB = "mongodb://ivredb/"' > /etc/ivre.conf=
  - removes =python3= and =pip3=
+ base-local, from =debian:12 as builder= (and also =debian:12= again)
  - =RUN echo 'DB = "mongodb://ivredb/"' > /etc/ivre.conf=
  - does not extend base, retains =python3= and =pip3=
+ ivre/web, from =ivre/base:${TAG} as base= and =debian:12=
+ ivre/web-doku, from =ivre/base:${TAG} as base= and =debian:12=
+ ivre/web-uwsgi, from =ivre/base:${TAG} as base=
  - =RUN echo 'WEB_GET_NOTEPAD_PAGES = ("localdokuwiki",
    ("/var/www/dokuwiki/data/pages",))' >> /etc/ivre.conf=
  - =uwsgi= runs as =nobody=
+ ivre/client, from =ivre/base:${TAG} as base= and =debian:12=
+ ivre/agent, from =ivre/base:${TAG} as base=
+ mongo
  - runs as? required?

** Build from =base-pip=

The docs mention this, but it's missing the [[https://github.com/ivre/ivre/pull/4/files#diff-381c7e4c459be5294e8c1d8d54751474eef6b1dbdc1bb37d2c2b928a37b1fc3d][base-pip piece: removed before 2022]]
(see other PR)

#+begin_example
cd ./docker
docker pull debian:12
docker build -t ivre/base base-pip
# ERROR: unable to prepare context: path "base-pip" not found
#+end_example

** Build from Local Archive

[[https://doc.ivre.rocks/en/latest/install/docker.html#alternative-builds-for-the-base-image][Replacing ivre.tar]] in =./docker/base-local/ivre.tar= is probably the way to go.

+ For an alternate DB, you'll need to replace ... the local copy of csrv tar.
+ Copy =requirements-all.txt= into =requirements.txt= with from the docker image or
  from a GH release.
  - Then Commit so =HEAD= moves ... no need for this either.
+ Make the tar, copy it, then rebuild the images in the tree.
+ Don't skip embedding the version into =tar rf= steps (though idk how my python
  version relates to anything else)
  - don't build it this way if you're using this for bad things:
    timestamps+hash+version
+ Replace your local copy of the image tag with the build:
  - =docker build -t ivre/base docker/base-local=

Then rebuild the other image tags: ivre/web*, ivre/client, ivre/agent

#+begin_src shell
tmp=`mktemp | sed 's#^/##'`; python setup.py --version | tr -d '\n' > "/$tmp"
tar rf docker/base-local/ivre.tar --transform="s#$tmp#ivre/ivre/VERSION#" /$tmp
docker build -t ivre/base docker/base-local
# using base-local
for img in client agent web web-doku web-uwsgi ; do
 docker build -t "ivre/$img" "docker/$img"
done
#+end_src

Then test

#+begin_src shell
image=ivre/client # or ivre/base
docker run -it --rm  --volume "docker_ivre:/data" \
  -e "IVRE_CONF=/data/ivre.conf" $image
#+end_src

It fails because pip soothesayes so. Something circumvents the =requirements.txt=
file in the =tar=. Someone who used python 1.9 might now (I love how I never
actually get to write a single line of python. That's my favorite part).

Add this to =./docker/base-local/Dockerfile=, rebuild =base= & dependent images.
Write it down, so you can prune your packages with zero vodka.

#+begin_src sh

# pip3 install --break-system-packages /ivre
pip3 install --break-system-packages -r "/ivre/requirements-sqlite.txt" /ivre
#+end_src

Now =^^^^= initialize the database.

** ivre/rebase-local
:PROPERTIES:
:header-args:shell+: :dir /data/ecto/hacknet/ivre/ivre
:END:

#+name: rebaseLocal
#+begin_src dockerfile :tangle docker/rebase-local.Dockerfile
ARG TAG=latest
FROM ivre/base-local:${TAG}
ENV DEBIAN_FRONTEND noninteractive

# hmm not enough in here.

# ivre.db
RUN sed -ir 's/^DB = "mongodb://.*$/DB = sqlite:\/\/data\/ivre.db//g' /etc/ivre.conf
#+end_src

... yeh nevermind.

#+name: genRebaseLocal
#+begin_src shell :results output verbatim :var name=client
sed -r 's/^FROM ivre\/base:.* AS base//g'
#+end_src

Then =#+call: genRebaseLocal(name=web)=

* Postgres DB Schema

Dump

#+begin_src shell
pg_dump -d ivre -U ivre -h localhost -W -s > docker/pg.sql
#+end_src

DB Schema to SQLite, using [[https://github.com/caiiiycuk/postgresql-to-sqlite][caiiiycuk/postgresql-to-sqlite]]

#+begin_src shell
export t=$(mktemp -d)
git clone https://github.com/caiiiycuk/postgresql-to-sqlite $t
cd $t
docker build -t postgresql-to-sqlite .
# copy docker/pg.sql to pg.sql
docker run -it -v $t:/dbdata \
    -e psource='/dbdata/pg.sql' \
    -e starget='/dbdata/pg.sqlite' postgresql-to-sqlite:latest
# cross fingers & hope it doesn't have typed columns
# ...
# eliminate +BTREE indices+ ... nvm: remove "public."
cp pg.sql pg2.sql
sed -ie 's/public.//g' pg.sql
# docker run again, then check output schema
sqlite3 pg.sqlite '.schema'
# it gets the indices, but there aren't foreign keys ... or types (oh well)
#+end_src

Make diagram via [[https://gitlab.com/Screwtapello/sqlite-schema-diagram][gitlab:ScrewTapello/sqlite-schema-diagram]]

#+begin_src shell :results output verbatim file :file img/ivre-schema.svg
sqltool=/tmp/tmp.yLqVwIRly1
dot=img/ivre-schema.dot
db=img/ivre-schema.sqlite
sqlite3 $db -init "$sqltool/sqlite-schema-diagram.sql" "" > $dot 2>/dev/null
dot -Tsvg -Kdot -G"rankdir='LR'" $dot # > $dot.svg
#+end_src

#+RESULTS:
[[file:img/ivre-schema.nokeys.svg]]

** Fix SQLite Foreign Keys

Add the foreign keys into the table definitions, which (this time) are
conveniently compact on a single line each.

+ Get a frequency count of column names
+ Don't need the =id= columns (there are seven) or the =name= columns
+ Probably don't need the columns with =count==1=
+ Also, the =v_*= tables mirror the =n_*= tables
+ type ::
  - tag.type :: not polymorphic (i don't think)
  - hostname.type :: hmmm the DNS record?
  - not the enums in nmap
    - scan.type :: syn,acl,bounce,connect,etc..
    - port.type :: ip,tcp,udp,stcp
+ =tag= is polymorphic?

#+begin_src shell :results output table
db=img/ivre-schema.sqlite
sqlite3 $db '.schema' | grep 'CREATE TABLE \[n_' \
    | sed -e 's/CREATE TABLE .* (\[\(.*\)\]);/\1/g' \
    | sed -e 's/\], \[/\n/g' | sort | uniq -c \
    | grep -v ' 1 ' | grep -v ' id' | grep -v ' name'
#+end_src

#+RESULTS:
| 2 | domains          |
| 2 | info             |
| 3 | port             |
| 2 | protocol         |
| 6 | scan             |
| 2 | state            |
| 2 | state_reason     |
| 2 | state_reason_ttl |
| 2 | type             |

Also, the fields are used in the queries (don't curl this at home)

#+begin_src shell :results output verbatim
pgPy=https://raw.githubusercontent.com/ivre/ivre/refs/heads/master/ivre/db/sql/postgres.py
curl -s $pgPy | grep -nE '(where\(|join\()' \
    | sed -E 's/^([0-9]+: ) +/\1/g'
# ignoring group_by, though that really depends on the query plan
# some of this is a migration, so that's confusing
#+end_src

** FK Foreign Keys

extra column bc org-babel

#+name: fkForeign
| script                    | port     | port     | id   |
| port                      | scan     | scan     | id   |
| hostname                  | scan     | scan     | id   |
| tag                       | scan     | scan     | id   |
| trace                     | scan     | scan     | id   |
| hop                       | trace    | trace    | id   |
| association_scan_category | scan     | scan     | id   |
| association_scan_category | category | category | id   |
| association_scan_hostname | scan     | scan     | id   |
| association_scan_hostname | hostname | hostname | id   |
| hop                       | ipaddr   | scan     | addr |

#+begin_src emacs-lisp :results value :var keys=fkForeign[,] :colnames
(string-join (mapcar
              (lambda (fk)
                (apply #'format ", FOREIGN KEY (%s) REFERENCES n_%s(%s));" (cdr fk))) keys) "\n")
#+end_src

Manually add to EoL... and add primary keys. The resulting schema, without indexes

#+begin_src shell :results output verbatim code :wrap src sql
cat img/ivre-schema.sql | grep 'CREATE TABLE' \
    | sed -E 's/(CREATE TABLE)/\n\1/g' \
    | sed -E 's/(FOREIGN KEY)/\n  \1/g' \
#+end_src

#+RESULTS:
#+begin_src sql

CREATE TABLE [n_association_scan_category] ([scan], [category],
  FOREIGN KEY (category) REFERENCES n_category(id),
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [n_association_scan_hostname] ([scan], [hostname],
  FOREIGN KEY (hostname) REFERENCES n_hostname(id),
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [n_category] ([id integer PRIMARY KEY], [name]);

CREATE TABLE [n_hop] ([id integer PRIMARY KEY], [trace], [ipaddr], [ttl], [rtt], [host], [domains],
  FOREIGN KEY (trace) REFERENCES n_trace(id),
  FOREIGN KEY (ipaddr) REFERENCES n_scan(addr));

CREATE TABLE [n_hostname] ([id integer PRIMARY KEY], [scan], [domains], [name], [type],
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [n_port] ([id integer PRIMARY KEY], [scan], [port], [protocol], [state], [state_reason], [state_reason_ip], [state_reason_ttl], [service_name], [service_tunnel], [service_product], [service_version], [service_conf], [service_devicetype], [service_extrainfo], [service_hostname], [service_ostype], [service_fp],
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [n_scan] ([id integer PRIMARY KEY], [addr], [info], [time_start], [time_stop], [state], [state_reason], [state_reason_ttl], [schema_version], [source]);

CREATE TABLE [n_script] ([port], [name], [output], [data],
  FOREIGN KEY (port) REFERENCES n_port(id));

CREATE TABLE [n_tag] ([id integer PRIMARY KEY], [scan], [value], [type], [info],
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [n_trace] ([id integer PRIMARY KEY], [scan], [port], [protocol],
  FOREIGN KEY (scan) REFERENCES n_scan(id));

CREATE TABLE [passive] ([id integer PRIMARY KEY], [addr], [sensor], [count], [firstseen], [lastseen], [port], [recontype], [source], [targetval], [value], [info], [moreinfo], [schema_version]);
#+end_src

Then generate SVG again

[[file:img/ivre-schema.svg]]


