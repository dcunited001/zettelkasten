@startuml
    ' Copyright to this UML and generated images belongs to the author of the corresponding Java sources.

    ' This UML was generated by UMLDoclet (C) Copyright 2016-2025 Talsma ICT.
    ' UMLDoclet 2.2.1 is licensed under the Apache License, version 2.0
    ' and contains parts of PlantUML 1.2024.7 (ASL) Copyright 2009-2025, Arnaud Roques.

    !pragma layout smetana
    set separator ::

    package edu.wpi.first.wpilibj2.command {


        class RunCommand [[RunCommand.html]] {
            +RunCommand(Runnable, Subsystem...)
        }

        class ProxyCommand [[ProxyCommand.html]] {
            +--ProxyCommand--(Supplier<Command>)
            +ProxyCommand(Command)
            +initialize(): void
            +end(boolean): void
            +execute(): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        class FunctionalCommand [[FunctionalCommand.html]] {
            +FunctionalCommand(Runnable, Runnable, Consumer<Boolean>, BooleanSupplier, Subsystem...)
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
        }

        class DeferredCommand [[DeferredCommand.html]] {
            +DeferredCommand(Supplier<Command>, Set<Subsystem>)
            +initialize(): void
            +execute(): void
            +isFinished(): boolean
            +end(boolean): void
            +initSendable(SendableBuilder): void
        }

        class NotifierCommand [[NotifierCommand.html]] {
            +NotifierCommand(Runnable, double, Subsystem...)
            +initialize(): void
            +end(boolean): void
        }

        interface Subsystem [[Subsystem.html]] {
            +periodic(): void
            +simulationPeriodic(): void
            +getName(): String
            +removeDefaultCommand(): void
            +register(): void
            +runOnce(Runnable): Command
            +run(Runnable): Command
            +startEnd(Runnable, Runnable): Command
            +runEnd(Runnable, Runnable): Command
            +startRun(Runnable, Runnable): Command
            +defer(Supplier<Command>): Command
        }

        class StartEndCommand [[StartEndCommand.html]] {
            +StartEndCommand(Runnable, Runnable, Subsystem...)
        }

        class Commands [[Commands.html]] {
            {static} +none(): Command
            {static} +idle(Subsystem...): Command
            {static} +runOnce(Runnable, Subsystem...): Command
            {static} +run(Runnable, Subsystem...): Command
            {static} +startEnd(Runnable, Runnable, Subsystem...): Command
            {static} +runEnd(Runnable, Runnable, Subsystem...): Command
            {static} +startRun(Runnable, Runnable, Subsystem...): Command
            {static} +print(String): Command
            {static} +waitSeconds(double): Command
            {static} +waitTime(Time): Command
            {static} +waitUntil(BooleanSupplier): Command
            {static} +either(Command, Command, BooleanSupplier): Command
            {static} +select(Map<K, Command>, Supplier<? extends K>): Command
            {static} +defer(Supplier<Command>, Set<Subsystem>): Command
            {static} +deferredProxy(Supplier<Command>): Command
            {static} +sequence(Command...): Command
            {static} +repeatingSequence(Command...): Command
            {static} +parallel(Command...): Command
            {static} +race(Command...): Command
            {static} +deadline(Command, Command...): Command
        }

        abstract class SubsystemBase [[SubsystemBase.html]] {
            +SubsystemBase()
            +SubsystemBase(String)
            +getName(): String
            +setName(String): void
            +getSubsystem(): String
            +setSubsystem(String): void
            +addChild(String, Sendable): void
            +initSendable(SendableBuilder): void
        }

        class InstantCommand [[InstantCommand.html]] {
            +InstantCommand(Runnable, Subsystem...)
            +InstantCommand()
        }

        abstract class Command [[Command.html]] {
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +addRequirements(Subsystem...): void
            +addRequirements(Collection<Subsystem>): void
            +getName(): String
            +setName(String): void
            +getSubsystem(): String
            +setSubsystem(String): void
            +withTimeout(double): ParallelRaceGroup
            +withTimeout(Time): ParallelRaceGroup
            +until(BooleanSupplier): ParallelRaceGroup
            +onlyWhile(BooleanSupplier): ParallelRaceGroup
            +beforeStarting(Runnable, Subsystem...): SequentialCommandGroup
            +beforeStarting(Command): SequentialCommandGroup
            +andThen(Runnable, Subsystem...): SequentialCommandGroup
            +andThen(Command...): SequentialCommandGroup
            +withDeadline(Command): ParallelDeadlineGroup
            +--deadlineWith--(Command...): ParallelDeadlineGroup
            +deadlineFor(Command...): ParallelDeadlineGroup
            +alongWith(Command...): ParallelCommandGroup
            +raceWith(Command...): ParallelRaceGroup
            +repeatedly(): RepeatCommand
            +asProxy(): ProxyCommand
            +unless(BooleanSupplier): ConditionalCommand
            +onlyIf(BooleanSupplier): ConditionalCommand
            +ignoringDisable(boolean): WrapperCommand
            +withInterruptBehavior(InterruptionBehavior): WrapperCommand
            +finallyDo(BooleanConsumer): WrapperCommand
            +finallyDo(Runnable): WrapperCommand
            +handleInterrupt(Runnable): WrapperCommand
            +schedule(): void
            +cancel(): void
            +isScheduled(): boolean
            +hasRequirement(Subsystem): boolean
            +runsWhenDisabled(): boolean
            +withName(String): WrapperCommand
            +initSendable(SendableBuilder): void
        }

        enum Command.InterruptionBehavior [[Command.InterruptionBehavior.html]] {
            {static} +kCancelSelf
            {static} +kCancelIncoming
        }

        class SelectCommand<K> [[SelectCommand.html]] {
            +SelectCommand(Map<K, Command>, Supplier<? extends K>)
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

    }

    package edu.wpi.first.util.sendable {
        interface Sendable [[../../util/sendable/Sendable.html]] {
            {abstract} +initSendable(SendableBuilder): void
        }
    }

    edu.wpi.first.util.sendable::Sendable <|.. edu.wpi.first.wpilibj2.command::Command

    edu.wpi.first.wpilibj2.command::FunctionalCommand <|-- edu.wpi.first.wpilibj2.command::RunCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ProxyCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::FunctionalCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::DeferredCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::NotifierCommand
    edu.wpi.first.wpilibj2.command::Subsystem --> edu.wpi.first.wpilibj2.command::Command: defaultCommand\ncurrentCommand
    edu.wpi.first.wpilibj2.command::FunctionalCommand <|-- edu.wpi.first.wpilibj2.command::StartEndCommand
    edu.wpi.first.wpilibj2.command::Subsystem <|.. edu.wpi.first.wpilibj2.command::SubsystemBase
    edu.wpi.first.wpilibj2.command::FunctionalCommand <|-- edu.wpi.first.wpilibj2.command::InstantCommand
    edu.wpi.first.wpilibj2.command::Command --> "*" edu.wpi.first.wpilibj2.command::Subsystem: requirements
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::SelectCommand
    edu.wpi.first.wpilibj2.command::SelectCommand --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior

    <style>
        footer {
            HyperLinkColor #8
            HyperLinkUnderlineThickness 0
        }
    </style>
    footer \n[[https://github.com/talsma-ict/umldoclet UMLDoclet 2.2.1]]
    ' Generated 2025-04-18T02:14:18.923349515Z[GMT]
@enduml
