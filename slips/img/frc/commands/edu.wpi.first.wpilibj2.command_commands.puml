@startuml
    ' Copyright to this UML and generated images belongs to the author of the corresponding Java sources.

    ' This UML was generated by UMLDoclet (C) Copyright 2016-2025 Talsma ICT.
    ' UMLDoclet 2.2.1 is licensed under the Apache License, version 2.0
    ' and contains parts of PlantUML 1.2024.7 (ASL) Copyright 2009-2025, Arnaud Roques.

    !pragma layout smetana
    set separator ::

    package edu.wpi.first.wpilibj2.command {

        class ParallelDeadlineGroup [[ParallelDeadlineGroup.html]] {
            +ParallelDeadlineGroup(Command, Command...)
            +addCommands(Command...): void
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        class ParallelRaceGroup [[ParallelRaceGroup.html]] {
            +ParallelRaceGroup(Command...)
            +addCommands(Command...): void
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
        }

        class SequentialCommandGroup [[SequentialCommandGroup.html]] {
            +SequentialCommandGroup(Command...)
            +addCommands(Command...): void
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        class ParallelCommandGroup [[ParallelCommandGroup.html]] {
            +ParallelCommandGroup(Command...)
            +addCommands(Command...): void
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
        }

        class ScheduleCommand [[ScheduleCommand.html]] {
            +ScheduleCommand(Command...)
            +initialize(): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
        }


        class ConditionalCommand [[ConditionalCommand.html]] {
            +ConditionalCommand(Command, Command, BooleanSupplier)
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        class RepeatCommand [[RepeatCommand.html]] {
            +RepeatCommand(Command)
            +initialize(): void
            +execute(): void
            +isFinished(): boolean
            +end(boolean): void
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        class WaitUntilCommand [[WaitUntilCommand.html]] {
            +WaitUntilCommand(BooleanSupplier)
            +WaitUntilCommand(double)
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
        }

        class WaitCommand [[WaitCommand.html]] {
            #m_timer: Timer
            +WaitCommand(double)
            +WaitCommand(Time)
            +initialize(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
            +initSendable(SendableBuilder): void
        }

        abstract class Command [[Command.html]] {
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +addRequirements(Subsystem...): void
            +addRequirements(Collection<Subsystem>): void
            +getName(): String
            +setName(String): void
            +getSubsystem(): String
            +setSubsystem(String): void
            +withTimeout(double): ParallelRaceGroup
            +withTimeout(Time): ParallelRaceGroup
            +until(BooleanSupplier): ParallelRaceGroup
            +onlyWhile(BooleanSupplier): ParallelRaceGroup
            +beforeStarting(Runnable, Subsystem...): SequentialCommandGroup
            +beforeStarting(Command): SequentialCommandGroup
            +andThen(Runnable, Subsystem...): SequentialCommandGroup
            +andThen(Command...): SequentialCommandGroup
            +withDeadline(Command): ParallelDeadlineGroup
            +--deadlineWith--(Command...): ParallelDeadlineGroup
            +deadlineFor(Command...): ParallelDeadlineGroup
            +alongWith(Command...): ParallelCommandGroup
            +raceWith(Command...): ParallelRaceGroup
            +repeatedly(): RepeatCommand
            +asProxy(): ProxyCommand
            +unless(BooleanSupplier): ConditionalCommand
            +onlyIf(BooleanSupplier): ConditionalCommand
            +ignoringDisable(boolean): WrapperCommand
            +withInterruptBehavior(InterruptionBehavior): WrapperCommand
            +finallyDo(BooleanConsumer): WrapperCommand
            +finallyDo(Runnable): WrapperCommand
            +handleInterrupt(Runnable): WrapperCommand
            +schedule(): void
            +cancel(): void
            +isScheduled(): boolean
            +hasRequirement(Subsystem): boolean
            +runsWhenDisabled(): boolean
            +withName(String): WrapperCommand
            +initSendable(SendableBuilder): void
        }

        enum Command.InterruptionBehavior [[Command.InterruptionBehavior.html]] {
            {static} +kCancelSelf
            {static} +kCancelIncoming
        }

    }

    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ParallelDeadlineGroup
    edu.wpi.first.wpilibj2.command::ParallelDeadlineGroup --> edu.wpi.first.wpilibj2.command::Command: deadline
    edu.wpi.first.wpilibj2.command::ParallelDeadlineGroup --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ParallelRaceGroup
    edu.wpi.first.wpilibj2.command::ParallelRaceGroup --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::SequentialCommandGroup
    edu.wpi.first.wpilibj2.command::SequentialCommandGroup --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ParallelCommandGroup
    edu.wpi.first.wpilibj2.command::ParallelCommandGroup --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ScheduleCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::ConditionalCommand
    edu.wpi.first.wpilibj2.command::ConditionalCommand --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::RepeatCommand
    edu.wpi.first.wpilibj2.command::RepeatCommand --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::WaitUntilCommand
    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::WaitCommand
    edu.wpi.first.wpilibj2.command::Command --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command +-- edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior

    <style>
        footer {
            HyperLinkColor #8
            HyperLinkUnderlineThickness 0
        }
    </style>
    footer \n[[https://github.com/talsma-ict/umldoclet UMLDoclet 2.2.1]]
    ' Generated 2025-04-18T02:14:18.923349515Z[GMT]
@enduml
