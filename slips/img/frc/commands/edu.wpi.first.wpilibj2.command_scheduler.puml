@startuml
    ' Copyright to this UML and generated images belongs to the author of the corresponding Java sources.

    ' This UML was generated by UMLDoclet (C) Copyright 2016-2025 Talsma ICT.
    ' UMLDoclet 2.2.1 is licensed under the Apache License, version 2.0
    ' and contains parts of PlantUML 1.2024.7 (ASL) Copyright 2009-2025, Arnaud Roques.

    !pragma layout smetana
    set separator ::

    package edu.wpi.first.wpilibj2.command {

        class CommandScheduler [[CommandScheduler.html]] {
            {static} +getInstance(): CommandScheduler
            +setPeriod(double): void
            +close(): void
            +getDefaultButtonLoop(): EventLoop
            +getActiveButtonLoop(): EventLoop
            +setActiveButtonLoop(EventLoop): void
            +schedule(Command...): void
            +run(): void
            +registerSubsystem(Subsystem...): void
            +unregisterSubsystem(Subsystem...): void
            +unregisterAllSubsystems(): void
            +setDefaultCommand(Subsystem, Command): void
            +removeDefaultCommand(Subsystem): void
            +getDefaultCommand(Subsystem): Command
            +cancel(Command...): void
            +cancelAll(): void
            +isScheduled(Command...): boolean
            +isScheduled(Command): boolean
            +requiring(Subsystem): Command
            +disable(): void
            +enable(): void
            +printWatchdogEpochs(): void
            +onCommandInitialize(Consumer<Command>): void
            +onCommandExecute(Consumer<Command>): void
            +onCommandInterrupt(Consumer<Command>): void
            +onCommandInterrupt(BiConsumer<Command, Optional<Command>>): void
            +onCommandFinish(Consumer<Command>): void
            +registerComposedCommands(Command...): void
            +clearComposedCommands(): void
            +removeComposedCommand(Command): void
            +requireNotComposed(Command...): void
            +requireNotComposed(Collection<Command>): void
            +requireNotComposedOrScheduled(Command): void
            +requireNotComposedOrScheduled(Collection<Command>): void
            +isComposed(Command): boolean
            +initSendable(SendableBuilder): void
        }

        interface Subsystem [[Subsystem.html]] {
            +periodic(): void
            +simulationPeriodic(): void
            +getName(): String
            +removeDefaultCommand(): void
            +register(): void
            +runOnce(Runnable): Command
            +run(Runnable): Command
            +startEnd(Runnable, Runnable): Command
            +runEnd(Runnable, Runnable): Command
            +startRun(Runnable, Runnable): Command
            +defer(Supplier<Command>): Command
        }

        class Commands [[Commands.html]] {
            {static} +none(): Command
            {static} +idle(Subsystem...): Command
            {static} +runOnce(Runnable, Subsystem...): Command
            {static} +run(Runnable, Subsystem...): Command
            {static} +startEnd(Runnable, Runnable, Subsystem...): Command
            {static} +runEnd(Runnable, Runnable, Subsystem...): Command
            {static} +startRun(Runnable, Runnable, Subsystem...): Command
            {static} +print(String): Command
            {static} +waitSeconds(double): Command
            {static} +waitTime(Time): Command
            {static} +waitUntil(BooleanSupplier): Command
            {static} +either(Command, Command, BooleanSupplier): Command
            {static} +select(Map<K, Command>, Supplier<? extends K>): Command
            {static} +defer(Supplier<Command>, Set<Subsystem>): Command
            {static} +deferredProxy(Supplier<Command>): Command
            {static} +sequence(Command...): Command
            {static} +repeatingSequence(Command...): Command
            {static} +parallel(Command...): Command
            {static} +race(Command...): Command
            {static} +deadline(Command, Command...): Command
        }

        abstract class SubsystemBase [[SubsystemBase.html]] {
            +SubsystemBase()
            +SubsystemBase(String)
            +getName(): String
            +setName(String): void
            +getSubsystem(): String
            +setSubsystem(String): void
            +addChild(String, Sendable): void
            +initSendable(SendableBuilder): void
        }

        abstract class WrapperCommand [[WrapperCommand.html]] {
            #WrapperCommand(Command)
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +runsWhenDisabled(): boolean
        }

        abstract class Command [[Command.html]] {
            +initialize(): void
            +execute(): void
            +end(boolean): void
            +isFinished(): boolean
            +addRequirements(Subsystem...): void
            +addRequirements(Collection<Subsystem>): void
            +getName(): String
            +setName(String): void
            +getSubsystem(): String
            +setSubsystem(String): void
            +withTimeout(double): ParallelRaceGroup
            +withTimeout(Time): ParallelRaceGroup
            +until(BooleanSupplier): ParallelRaceGroup
            +onlyWhile(BooleanSupplier): ParallelRaceGroup
            +beforeStarting(Runnable, Subsystem...): SequentialCommandGroup
            +beforeStarting(Command): SequentialCommandGroup
            +andThen(Runnable, Subsystem...): SequentialCommandGroup
            +andThen(Command...): SequentialCommandGroup
            +withDeadline(Command): ParallelDeadlineGroup
            +--deadlineWith--(Command...): ParallelDeadlineGroup
            +deadlineFor(Command...): ParallelDeadlineGroup
            +alongWith(Command...): ParallelCommandGroup
            +raceWith(Command...): ParallelRaceGroup
            +repeatedly(): RepeatCommand
            +asProxy(): ProxyCommand
            +unless(BooleanSupplier): ConditionalCommand
            +onlyIf(BooleanSupplier): ConditionalCommand
            +ignoringDisable(boolean): WrapperCommand
            +withInterruptBehavior(InterruptionBehavior): WrapperCommand
            +finallyDo(BooleanConsumer): WrapperCommand
            +finallyDo(Runnable): WrapperCommand
            +handleInterrupt(Runnable): WrapperCommand
            +schedule(): void
            +cancel(): void
            +isScheduled(): boolean
            +hasRequirement(Subsystem): boolean
            +runsWhenDisabled(): boolean
            +withName(String): WrapperCommand
            +initSendable(SendableBuilder): void
        }

        enum Command.InterruptionBehavior [[Command.InterruptionBehavior.html]] {
            {static} +kCancelSelf
            {static} +kCancelIncoming
        }

    }

    package edu.wpi.first.util.sendable {
        interface Sendable [[../../util/sendable/Sendable.html]] {
            {abstract} +initSendable(SendableBuilder): void
        }
    }

    package java.lang {
        interface AutoCloseable {
            {abstract} +close(): void
        }
    }

    java.lang::AutoCloseable <|.. edu.wpi.first.wpilibj2.command::CommandScheduler
    edu.wpi.first.util.sendable::Sendable <|.. edu.wpi.first.wpilibj2.command::Command
    edu.wpi.first.util.sendable::Sendable <|.. edu.wpi.first.wpilibj2.command::CommandScheduler
    edu.wpi.first.util.sendable::Sendable <|.. edu.wpi.first.wpilibj2.command::SubsystemBase

    edu.wpi.first.wpilibj2.command::Command <|-- edu.wpi.first.wpilibj2.command::WrapperCommand
    edu.wpi.first.wpilibj2.command::WrapperCommand --> edu.wpi.first.wpilibj2.command::Command: m_command
    edu.wpi.first.wpilibj2.command::WrapperCommand --> "*" edu.wpi.first.wpilibj2.command::Subsystem: requirements
    edu.wpi.first.wpilibj2.command::WrapperCommand --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Subsystem --> edu.wpi.first.wpilibj2.command::Command: defaultCommand\ncurrentCommand
    edu.wpi.first.wpilibj2.command::Subsystem <|.. edu.wpi.first.wpilibj2.command::SubsystemBase
    edu.wpi.first.wpilibj2.command::Command --> "*" edu.wpi.first.wpilibj2.command::Subsystem: requirements
    edu.wpi.first.wpilibj2.command::Command --> edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior: interruptionBehavior
    edu.wpi.first.wpilibj2.command::Command +-- edu.wpi.first.wpilibj2.command::Command.InterruptionBehavior

    <style>
        footer {
            HyperLinkColor #8
            HyperLinkUnderlineThickness 0
        }
    </style>
    footer \n[[https://github.com/talsma-ict/umldoclet UMLDoclet 2.2.1]]
    ' Generated 2025-04-18T02:14:18.923349515Z[GMT]
@enduml
