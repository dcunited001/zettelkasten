:PROPERTIES:
:ID:       899163d3-951f-420f-bed1-013c97cd13d7
:END:
#+TITLE: Math: grokking geometric algebra
#+CATEGORY: slips
#+TAGS:
#+STARTUP: nolatexpreview

+ [[id:a24b12f8-b3e3-4f66-9a5c-f29b715e1506][Math]]

* 6/22

#+begin_quote
and in fact if you have a surface with its normal versors orthogonal to it, the
flux does a scalar product against these versors so it takes account of how much
of the vector field is orthogonal to the surface (parallel to the orthogonal
versor)
#+end_quote


+ If $cos^{2}\theta + sin^{2}\theta = 1$ represents a circle
  - and $cosh^{2}\theta - sinh^{2}\theta = 1$ represents (a continuation of a
    circle? into) a hyperbola (i.e. $cosh^{2}\theta - sinh^{2}\theta =
    cos^{2}\theta + sin^{2}\theta)$ ?)
+ and if versors satisfy a similar distance equivalence over the surface of a
  sphere -- which involves $exp(ar) = cos^{2}\theta + r*sin^{2}\theta$ where r
  is a vector quaternion and $r^{2} = -1$

Then =Circle :: Hyperbola :: ...What?==

* 10/29


+ From [[https://bivector.net/doc.html][Bivector.net]]
  - [[https://bivector.net/2DPGA.pdf][2D Projective Geometric Algebra]] (cheatsheet)
  - [[https://bivector.net/3DPGA.pdf][3D Projective Geometric Algebra]] (cheatsheet)

* 10/30

I received the book, [[https://www.amazon.com/Geometric-Algebra-Applications-Vol-Modelling/dp/3030349764][Geometric Algebra Applications Vol. II: Robot Modelling and
Control]], a few days ago. I haven't been able to read much of it, but it's
quite comprehensive. I could only afford one volume and the second one covers
more of what I'm looking for. For whatever reason, both volumes overlap
significantly in their coverage of GA basics. This is fine. The author/publisher
seems to have correctly anticipated that readers may be interested in Robotics
but not Computer Vision, though now that I've read about how Conformal GA
connects the two, I would like the first volume.

And that is perhaps the most important thing I've learned so far:
implementations of robotics motor control requiring computer vision (i.e. any
robot algorithm that needs eyes) can be implemented with Conformal Geometric
Algebra in such a way that unifies the spaces you work within. That is the
general appeal of GA, but it may be a bit of an oversell -- though I'm not
really qualified to say.

** On Optimization

GA does require lifting and lowering your calculations with what are essentially
functors -- although someone else may call these natural transformations or
multilinear algebras or non/orthonormal basis-shifts. In practice (i have zero
experience), this means you will want /everything/ to be in GA terms .... that's
how it always is with the "unifying" programming frameworks or solutions. I'm
sure there are plenty of C/C++ libraries out there that have not swallowed the
GA pill. You'll also want a truly functional framework. Perhaps something like
haskell. It's too bad we can't have nice things -- hey, at least you're not
stuck with javascript.

It's not clear to me whether these techniques easily carry over to the GPU,
especially in spaces that are not easily rastered. I have no experience with
CUDA programming (only OpenGL/Vulkan), which is the GPU equivalent to
understanding classical mechanics but not quantum mechanics.

** Possibilities for Optimization in Hardware

Glossing over the introduction to program optimization, it seems like the
tendancy to rely heavily on C/C++ directive-based metaprogramming would imply
that in-silicon methods may be appropriate. Things like SIMD or exotic CPU
instructions...

Even better, since there are so many connections in this book to Fourier/Wavelet
transforms, perhaps low-dimensional GA computations could be virtualized inside
the kind of optical computing methods used in some bleeding edge AI chips today.
GA works because everything is a simple transformation to greatly reduced
systems. The idea that you would have calculations carried out within optical
computing (or via fourier optics) is a longshot. This may require trading
precision for speed.

I should probably actually read this before i continue to spout nonsense. It
does seem like the need to tune your data structures and abstraction design to
the specifics of the GA is a major limitation.
