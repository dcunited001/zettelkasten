:PROPERTIES:
:ID:       2dae92fb-29f6-4714-ba86-9654c8d0795a
:END:
#+TITLE: Cloud: Setup DNSSEC And Certbot
#+CATEGORY: slips
#+TAGS:

* Resources
+ [[https://cloud.google.com/dns/docs/best-practices#dns-concepts][Disambiguate Google DNS offerings]]

[[https://certbot-dns-google.readthedocs.io/en/stable/][Certbot Plugin for Google DNS]] I'm probably not using this, but it should cover
the requirements for delegated subdomains.

* GCloud CLI

| dns-keys          | Manage Cloud DNS DNSKEY records.                  |
| managed-zones     | Manage your Cloud DNS managed-zones.              |
| operations        | Manage your Cloud DNS operations.                 |
| policies          | Manage your Cloud DNS policies.                   |
| project-info      | View Cloud DNS related information for a project. |
| record-sets       | Manage the record-sets within your managed-zones. |
| response-policies | Manage your Cloud DNS response policy.            |

* Plan


** Delegating A Subdomain To Google DNS

I'm poor, so I need to delegate a zone to avoid a surcharge in order to receive
the otherwise free Let's Encrypt. I have service with another DNS provider, so a
subdomain needs to be forwarded to Google Cloud DNS. Unfortunately, there are
DNS-01 and per-registrar constraints on what's possible for Let's Encrypt.

+ Sometimes you can't get a wildcard for a subdomain. Sometimes this is free,
  sometimes it's not possible. It's unclear, but most people dicking around with
  technology have money.
+ Sometimes DNS Registrars will charge you per-certificate (like mine), so they
  don't just give out wildcard certs...

Given that I've been poor since at least the last time I messed with this
(before Let's Encrypt), I don't know enough about it to anticipate issues, but
typing prefixing every URL with an extra subdomain sounds bad enough to want to
transfer ... that's +2 subdomains per URL since I'm already redirecting from
wherever the hell Let's Encrypt gets set up. Transferring is easy enough and I
don't really care about downtime in the longrun.

My main issue is that these giant technology companies have a habit of taking
websites or apps offline when they feel helping the media gaslight the left. In
my case, it would just be arbitrary and no one would ever hear about it. Also,
it's unclear what happens if you can't pay your cloud bill. Given that
everything I've ever written is censored ... it's better to stick with the
smaller company, at least for DNS. This gives you portability as well: you're
servers are never directly tied to your DNS and if you don't like your hosting,
you don't really need to migrate both at the same time.

* Setup

** DNS


+ Enable DNS API on the project. This will be useful later, but not now.

** DNSSEC

* Roam
+ [[id:8a6898ca-2c09-47aa-9a34-a74a78f6f823][Cloud]]
+ [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][Devops]]
+ DNS
