:PROPERTIES:
:ID:       671bb886-393a-47e8-9dd1-835f9e846fac
:END:
#+TITLE: Python: Adder Using Recursive Xor
#+CATEGORY: slips
#+TAGS:


#+RESULTS:
#+begin_src emacs-lisp
((:results . "both")
 (:session . "jupyter-python")
 (:pandoc . "t")
 (:cache . "no")
 (:noweb . "no")
 (:hlines . "no")
 (:tangle . "no")
 (:eval . "never-export"))
#+end_src

+ [[https://www.codevscolor.com/python-map-lambda][python map lambdas]]
+ [[https://stackoverflow.com/questions/11624190/how-to-convert-string-to-byte-array-in-python][python convert string to byte array]]

* Hex

#+BEGIN_SRC jupyter-python
import array
from random import randint as rnd

def addxor(a, b):
    n=1
    while ((2**(8*n) < a) and (2**(8*n) < b)):
        n=n+1

    return list(map(lambda x: (x % 2**(n*8)),
                    [a+b, a^b, (a&b), ~(a&b)
                     ,(~(a&b) - (a+b)) << 1]))

def addxor2(a,b):
    n=0
    while ((2**(8*n) < a) and (2**(8*n) < b)):
        n=n+1

    added = a^b
    remainder = ((a&b) << 1) % (2**(8*n))
    # refactor to recursive with keyword for nbytes
    while (int.bit_count(remainder) > 0):
        a,b = added,remainder
        added = a^b
        remainder = ((a&b) << 1) % (2**(8*n))

    return added

addxor(0xCC, 0xAA)
addxor2(0xCC, 0xAA)
#addxor(0x3333, 0x7777)
# aa = (b"\xCC" + b"\xAA")
# hex((b"\xCC"[0] + b"\xAA"[0]) % 256)
#+END_SRC

#+RESULTS:
: 118

Correct? ... Missing =1%=

Oh well

#+BEGIN_SRC jupyter-python
cnt=0
nbytes=4
for idx in range(1000):
    a, b = [rnd(0,2**(8*nbytes)-1)
            ,rnd(0,2**(8*nbytes)-1)]
    c = addxor(a,b)
    d = addxor2(a,b)
    if c[1] != c[3]:
        cnt+=1
        #print(cnt*1.0/(idx+1))
        if (d != c[0]):
            print(f'({a} + {b}) == ({d} =? {c[0]})')
            print("\n".join(map(lambda bbb: f'{bbb:32b}',[a,b,d]+c)))

#+END_SRC

#+RESULTS:
#+begin_example
(14781771 + 1865588792) == (1863593347 =? 1322371)
        111000011000110101001011
 1101111001100101010000000111000
 1101111000101000010110110000011
           101000010110110000011
        110100110010110101110011
          1000001000000000001000
        110111110111111111110111
        100101101010010011101000
(453595857 + 56298) == (453586619 =? 11963)
   11011000010010101001011010001
                1101101111101010
   11011000010010010111010111011
                  10111010111011
                1000100100111011
                 101001011000000
                1010110100111111
                1111110100001000
(12042317 + 2370797939) == (2366063040 =? 475584)
        101101111100000001001101
10001101010011111000000101110011
10001101000001110100000111000000
             1110100000111000000
        111110000100000100111110
             1111000000001000001
        111110000111111110111110
        111000100111101111111100
(7026578 + 3217769177) == (3208018539 =? 3570283)
         11010110011011110010010
10111111110010110100001011011001
10111111001101100111101001101011
          1101100111101001101011
        101000000111010101001011
         10010110000001010010000
        101101001111110101101111
        111111010000011000001000
(5874644 + 3486824287) == (3475921715 =? 3038003)
         10110011010001111010100
11001111110101001011011101011111
11001111001011100101101100110011
          1011100101101100110011
        100011010001010010001011
         10100001010001101010100
        101011110101110010101011
              100000001011110000
(7037999 + 3046607131) == (3036867914 =? 191818)
         11010110110010000101111
10110101100101111000100100011011
10110101000000101110110101001010
              101110110101001010
        111111001110110100110100
              110000000000001011
        111111001111111111110100
        111101000010010101010100
(4780178 + 2874640426) == (2879420604 =? 10516668)
         10010001111000010010010
10101011010101111000100000101010
10101011101000000111100010111100
        101000000111100010111100
           111110111100010111000
         10000001000000000000010
        101111110111111111111101
          1111100000111010000010
(1374004605 + 5413288) == (1362640677 =? 3686181)
 1010001111001011010010101111101
         10100101001100110101000
 1010001001110000011111100100101
          1110000011111100100101
        101101110011110011010101
         10000001000000100101000
        101111110111111011010111
            11100111111101100100
(6584562 + 515641969) == (505449315 =? 2132835)
         11001000111100011110010
   11110101111000001001001110001
   11110001000001000101101100011
          1000001000101101100011
        110110000110101010000011
          1001000001000001110000
        110110111110111110001111
         11101101100100001011000
(1291562700 + 840397) == (1275625881 =? 557465)
 1001100111110111010111011001100
            11001101001011001101
 1001100000010001000000110011001
            10001000000110011001
        111101110111110000000001
            10001000001011001100
        111101110111110100110011
        110111011111011100110100
(2569447 + 1167582099) == (1170151546 =? 12523642)
          1001110011010011100111
 1000101100101111110001110010011
 1000101101111110001100001111010
        101111110001100001111010
        101100001101011101110100
             1110010000010000011
        111110001101111101111100
         11100111000111000000100
#+end_example

* Roam
