:PROPERTIES:
:ID:       741e53ef-26b5-48e9-8340-93c585c4c327
:END:
#+TITLE: Emacs: defmacro for interactive defuns
#+CATEGORY: slips
#+TAGS:  

* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]

* Notes
** Interned symbols
- intern to make symbols canonical
- =(or (intern-soft "asdf-sym") ...)= to check before defining
- intern-soft accepts optional =obarray= for private symbols
- [[https://emacs.stackexchange.com/questions/69509/why-are-defvars-in-my-macro-ignored][Why are `defvars` in my macro ignored?]] (s/o)

** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Indirection.html][10.2.4 Symbol Function Indirection]] (10.2: kinds of forms)
- symbol-function and symbol-name

** The lambda =#'= Reader macro
- evaluates to =(function ...)=

** Defining argument lists programmatically
- so this is why alphapapa has [[https://www.gnu.org/software/emacs/manual/html_node/cl/Argument-Lists.html][cl-defmacro]] everywhere
- common-lisp functionality in emacs allows for destructuring

#+begin_src emacs-lisp :eval no
(cl-defmacro dolist ((var listform &optional resultform)
                   &rest body)
  â€¦)
#+end_src

It's not clojure ... but i had no idea

** Parsing body wrap a closure with its unbound variables
- common-lisp: [[https://parse-declarations.common-lisp.dev/manual/html_node/parse_002dbody.html][parse-body]]
  - also: [[https://www.gnu.org/software/emacs/manual/html_node/cl/Multiple-Values.html][cl-multiple-value-bind]] allows you to wrap a closure (as if by =let*=)
- if macroexp package is available, use =macroexp-parse-body=
- [[https://stackoverflow.com/questions/66364347/correct-way-to-incorporate-a-docstring-in-a-def-macro][Correct way to incorporate a docstring in a def* macro?]]
  - no longer necessary

** Error handling in Emacs Lisp
- [[https://emacsdocs.org/docs/elisp/Standard-Errors][Emacs Docs: Standard Errors]]

** Misc
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Problems-with-Macros.html][14.5 Common Problems Using Macros]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Problems-with-Macros.html][13.14 The =declare= form]] declaring macro intent
  - in other contexts, declare does something else...
+ [[https://emacs.stackexchange.com/questions/69509/why-are-defvars-in-my-macro-ignored][Checking whether a minor mode is enabled]]
+ [[https://www.emacswiki.org/emacs/DefmacroBang][Defmacro Bang!]]
  - avoiding unwanted variable capture, polluted closures/scopes and memory
    leaks in recursive macros
