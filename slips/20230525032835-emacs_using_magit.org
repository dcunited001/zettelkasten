:PROPERTIES:
:ID:       cd1d6f5d-a072-4d7e-9456-21dce86d191b
:END:
#+TITLE: Emacs: Using Magit
#+CATEGORY: slips
#+TAGS:


* Features

More options become available in [[https://magit.vc/manual/magit/Plain-Patches.html#index-W-s][diff]] and log buffers.

** Reflog

The =y= takes you to the reflog, which can be useful when doing a lot of work
with sets of commits.

** Plain Patches

If you want to create patches quickly instead of stashes, then sort the patch
changes you want into either the staged or unstaged section. Highlight the
"Staged changes" header. Here =RET= runs =magit-diff-staged=.

Get in the diff buffer, then hit =C-x C-w= and pick a file. It's probably better
stash it first or commit onto =@= or =HEAD= because you can more easily create
patches from stashes/revisions.

* Using Magit to Learn Git

** Seeing The Commands That Emacs Runs

This is the best feature of magit -- and truly of many emacs commands. You can
see every command it ever runs. On any magit buffer, press =$= and you'll see
the =magit-process= buffer. If you wanted to script any of this outside of emacs
(whether it be git porcelain or plumbing), then there they are: all the commands
magit assembled for you.

The =messages= buffer often provides the same insight: press =C-h e= to pull
that up, which gives you information about warnings/errors or whatever your
misbehaving emacs package logged. When using =docker.el= within emacs, the
messages buffer will show you the JSON sent to =dockerd=.  Docker.el already
shows you all the possible command switches in =transient.el= popups.

So even though Emacs is derided for it's "steep" learning curve, it actually
makes learning all parts of Linux, C/C++ and Git much easier. But usually, as a
beginner, someone would have to /show/ you these features. If they do, it
accelerates everything you do.

** Don't ZSH and Fish have completions?

I guess most people these days just float on completions in =zsh= and
=fish=. That information will usually get you to the immediate next place
faster. However, magit's functionality gives you a /holistic/ glimpse of what
git offers while giving you insight into what lies beneath. Most GUI's will only
give you the glimpse. And thus, Magit's transient buffers and logs allow you to
ask questions about the Git CLI that you didn't know how to ask. Autocompletion
isn't really going to do that.

I personally don't use =zsh= because I'm paranoid. Too much convenience is a
problem, though if there are problems with zsh, they're probably found in the
plugins and scripts you're using, not the shell itself. I would install
zsh/fish, but I wouldn't set these as my standard shell.

Regardless of what tools you use to get these insights, you do not want to run
without things that fill these roles. As a beginner or intermediate user, you
don't know what those roles are particularly. If it was so easy to figure any of
this out, you'd see a lot more developers using the "profiles" features of
konsole, iTerm2, or terminator ... and I just don't see features like that being
used.
* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:8fb0a586-9c0f-4f36-b1ab-dc5c26681d15][OSS]]
+ [[id:cf847bc5-31f7-4bb8-8324-7680a8f2953d][Shell]]

