:PROPERTIES:
:ID:       869dee8f-3378-490a-940d-41d6a28fff50
:END:
#+TITLE: Python: Statistical Moments on Random Integers
#+CATEGORY: slips
#+TAGS:

Using matrix methods. Probably easier with tensors.

Spoiler: random ints for a uniform distribution.

Also, skew doesn't make sense here.


* Resources

** Distributions

[[https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution#Approximating_a_Normal_distribution][Approximating a Normal distribution]] this is what I was originally going for, but
I gradually shifted towards the plots below, which are parametric.

They combine the Uniform Sum Distributions (see link above) with something like
the [[https://mathworld.wolfram.com/UniformProductDistribution.html][Uniform Product distributions]], though I can't say why dirac delta is
necessary for the integrals.

There is also the [[https://mathworld.wolfram.com/NormalProductDistribution.html][Normal Product Distribution]], which I think takes a similar
direction with distributions. Trying to learn values for distributions composed
of products and sums is not usually computable beyond polynomials in two
variable (i.e. kernel algorithms beyond quadratic)

* Plots

N-D Uniform Distributions

$x_i = \sum{u_i}$

$y_i = \prod{u_i}$

On the x-axis are the values for the summed uniform random variables. And on the
y-axis, the values are the product of the random variables. they remind me of
objects from information geometry, but I'm not sure why. As =n= increases, they
also start to resemble the polynomial expansion into a sine wave.

**** 2D

[[file:.ob-jupyter/c1a8680c8b4dbaaf47713f3aa2ca6193229f21be.png]]

**** 3D

[[file:.ob-jupyter/d3738bf42f8f9023819b8bfea85147aef9b5c0d2.png]]

**** 4D

[[file:./.ob-jupyter/ed52bc33c9972e3e90bf832195272900c1ec1ab8.png]]

**** 5D

[[file:.ob-jupyter/34b378929adf62b303d68b5e239ca834c935ecad.png]]

**** 7D

[[file:./.ob-jupyter/db683b9cc5598d07a8d2f69291d6a8c5a9d79f18.png]]


* Python Random Numbers

I think the numbers are correct, but after focusing on getting it to generate
n-dimensions I'm not sure.

#+BEGIN_SRC jupyter-python
import numpy as np

nmax, ncount, ndist = (500,10000,7)
rsum = np.zeros(ndist)
rdist = np.zeros((ncount,ndist))
for idx in range(ncount):
    for jdx in range(ndist):
        rdist[idx,jdx] = rnd(0,nmax-1)
        rsum[jdx] += rdist[idx,jdx]

# m3 = np.sum(np.power(rscaled[:],3),0)/ncount
# rvar = np.sum(np.power(rscaled[:],2),0)/ncount
#+END_SRC

#+RESULTS:

Centered distribution:

#+BEGIN_SRC jupyter-python
rscaled = (rdist[:]/nmax) - 0.5
m1 = np.sum(rscaled,0)/ncount
m1
#+END_SRC

#+RESULTS:
: array([-0.005509 , -0.0011272, -0.0028238,  0.000555 , -0.0046548,
:         0.0005274, -0.0016154])

Variance: $m_2 \propto \frac{1}{12}$

#+BEGIN_SRC jupyter-python
m2 = np.sum(np.power(rscaled[:],2),0)/ncount
m2
#+END_SRC

#+RESULTS:
: array([0.08252301, 0.08210095, 0.08459984, 0.08215285, 0.08303007,
:        0.08319047, 0.08425622])

Skew:

#+BEGIN_SRC jupyter-python
m3 = np.sum(np.power(rscaled[:],3),0)/ncount
m3
#+END_SRC

#+RESULTS:
: array([-8.47700697e-04,  7.57599920e-05, -3.81402841e-04,  1.37626860e-04,
:        -5.93807678e-04,  9.76120440e-05, -2.43402466e-04])

I'm not sure if it's what I was going for.

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt

pgvariance = np.mean(m2)

# add it back, renormalize
pgdomain = np.sum(rscaled,1)
#pgrange = 1 - (pgdomain + np.prod(rscaled,1))**2

# 2D
#pgrange = (np.prod(rscaled,1)) - np.abs(pgdomain)/2 #* *4
pgrange = (np.prod(rscaled,1))

# shift into positive domains
pgred = rscaled[:,0]+0.5
pggreen = rscaled[:,1]+0.5
#pgblue = (np.log(1+pgrange)/pgvariance) #(np.power(pgrange,2))
#pgcolor = 1-np.column_stack([pgred,1-pggreen,np.abs(pgblue)])

pgblue = (pgrange**2/pgvariance) #(np.power(pgrange,2))
#pgcolor = np.column_stack([pgred,pggreen,pgblue])
pgcolor = 1- np.column_stack([pgred,1-pggreen,np.abs(pgblue)])
#pgmin,pgmax = [np.min(pseudogaussian), np.max(pseudogaussian)]
fig = plt.scatter(pgdomain,pgrange,s=0.1,c=pgcolor)
plt.show()

#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/db683b9cc5598d07a8d2f69291d6a8c5a9d79f18.png]]



* Roam

+ [[id:b4c096ee-6e40-4f34-85a1-7fc901e819f5][Python]]
