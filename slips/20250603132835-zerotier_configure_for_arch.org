:PROPERTIES:
:ID:       00344724-0ef3-4a3a-aff8-b42d6e2a70bd
:END:
#+TITLE: ZeroTier: Configure for arch
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][Networking]]
+ [[id:e967c669-79e5-4a1a-828e-3b1dfbec1d19][Route Switch]]
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]

* Docs
+ [[https://wiki.archlinux.org/title/ZeroTier][Arch Wiki]]
** Zero Tier
+ [[https://docs.zerotier.com/][docs]]
+ [[https://docs.zerotier.com/start/][Create a Network]]
* Resources
+ [[https://github.com/tralph3/ZeroTier-GUI][tralph3/ZeroTier-GUI]] and [[https://aur.archlinux.org/packages/zerotier-gui-git][AUR]]
+ [[https://github.com/dec0dOS/zero-ui][dec0dOS/zero-ui]] and [[https://aur.archlinux.org/packages/zero-ui][AUR]]
+ [[https://aur.archlinux.org/packages/zerotier-one-git][AUR: zerotier-one-git]]

* Overview

+ The free plan incldues: 1 admin, 10 devices, 3 networks
+ This is enough for 1 p2p network and space to transition into more permanent
  gateways, which require more sophisticated routing and firewall rules
+ This is also enough for multiple p2p networks -- which could help circumvent
  issues where you can't control IP addressing and need to shim in routes.

** Security

+ Running your own Zerotier infrastructure requires scale to get anonymity.

** Secrets


* Setup: Join Two Nodes On Layer 2


** Zero Tier

+ On arch: =yay -Syu zerotier-one=
+ While needed: =sudo systemctl start zerotier-one=

** Nodes

*** Routes

+ Pick a network that doesn't overlap with your existing ipv4 space. See [[https://docs.zerotier.com/bridging/][Layer2
  Bridge]] for more info on a better IP addressing plan.

+ =zerotier-cli info=
+ =zerotier-cli listnetworks=

Add nodes to network with =sudo zerotier-cli join=. on connect, zerotier adds this
route as. So for local connections to be able to access services through the
zerotier.

+ =192.168.192.0/24 dev ztugatqaer proto kernel scope link src $if_ip=

*** DNS and SSH

If you have a dns domain that should resolve locally

+ add =homelab.domain.com= and/or =homelab.arpa=
+ picking the ip address for the DNS server (traffic would be routed into the
  zerotier interface and out the local interface)

*** Control

** Local Network

Zerotier tries to use ipv6 initially, but enabling this on a firewall isn't
necessary. (phew...)

** SSH

+ Assign static IPs to the zerotier subnet
+ Restrict connections in =sshd= to only that subnet or those IPs.
  - trusting the crypto should be sufficient (it's kinda a problem anyways if
    its not sufficent.)

#+begin_example ssh-config
# TODO: change binding/addressing
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
HostKeyAlgorithms rsa-sha2-256,rsa-sha2-512,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,sk-ecdsa-sha2-nistp256@openssh.com,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,sk-ecdsa-sha2-nistp256-cert-v01@openssh.com
#+end_example


* Setup: Join Node On A Gateway

This would describe the more permanent setup I'd like.

+ Run zerotier on two firewalls with gateways.
+ Create a two zerotier networks with corresponding subnets on those firewalls.
  - One network is for general VPN usage
  - The other network is for admin VPN usage, which would allow reaching more
    secure subnets on the interior.
+ When you join the network, you get an IP on a subnet directly connected to the
  interior network.

* CLI
