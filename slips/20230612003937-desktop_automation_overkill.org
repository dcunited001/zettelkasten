:PROPERTIES:
:ID:       0e8fbcb2-cb8b-45b5-b990-f54b9474f02f
:END:
#+TITLE: Desktop: Automation Overkill
#+CATEGORY: slips
#+TAGS:
* Resources

[[https://developer.hashicorp.com/consul/docs/nia/terraform-modules][Consul-Terraform-Sync]] These are modules used to control Consul from a distance
to manipulate "Consul Objects"

* Overview

It would be nice to ask a Window Manager to reconfigure itself to a state and
have that happen, especially if the means for doing so were independent of the
Window Manager. While it may seem like using Terraform to do this would be like
using an impact drill to pull a nail out (wtf?), it does offer these benefits:

+ Terraform implement functional programming with Go -- which is fast and does
  IPC well. It can acquire & diff state. Terraform apparently doesn't care what
  it queries for state to assemble a plan: it could be AWS or Google Cloud or
  Ansible, somehow (though i'm leaving out a few layers of abstraction there)
+ it already has a rich ecosystem with plenty of examples.
+ It's already cloud native -- if you need to instantiate cloud applications or
  shared state in cloud/networked resources, then it does that.
+ it imports the provider pattern across many clouds (it's thing-agnostic)
+ it integrates with service discovery (Consul) and other tools.

... but I haven't really used it.

** Why?

If one were to transition to a shared desktop, this would be about as simple as
it could be -- e.g. you want to automate the instantionation/display of wayland
applications in a 3D environment in a shared VR/AR world -- these would be
resources sharing a networked backend anyways.

The question really becomes not "Is this the correct tool" but "How overkill is
it to do simple things?" and "What does a project look like?" It's probably not
worth carrying out, but it is a good exercise in thinking about the domain of
Desktop automation and the architecture/tools in cloud automation.

And ultimately, I want to define the window/application states or patterns that
I like and I want to instantiate them. I don't want to open and fucking close
windows/tabs to create a working environment.

Also, it's very likely that this is too complicated for the average person --
however, I'd like to point out that I'm always correct. AI needs to color within
the lines so it doesn't hallucinate -- it should be very good at interacting
well-documented API or producing code for a well-designed abstraction. Also, we
need AI to orchestrate state in virtual worlds because it's really just too
complicated...

Still, despite how complicated it is, I'd like my NASA control center... It
doesn't really matter if its an IRL control center with displays or a VR control
center with browsers, the complexity lies in the management of state and not the
implementation.


** Architecture

The goal is to control desktop application/window state, things like creating or
organizing window arrangements ... but more generally, world state. These
objects are more short-lived than what Terraform otherwise automates.

Almost every Linux window manager will handle window titles/classes. There
should be some method of tagging/addressing the windows using one or two short
hashes/ID's.

How you would tag/address the desktops is unfortunately WM-specific.

*** Consul

You'd need to get something like Consul running natively with the ability to
talk to the user's Sway socket and user DBus socket. This is probably easier if
the service is running natively, instead of as a container.

I'm not sure what other components you'd need here.

*** Terraform Cloud

You definitely need a local instanct of this...

*** Applications

Convention-over-configuration

*** TODO finish filling out the ideas here ....

One could also use Ansible to do this. It requires no infrastructure, but:

+ it is unscalable for this purpose (limited by how it acquires & reports state)
+ would tend to produce a confusing ecosystem that doesn't have abstractions

Still, it would be a quick way to test out controlling sway via =swaymsg=, which
is how I got started thinking about this.

* Roam
+ [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]]
+ [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][DevOps]]
