:PROPERTIES:
:ID:       a14660c0-4156-4399-86c1-68dea94c25b5
:END:
#+TITLE: QEMU and Libvirt: setup bridged networking on wifi
#+CATEGORY: slips
#+TAGS:

I got the proprietary =vscode= running in Guix, but it's just way easier this
way.

I forgot that I've already done this, more or less: [[id:fbcba632-7805-4acc-af08-10ba7ff3c8cd][Firewall: Run OPNSense in
KVM Alongside Baremetal PFSense]]....

* Resources

+ [[https://gist.github.com/gdamjan/ed095763b8c322ee5bed17e11bbaed6d][ipvtap gist]] which should work assuming that libvirt uses network namespaces
  (see comments for more info on that and DHCP)
+ [[https://github.com/AlexStragies/lsnetdev][AlexStragies/lsnetde]] parse =ip link= output to display topology. it can output
  graphviz which is super useful
+ [[https://linuxconfig.org/how-to-use-bridged-networking-with-libvirt-and-kvm][How to use bridged networking with libvirt and KVM]]
+ Guix Cookbook: [[https://guix.gnu.org/cookbook/en/html_node/Routed-network-for-libvirt.html][Routed network for libvirt]]
+ [[https://jamielinux.com/docs/libvirt-networking-handbook][jamielinux.com/docs/libvirt-networking-handbook]]
+ [[enp0s29u1u1][docs.bisdn.de]] More comprehensive docs on linux bridges
+ [[https://docs.kernel.org/networking/ipvlan.html][kernel.org: ipvlan]]

** Red Hat

[[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_virtualization/configuring-virtual-machine-network-connections_configuring-and-managing-virtualization][RHEL Conf/Manage Virtualization: 16 Networking]]

+ includes info on configuring filter chains in libvirt XML
+ this seems about as useful as YANG or "nice things we like to have"

[[https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.4/html/administration_guide/chap-logical_networks#sect-Hosts_and_Networking][Red Hat Virtualization Admin Guide: 4.4.4 nmstatectl]]

+ Really curious: who actually has the scale to have some of these problems?
+ Oh, probably people who also have device mapper problems.

* macvtap

** KVM config for a management network

[[https://wiki.libvirt.org/TroubleshootMacvtapHostFail.html][LibVirt: Troubleshooting macvtap]]

** Setup

*** Create Host Device

#+begin_src sh
device=eth0
vtap=macvtap0
ip link add link $device name $vtap type macvtap0
#+end_src

*** Create networks

Bridge network =brnet0=. The addressing here is shared by the host.

#+begin_src xml
<network>
  <name>brnet0</name>
  <forward mode='bridge'>
    <interface dev='eth0'/>
  </forward>
</network>
#+end_src

Isolated network =vmnet0=. The addressing here may conflict with other virtual
networks, but it shouldn't be externally routable.

#+begin_src xml
<network>
  <name>vmnet0</name>
  <uuid>d1ff8fcb-de08-4ae3-8f3b-2b22e7203abc</uuid>
  <bridge name="vmnet0" stp="on" delay="0"/>
  <mac address="ab:cd:ef:15:cd:32"/>
  <domain name="vmnet0"/>
  <ip address="192.168.100.1" netmask="255.255.255.0">
    <dhcp>
      <range start="192.168.100.128" end="192.168.100.254"/>
    </dhcp>
  </ip>
</network>
#+end_src

Create managed networks

#+begin_src sh
virsh net-define brnet0.xml
# virsh net-autostart brnet0
virsh net-start brnet0

virsh net-define vmnet0.xml
virsh net-autostart vmnet
virsh net-start vmnet0
#+end_src

*** Create Guest Devices

Device in bridged network:

#+begin_src xml
<interface type="direct">
  <mac address="ab:cd:ef:23:dc:51"/>
  <source dev="eth0" mode="bridge"/>
  <model type="virtio"/>
</interface>
#+end_src


Device in isolated network

#+begin_src xml
<interface type="network">
  <mac address="ab:cd:ef:15:cd:32"/>
  <source network="vmnet0"/>
  <model type="virtio"/>
</interface>
#+end_src

This should work, but i haven't tested yet...

** Isolated networks

I totally had an incorrect understanding of "isolated". I thought these were
something specifically for cybersecurity or for virtualization of services with
complex networking requirements ... I didn't think to use it as a management
network. The underlying protocols are what I understand (kinda).

Semantic mappings, eh?  The higher level tools like Proxmox and Virt-Manager
blend terminology a bit. This is one of those places where "it's not the things
you don't know that slow your progress, but the things you think you know."
That's one reason i lost /some/ interest in proxmox. It's great, but I didn't
have a cluster and I couldn't match the proxmox networking magic to the actual
networking protocols and/or abstraction names (VRF on proxmox was hard ... and
kinda pointless: it's already doing VRF!)  I encounter these semantic mismatch
issues frequently, though I imagine it's not such an impediment for most
people. Finding the answers piece by piece and cargo culting does you no favors.

And generally, it's not really the semantics that's the problem -- these docs
are actually very useful -- but rather that I go for so long without feedback
from other people. If you misunderstand the semantics, people may mention things
or make suggestions, but you're just talking past each other.

The source code on the other hand doesn't really leave much ambiguity. Does
anyone opt into source pkgs? If you could deliver source as git by default, then
you can also deliever source deltas to minimize bandwidth later. If they are
bare git repos, then you can clone/pull from them off your own machine.

* Basic NAT

** Networking

source environment

#+begin_src sh
_br=vmbr0
_if=eth0
_tap=tap0
#+end_src

Create bridge and add devices

#+begin_src sh
brctl add $_br
# tunctl -t $_tap
# brctl addif $_br $_tap
brctl addif $_br $_if
#+end_src

Create Network XML

#+begin_src xml :tangle /tmp/vmbr0.xml
<network>
  <name>vmbr0</name>
  <forward mode="nat" dev="vmbr0"/>
  <domain name="network"/>
  <ip address="192.168.100.1" netmask="255.255.255.0">
    <dhcp>
      <range start="192.168.100.128" end="192.168.100.254"/>
    </dhcp>
  </ip>
</network>
#+end_src

Create Device XML

#+begin_src xml :tangle /tmp/vm-eth0.xml
<interface type="ethernet">
  <mac address="01:02:03:0a:0b:ff"/>
  <target dev="vmbr0" managed="no"/>
  <model type="virtio"/>
</interface>
#+end_src

But that's not so great.

* ipvtap 

** L3

Source environment

#+begin_src sh
vtap=ipvtap0
device=eth0
ipguest=172.20.20.200/24
#+end_src

*** Setup

+ l3s :: layer-3 symmetric. it has connection tracking.

Flags define the switching/routing between VM's

+ bridge :: VM's can crosstalk without jumping out (direct connection via
  virtual bridge)
+ private :: VM's can't communicate. no hairpin on external switch: must be
  routed back in from external L3 device (unsure on this last one; no time for
  =netns= scripts)
+ vepa :: uses 801.Qbg if you're a fan of acronyms

#+begin_src sh
ip link add name $vtap link $device type ipvtap mode l3s bridge
ip link set up $vtap

# configure address on host
ip addr add 10.8.16.81/24 dev ipvtap0
#+end_src

+ You do have to =ip link set up= the =ipvap=. I'm seeing =/32= addresses on the
  host and =/24= addresses on the guest, so I guess technically it gets treated
  as its own singleton network.
+ The =netns= stuff gets handled by libvirtd (the =net0= below is added after VM
start)

The livbirt XML:

#+begin_src xml
<!-- it's not clear this is actually the ipvtap l3 -->
<interface type="ethernet">
  <mac address="ab:dc:fe:99:a3:4c"/>
  <target dev="ipvtap0" managed="no"/>
  <model type="virtio"/>
  <alias name="net0"/>
  <address type="pci" domain="0x0000" bus="0x01" slot="0x00" function="0x0"/>
</interface>
#+end_src

*** Tear down

And it doesn't work. The parent interface needs to be on its own network

+ Now if you were clever enough to carve your =/24= network into at least a
=/25= with route summarization on the router -- i.e. your external router sends
all traffic back to your Dev LAN =/24= -- then you can avoid the need to set up
routes each time you use ipvtap.

#+begin_src sh
ip addr del 10.8.16.81/24 dev ipvtap0
ip link set down $vtap
ip link del name $vtap link $device
#+end_src

**** macvlan vs ipvlan

According to [[https://hicu.be/macvlan-vs-ipvlan][hicu.be/macvlan-vs-ipvlan]], other than advanced use cases, the one
case where =ipvlan= makes sense is with a wireless card ... but now that I
reread that: it's =macvlan vs ipvlan=

|-------+---------------------------------------------------|
| mac-  | different MACs                                    |
| ip-   | shares MACs                                       |
|-------+---------------------------------------------------|
| -vlan | lacks a TAP character device                      |
| -vtap | gets a TAP device, can directly plug into libvirt |
|-------+---------------------------------------------------|

** L2

For the L2 Bridge method, basic networking works inside the guest. Since
everything is in the same namespace (see the gist comments), sessions which
originate from the host to the Guest will attach to the Guest (so ssh doesn't
work).

This could maybe be fixed using a slightly different configuration of ipvtap
using L3 with routes (and different subnets?).

Simply adding a route to the l2 bridge did not work. Though =ss -ai | grep
$guestip= shows =ntp= traffic from guest, i'm not sure how move further.

These macvtap/ipvtap devices are extremely useful, but there are very few
examples online.

*** Using ipvtap (L2 bridge)

See [[https://gist.github.com/gdamjan/ed095763b8c322ee5bed17e11bbaed6d][this gist]]. Use the =nettree= command to verify the =ipvtap0= topology.

#+begin_src sh
device=wlan0
vtap=ipvtap0
ip link add name $vtap link $device type ipvtap mode l2 bridge
ip link set up $ipvtap
#+end_src

Edit the VM's nic with =virsh edit $vmname=

#+begin_src xml
<interface type="ethernet">
  <mac address="01:02:03:0a:0b:ff"/>
  <target dev="ipvtap0" managed="no"/>
  <model type="virtio"/>
  <!-- qemu/virt will add these lines (and it's easier that way) -->
  <!-- <alias name="net0"/> -->
  <!-- <address type="pci" domain="0x0000" bus="0x01" slot="0x00" function="0x0"/> -->
</interface>
#+end_src

Ensure the correct NIC is set in the VM, then start it.

There are tricks with =DHCP= to relay its requests from inside the guest to the
host's network, but I just set a manual ip4 address. You need to retrieve the
host IP address on the wireless network first (they must be on the same network)

Run =nmcli conn edit "Not-Wired Connection 1"=

#+begin_example txt
set ipv4.addresses 172.20.20.200/24
set ipv4.gateway 172.20.20.1
set ipv4.dns 8.8.8.8 8.8.4.4
#+end_example

Then in guest =nmcli reload= and on the host: =ip addr add dev ipvtap0 $ipguest=

And in guest: =nmcli conn up "Not-Wired Connection 1"=

After this, ping something and you should be connected on the same network. Then
run =dnf install NetworkManager-tui= so you have basic quality of life tools.

**** Teardown

#+begin_src sh
vtap=ipvtap0
ipguest=172.20.20.200/24
ip addr del $ipguest dev $vtap
ip link set down $vtap
ip link delete dev $vtap type ipvtap
#+end_src

**** Ensure stable MAC address

The quickest fix for me was to specify an address in an nmcli connection profile
using =nmtui=. This would need to be updated on a per-connection basis, but it
works.

WPA supplicant seems to default to random MACs on my laptop. I'm unsure of
whether it's BIOS, but i really don't feel like restarting my laptop. In the
=nmcli= connection profile, a stable mac can be specified and this will be
inherited by the attached =ipvtap0= device.

+ On Guix, the =wpa-supplicant= service doesn't pass a config if one isn't
  provided in the system definition.
+ The =wpa-supplicant= package has an XML spec for dbus service endpoints at
  =/etc/dbus-1/system.d/wpa-supplicant.conf=. I tried looking at these with
  =d-feet=, but i'm at a loss here.
+ Tried =nmcli= commands, but they led me to dbus errors. There were no other
  config files on the laptop in =/etc/NetworkConnections= besides the system
  connections
+ Also tried =wpa_gui= with guix shell and I got it to run, but it may not have
  had the right environment for the sstem dbus or something.

*** Using bridge
Because I haven't messed around with libvirt in Guix much (certificate paranoia)
and I don't have time to customize the system config... then a script needs to
configure the network temporarily:

Nothing shows in guix for this:

#+begin_src sh
sudo virsh net-list --all
#+end_src

**** Virtual Bridge

So I followed the Guix cookbook instructions on setting up the bridged
network. It doesn't autostart:

#+begin_src sh
virsh net-define /tmp/virbr0.xml
# virsh net-autostart virbr0
virsh net-start virbr0
#+end_src

But this doesn't work, since I only have one network device and I'd need more
complex config. I won't have control over the gateway's static routes.

#+begin_src sh
virsh net-destroy virbr0
#+end_src

**** Bridge

Add a bridge device. it will need a master device later

#+begin_src sh
ip link add br0 type bridge

# and verify
ip link show type bridge

#+end_src

And actually i think I need that virbr0 bridge. A separate device would be
needed if wifi is to be bridged.

#+begin_src sh
# virsh net-define /tmp/virbr0.xml
virsh net-start virbr0
#+end_src

Set the master device on the bridge

#+begin_src sh
ethdev=enp0s29u1u1

# ensure up: ip link set $ethdev up
ip link set $ethdev master br0

# and verify
ip link show master br0

# undo with: ip link set $ethdev nomaster
#+end_src

Now, i'm offline :(

#+begin_src sh
old_ip=172.16.20.24/29
sudo ip address add dev br0 $old_ip

# and verify
ip addr show br0
#+end_src

* Roam

+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
+ [[id:cf2bd101-8e99-4a31-bbdc-a67949389b40][Virt]]
