:PROPERTIES:
:ID:       61dcaf7a-390a-404c-955c-3f9de75c776a
:END:
#+TITLE: Rant: On VSCode
#+CATEGORY: slips
#+TAGS:

#+begin_quote
keep in mind that i do /like/ VSCode ... and I do think it's the best editor for
beginners ...
#+end_quote

Microsoft neglects to mention Emacs as a popular editor in public forums, since
the Emacs guys went and wrote =eglot=. I don't actually care about whatever your
spat is about, GNU/Microsoft ... it would really help if Microsoft didn't
project "ownership" over everything "open source." It's clear they have a lot of
time on their hands when deciding what tooling to either build or not build. At
least I could write a package for emacs without giving a shit about Babel/ES6 or
whatever javascript koolaid promises to alleviate the neverending cycle of
new-boilerplate.

#+begin_quote
And also keep in mind that, between Microsoft and the GNU/Emacs developers, one
of them has a budget that's at least 6 orders of magnitude larger than the
other.
#+end_quote

To be fair, I could just use =lsp-mode= and this would make *some* things much
easier, but I'm not really sure why i have to choose between =lsp-mode= and
=eglot= to begin with.

And oh? That's Emacs' fault? Really Microsoft? Exactly how many shits do you
give about Emacs again? Oh all the shits -- at least enough to loudly exclude
the editor in most circumstances.

It's important to emphasis the caveat that not every interaction with technology
must proceed through a text editor, plain text or a file-based
interface. Alternatives to using an editor to interface with source code,
configuration and infrastructure include: GUI's, WebUI's, API's, Cloud platform
API's, chatbots and things like this ... oh and I guess spreadsheets and AI too,
if we're going to give it the keys to the devops. And I guess while these do
improve a /group's/ productivity, they really are not flexible. This is the
stuff that /both scale and stagnation/ are made of. Ultimately, an
organization's processes/logistics need to be structured around the tools its
teams use ... and once that happens, any change means you have to teach old dogs
new tricks -- in addition to budgeting the labor/services to redesign Wheel
2.0. This is why the world's "best" MBA's do everything in spreadsheets -- or
maybe Access/SQL if you're lucky. I'm not sure what they think they know from
analysis on files that can't exceed GBs in size ... but I bet they can budget a
team to work on it. Otherwise, they need floaties to swim in the Data
Lakes. Hopefully, they didn't carry the wrong digits when they calculated
revenue ... but most AI startups go on to succeed as we all know. Because the
MLOps is easy and business models are hard!

And regardless of how "easy" VS Code is, the truth is that it only appears to be
easy. Once you manage multiple environments and containerize your app, it
doesn't matter how easy it was to _start_, what matters is /how the editor helps
you handle complexity!/ This is no different than all the hacks used to ensure a
webpage displays a loading spinner -- here, the point is to convince you that
using anything else is too difficult. It's a decent editor, but the ease of use
only helps you get started with a language/framework. Once you're dealing with
sufficient complexity, you'll find that Javascript was not the language you
needed -- which means that you invested too much time on entirely the wrong
toolchain. It's a case of "the grass is greener." You /seem/ more productive,
especially if you don't really understand what's happening under the hood.

I've watched a few videos on VSCode features. Its integration with Docker and
WSL2 is impressive ... but how do you automate the VM/container translation
layers if every time you want a package that doesn't exist you have to handle
Javascript boilerplate?! Ultimately, it doesn't matter what platform you use,
since dealing with portability, automation and security mean solving the same
problems under slightly different conditions. What you want is flexibility.

I'm not really opposed to using VS Code. It would be useful for pairing or quick
productivity -- esp. when other people on a team can help fill in the blanks and
show me the ropes.

In the past few years when I've briefly to use VS Code, actually configuring it
to be flexible in multiple environments is ... much more complicated than
getting Emacs to do the same. Ultimately, reconsidering the features I have in
emacs and =.profile= -- like direnv integration -- are already complicated to
maintain between multiple machines. But to supply each need/feature in VSCode
and not have my =.profile= tweaks break between environments is crazy.

* Roam
