:PROPERTIES:
:ID:       651ca928-ff1b-4129-922e-9f2d3d005353
:END:
#+TITLE: Python: Boilerplate from 2021-2024 Dotfiles
#+CATEGORY: slips
#+TAGS:

OW. I'm using astral uv now. IDK what to do about Python on Guix. When I
eventually encounter another human, I will be sure to ask them why I should
suffer for the rest of my life. But for now I live on Mars like that cute movie.

Anyways (don't take it too seriously, but holy shit I could use human
interaction.)

* Roam
+ [[id:b4c096ee-6e40-4f34-85a1-7fc901e819f5][Python]]
+ [[id:2b7dae76-003f-4714-b621-c046d855fe3e][Guix]]
+

* Python

This should end up in =$HOME= to fix an issue where =jupyter.el= uses =$HOME=
as its default directory. This main python should have =pip= set up with the
=jupyter-lab= environment, which can load kernels can be built from other
=venvs= ... (this might conflict with other information on jupyter herein)

#+begin_src sh :tangle .python-version
3.12.1
#+end_src

** Python on Arch

*** Pyenv

Ensure pyenv is installed with =yay -Syu pyenv= and add this to
=.config/sh/_load_profile.d.sh=. This should be loaded after all the guix
profiles, in case one contains a python.

#+begin_src sh :tangle .config/sh/profile.d/python-pyenv.sh :shebang #!/bin/sh
export PYENV_POETRY_VENV=poetry
export PYENV_ROOT="$_LANG/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
source "${PYENV_ROOT}/completions/pyenv.bash"
#+end_src

+ Install new pythons with =pyenv install 3.11.3= and see below for optimizations.
+ List versions with =pyenv install -l=
+ Switch with =pyenv (shell|local|global) $python_version=. This is currently
  not working, since I only have =eval $(pyenv init -)= sourced in =.profile=,
  which forgets the =pyenv()= function. To get the shell integration to work, it
  needs to be added to =.bashrc=.

See direnv integration below.

***** TODO evaluate whether I should add =pyenv= to both =.profile= and =.bashrc=

**** Switching

Caveat scriptor: running =pyenv local $pyversion= will create a
=$PWD/.python-version= file. Use =pyenv shell $pyversion= instead.

**** Custom Pyenv builds

See pyenv's =python-build= plugin to customize the build

+ [[https://github.com/pyenv/pyenv/tree/master/plugins/python-build#special-environment-variables][Environment vars]] for pyenv's python-build plugin.
+ The spec for [[https://github.com/pyenv/pyenv/blob/master/plugins/python-build/share/python-build/3.11.3][Python 3.11.3]] is in =./plugins/python-build/share/3.11.3/=
+ The installations will source functions in
  =./plugins/python-build/bin/python-build=, including =install_package= which
  fetches source for python.
+ It also fetches packages like =readline= or =openssl-1.1.1s= if your Mac's is
  broken. I guess OpenSSL3 is [[https://peps.python.org/pep-0644/][taking its sweet time]], but convenience comes at a
  cost -- mostly, you'll run into issues with the [[https://cryptography.io/en/latest/installation/#building-cryptography-on-macos][cryptography package]].

***** Optimizations

To build with optimizations:

#+begin_src sh
PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' PYTHON_CFLAGS='-march=native -mtune=native'
#+end_src

To build in parallel (doesn't seem to help)

#+begin_src sh
MAKE_OPTS="-j14" PYTHON_MAKE_OPTS="-j14"
#+end_src

Full command

#+begin_src sh :tangle bin/pynv-install-py
[[ -z "$1" ]] && echo "Requires semantic version" && exit 1;

version=$1

mjobs=$((NTHREADS - 2))

env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' \
    PYTHON_CFLAGS='-march=native -mtune=native' \
    PYTHON_MAKE_OPTS="-j$mjobs" \
    MAKE_OPTS="-j$mjobs" \
    pyenv install $version 2>&1 > ~/src/log/python-build-$version.log
#+end_src

Then =pip install --upgrade pip= and set up =jupyter-lab= from within that new
python's main env.

#+begin_example sh
pip install --upgrade
pip install jupyter-lab # etc...
#+end_example

*** Poetry

Basically poetry projects (& their venv's) will need to be handled
separately. From what I understand, each python that is installed will need to
have its own =poetry= installed. The =virtualenvs.prefer-active-python= will
accomplish that, as long as poetry runs after =direnv= sets the =pyenv= and as
long as there isn't an active =venv= for that =pyenv= in the shell -- these have
a separate =pip=.

There is also [[https://github.com/tjquillan/poetry-plugin-pyenv][tjquillan/poetry-plugin-pyenv]].

**** Keyring

In KDE, unless there's a reason for pip to cache in keyring, then maybe
disable it: =`pyenv which python3` -m keyring --disable=

See [[https://stackoverflow.com/a/68760190]]

**** Poetry Config

See [[id:][configuration]] docs. The shared poetry configuration, which will use the
=poetry= shim in the python selected by =pyenv= selects. In any python project,
the version should be set by =.python-version=.

#+begin_src conf-toml :tangle .config/pypoetry/config.toml
[virtualenvs]
prefer-active-python = true
#+end_src

***** Defaults

Without any other config, once =poetry= is installed for =$pyversion=, then
=poetry config --list= should show:

#+begin_src conf
cache-dir = "$HOME/.cache/pypoetry"
experimental.new-installer = true
experimental.system-git-client = false
installer.max-workers = null
installer.modern-installation = true
installer.no-binary = null
installer.parallel = true
virtualenvs.create = true
virtualenvs.in-project = null
virtualenvs.options.always-copy = false
virtualenvs.options.no-pip = false
virtualenvs.options.no-setuptools = false
virtualenvs.options.system-site-packages = false
virtualenvs.path = "{cache-dir}/virtualenvs"  # $HOME/.cache/pypoetry/virtualenvs
virtualenvs.prefer-active-python = false
virtualenvs.prompt = "{project_name}-py{python_version}"
#+end_src

*** Python Direnv

This method is compatible with the others, so a project on one laptop with
=pyenv= and lacking the =pyenv-virtualenv= plugin will simply need to change
=.envrc=. Both should be able to use =layout python=.

*Generally*

+ Use =layout poetry= where practical/possible (... test?)
+ Use the =pyenv-virtualenv= for one-off environments or things to don't fit
  neatly into dependency specs

**** Direnv: [[https://github.com/direnv/direnv/wiki/Python#venv-stdlib-module][layout python3]]

Specify with =layout python3=, which uses venv stdlib module

This directive causes a virtualenv to be created at
=$PWD/.direnv/python-$python_version=.

#+begin_quote
Commenting out the =layout= will cause this directory to appear.
#+end_quote

**** Direnv: [[https://github.com/direnv/direnv/wiki/Python#poetry][layout pyenv]]

Requires [[github:pyenv/pyenv][pyenv/pyenv]]

Specify with =layout pyenv $python_version=

This directive still installs python packages in the virtualenv at
=$PWD/.direnv/python-$python_version=.

#+begin_quote
Commenting out the =${pyenv}= will cause this directory to appear.
#+end_quote

**** Direnv: =layout pyenv $python_version=

Requires [[github:pyenv/pyenv-virtualenv][pyenv-virtualenv]]

Specify with =layout virtualenv= and =layout activate= in a project's
=.envrc=. This template can easily be changed/managed locally for more granular
specification, but allows for some defaults

#+begin_src sh :tangle .config/direnv/eg/pyenv :tangle-mode (identity #o644)
# -*- mode: sh; -*-
[[ -f ".python-version" ]] && pyversion=$(head .python-version) || pyversion="3.10.11"
[[ -f ".python-virtualenv" ]] && pvenv=$(head .python-virtualenv) || pvenv=$(basename $PWD)

#use python ${pyversion}

# Create the virtualenv if not yet done (just depend on .python-version for this)
layout virtualenv ${pyversion} ${pvenv}
layout activate ${pvenv}-${pyversion}
#+end_src

This method requires adding the following to =.config/direnv/direnvrc=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# use a certain pyenv version
use_python() {
    if [ -n "$(which pyenv)" ]; then
        local pyversion=$1
        pyenv local ${pyversion}
    fi
}

layout_virtualenv() {
    local pyversion=$1
    local pvenv=$2
    if [ -n "$(which pyenv virtualenv)" ]; then
        pyenv virtualenv --force --quiet ${pyversion} ${pvenv}-${pyversion}
    fi
    pyenv local --unset
}

layout_activate() {
    if [ -n "$(which pyenv)" ]; then
        source $(pyenv root)/versions/$1/bin/activate
    fi
}
#+end_src

Adding this to =.direnvrc= will cause new environments to be created in:

=$(pyenv root)/versions/$python_version/$virtualenv_name=.

These environments can be shared ... potentially leaded to some isolated
dependency/build concerns (e.g. tensorflow with/out GPU or installing a set of
dependencies not satisfied by what's already installed). It doesn't share
installation roots.

However, since =direnv= use of functions named =use_.*= is special, I'm not
quite sure how well these methods mix.

**** Direnv: [[https://github.com/direnv/direnv/wiki/Python#poetry][layout poetry]]

Requires [[github:python-poetry/poetry][python-poetry/poetry]] to be [[https://python-poetry.org/docs/#installing-with-the-official-installer][installed]]. This method is helpful when
working on a python lib, since it isolates the installation into =.venv=.

#+begin_src sh :tangle .config/direnv/eg/poetry :tangle-mode (identity #o644)
layout poetry

local venvname=$(echo "$VIRTUAL_ENV" | rev | cut -d'/' -f2- | rev)
PS_INFO="${PS_INFO} <${GREEN}$(pyenv version-name) ${WHITE}poetry: ${YELLOW}${venvname}${WHITE}> ::${RESTORE}"

# TODO setting the prompt doesn't quite work
export PS1="${PS_INFO}\n${PS_PROMPT}"
#+end_src

Just use the =.venv= environment. There should not be a =.python-virtualenv=
file. The =poetry.toml= may look something like:

#+begin_example conf-toml
[virtualenvs]
#create = false
in-project = true
#+end_example

Specify with =layout poetry=

#+begin_src sh :tangle .config/direnv/direnvrc :shebang #!/bin/sh
# TODO: either use_poetry() or....
# ensure pyenv version

layout_poetry() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [[ ! -f "$PYPROJECT_TOML" ]]; then
        log_status "No pyproject.toml found. Executing \`poetry init\` to create a \`$PYPROJECT_TOML\` first."
        poetry init
    fi

    if [[ -d ".venv" ]]; then
        log_status "Setting VIRTUAL_ENV=\$(pwd)/.venv"
        VIRTUAL_ENV="$(pwd)/.venv"
    else
        log_status "Setting VIRTUAL_ENV=\$(poetry env info --path 2)/.venv"
        VIRTUAL_ENV=$(poetry env info --path 2>/dev/null ; true)
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`poetry install\` to create one."
        poetry install
        VIRTUAL_ENV=$(poetry env info --path)
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export POETRY_ACTIVE=1
    export VIRTUAL_ENV
}

#layout_vpoetry() {
#    echo foo
#}
#+end_src

*Compatibility with pyenv:* Poetry will use the python it encounters first in
your path if =virtualenvs.prefer-active-python= is set, so it should use the one
that =pyenv= hands it via its shims.

+ It will install this virtualenv into =${cache-dir}= which is
  =$HOME/.cache/pypoetry/virtualenvs=
+ See [[https://python-poetry.org/docs/configuration#configuration][Configuration]] and [[https://python-poetry.org/docs/managing-environments/][Managing Environments]].

**** TODO direnv show branch name

This won't work since the =.envrc= is only evaluated once (which is what I'd
prefer vs. a highly dynamic shell)

#+begin_src sh
if [ -d ".git" ]; then
    local gbranch="$(git branch --show-current)"
    local ghash="$(git log -n1 --pretty=%H)"

    PS_INFO="${PS_INFO} ::"
fi
#+end_src


** Python on Guix

I'm just going to use the Guix python packages and setup pip to support
virtualenvs.

#+begin_src scheme :tangle .config/guix/manifests/pythondev.scm
(specifications->manifest
 '(
   "python"
   "python-pip"

   "docker-compose"
   ))
#+end_src

The description of Direnv's =layout python= directive is a bit confusing. I
didn't understand that I could simply set the virtualenv with the following:

#+begin_example shell
export VIRTUALENV=~/.my-persistent-venvs/jupyter-with-tensorflow-venv
layout python
#+end_example

*** Just going to use docker when I need to
