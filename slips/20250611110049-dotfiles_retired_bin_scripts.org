:PROPERTIES:
:ID:       17007730-5526-4ba3-bc00-c2d1918aa598
:END:
#+TITLE: Dotfiles: Retired Bin Scripts
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:cf847bc5-31f7-4bb8-8324-7680a8f2953d][Shell]]

* Notes

Using guix home, some of these should go into a package or a home service,
depending on how you want to use the content (and how you want to manage it)


* Others

* Migrate
** i3

** Guix

Scheme is a much better way to handle these tasks

*** intellij

+ https://www.draketo.de/software/guix-work.html#intellij

*** revdeps
um i can't remember wtf i was trying to extract here. half-practicing data
munging, half trying to operate on the package graph, but i think guix pretty
much includes everything you want here. maybe filter? idk.

#+begin_src shell
guix shell -L ~/.dotfiles/ellipsis -L ~/.dotfiles/dc \
    -m ~/.emacs.g/emacs-g.scm --export-manifest \
    | sed -e 's/.*"\(.*\)".*/\1/g' \
    | sort > /tmp/emacs-g-pkg
guix graph --type=reverse-package emacs-magit \
    | grep emacs | sed -e 's/.*\(emacs-.*\)@.*/\1/g' \
    | sort > /tmp/magit-dependants
comm -12 /tmp/emacs-g-pkg /tmp/magit-dependants
#+end_src



** KDE

*** Debug things

=qdbus org.kde.KWin /KWin org.kde.KWin.showDebugConsole=

** Emacs

*** Org

+ roam-find-id-duplicates
+ roam-find-id-missing

** Arch

*** More expressive queries on pacman -Fl

pacman -Flx does this... i must've halfway read the manpage.

Varnames weren't checked (see below). I never really knew where to keep scripts
like these until they were completed... I was always trying to ... um solve
problems + upskill. Needed feedback from paru-san

#+begin_src shell
#!/bin/bash

_print_usage() {
  # TODO: update
  echo "usage: `basename $0` -x [query] [regexp]"
  echo ""
  echo "example `basename $0` -x 'opencl-amd.*' | cut -f2 -d' ' | xargs -I'{}' cat /{}"
}

while getopts :x OPT; do
  case $OPT in
    x) use_regexp=1;;
    *) _print_usage; exit 2
  esac
done

shift `expr $OPTIND - 1`
OPTIND=1

query=$1
grep_regexp=$2

if [[ -n "$query_regexp" ]]; then
  pacman -Fx $query | grep -e "$grep_regexp"
else
  pacman -Fl $query | grep -e "$grep_regexp"
fi
#+end_src
** X11
*** Controlling lock/sleep
Obviously don't use these

These should be converted into a service that allows you to disable
locking/sleeping as long as a device is present/functioning (i.e. return to
normal when key removed, when manually locked, when bluetooth
out-of-range/unpingable)

+ xnoblank :: =xset dpms 0 0 0 && xset s noblank=
  - =xset dpms 0 0 0 && xset -dpms && xset s off && xset s noblank= full reset
+ xreblank :: =xset dpms 600 600 600 && xset s blank= ... xset s on?
+ xnosave :: =xset s 0 0=
+ xresave :: xset =s 600 600=

I use multiple computers, so I would need some service running on each that's
controlled by a master service (local network, etc). if connectivity or signing
challenge fails, everything locks.

*** XKB

These build and apply the xkbmap to =$DISPLAY= or fail with warnings

#+begin_src shell
#!/bin/sh
xkblog="$HOME/.cache/$(date +%F)-xkbio.log"
xkbcomp -w0 -I$HOME/.xkb $HOME/.xkb/io.altgr-intl.xkb $DISPLAY 2>&1 > $xkblog
#+end_src

Basically the same thing for =us(altgr-intl)= (needed params)

#+begin_src shell
#!/bin/sh
xkblog="$HOME/.cache/$(date +%F)-xkbus.log"
xkbcomp -w0 -I$HOME/.xkb $HOME/.xkb/us.altgr-intl.xkb $DISPLAY 2>&1 > $xkblog
#+end_src

*** Window decorations

Just =xprop | grep WM_CLASS= (click and get window details)
** dmenu
* ???

** Running within chrome

There's a more standard way to do this using either a package build with
=chromium-binary-build-system= (+ wrapper script, etc) or =multi-arch-container=

This didn't work so well with vscode (it was alright, but a huge hassle;
problems mainly with node-deps and VSCode couldn't update/download extensions)

#+begin_src shell
#!/bin/sh
#_vscode_path=/some/path/VSCode-linux-x64/bin
#_vscode=/some/path/VSCode-linux-x64/bin/code
guix_manifest=~/.dotfiles/.config/guix/manifests/crshell.scm

guix_profile=$GUIX_EXTRA/crshell/crshell
sharepath="/data"

while getopts :Z:p:m:A:P:X: OPT; do
    case $OPT in
        Z|+Z) search_paths=1;;
        m|+m) guix_manifest="$OPTARG" ;;
        p|+p) guix_profile="$OPTARG" ;;
        # TODO: find a better way to specify --options
        P|+P) paths="$OPTARG";;
        A|+A) appdir="$OPTARG" ;;
        # TODO: provide a way to append these
        X|+X) sharepath="$OPTARG" ;;
        --) break ;;
        *)
            echo "usage: `basename $0` [+-Z ARG} [+-p ARG}  [--] ARGS..."
            echo "-p \$guix_profile/link"
            echo "-m \$guix_manifest"
            echo "-P /path_1:/path_n (colon-separated)"
            echo "-A \$appdir (the appdir for an appimage"
            echo "-X \$sharepath (forwarded as -S $sharepath to guix shell, default: /data)"i
            echo ""
            echo "guix shell cannot do -CNF with a manifest..."
            echo "so creating a profile prevents GC and loads faster"
            exit 2
    esac
done
shift `expr $OPTIND - 1`
OPTIND=1

export PATH="$paths:$PATH"

#_lens_path=/tmp/lens/squashfs-root
#export PATH="$_lens_path:$PATH"
#export APPDIR=$_lens_path

# inside guix manifest, need to unpack with `./Synthesis.AppImage --appimage-extract`
# then rename and correct permissions, then the same guix shell manifest will run it.

# TODO: maybe restrict the --share flags here.
# TODO: --share /data/...
# TODO: what in home directory & environment must be accessible?
guix shell -CNF -m $guix_manifest \
  --user=dc \
  --preserve='^XDG_CONFIG_HOME$' --preserve='^PATH$' \
  --preserve='^DISPLAY$' --preserve='^XAUTHORITY$' --preserve='^DBUS_' \
  --preserve='^APPDIR' \
  --share=/run/current-system/profile --share="$HOME"   \
  --share=/run/user/1000/gdm/Xauthority \
  --share=/sys/dev --share=/sys/devices --share=/tmp \
  --share=$sharepath \
  --expose=/dev/dri --expose=/var/run/dbus \
  $@
#  -- $_vscode/code
#+end_src
