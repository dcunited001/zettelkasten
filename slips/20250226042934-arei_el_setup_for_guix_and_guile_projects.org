:PROPERTIES:
:ID:       58c94100-403f-4444-a333-c8253c30c7d7
:END:
#+TITLE: Arei.el setup for Guix and Guile Projects
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]

* Guix Home

#+begin_quote
The following is are the musings of an idiot savant. It's not intended to be
correct. I'm just trying to figure this out, particularly the telos.
#+end_quote

** Env

These additional module in =./env/ellipsis/*.scm== seem to be similar (in
purpose) to =.guile=: they're intended to add some minimal tooling, but without
actually interfering with the module namespaces in =./gh/ellipsis/**/*.scm=

*** Layout

I went through several iterations, but went with this. I may insert ={src,guile}=
into their respective locations for =test= and =env= idk, like in
=sample-guile-project=. If I move around files, I really don't want to update
=Makefile= and =#:use-module= references. Though this is mostly find/replace, I
don't want to leave my REPL in an uncertain state.

#+begin_src shell :results output verbatim
echo {ellipsis/ellipsis/,dc/dc/}{home/services,packages,services,systems} \
    Makefile test/dc/setup.scm env/dc/{packages,channels}.scm |\
    sed -e 's/ /\n/g' |\
    tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
├── dc
│   └── dc
│       ├── home
│       │   └── services
│       ├── packages
│       ├── services
│       └── systems
├── ellipsis
│   └── ellipsis
│       ├── home
│       │   └── services
│       ├── packages
│       ├── services
│       └── systems
├── env
│   └── dc
│       ├── channels.scm
│       └── packages.scm
├── Makefile
└── test
    └── dc
        └── setup.scm

11 directories, 12 files
#+end_example

Since I wanted a workflow where I move stable packages/services towards
ellipsis, referenced by =.guix-channel=, This still doesn't allow the
=GUILE_LOAD_PATH= to be specified only for =ellipsis=.

#+begin_example
.
├── env
│   └── dc
│       ├── channels.scm
│       └── packages.scm
├── Makefile
├── src
│   └── guile
│       ├── dc
│       │   ├── home
│       │   │   └── services
│       │   ├── packages
│       │   ├── services
│       │   └── systems
│       └── ellipsis
│           ├── home
│           │   └── services
│           ├── packages
│           ├── services
│           └── systems
└── test
    └── dc
        └── setup.scm

11 directories, 12 files
#+end_example

These both seem more amenable to deploying merged file trees into =GUILE_LOAD_PATH=
than this:

#+begin_src shell :results output verbatim :dir ~/.dotfiles
find guile -name "*.scm" -type f -print |\
    tee -ap >(printf "guile/env/foo.scm\nguile/test/bar.scm\n") |\
    tree -d --prune --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── guile
    ├── env
    ├── modules
    │   ├── dc
    │   │   ├── home
    │   │   │   └── services
    │   │   └── systems
    │   └── ellipsis
    │       ├── home
    │       │   └── services
    │       ├── packages
    │       │   └── wip
    │       ├── services
    │       └── systems
    └── test
#+end_example

*** Channels

+ If I use a similar project structure to the ~abcdw/rde examples, but I'm not
  using the features abstraction (at least for now until I learn a bit more),
  then does =./env/ellipsis/channels.scm= need to mirror the channels deployed to
  =home-environment=?
  - I think not, but the =env= channels should lag.
+ when does =guix home reconfigure= actually update my channels? and will I need
  to refresh the emacs environment ... sometimes? idk.

* RDE

In his projects, abcdw sets up a Makefile to run arei, but this a =guix= whose
channels are locked via =time-machine=. This is found in the projects below,
where there are a few patterns.

It seems that he needs to use time-machine because things could get dicey when
hacking on Guix/Home & RDE from a =guix= where the channels are
out-of-sync. There are a few different situations to take care of:

1. =guix system reconfigure= where the system specifies =home-environment=: Here,
   I assume that the home-environment will be selected for the user's
   =~/.config/guix/channels.scm= before it would be otherwise be used to install
   =~/.config/guix/current/bin/guix=. Since this is taking place within the
   context of derivations in guix-demon, then there must be some hand-off to a
   new "scheme environment" where the =home-environment= channels are used.
2. The same =guix system= action, but on a fresh installation. This is
   effectively the same anyways, just bootstrapped on a =cow-store=.
3. A =guix home reconfigure=
4. evaluations in a arei/geiser REPL, which don't necessarily result from a
   guix CLI action: here, the same separation is needed for running
   derivations which /would/ need to distinguish between the =guix= in the
   controlling repl and, say, the guix used for derivations that specify
   packages in the =/gnu/store=
5. Deployments (to git or to =cuirass= CI), which is where it's critical that
   everything is correct. These will produce signed channel updates consumed
   by downstream channel users.

Technically, the gexp interface is like a fence over which serialized
procedures, the gexps, are handed off to the =guix-demon= to continue ... so
quite a bit of this is implicit. However, that's why maintaining the
separation is important.

Anyways, it seems like the usage of time-machine serves several purposes:

+ For speed: to help ensure the objects from the derivations for =guix
  time-machine -C $channels= are all identified in the store. Some of the process
  still must happen, but once the derivations are calculated ... then /some/ of
  their objects can be identified in the store by their hash.... (hmmm... but
  not all of them? hashes are pretty unique though)
+ maintain a purely separated working environment vs environment used to
  process the derivations
+ specify an environment that maintains a safe distance behind the pushed
  updates to the channel (just in case...)

i'm guessing that each daemon operation starts with a channel state reset &
then a rewind or fast foward, subsuming the =guix= state used for the
derivations.

** ~abcdw/rde

+ [[https://git.sr.ht/~abcdw/rde/tree/master/Makefile#L1][Makefile]]
+ [[https://git.sr.ht/~abcdw/rde/tree/master/examples/Makefile#L1][./examples/Makefile]]

This includes a working example with it's own Makefile. This needs to be
controlled by the outer Makefile, somewhat. IDK =make= though.

This enables integration testing, while also providing a good jumping-off point
for users to learn. The separation of concerns (tests & template) here is
difficult to achieve.

** ~abcdw/sample-guile-project

+ [[https://git.sr.ht/~abcdw/sample-guile-project/tree/master/Makefile#L1][Makefile]]

This is a much simpler project, which is helpful for the grokking. There is less
source, but it builds you up fairly quickly into running code from scheme on the
guix-demon.

Manually working with gexps/derivations is actually one of the more difficult
"gaps to bridge" for beginner/intermediate Guix users. It's important for
getting further into the Guix core and possibly when debugging/writing a
=build-system=. It's just going to be that way, regardless, since there is
considerable separation between the runtime/REPL and the guix demon.

** abcdw/cs6120

+ [[https://github.com/abcdw/cs6120/blob/main/Makefile][./MakeFile]]
+ [[https://github.com/abcdw/cs6120/blob/main/env/guile/cs6120/channels.scm][./env/guile/cs6120/channels.scm]]
+ [[https://github.com/abcdw/cs6120/blob/main/env/guile/cs6120/packages.scm][./env/guile/cs6120/packages.scm]]

This project setup is supposed to save quite a bit of time.

For this project, /I think/ that separation between modules within =./env= is less
consequential than for =rde=. There, IMO the project structure works well also.
it's just a little more complicated -- but then so is any project that:

+ contains multiple Makefile roots
+ to run make tasks in a nested project (separate Makefile, not simply included)
+ while also running qemu builds, against multiple targets with different
  architectures.

#+begin_quote
Brief not: The Guix & RDE codebases have been unbelievably helpful for learning,
as well as all the channels out there. It's why i've been ambivalent about
external-facing progress ... since there's plenty of internal progress happening
in my head. That's not necessarily plainly visible, maybe to people observing
the amount of effort I'm going through.
#+end_quote

Anyways, this cs6120 setup is quite a bit more complex, which I haven't quite
grokked. It seems to be:

+ using the =(guix git-download)= module to clone the git repo for each channel
  manually inspecting each
+ it selects the =guix= channel first (by key: =channels.scm= are not in order)
+ for each channel, it looks at the =./.guix-channel= file, which is an
  interpretable scheme file, and retieves the channel's module root (for rde:
  =./src=)
+ from the code, i'm guessing that it merges the file trees. that's what seems
  to say. I then concocts a single channel.

  #+begin_example scheme
(define-public (package-for-channels channels)
;; in package definition
    (source (channels->combined-source-code
             (remove guix-channel? channels)))
    ;; ...
)
  #+end_example

After the guile modules are consumed (and thus the combined package defined),
then everything is processed as a single transaction. This is a bit brittle, but
assuming that nothing dramatic changes, it helps with the initial boot-time. I'm
still not sure how much of an issue that is.

* Emacs

While it's simple to set up =guile-ares-rs= in a new Guile project that doesn't
need to load Guix, it's a bit much to set up otherwise. If someone were just
getting started with Guix, I would recommend using =guile-studio=.

+ write a simple =guile-studio-init.el= manually evaluated with =(load ...)=.
+ For project-specific settings, maybe a =.geiser-local.el= file. This would maybe
  set =guix-pulled-profile=, if you need it, but the other init file may be more
  appropriate.
+ You can then use =.envrc= if you need it, while depending on the bash profile's
  =GUILE_LOAD_PATH= for a consistent environment.

Just running =guix shell guile-studio emacs-guix= should be enough to get started
(i haven't tested the guix.el functionality)

As a noob, being able to set up a filetree with modules to load into a Geiser
repl is sufficient. This helps you shit-test your code, so you don't have to run
things like =guix system -L $loadpath reconfigure not-my-system.scm= for better
output on errors.

Unfortunately, starting =guix repl= doesn't let Geiser connect too good ... for
some reason idk. It hangs for a few minutes. The REPL interactivity for Guix is
unfortunate. It's not bad if you have someone to mentor your way into using
Guile/Guix/Emacs... so just keep in mind that it's well-worth your time to find
one.

#+begin_quote
NOTE: I probably will not update these notes as my config changes. The solution
to "halfway use Geiser so i have guix.el" is not ideal. That's why I suggest
=guile-studio= where you want to run =geiser-guile= and =guix.el=. And actually,
writing some =systemd= services to load an alternate emacs config that gets
launched with =guix shell= is not hard (and is basically equivalent to
=guile-studio=)
#+end_quote

The GNU software is almost always simpler -- and will almost always be
ubiquitous/timeless... When it's complicated, you probably just need to find
someone to show what your doing.

** Overview

Obviously, I'd like to use =arei.el=.

+ But what if I want to use another scheme dialect? I don't, for now.
+ But, what if I want to return to using Geiser later or for Guile projects that
  don't import Guix modules?
+ Also, there's a comprehensive Geiser dependency used for =guix.el= which itself
  is incredibly useful. Since =M-x guix= and most =guix.el= functionality relies on
  an entirely different global =geiser= repl, this doesn't conflict with
  project-specific settings... but it does require loading =geiser-guile=

For the second issue, I wanted to settle the Geiser config before I changed it
out. This requires:

+ Settling the =GUILE_LOAD_PATH= in the environment. For most of these, you /may/
  need to set =GUILE_LOAD_COMPILED_PATH= also. Guile will search that path only if
  defined, so it's probably not your problem. You also need a project with make,
  where you clean the =.go= files, so it's not a good place to start (in case your
  experience with in-tree compilation & =make= for C/C++ is limited lol)
+ Setting up =guix-pulled-profile= ... which in almost every case should just be
  =$HOME/.config/guix/current=
+ Determining which method has responsibility for loading the Repl environment
  - .dir-locals.el :: This makes it tough to load. As a practical matter, you
    can only have one =.dir-locals.el= active for a file-tree.
  - file local variables :: What if someone else is browsing your repo and
    doesn't have =guix-scheme-mode=? Doesn't work unless the mode is common (and
    preferably auto-loaded in emacs).
  - geiser-guile-load-path :: This has project-specific settings.
  - scheme-mode-hook :: Switching to =guix-scheme-mode= here means that
    =scheme-mode= will run it's hooks again. That's about as messy as =use-package=
    load order.
  - def-project-mode! :: this is doom-specific and works well for hooking minor
    modes in a file-tree, but doesn't work for major modes or =auto-mode-alist=
    AFAIK
  - auto-mode-alist :: This would need to be config-specific. Probably not wise
    to set as a local variable of any flavor (it's a big list that many, many
    evaluation contexts in emacs refer to)
  - .envrc :: this is fairly straight-forward, but will affect any interactive
    shell that enters your project directory.

So I went with the last two.

+ The =guile-ares-rs= repl has it's own consistent environment in the =make ares=
  task. This runs in a clean =guix shell=

** Guile

Outside of =ares=, guile has this environment, set up in =.envrc= for my project. On
my foreign distribution, I'll get to setting the =.profile= environment later. If
using Geiser, this ensures consistent access to your non-Guix channels ... which
for many non-Guix Guile projects, is definitely _not_ actually what you want.

.envrc

#+begin_src shell
export GUILE_LOAD_PATH="$HOME/.config/guix/current/lib/guile/3.0/site-ccache:$HOME/.config/guix/current/share/guile/site/3.0"
export GUILE_LOAD_COMPILED_PATH="$HOME/.config/guix/current/share/guile/site/3.0"

path_add GUILE_LOAD_PATH
path_add GUILE_LOAD_COMPILED_PATH
#+end_src

** Makefile

For now, there is just the =ares= task. I don't want to be to eager to add to this
until later. this. I don't have much exp. with make and make's tasks are
generally coupled to the project's file paths which may still change.

#+begin_src makefile
ares:
	guix time-machine -C env/dc/channels.scm -- \
	shell -L ./env --pure --rebuild-cache guile-next guile-ares-rs \
	-e '(@ (dc packages) guix-from-my-channels)' \
	-e '(@ (dc packages) channels-package)' \
	-- \
	guile -L ./dc -L ./ellipsis -L ./env -c \
	"(begin (use-modules (guix gexp)) #;(load gexp reader macro globally) \
((@ (ares server) run-nrepl-server)))"
#+end_src

Ares needs to load G-Exp's which are Guile [[https://www.gnu.org/software/guile/manual/html_node/Reader-Extensions.html][reader extensions]].

** Ares RS and Arei.el

#+begin_src emacs-lisp
;; that's it, pretty much
(use-package! arei :defer t)
#+end_src

Run =guile-ares-rs= server externally, then connect using =sesman-start=. From here,
you just need to understand how to switch modules, but most of the =arei= code
will detect this via =(ares-current-module)= ... and =M-: (ares-current-module)=
itself is a good shit test to determine whether the arei.el code & state are
loaded properly.

If you're in the middle of switching to arei.el or changing =auto-mode-alist=,
then you may need to jump to =M-x ibuffer= and =Dx= some of those buffers.

Arei will run =(arei--enable-on-existing-scheme-buffers)= when it's initially
loaded though.

** Doom Emacs

*** Geiser

If you want to use =geiser=, then you'd probably want to properly set the
project-specific settings. This is a bit confusing, as all of the above settings
in the list for =determining which method has responsibility= may affect code.
Changing them may require =direnv allow= and =M-x envrc-reload= or killing buffers,
etc. It's a PITA. Honestly, just using =guix home= avoids the possibility of
setting most of this incorrectly, but then Geiser itself has many problems that
are non-obvious.

#+begin_src emacs-lisp
(use-package! geiser
  :defer t
  :config
  (add-to-list 'geiser-implementations-alist '(((regexp "\\.scm$") guile)))
  :custom
  ;; TODO: PKG: project.el -- maybe update to geiser-repl-project-root
  (geiser-repl-current-project-function #'projectile-project-root)
  (geiser-repl-add-project-paths
   nil
   "`guix-load-path' seems to append using `add-to-list', so whether the
.dotfiles channel is added via that or `geiser-repl-add-project-paths',
the result is the same, unless the project's guile modules are not at
the root")
  (geiser-debug-treat-ansi-colors 'colors "Requires guile-colorized (ice-9 colorized)")
  (geiser-default-implementation 'guile)
  (geiser-repl-highlight-output-p t))
#+end_src

You need =racket= if you use =lispy= because of a bug that wasn't fix in the last
tag. The lispy-project is unmaintained. Arei doesn't really work with lispy.

#+begin_src emacs-lisp
;; req. for lispy? even with master?
(use-package! geiser-racket :defer t :after geiser)
#+end_src

Arei definitely has code to look these up in the manual.

#+begin_src emacs-lisp
(use-package! geiser-guile
  :defer t
  :after geiser
  :config
  (add-to-list 'geiser-guile-manual-lookup-nodes "Geiser")
  (add-to-list 'geiser-guile-manual-lookup-nodes "Guile Reference")
  (add-to-list 'geiser-guile-manual-lookup-nodes "Guile Library")
  (add-to-list 'geiser-guile-manual-lookup-nodes "Guix"))
#+end_src

*** Flycheck Guile
You're probably going to want to unhook =flycheck-guile.el=.

+ This probably works well for small guile projects. Since Guix loads a lot of
  code (and since it needs to load code for other channels), this means
  flycheck-guile needs to do a lot of compilation. It caches this compilation in
  =~/.cache/guile=. If it doesn't complete before you change the file & save, it
  starts it again.
+ You'll likely get an error message about missing guix patches, especially if
  your values for =guile-load-path= & etc are incorrect.
+ It also has a separate process it uses to compile/run. It doesn't simply eval
  in the =geiser= repl for that buffer. You can't easily customize this without
  advice anyways. So it's best to turn it off.

#+begin_src emacs-lisp
(use-package! flycheck-guile
  :defer t
  :after geiser-guile
  :config (add-to-list 'flycheck-disabled-checkers 'guile))

;; if flycheck-guile loads, you'll need to ensure (require 'ffap) runs and that
;; the patch path is set up.
#+end_src

** Geiser

Even without Doom's setup, Geiser loads when =scheme-mode= loads. This is because
=geiser-mode--maybe-activate= gets hooked on =scheme-mode-hook=. Fortunately, this
only keys on =major-mode=, so if there's a derived major mode, it won't run.

#+begin_example emacs-lisp
(defun geiser-mode--maybe-activate ()
  (when (and geiser-mode-auto-p (eq major-mode 'scheme-mode))
    (turn-on-geiser-mode)))
#+end_example

** Guix.el

guix.el defines =guix-scheme-mode= in [[https://git.savannah.gnu.org/cgit/guix/emacs-guix.git/tree/elisp/guix-scheme.el?h=master#n41][guix-scheme.el]], which basically doesn't do
anything except format the buffer.

So we just need to make sure that, where Arei is preferred, =guix-scheme-mode= is
used instead.

To ensure that your own Guix functionality gets loaded:

#+begin_src emacs-lisp
(setopt guix-load-path '((expand-file-name ".dotfiles/ellipsis" (getenv "HOME"))
                         (expand-file-name ".dotfiles/dc" (getenv "HOME"))))
#+end_src

To ensure that =auto-mode-alist= sets =guix-scheme-mode= config the following -- i know, confusing, since
=guix.el= runs (an emacs-global, guix-specific) geiser REPL, but this actually
prevents specific projects from being affected by it.

#+begin_src emacs-lisp
(defun dc/guix-scheme-mode-regexp (path)
  (rx (and (literal path) "/" (+ any) ".scm")))

(cl-dolist (dir '("dc" "ellipsis" "env" "test"))
  (add-to-list 'auto-mode-alist (cons (dc/guix-scheme-mode-regexp
                                       (expand-file-name (string-append ".dotfiles/" dir)
                                                         (getenv "HOME")))
                                      'guix-scheme-mode)))
#+end_src

Important: make sure that =auto-mode-alist= is updated _after_ scheme/geiser/guile
modify it.

=auto-mode-alist= keys on a programmatically generated regexp. e.g. figuring out
why =conf[ig].abc= or =config.scm= loads =conf-mode= and not the correct one requires
some "emacs archeology"
