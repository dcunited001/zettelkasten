

*** TODO set ID for org-roam

mise:

- french: to place/set
- japanese: a store

** Setup

after creating the auxilliary btrfs disk, create the btrfs subvolumes

#+begin_example sh
# get permissions right (pretty much everything is sudo)
mkdir -p /mise/@

mount -t btrfs -o rw,noatime,compress=zstd:3,ssd,discard=async,space_cache,autodefrag,subvol=/ /dev/sda8 /mise/

btrfs subvolume create /mise/@
btrfs subvolume create /mise/@docker
btrfs subvolume create /mise/@containerd
btrfs subvolume create /mise/@gnu
btrfs subvolume create /mise/@steam
btrfs subvolume create /mise/@virt
#+end_example

create temporary mounts to contain docker/containerd files

#+begin_example
mkdir -p /mnt/mise/docker
mkdir -p /mnt/mise/containerd

mount -t btrfs -o rw,noatime,compress=zstd:3,ssd,discard=async,space_cache,autodefrag,subvol=/@docker /dev/sda8 /mnt/docker
mount -t btrfs -o rw,noatime,compress=zstd:3,ssd,discard=async,space_cache,autodefrag,subvol=/@containerd /dev/sda8 /mnt/containerd
#+end_example

after installing docker/containerd, start them once to create the files

#+begin_example sh
systemctl start docker.service
systemctl stop docker.service
systemctl stop docker.socket

systemctl start containerd.service
systemctl stop containerd.servicE
#+end_example

Move the files into the temp mounts, then remove the original dirs & temp mounts

#+begin_example sh
sh -c "mv /var/lib/docker/* /mnt/mise/docker/"
sh -c "mv /var/lib/containerd/* /mnt/mise/containerd/"
rm -rf /var/lib/docker
rm -rf /var/lib/containerd
umount /mnt/mise/containerd
umount /mnt/mise/docker
#+end_example

check =/etc/mtab= to update =/etc/fstab=

#+begin_example sh
UUID=1234-4321 /mise          btrfs    subvol=/@,defaults,noatime,space_cache,autodefrag,compress=zstd,discard=a
sync,ssd 0 0
UUID=1234-4321 /mise/steam    btrfs    subvol=/@steam,defaults,noatime,space_cache,autodefrag,compress=zstd,disc
ard=async,ssd 0 0
UUID=1234-4321 /gnu          btrfs    subvol=/@gnu,defaults,noatime,space_cache,autodefrag,compress=zstd,discard
=async,ssd 0 0
UUID=1234-4321 /var/lib/docker          ext4    subvol=/@docker,defaults,noatime,space_cache,autodefrag,compress
=zstd,discard=async,ssd 0 0
UUID=1234-4321 /var/lib/containerd          ext4    subvol=/@containerd,defaults,noatime,space_cache,autodefrag,
compress=zstd,discard=async,ssd 0 0
#+end_example

cross your fingers and when you restart, you won't have to chroot... you should be able to start docker/containerd

#+begin_example sh
systemctl start docker.service
systemctl start containerd.service
#+end_example


#+begin_example sh

#+end_example

#+begin_example sh

#+end_example

#+begin_example sh

#+end_example

**** TODO consider linking some =/etc/...= configs to =/mise/etc= configs
**** TODO reinstall guix and use the /mise store


** Motivation

My arch install was crashing ... broken wayland connections, usually leading to kernal crashes ... no vtty's ...

I needed to free up space. I wanted VM's, docker images and guix packages to be on a new drive. And i thought: "why not store them on a partition with compression......"

So I touched my guix store. 

Do not touch =/gnu/store= or try to delete it ... under no circumstances can you cross that bridge unless you do answer me questions three: 
begin_quote
"Number 3: .... What is a namespace?"

"arhrhgrhgharghahgha!
end_quote

In other words, you'll have to defuse a few traps to get around the restrictions:

+ even if you booted from an ISO (which is where I was)
+ even if you snapshotted the files (i think)
+ even if you've copied the files to another disk/partition
+ even if you've chrooted

... One does not simply move their Guix =/gnu/store= without using the CLI tool, unless you plan on deleting partitions. Even if you
plan on setting up file paths on a new partition to match ... i'm not sure the links are preserved 100%.

It is designed this way for security purposes ... so it's a feature . . .

**** And I was already knee deep in a giant waste of time 

***** I needed disk space to prevent my Arch install from crashing . . . 

No exaggeration: Over the past few years, I HAVE SPENT 1000+ hours dealing with direct or 1st-order problems that arise from lack of disk space.

+ I could maybe buy a HD:
  - but i'm broke 
  - and when I'm not I have one NVMe port, 
    - so even if I upgrade from my 2013 macbook pro's 512 MB => 1TB, it

+ I have two Thunderbolt SATA adapters, which helps ... I have
  - three small 128gb SSD's. these are just unbelievably useless.
  - two 512gb ssd's (my 2011 macbook *wont boot* from these). 
    - they have images i want to scan with =remnux= & =Tsurugi Linux= anyways.
  - a 1TB 5400 rpm seagate -- with an enclosure that overheated after about 100 days of use. the drive is mostly toast now...
    - i imagine this was predictable bc when i finally broke down and used it to store all my backups of everything ... it dies.

which brings me to my next future project, entitled "who wants to build a glovebox" ... to transfer the platters.



