:PROPERTIES:
:ID:       73a5da90-691e-4281-b059-9850fe4ba7b9
:END:
#+TITLE: Python: Misc Poetry Config Attempts
#+CATEGORY: slips
#+TAGS:
* Docs
* Resources

* Methods (that don't work for me)

Just cleaning up my dotfiles to reflect the current Arch workflow. Guix would
probably just use Docker.

=poetry config --list=

#+begin_src
poetry config --list
cache-dir = "$HOME/.cache/pypoetry"
experimental.new-installer = true
experimental.system-git-client = false
installer.max-workers = null
installer.modern-installation = true
installer.no-binary = null
installer.parallel = true
virtualenvs.create = true
virtualenvs.in-project = null
virtualenvs.options.always-copy = false
virtualenvs.options.no-pip = false
virtualenvs.options.no-setuptools = false
virtualenvs.options.system-site-packages = false
virtualenvs.path = "{cache-dir}/virtualenvs"  # $HOME/.cache/pypoetry/virtualenvs
virtualenvs.prefer-active-python = true
virtualenvs.prompt = "{project_name}-py{python_version}"
#+end_src


** Prefer +Not+ Create

#+begin_quote
With this, the poetry shim works until direnv loads it's virtualenv
... nevermind that was bad state in the bash shell.
#+end_quote

See [[id:][configuration]] docs. The shared poetry configuration, which will use the
=poetry= shim in the python selected by =pyenv= selects. In a poetry project,
version should be set by =.python-version=.

#+begin_src conf-toml :tangle .config/pypoetry/config.toml
[virtualenvs]
prefer-active-python = true
#+end_src

For poetry projects, the virtualenv should also +NOT+ be handled by =pyenv=:

#+begin_example conf-toml
[virtualenvs]
#create = false
in-project = true
#+end_example

An extra invocation of =direnv allow= will ensure the =pyenv= virtualenv before
running =poetry= commands to modify the virtual env. Emacs may also need to
reload because =direnv= doesn't detect the change.

*** Troubleshooting

Review workflow directions in direnv.

Use a =.envrc= based on =layout poetry=

Don't set =.pyenv-version= or =.pyenv-virtualenv=, since these are managed by
=layout_poetry= -- it won't load the virtual environment.

**** Direnv sets a blank =VIRTUAL_ENV=

This is because =poetry env info --path 2>/dev/null ; true= outputs =.= when
Poetry's =virtualenvs.create= is false.

Direnv's scripts don't expect you to use pyenv: just use a =.venv= directory.
it's way easier this way, =poetry= will manage the virtualenv.

#+begin_quote
I hope the shims don't mess this up..... <installs pkg=black/>

thank god.
#+end_quote

** Create a Poetry Env For Jupyter

Combinatorial explosion is super fun:

$direnv \otimes pyenv \otimes poetry \otimes jupyter$

[[https://www.alexanderjunge.net/blog/pyenv-virtualenv-poetry-jupyter/][This post]] describes a workflow using =pyenv virtualenv= to manage ipykernel
extensions for a global jupyterlab installation (installed under a =pyenv
version=), where =layout poetry= would not be used while poetry is still used to
manage dependencies.

*** Without Direnv

Without =direnv= the workflow would go a little something like:

#+begin_src sh
mkdir my-project  # create a project directory
cd my-project

pyenv virtualenv my-project  # layout virtualenv ${pyversion} ${pvenv}
pyenv activate my-project  # layout activate ${pvenv}-${pyversion}

poetry init  # initialize the poetry project
poetry add spacy  # install dependencies
poetry add --dev black ipykernel # install dev dependencies

python -m ipykernel install --user --name my-project  # register project kernel

git init  # initialize version control
git add pyproject.toml poetry.lock  # add files produced by poetry
# commit, track more files, push to a remote repo
#+end_src

This means (i hope) that I can use the =.envrc= and =.python-virtualenv= files
and that =poetry= will transparently install its dependencies in there.

I ran the following commands in =$_LANG/python/nb= to set up the environment

#+begin_src sh
cd $_LANG/python/nb

echo "3.10.11" > .python-version

pip install -U pip setuptools
pip install poetry
pip install jupyterlab

mkdir poet

echo "3.10.11" > poet/.python-version
echo "poet-ipykernel" > poet/.python-virtualenv

cp $XDG_CONFIG_HOME/direnv/eg/pyenv > poet/.envrc

cd poet

direnv allow

# [virtualenvs]
# create = false
poetry config --local virtualenvs.create false

poetry init
poetry add numpy
poetry add --dev ipykernel #black
python -m ipykernel install --user --name $(head -n1 .python-virtualenv)
#+end_src

Running =jupyter-lab= from the =$_LANG/python/nb= directory brings up jupyter in
the browser with a =poet-ipykernel= kernel, though this is installed in
=$HOME/.local/share/jupyter/kernels/poet-ipykernel= and may be listed but
dysfunctional when the kernel is ran with anything except the =pyenv version=
that it was built with.

Running =import numpy as np= within a notebook with that ipykernel gives me a
environment with /locked dependencies/ that has autocomplete.

** Old poetry shell initialization

Keeping this around to document what happens. In order for the =layout poetry=
integration to work, it needs to be installed with =pip install poetry= though
the poetry docs warn against this. The way it's working now is how I would have
liked it to function, but everything is a bit perplexing.

This was being loaded by =.config/sh/profile.d/python-pyenv.sh= and installed
poetry into its own pyenv =venv=.

#+begin_src sh
# TODO: unused
ptry() {
    local pyversion=$(pyenv version-name)
    [[ "$pyversion" = "system" ]] && \
        echo "${RED}Running with pyversion=system!${RESTORE}" && \
        return 1

    local venvname=$PYENV_POETRY_VENV-$pyversion
    local venvpath="$(pyenv prefix)/envs/$venvname"

    [[ ! -e "$venvpath/bin/poetry" ]] && \
        echo "${RED}Couldn't find $venvpath/bin/poetry${RESTORE}" && \
        return 1

    local poetry_bin="$venvpath/bin/poetry"

    $poetry_bin "$@"
}

# alias poetry=ptry
#+end_src

The installer =.bin/pynv-install-poetry=.

#+begin_src sh
[[ -z "$PYENV_POETRY_VENV" ]] && export PYENV_POETRY_VENV=poetry

pyversion=$(pyenv version-name)
echo "${YELLOW}Checking whether ${pyversion} already has a venv for poetry${RESTORE}"
venvname=$PYENV_POETRY_VENV-$pyversion
venvpath="$(pyenv prefix)/envs/$venvname"

# this is perhaps brittle
#venvpath=$(pyenv virtualenv-prefix "$PYENV_POETRY_VENV-$pyversion")
#success=$?
#if [ $success -ne 0 ]; then

if [ ! -e "$venvpath" ]; then
    echo "${RED}The venv $PYENV_POETRY_VENV does not exist...${RESTORE} creating..."
    pyenv virtualenv $venvname

    [[ $? -ne 0 ]] && echo "${RED}Couldn't create the $PYENV_POETRY_VENV venv${RESTORE}"# && exit 1
fi

echo "${GREEN}Setting up $PYENV_POETRY_VENV venv"
venvpip=$venvpath/bin/pip

$venvpip install -U pip setuptools
$venvpip install poetry
#+end_src

* Jupyter

** Poetry Inside Pyenv (no virtualenv)

*** TODO Poetry in Jupyter Notebooks

#+begin_quote
mysteriously marked as TODO. Perhaps this works, but isn't desirable. I
donno. Do this a dozen different ways and it all blurs together.
#+end_quote

[[https://morioh.com/p/b01442d52365][Poetry Kernel]]

Ensure that you're installing to base =pyenv version-name= set, not a pyenv
venv. At the base of your notebooks directory, set a global python verson. You
could override this in the individual notebook subdirectories ... but it could
get dicey.

The python version could be set like this, but it's simpler with =.python-version=

#+begin_src sh
# -*- mode: sh; -*-
[[ -f ".python-version" ]] && pyversion=$(head .python-version) || pyversion="3.10.11"

use python ${pyversion}
#+end_src

Then install =poetry-kernel=

#+begin_src sh
pip install poetry-kernel jupyterlab
#+end_src

Then, in the notebook's directory, run =poetry init -n= and =poetry add
ipykernel=.


* Roam
