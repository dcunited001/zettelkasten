:PROPERTIES:
:ID:       2751eba5-342f-49e2-ac4d-cbc201030362
:END:
#+TITLE: Ansible: Use jq to query pfsense XML backups
#+CATEGORY: slips
#+TAGS:

* Resources
See [[https://qmacro.org/blog/2022/03/05/understanding-jq's-reduce-function/][Understanding JQ's Reduce Function]] (several other good articles)

* Setup

To run the =emacs-lisp= script below that sets values per PFSense backup file.

#+begin_src emacs-lisp
(setq-local backup-server "your.server"
            backup-path  "/your/backup/path"
            backup-timestamp "20230701015936") ;; pfsense timestamp
#+end_src

** Config

Evalute to allow the =:file= references to resolve in =org-babel= blocks

#+begin_src emacs-lisp
;; to use a.el
(setq-local fwconf
            '((aliases . ((file . "%s-config-%s-%s.xml")))
              (dhcpd . ((file . "%s-config-%s-%s.xml")))
              (dhcpdv6 . ((file . "%s-config-%s-%s.xml")))
              (filter . ((file . "%s-config-%s-%s.xml")))
              ;; (installedpackage . ((file . "%s-config-%s-%s.xml")))
              (interfaces . ((file . "%s-config-%s-%s.xml")))
              (nat . ((file . "%s-config-%s-%s.xml")))
              ;; (openvpn . ((file . "%s-config-%s-%s.xml")))
              (staticroutes . ((file . "%s-config-%s-%s.xml")))
              ;; (system . ((file . "%s-config-%s-%s.xml")))
              (unbound . ((file . "%s-config-%s-%s.xml")))))

;; (a-update-in iv `(,k file) 'format backup-server backup-timestamp)

;; this iterates over the above map and calls (format ...)
;; - it could be simpler, but if you need other config values (prob. not),
;;   those can be programmatically updated.
;; - quite a lot of parentheses without parenedit or lispy.el
(setq-local
 fwconf
 (a-reduce-kv
  (lambda (iv k v)
    (let* ((fstr (a-get v 'file))
           (conf-file (format fstr
                              (symbol-name k)
                              backup-server
                              backup-timestamp)))
      (a-assoc-in iv `(,k file) (expand-file-name conf-file backup-path))))
  fwconf fwconf))
#+end_src

** Useful scripts

Produce a list of files for bash forloop

#+begin_src shell :results output
for x in filter-{lan,opt1}.yml; do
    echo $x
done
#+end_src

#+RESULTS:
: filter-lan.yml
: filter-opt1.yml

Pass something to =reducee= in =jq=.

#+begin_src shell
echo "[13,17,19]" | jq 'reduce ([1,2,3,4,5,6] | to_entries[]) as $kv (5; . * $kv.value)'
#+end_src

#+RESULTS:
: 3600

* Firewall Rules

Address Family

|------+--------+-------|
| inet | inet46 | inet6 |
|------+--------+-------|

Layer 4

|-----+-----+-----+---------+------+-----+----+-----+---------+------+------+-----+------+------+------+--------|
| any | tcp | udp | tcp/udp | icmp | esp | ah | gre | etherip | ipv6 | igmp | pim | ospf | sctp | carp | pfsync |
| Any | TCP | UDP | TCP/UDP | ICMP | ESP | AH | GRE | EoIP    | IPV6 | IGMP | PIM | OSPF | SCTP | CARP | PFSYNC |
|-----+-----+-----+---------+------+-----+----+-----+---------+------+------+-----+------+------+------+--------|

** Extract to YML

*** Floating Rules

#+header: :var file=(a-get-in fwconf '(filter file))
#+begin_src shell :results output file :file (expand-file-name "filter-floating.yml" backup-path)
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"
filter=".floating == \"yes\""
xq ".filter.rule
   | map(select( $filter ))
   | map( $columns )" $file | yq -y .
#+end_src

#+RESULTS:
[[file:/your/backup/path/filter-floating.yml]]

*** Per-Interface Rules

For WAN, the "Block bogon networks" rule isn't listed in rules backup (defined on interface)

#+header: :var file=(a-get-in fwconf '(filter file))
#+begin_src shell :results output file :file (expand-file-name "filter-config.yml" backup-path)
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"
filter=".floating == null"
xq ".filter.rule
   | map(select( $filter ))
   | map( $columns )
   | group_by(.interface)
   | map({ (first.interface): . })
   | add" $file | yq -y .
#+end_src

#+RESULTS:
[[file:/your/backup/path/filter-config.yml]]

** Extract Uniq Values

For a single interface

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"

yq ".lan | group_by(.ipprotocol)
    | map({ (first.ipprotocol): length })" $file | yq -y .
#+end_src

#+RESULTS:
: - inet: 7
: - inet46: 15
: - inet6: 1

Mapping across interfaces

... =group_by= doesn't work when column values are null, which is more or less
what I am trying to determine.

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
col=ipprotocol

yq "map_values(group_by(.$col)
    | map({ (first.$col): length }))" $file | yq -y .
#+end_src

#+RESULTS:
#+begin_example
lan:
  - inet: 7
  - inet46: 15
  - inet6: 1
opt1:
  - inet: 4
  - inet46: 32
opt2:
  - inet46: 5
opt3:
  - inet: 2
  - inet46: 24
#+end_example

Close ... but probably too complicated (reduce requires an inner map and/or group_by)

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
columns='["type", "direction", "ipprotocol", "protocol", "source", "destination", "disabled"]'

yq "to_entries
    | map(.value
      | . as \$this
      | reduce ($columns | .[]) as \$col (\$this; \$this += {(\$col): \$col}))
     " $file
#+end_src

#+RESULTS:
: jq: error (at <stdin>:1): array ([{"id":null...) and object ({"type":"ty...) cannot be added
: [ Babel evaluation exited with code 5 ]


* Roam
+ [[id:28e75534-cb99-4273-9d74-d3e7ff3a0eaf][ansible]]
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][networking]]
+ [[id:265a53db-5aac-4be0-9395-85e02027e512][pfsense]]
