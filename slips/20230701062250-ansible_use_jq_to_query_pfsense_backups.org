:PROPERTIES:
:ID:       2751eba5-342f-49e2-ac4d-cbc201030362
:END:
#+TITLE: Ansible: Use jq to query pfsense XML backups
#+CATEGORY: slips
#+TAGS:

* Resources
See [[https://qmacro.org/blog/2022/03/05/understanding-jq's-reduce-function/][Understanding JQ's Reduce Function]] (several other good articles)

* Note

Most of the XML keys differ slightly from those that =pfsensible= works
with. The =yq= results here can only be directly used sometimes.  When
configuring multiple network devices with shared configs, you have to propagate
the config values from a central source, whether from netbox, from yaml, from
facts or from roles.

Getting most of this information from =ansible_facts= would be preferable. It's
definitely smarter to target the facts' config keys/structure when designing
your roles' defaults, tasks and interface. But, being new, it's hard to
anticipate how to work facts into a design, esp. for a role interface.

Definitely check out [[https://github.com/linux-system-roles][github.com/linux-system-roles]] for examples of this.

* Setup

To run the =emacs-lisp= script below that sets values per PFSense backup file.

#+begin_src emacs-lisp
(setq-local backup-server "your.server"
            backup-path  "/your/backup/path"
            backup-timestamp "20230701015936") ;; pfsense timestamp
#+end_src

** Config

Evalute to allow the =:file= references to resolve in =org-babel= blocks

#+begin_src emacs-lisp
;; to use a.el
(setq-local fwconf
            '((aliases . ((file . "%s-config-%s-%s.xml")))
              (dhcpd . ((file . "%s-config-%s-%s.xml")))
              (dhcpdv6 . ((file . "%s-config-%s-%s.xml")))
              (filter . ((file . "%s-config-%s-%s.xml")))
              ;; (installedpackage . ((file . "%s-config-%s-%s.xml")))
              (interfaces . ((file . "%s-config-%s-%s.xml")))
              (nat . ((file . "%s-config-%s-%s.xml")))
              ;; (openvpn . ((file . "%s-config-%s-%s.xml")))
              (staticroutes . ((file . "%s-config-%s-%s.xml")))
              ;; (system . ((file . "%s-config-%s-%s.xml")))
              (unbound . ((file . "%s-config-%s-%s.xml")))))

;; (a-update-in iv `(,k file) 'format backup-server backup-timestamp)

;; this iterates over the above map and calls (format ...)
;; - it could be simpler, but if you need other config values (prob. not),
;;   those can be programmatically updated.
;; - quite a lot of parentheses without parenedit or lispy.el
(setq-local
 fwconf
 (a-reduce-kv
  (lambda (iv k v)
    (let* ((fstr (a-get v 'file))
           (conf-file (format fstr
                              (symbol-name k)
                              backup-server
                              backup-timestamp)))
      (a-assoc-in iv `(,k file) (expand-file-name conf-file backup-path))))
  fwconf fwconf))
#+end_src

** Useful scripts

Produce a list of files for bash forloop

#+begin_src shell :results output
for x in filter-{lan,opt1}.yml; do
    echo $x
done
#+end_src

#+RESULTS:
: filter-lan.yml
: filter-opt1.yml

Pass something to =reducee= in =jq=.

#+begin_src shell
echo "[13,17,19]" | jq 'reduce ([1,2,3,4,5,6] | to_entries[]) as $kv (5; . * $kv.value)'
#+end_src

#+RESULTS:
: 3600

*** Diff

**** Show only changed lines

still shows changes: =sdiff -s $1 $2 | cut -d'|' -f1=

can't totally remove lines: =diff $1 $2 --new-group-format=%<=

can't remove lines =sdiff -l -s $1 $2=

this seems to work =diff $1 $2 -U0 | grep -e "^+" | sed -e "s/^+//"=

*** Comm

only works with sorted files: =comm -1 -3 $1 $2=

+ -1 :: suppress from file 1
+ -2 :: suppress from file 2
+ -3 :: suppress common lines

Use with anon descriptors =comm -13 <(sort $1) <(sort $2)=

* Interfaces


#+header: :var file=(a-get-in fwconf '(interfaces file))
#+begin_src shell :results output file :file (expand-file-name "interfaces-config.yml" backup-path)
#columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"
xq ".interfaces
   | to_entries
   | map({ (.key): .value })" $file | yq -y .
#+end_src


* Firewall Rules

Address Family

|------+--------+-------|
| inet | inet46 | inet6 |
|------+--------+-------|

Layer 4

|-----+-----+-----+---------+------+-----+----+-----+---------+------+------+-----+------+------+------+--------|
| any | tcp | udp | tcp/udp | icmp | esp | ah | gre | etherip | ipv6 | igmp | pim | ospf | sctp | carp | pfsync |
| Any | TCP | UDP | TCP/UDP | ICMP | ESP | AH | GRE | EoIP    | IPV6 | IGMP | PIM | OSPF | SCTP | CARP | PFSYNC |
|-----+-----+-----+---------+------+-----+----+-----+---------+------+------+-----+------+------+------+--------|

** Extract to YML

*** Floating Rules

#+header: :var file=(a-get-in fwconf '(filter file))
#+begin_src shell :results output file :file (expand-file-name "filter-floating.yml" backup-path)
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"
filter=".floating == \"yes\""
xq ".filter.rule
   | map(select( $filter ))
   | map( $columns )" $file | yq -y .
#+end_src

#+RESULTS:
[[file:/your/backup/path/filter-floating.yml]]

*** Per-Interface Rules

For WAN, the "Block bogon networks" rule isn't listed in rules backup (defined on interface)

#+header: :var file=(a-get-in fwconf '(filter file))
#+begin_src shell :results output file :file (expand-file-name "filter-config.yml" backup-path)
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"
filter=".floating == null"
xq ".filter.rule
   | map(select( $filter ))
   | map( $columns )
   | group_by(.interface)
   | map({ (first.interface): . })
   | add" $file | yq -y .
#+end_src

#+RESULTS:
[[file:/your/backup/path/filter-config.yml]]

** Extract Uniq Values

For a single interface

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
columns="{ id, tracker, decsr, interface, floating, type, direction, ipprotocol, protocol, source, destination, disabled }"

yq ".lan | group_by(.ipprotocol)
    | map({ (first.ipprotocol): length })" $file | yq -y .
#+end_src

#+RESULTS:
: - inet: 7
: - inet46: 15
: - inet6: 1

Mapping across interfaces

... =group_by= doesn't work when column values are null, which is more or less
what I am trying to determine.

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
col=ipprotocol

yq "map_values(group_by(.$col)
    | map({ (first.$col): length }))" $file | yq -y .
#+end_src

#+RESULTS:
#+begin_example
lan:
  - inet: 7
  - inet46: 15
  - inet6: 1
opt1:
  - inet: 4
  - inet46: 32
opt2:
  - inet46: 5
opt3:
  - inet: 2
  - inet46: 24
#+end_example

Close ... but probably too complicated (reduce requires an inner map and/or group_by)

#+header: :var file=(expand-file-name "filter-config.yml" backup-path)
#+begin_src shell :results output
columns='["type", "direction", "ipprotocol", "protocol", "source", "destination", "disabled"]'

yq "to_entries
    | map(.value
      | . as \$this
      | reduce ($columns | .[]) as \$col (\$this; \$this += {(\$col): \$col}))
     " $file
#+end_src

#+RESULTS:
: jq: error (at <stdin>:1): array ([{"id":null...) and object ({"type":"ty...) cannot be added
: [ Babel evaluation exited with code 5 ]

* Networking

** NAT

#+header: :var file=(a-get-in fwconf '(nat file))
#+begin_src shell :results output code :wrap src yaml
xq "." $file | yq -y .
#+end_src


** Unbound DNS

*** Hosts

The only pfsensible module that can update Unbound DNS is =pfsense_rewrite_xml=.

This contains statically defined hostnames.

#+header: :var file=(a-get-in fwconf '(unbound file))
#+begin_src shell :results output code :wrap src yaml
xq "{unbound_hosts: .unbound.hosts}" $file | yq -y .
#+end_src



#+header: :var file=(a-get-in fwconf '(unbound file))
#+begin_src shell :results output code :wrap src yaml
xq ". | del(.unbound.hosts)" $file | yq -y .
#+end_src

** Aliases

These can't be deleted if there are assoc. firewall rules or other dependencies,
but they can be merged. =pfsensible= uses the same format for these as the XML.

Types: host, network, port, url

#+header: :var file=(a-get-in fwconf '(aliases file))
#+begin_src shell  :results output code :wrap src yaml
xq ".aliases.alias
    | map(select(.type==\"host\")
      | del(.detail)
      | del(.type)
      | del(.descr))
    | { aliases: . }" $file | yq -y .
#+end_src

** DHCP

*** IPv4

#+header: :var file=(a-get-in fwconf '(dhcpd file))
#+begin_src shell  :results output code :wrap src yaml
ifx=lan
xq ".dhcpd.$ifx
    | { $ifx: . }" $file | yq -y .
#+end_src

*** IPv6

#+header: :var file=(a-get-in fwconf '(dhcpdv6 file))
#+begin_src shell  :results output code :wrap src yaml
xq ".dhcpdv6" $file | yq -y .
#+end_src


* Misc

** PFSense Setup

General options (mostly)

#+header: :var file=(a-get-in fwconf '(system file))
#+begin_src shell :results output code :wrap src yaml
columns="{ hostname, domain, dnsserver, dnslocalhost,
           timezone, timeservers, language }"

xq ".system | $columns" $file | yq -y .
#+end_src


#+RESULTS:
#+begin_src yaml
hostname: your
domain: server
dnsserver:
  - 8.8.8.8
  - 8.8.4.4
dnslocalhost: local
timezone: US/Eastern
timeservers: 1.us.pool.ntp.org 2.us.pool.ntp.org 3.us.pool.ntp.org
language: en_US
#+end_src

WebGUI options

#+header: :var file=(a-get-in fwconf '(system file))
#+begin_src shell :results output code :wrap src yaml
columns="{ webguicss,
           webguihostnamemenu,
           dashboardcolumns,
           interfacessort,
           logincss } "
xq ".system.webgui | $columns" $file | yq -y .
#+end_src

#+RESULTS:
#+begin_src yaml
webguicss: pfSense-dark.css
webguihostnamemenu: fqdn
dashboardcolumns: '2'
interfacessort: null
logincss: 1e3f75;
#+end_src

The following are options in the =pfsensible.core= format that I couldn't find in =system-config.*.xml=

| dnsallowoverride   | dns_hostnames: dns[0-9]+host | dns_addresses: dns[0-9]+gw |                              |
| authmode           | shellauth                    | session                    | loginshowhost                |
| requirestatefilter | systemlogsfilterpanel        | systemlogsmanagelogpanel   | statusmonitoringsttingspanel |
| webguifixedmenu    | webguileftcolumnhyper        | disablealiaspopupdetail    | roworderdragging             |

** Users and Groups

Groups and users mostly share the same format as =pfsensible=.

#+header: :var file=(a-get-in fwconf '(system file))
#+begin_src shell :results output code :wrap src yaml
xq "{groups: .system.group,
     users: (.system.user
     | map(del(.\"sha512-hash\")
       | del(.\"authorizedkeys\")))}" $file | yq -y .
#+end_src


** Packages

*** Squid

I had thoroughly configured this, but didn't end up using it.

SquidGuard and Reverse proxy are off, but have defaults applied (hard to tell
with Squid rev. proxy).

The =squidusers= field will contain passwords.

#+header: :var file=(a-get-in fwconf '(installedpackages file))
#+begin_src shell :results output code :wrap src yaml
columns="squid, squidnac, squidguard, squidcache, squidremote, squidusers, squidauth"
xq ".installedpackages
   | del(.service)
   | del(.package)
   | del(.menu)
   | { $columns }" $file | yq -y .
#+end_src

** OpenVPN

*** Extract Server Configs

Replace =vpnid=

#+header: :var file=(a-get-in fwconf '(openvpn file))
#+begin_src shell :results output file :file (expand-file-name "openvpn-vpn1.yml" backup-path)
xq ".openvpn.\"openvpn-server\"
   | map(select(.vpnid==\"1\"))
   | map(del(.tls))
   | first" $file | yq -y .
#+end_src

*** Compare OpenVPN Configs

I had spent quite a bit of time on this, but complete it. I don't have a tunnel
or public IP for now.

#+header: :var bp=(identity backup-path)
#+begin_src shell  :results output :wrap example diff
diff "$bp/openvpn-"{default,vpn1}".yml"

# not sure why it doesn't finish
echo ""
#+end_src

Show how the configured VPN has been changed from the defaults

#+header: :var bp=(identity backup-path)
#+begin_src shell :results output :wrap src yaml
diff -d "$bp/openvpn-"{default,vpn1}".yml" |\
    grep -e "^>" |\
    sed -e 's/^> //'
#+end_src

#+RESULTS:
#+begin_src yaml
vpnid: '1'
mode: server_tls
protocol: TCP4
interface: opt2
description: VPN1
caref: 0000000000000
dh_length: none
ecdh_curve: secp256r1
cert_depth: '7'
remote_cert_tls: 'yes'
engine: rdrand
tunnel_network: 172.15.254.252/30
maxclients: 2.5
create_gw: v4only
verbosity_level: '4'
#+end_src

**** Comm

Important distinguishing configs for default

#+header: :var bp=(identity backup-path)
#+begin_src shell :results output :wrap src yaml
comm -23 <(sort $bp/openvpn-default.yml) <(sort $bp/openvpn-vpn1.yml) |\
    yq -y "del(.caref) | del(.vpnid)"
#+end_src

#+RESULTS:
#+begin_src yaml
cert_depth: '1'
connlimit: null
create_gw: both
description: OpenVPN Defaults
dh_length: '2048'
ecdh_curve: none
engine: none
exit_notify: '1'
interface: WAN1
maxclients: null
mode: p2p_tls
protocol: UDP4
remote_cert_tls: null
sndrcvbuf: null
tunnel_network: null
unbound_restart: null
verbosity_level: '1'
#+end_src

And the reverse: important configs for the original VPN

#+header: :var bp=(identity backup-path)
#+begin_src shell :results output :wrap src yaml
comm -13 <(sort $bp/openvpn-default.yml) <(sort $bp/openvpn-vpn1.yml) |\
    yq -y "del(.caref) | del(.vpnid)"
#+end_src

* Roam
+ [[id:28e75534-cb99-4273-9d74-d3e7ff3a0eaf][ansible]]
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][networking]]
+ [[id:265a53db-5aac-4be0-9395-85e02027e512][pfsense]]
