:PROPERTIES:
:ID:       d13282a8-da68-430d-adc9-83f32a1d9994
:END:
#+TITLE: FRC: Programming for the XRP Robot
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]

* Docs
+ [[id:c6796b35-883f-4607-8ee3-00aea6215579][Docs]] and [[https://docs.wpilib.org/en/stable/docs/xrp-robot/index.html][WPILib Docs]]
+ [[https://www.youtube.com/watch?v=JQyKhzlMSms][XRP Assembly Video]]

* Overview

* Notes

*** TODO ideas for simple coding examples

Need to identify some simple problem scenarios to strengthen these concepts by
coding solutions using WPILib tools.

Dynamics (FRC Text, Chapter 11)

+ Drive kinematics (differential, mecanum, swerve)

Newtonian Mechanics (FRC Text, Chapter 12)

+ DC motor
+ Flywheel
+ Elevator
+ Single-jointed Arm
+ Pendulum

Lagrangian Mechanics (FRC Text, Chapter 13)

+ Single-jointed Arm
+ Double-jointed Arm
+ Cart-pole

* WPILib

** Classes

*** edu.wpilib.first.wpilibj.xrp

#+begin_src plantuml :file img/frc/xrp-wpilib-classes.svg
@startuml

!pragma layout smetana

set namespaceSeparator none
hide empty fields
hide empty methods

class "<size:14>XRPGyro\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPGyro {
  +getRateX(): double
  +getRateY(): double
  +getRateZ(): double
  +getAngleX(): double
  +getAngleY(): double
  +getAngleZ(): double
  +reset(): void
  +getAngle(): double
  +getRotation2d(): Rotation2d
  +getRate(): double
  +close(): void
}

class "<size:14>XRPMotor\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPMotor {
  +XRPMotor(int)
  +set(double): void
  +get(): double
  +setInverted(boolean): void
  +getInverted(): boolean
  +disable(): void
  +stopMotor(): void
}

interface "<size:14>MotorController\n<size:10>edu.wpi.first.wpilibj.motorcontrol" as edu.wpi.first.wpilibj.motorcontrol.MotorController {
  {abstract} +set(double): void
  {abstract} +get(): double
  {abstract} +setInverted(boolean): void
  {abstract} +getInverted(): boolean
  {abstract} +disable(): void
  {abstract} +stopMotor(): void
}

edu.wpi.first.wpilibj.motorcontrol.MotorController <|.. edu.wpi.first.wpilibj.xrp.XRPMotor

class "<size:14>XRPServo\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPServo {
  +XRPServo(int)
  +setAngle(double): void
  +getAngle(): double
  +setPosition(double): void
  +getPosition(): double
}

class "<size:14>XRPOnBoardIO\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPOnBoardIO {
  +getUserButtonPressed(): boolean
  +setLed(boolean): void
  +getLed(): boolean
}

class "<size:14>XRPRangefinder\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPRangefinder {
  +getDistanceMeters(): double
  +getDistanceInches(): double
}

class "<size:14>XRPReflectanceSensor\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPReflectanceSensor {
  +getLeftReflectanceValue(): double
  +getRightReflectanceValue(): double
}
#+end_src

*** edu.wpilib.first.wpilibj

#+name: xrpWPILibBaseUML
#+begin_src plantuml :file img/frc/xrp-wpilib-base.svg :noweb yes
@startuml
!pragma layout smetana

set namespaceSeparator none
hide empty fields
hide empty methods

<<xrpWPILibBase>>

@enduml
#+end_src

#+RESULTS: xrpWPILibBaseUML
[[file:img/frc/xrp-wpilib-base.svg]]

Encoder

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>Encoder\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.Encoder {
  #m_aSource: DigitalSource
  #m_bSource: DigitalSource
  #m_indexSource: DigitalSource
  +Encoder(int, int, boolean)
  +Encoder(int, int)
  +Encoder(int, int, boolean, EncodingType)
  +Encoder(int, int, int, boolean)
  +Encoder(int, int, int)
  +Encoder(DigitalSource, DigitalSource, boolean)
  +Encoder(DigitalSource, DigitalSource)
  +Encoder(DigitalSource, DigitalSource, boolean, EncodingType)
  +Encoder(DigitalSource, DigitalSource, DigitalSource, boolean)
  +Encoder(DigitalSource, DigitalSource, DigitalSource)
  +getFPGAIndex(): int
  +getEncodingScale(): int
  +close(): void
  +getRaw(): int
  +get(): int
  +reset(): void
  +--getPeriod--(): double
  +--setMaxPeriod--(double): void
  +getStopped(): boolean
  +getDirection(): boolean
  +getDistance(): double
  +getRate(): double
  +setMinRate(double): void
  +setDistancePerPulse(double): void
  +getDistancePerPulse(): double
  +setReverseDirection(boolean): void
  +setSamplesToAverage(int): void
  +getSamplesToAverage(): int
  +setIndexSource(int): void
  +setIndexSource(DigitalSource): void
  +setIndexSource(int, IndexingType): void
  +setIndexSource(DigitalSource, IndexingType): void
  +setSimDevice(SimDevice): void
  +getDecodingScaleFactor(): double
  +initSendable(SendableBuilder): void
}

interface "<size:14>CounterBase\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.CounterBase {
  {abstract} +get(): int
  {abstract} +reset(): void
  {abstract} +getPeriod(): double
  {abstract} +setMaxPeriod(double): void
  {abstract} +getStopped(): boolean
  {abstract} +getDirection(): boolean
}

interface "<size:14>Sendable\n<size:10>edu.wpi.first.util.sendable" as edu.wpi.first.util.sendable.Sendable {
  {abstract} +initSendable(SendableBuilder): void
}
interface "<size:14>AutoCloseable\n<size:10>java.lang" as java.lang.AutoCloseable {
  {abstract} +close(): void
}

enum "<size:14>Encoder.IndexingType\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.Encoder.IndexingType

edu.wpi.first.wpilibj.CounterBase <|.. edu.wpi.first.wpilibj.Encoder
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.Encoder
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.Encoder
edu.wpi.first.wpilibj.Encoder +-- edu.wpi.first.wpilibj.Encoder.IndexingType
#+end_src

AnalogInput

#+begin_src plantuml :noweb-ref xrpWPILibBase

class "<size:14>AnalogInput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.AnalogInput {
  +AnalogInput(int)
  +close(): void
  +getValue(): int
  +getAverageValue(): int
  +getVoltage(): double
  +getAverageVoltage(): double
  +getLSBWeight(): long
  +getOffset(): int
  +getChannel(): int
  +setAverageBits(int): void
  +getAverageBits(): int
  +setOversampleBits(int): void
  +getOversampleBits(): int
  +initAccumulator(): void
  +setAccumulatorInitialValue(long): void
  +resetAccumulator(): void
  +setAccumulatorCenter(int): void
  +setAccumulatorDeadband(int): void
  +getAccumulatorValue(): long
  +getAccumulatorCount(): long
  +getAccumulatorOutput(AccumulatorResult): void
  +isAccumulatorChannel(): boolean
  {static} +setGlobalSampleRate(double): void
  {static} +getGlobalSampleRate(): double
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
}

edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.AnalogInput
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.AnalogInput
#+end_src

DigitalInput

#+begin_src plantuml :noweb-ref xrpWPILibBase

class "<size:14>DigitalInput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalInput {
  +DigitalInput(int)
  +close(): void
  +get(): boolean
  +getChannel(): int
  +getAnalogTriggerTypeForRouting(): int
  +isAnalogTrigger(): boolean
  +getPortHandleForRouting(): int
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
}

abstract class "<size:14>DigitalSource\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalSource {
  {abstract} +isAnalogTrigger(): boolean
  {abstract} +getChannel(): int
  {abstract} +getAnalogTriggerTypeForRouting(): int
  {abstract} +getPortHandleForRouting(): int
}

edu.wpi.first.wpilibj.DigitalSource <|-- edu.wpi.first.wpilibj.DigitalInput
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.DigitalInput
#+end_src

DigitalOutput

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>DigitalOutput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalOutput {
  +DigitalOutput(int)
  +close(): void
  +set(boolean): void
  +get(): boolean
  +getChannel(): int
  +pulse(double): void
  +isPulsing(): boolean
  +setPWMRate(double): void
  +enablePPS(double): void
  +enablePWM(double): void
  +disablePWM(): void
  +updateDutyCycle(double): void
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
  +isAnalogTrigger(): boolean
  +getAnalogTriggerTypeForRouting(): int
  +getPortHandleForRouting(): int
}

edu.wpi.first.wpilibj.DigitalSource <|-- edu.wpi.first.wpilibj.DigitalOutput
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.DigitalOutput
#+end_src

BuiltInAccelerometer

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>BuiltInAccelerometer\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.BuiltInAccelerometer {
  +BuiltInAccelerometer(Range)
  +BuiltInAccelerometer()
  +close(): void
  +setRange(Range): void
  +getX(): double
  +getY(): double
  +getZ(): double
  +initSendable(SendableBuilder): void
}

enum "<size:14>BuiltInAccelerometer.Range\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.BuiltInAccelerometer.Range

edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.BuiltInAccelerometer
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.BuiltInAccelerometer
edu.wpi.first.wpilibj.BuiltInAccelerometer +-- edu.wpi.first.wpilibj.BuiltInAccelerometer.Range
#+end_src

