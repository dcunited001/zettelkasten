:PROPERTIES:
:ID:       d13282a8-da68-430d-adc9-83f32a1d9994
:END:
#+TITLE: FRC: Programming for the XRP Robot
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:c75cd36b-4d43-42e6-806e-450433a0c3f9][FRC]]

* Docs
+ [[id:c6796b35-883f-4607-8ee3-00aea6215579][Docs]] and [[https://docs.wpilib.org/en/stable/docs/xrp-robot/index.html][WPILib Docs]]
+ [[https://www.youtube.com/watch?v=JQyKhzlMSms][XRP Assembly Video]]

** Sparkfun
Most of the assets like manuals/CAD/dimensions can be cloned from this
repository

+ [[https://github.com/sparkfun/SparkFun_XRP_Controller][sparkfun/SparkFun_XRP_Controller]]

*** XRP Micropython

Using the original XRP firmware

+ [[https://github.com/AlfredoSystems/PestoLink-MicroPython?tab=readme-ov-file][AlfredoSystems/PestoLink-MicroPython]] and [[https://github.com/AlfredoSystems/PestoLink-Online][PestoLink-Online]]
  - 3D Printed [[https://www.printables.com/model/950641-xrp-differential-swerve-drive-robot][Differential SwerveDrive]] using the pestolink BLE module

** Hardware
+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/hardware_overview][Hardware Overview]]
  - [[https://docs.sparkfun.com/SparkFun_XRP_Controller/hardware_overview_beta][Hardware Overview (BETA)]]
+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/resources/][Resources]]

*** XRP v1
+ RP 2350 Data Sheet (XRP)

*** XRP Beta

+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/assets/component_documentation/pico-w-datasheet.pdf][RP Pico W Data Sheet]] (XRP Beta)
+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/assets/component_documentation/drv8835.pdf][DRV8835 Motor Driver Datasheet]]
+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/assets/component_documentation/LSM6DSO.pdf][LSM6DSO 6 DoF Accel+Gyro Datasheet]]
+ [[https://docs.sparkfun.com/SparkFun_XRP_Controller/assets/hardware_files/XRP_Controller_Beta.pdf][Schematic]] and Eagle

**** Pico

The Pico W has a  =W25Q16= 2MB SPI Flash (according to google)

+ [[https://www.youtube.com/watch?v=P-9Lb__8LV4&t=1s][Ch 4.3 SPI from RP Pico W Workshop]]
+ Binaries that run here need to be [[rasberrypi/pico-sdk][converted from ELF to UF2]] via
  [[https://github.com/rasberrypi/][raspberrypi/picotool]] or elf2uf2 (from the SDK)
+ [[https://github.com/rasberrypi/pico-sdk][raspberrypi/pico-sdk]]

From nixpkgs

+ [[https://github.com/NixOS/nixpkgs/blob/fe51d34885f7b5e3e7b59572796e1bcb427eccb1/pkgs/by-name/pi/picotool/package.nix#L58][picotool]]
+ [[https://github.com/NixOS/nixpkgs/blob/fe51d34885f7b5e3e7b59572796e1bcb427eccb1/pkgs/by-name/pi/pico-sdk/package.nix][pico-sdk]]

** WPILib
+ [[https://github.com/wpilibsuite/xrp-wpilib-firmware][wpilibsuite/xrp-wpilib-firmware]] see releases

* Resources
** CAD
+ [[https://www.printables.com/model/576581-xrp-robot-kit-beta/related][Printables: XRP Models]]

* Overview

* Notes

*** TODO ideas for simple coding examples

Need to identify some simple problem scenarios to strengthen these concepts by
coding solutions using WPILib tools.

Dynamics (FRC Text, Chapter 11)

+ Drive kinematics (differential, mecanum, swerve)

Newtonian Mechanics (FRC Text, Chapter 12)

+ DC motor
+ Flywheel
+ Elevator
+ Single-jointed Arm
+ Pendulum

Lagrangian Mechanics (FRC Text, Chapter 13)

+ Single-jointed Arm
+ Double-jointed Arm
+ Cart-pole

* Device Setup

** Firmware
+ Connect device and check
+ Reboot into BOOTSEL
+ Check

** xrpcode.wpi.edu

Using bluetooth requires firmware =>1.1=, though 1.2 exists. The site will
autoupdate. This editor uses a different firmware to run micropython programs,
so I didn't complete.

*** UUCP setup

Some errors:

On linux, connecting here requires:

+ Browser permissions: serial access for (default: ask for site exception)
+ Device permissions:

* Advanced Connectivity

** In Firmware

[[https://github.com/wpilibsuite/xrp-wpilib-firmware/blob/27fc64b72ddec96c0b2ad89e57ae4d9c7a264357/src/main.cpp#L187-L206][wpilibsuite/xrp-wpilib-firmware ./src/main.cpp#L187-L206]] Sets up the web server
in C...

** XRP HAL

*** Patterns

+ [[https://github.com/wpilibsuite/allwpilib/blob/de718f7ae568087bc5cdeff4cdb63a395da2f42d/simulation/halsim_ws_core/src/main/native/include/WSHalProviders.h#L26][WSHalProviders]] uses the provider pattern
+ A good seven or eight patterns used in [[https://github.com/wpilibsuite/allwpilib/blob/de718f7ae568087bc5cdeff4cdb63a395da2f42d/wpiutil/src/main/native/thirdparty/llvm/include/wpi/iterator.h#L80][iterator_facade_base]] class
  - facade, template, proxy, iterator

*** XRP Protocol

Main XRP instantiation logic in [[https://github.com/wpilibsuite/allwpilib/blob/de718f7ae568087bc5cdeff4cdb63a395da2f42d/simulation/halsim_xrp/src/main/native/cpp/XRP.cpp#L16][XRP.cpp]]

| 2 bytes           | 1 byte          | n bytes         |
|-------------------+-----------------+-----------------|
| _uint16_t_ sequence | _uint8_t_ control | [<Tagged Data>] |

**** Tagged Data

| 1 byte       | 1 byte        | n bytes   |
|--------------+---------------+-----------|
| _uint8_t_ size | _uint8_t_ tagID | <payload> |

Tag Ids

|  Tag | Description                   |
|------+-------------------------------|
| 0x12 | [XRPMotor](#xrpmotor)         |
| 0x13 | [XRPServo](#xrpservo)         |
| 0x14 | [DIO](#dio)                   |
| 0x15 | [AnalogIn](#analogin)         |
| 0x16 | [XRPGyro](#xrpgyro)           |
| 0x17 | [BuiltInAccel](#builtinaccel) |
| 0x18 | [Encoder](#encoder)           |

**** DIO

Setup in [[https://github.com/wpilibsuite/allwpilib/blob/de718f7ae568087bc5cdeff4cdb63a395da2f42d/xrpVendordep/src/main/native/include/frc/xrp/XRPOnBoardIO.h#L29][XRPOnBoardIO.h]] for =DIO 0 - USER= as and =DIO 1 - LED=, but I think others
may be added (req some soldering on XRP Beta)


** For Simulation

WPILib supports network interaction to collect/transmit HAL data via websockets

+ See [[https://github.com/wpilibsuite/allwpilib/blob/075cc4a20f44e2a5a61ed6139a855578cceb0b89/DevelopmentBuilds.md][./DevelopmentBuilds.md]] and [[https://github.com/wpilibsuite/allwpilib/blob/075cc4a20f44e2a5a61ed6139a855578cceb0b89/simulation/README.md][./simulation/README.org]]
+ Some (or most) functionality is available for XRP, but it's difficult,
  brittle, with stateful workflows (unlikely to work in a group setting)
  - code running on the XRP Raspberry needs to dynamically link a HAL extension
  - The XRP and other hardware needs task-management logic (real-time
    programming, basically). The hardware is single threaded, so you need to
    stop/resume tasks to hand control back ... or write code that provably
    terminates.
+ Requires development build before your program can successfully compile
  - Your code can only stem from tagged wpilib releases. =gradle= will need to get
    its =wpilib= core dep from a local build (or network-local/maven build)
  - So the HAL extension needs to be complete & well tested ... that part can't
    change much except by its developer (req. much EXP for the XRP HAL
    extension)

That seems like a really bad direction to go in right now... but hopefully
there's some way to use the existing HAL logic.

** bb-frc-workshops

+ [[https://github.com/bb-frc-workshops/xrp-basic-sim][bb-frc-workshops/xrp-basic-sim]]
+ [[https://github.com/bb-frc-workshops/xrp-examples][bb-frc-workshops/xrp-examples]]

*** WPILib HAL Simulation on XRP

[[https://github.com/bb-frc-workshops/xrp-wpilib?tab=readme-ov-file][bb-frc-workshops/xrp-wpilib]] contains:

#+begin_quote
A reference implementation of an XRP Robot that can be controlled via the
WPILib HALSim WebSocket extension.

The firmware implements (a subset) of the [[https://github.com/wpilibsuite/allwpilib/blob/main/simulation/halsim_ws_core/doc/hardware_ws_api.md][WPILib Robot Hardware Interface
WebSockets API Spec]]
#+end_quote

I'd like to integrate state/data from the XRP into a display/webapp. There may
already be a non-serial interface for this.

+ the main XRP mDNS wifi setup page runs directly at the firmware level
+ it likely occupies a bit of RAM...There's not much room
+ A firmware just needs to connect & transmit over a websocket
+ TCP would also work

The main possibility here is allowing the robot to:

+ Fetch data like game state for puzzles (e.g. like a minesweeper with a fairly
  wide open, easy game)
+ Offload small chunks of data (to collect/visualize sensor measurements)

#+begin_quote
Careful with the firmware! The components on the board are completely different.

+ So the "HAL reference implementation" firmware above almost certainly only
  functions with the beta version.
+ It also didn't officially fork from the [[https://github.com/wpilibsuite/xrp-wrplib-firmware][wpilibsuite/xrp-wrplib-firmware]], so it
  doesn't have upstream updates (e.g. build scripts likely need a lot of work)

The WPILib docs mention that HAL is not officially supported. Unless those docs
change, then support is likely 3rd party which requires exact assumptions about
the hardware.
#+end_quote
* WPILib

** Classes

*** edu.wpilib.first.wpilibj.xrp

#+begin_src plantuml :file img/frc/xrp-wpilib-classes.svg
@startuml

!pragma layout smetana

set namespaceSeparator none
hide empty fields
hide empty methods

class "<size:14>XRPGyro\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPGyro {
  +getRateX(): double
  +getRateY(): double
  +getRateZ(): double
  +getAngleX(): double
  +getAngleY(): double
  +getAngleZ(): double
  +reset(): void
  +getAngle(): double
  +getRotation2d(): Rotation2d
  +getRate(): double
  +close(): void
}

class "<size:14>XRPMotor\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPMotor {
  +XRPMotor(int)
  +set(double): void
  +get(): double
  +setInverted(boolean): void
  +getInverted(): boolean
  +disable(): void
  +stopMotor(): void
}

interface "<size:14>MotorController\n<size:10>edu.wpi.first.wpilibj.motorcontrol" as edu.wpi.first.wpilibj.motorcontrol.MotorController {
  {abstract} +set(double): void
  {abstract} +get(): double
  {abstract} +setInverted(boolean): void
  {abstract} +getInverted(): boolean
  {abstract} +disable(): void
  {abstract} +stopMotor(): void
}

edu.wpi.first.wpilibj.motorcontrol.MotorController <|.. edu.wpi.first.wpilibj.xrp.XRPMotor

class "<size:14>XRPServo\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPServo {
  +XRPServo(int)
  +setAngle(double): void
  +getAngle(): double
  +setPosition(double): void
  +getPosition(): double
}

class "<size:14>XRPOnBoardIO\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPOnBoardIO {
  +getUserButtonPressed(): boolean
  +setLed(boolean): void
  +getLed(): boolean
}

class "<size:14>XRPRangefinder\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPRangefinder {
  +getDistanceMeters(): double
  +getDistanceInches(): double
}

class "<size:14>XRPReflectanceSensor\n<size:10>edu.wpi.first.wpilibj.xrp" as edu.wpi.first.wpilibj.xrp.XRPReflectanceSensor {
  +getLeftReflectanceValue(): double
  +getRightReflectanceValue(): double
}
#+end_src

*** edu.wpilib.first.wpilibj

#+name: xrpWPILibBaseUML
#+begin_src plantuml :file img/frc/xrp-wpilib-base.svg :noweb yes
@startuml
!pragma layout smetana

set namespaceSeparator none
hide empty fields
hide empty methods

<<xrpWPILibBase>>

@enduml
#+end_src

#+RESULTS: xrpWPILibBaseUML
[[file:img/frc/xrp-wpilib-base.svg]]

Encoder

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>Encoder\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.Encoder {
  #m_aSource: DigitalSource
  #m_bSource: DigitalSource
  #m_indexSource: DigitalSource
  +Encoder(int, int, boolean)
  +Encoder(int, int)
  +Encoder(int, int, boolean, EncodingType)
  +Encoder(int, int, int, boolean)
  +Encoder(int, int, int)
  +Encoder(DigitalSource, DigitalSource, boolean)
  +Encoder(DigitalSource, DigitalSource)
  +Encoder(DigitalSource, DigitalSource, boolean, EncodingType)
  +Encoder(DigitalSource, DigitalSource, DigitalSource, boolean)
  +Encoder(DigitalSource, DigitalSource, DigitalSource)
  +getFPGAIndex(): int
  +getEncodingScale(): int
  +close(): void
  +getRaw(): int
  +get(): int
  +reset(): void
  +--getPeriod--(): double
  +--setMaxPeriod--(double): void
  +getStopped(): boolean
  +getDirection(): boolean
  +getDistance(): double
  +getRate(): double
  +setMinRate(double): void
  +setDistancePerPulse(double): void
  +getDistancePerPulse(): double
  +setReverseDirection(boolean): void
  +setSamplesToAverage(int): void
  +getSamplesToAverage(): int
  +setIndexSource(int): void
  +setIndexSource(DigitalSource): void
  +setIndexSource(int, IndexingType): void
  +setIndexSource(DigitalSource, IndexingType): void
  +setSimDevice(SimDevice): void
  +getDecodingScaleFactor(): double
  +initSendable(SendableBuilder): void
}

interface "<size:14>CounterBase\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.CounterBase {
  {abstract} +get(): int
  {abstract} +reset(): void
  {abstract} +getPeriod(): double
  {abstract} +setMaxPeriod(double): void
  {abstract} +getStopped(): boolean
  {abstract} +getDirection(): boolean
}

interface "<size:14>Sendable\n<size:10>edu.wpi.first.util.sendable" as edu.wpi.first.util.sendable.Sendable {
  {abstract} +initSendable(SendableBuilder): void
}
interface "<size:14>AutoCloseable\n<size:10>java.lang" as java.lang.AutoCloseable {
  {abstract} +close(): void
}

enum "<size:14>Encoder.IndexingType\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.Encoder.IndexingType

edu.wpi.first.wpilibj.CounterBase <|.. edu.wpi.first.wpilibj.Encoder
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.Encoder
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.Encoder
edu.wpi.first.wpilibj.Encoder +-- edu.wpi.first.wpilibj.Encoder.IndexingType
#+end_src

AnalogInput

#+begin_src plantuml :noweb-ref xrpWPILibBase

class "<size:14>AnalogInput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.AnalogInput {
  +AnalogInput(int)
  +close(): void
  +getValue(): int
  +getAverageValue(): int
  +getVoltage(): double
  +getAverageVoltage(): double
  +getLSBWeight(): long
  +getOffset(): int
  +getChannel(): int
  +setAverageBits(int): void
  +getAverageBits(): int
  +setOversampleBits(int): void
  +getOversampleBits(): int
  +initAccumulator(): void
  +setAccumulatorInitialValue(long): void
  +resetAccumulator(): void
  +setAccumulatorCenter(int): void
  +setAccumulatorDeadband(int): void
  +getAccumulatorValue(): long
  +getAccumulatorCount(): long
  +getAccumulatorOutput(AccumulatorResult): void
  +isAccumulatorChannel(): boolean
  {static} +setGlobalSampleRate(double): void
  {static} +getGlobalSampleRate(): double
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
}

edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.AnalogInput
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.AnalogInput
#+end_src

DigitalInput

#+begin_src plantuml :noweb-ref xrpWPILibBase

class "<size:14>DigitalInput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalInput {
  +DigitalInput(int)
  +close(): void
  +get(): boolean
  +getChannel(): int
  +getAnalogTriggerTypeForRouting(): int
  +isAnalogTrigger(): boolean
  +getPortHandleForRouting(): int
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
}

abstract class "<size:14>DigitalSource\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalSource {
  {abstract} +isAnalogTrigger(): boolean
  {abstract} +getChannel(): int
  {abstract} +getAnalogTriggerTypeForRouting(): int
  {abstract} +getPortHandleForRouting(): int
}

edu.wpi.first.wpilibj.DigitalSource <|-- edu.wpi.first.wpilibj.DigitalInput
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.DigitalInput
#+end_src

DigitalOutput

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>DigitalOutput\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.DigitalOutput {
  +DigitalOutput(int)
  +close(): void
  +set(boolean): void
  +get(): boolean
  +getChannel(): int
  +pulse(double): void
  +isPulsing(): boolean
  +setPWMRate(double): void
  +enablePPS(double): void
  +enablePWM(double): void
  +disablePWM(): void
  +updateDutyCycle(double): void
  +setSimDevice(SimDevice): void
  +initSendable(SendableBuilder): void
  +isAnalogTrigger(): boolean
  +getAnalogTriggerTypeForRouting(): int
  +getPortHandleForRouting(): int
}

edu.wpi.first.wpilibj.DigitalSource <|-- edu.wpi.first.wpilibj.DigitalOutput
edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.DigitalOutput
#+end_src

BuiltInAccelerometer

#+begin_src plantuml :noweb-ref xrpWPILibBase
class "<size:14>BuiltInAccelerometer\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.BuiltInAccelerometer {
  +BuiltInAccelerometer(Range)
  +BuiltInAccelerometer()
  +close(): void
  +setRange(Range): void
  +getX(): double
  +getY(): double
  +getZ(): double
  +initSendable(SendableBuilder): void
}

enum "<size:14>BuiltInAccelerometer.Range\n<size:10>edu.wpi.first.wpilibj" as edu.wpi.first.wpilibj.BuiltInAccelerometer.Range

edu.wpi.first.util.sendable.Sendable <|.. edu.wpi.first.wpilibj.BuiltInAccelerometer
java.lang.AutoCloseable <|.. edu.wpi.first.wpilibj.BuiltInAccelerometer
edu.wpi.first.wpilibj.BuiltInAccelerometer +-- edu.wpi.first.wpilibj.BuiltInAccelerometer.Range
#+end_src

