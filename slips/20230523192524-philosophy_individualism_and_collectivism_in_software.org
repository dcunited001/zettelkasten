:PROPERTIES:
:ID:       fc280278-fe86-4b8d-83e1-f69fd291d8d7
:END:
#+TITLE: Philosophy: Individualism And Collectivism In Software
#+CATEGORY: slips
#+TAGS:
* Roam

Whoever controls your dreams controls your destiny.

Here, I mean dreams as in goals/aspirations. When you leave the corporate world
in so totally in charge of deciding what gets funding and what doesn't, this
really constricts alternatives. Software intrinsically benefits from network
effects.

+ You download Facebook's LLM from bittorrent: how do you use it? To use it, you
  need to internalize information/experience into your mind about
  integrating/biasing/retraining LLM's and about the structure of LLM
+ You add oh-my-zsh to your dotfiles. How do you use it? You have to look at the
  source, to internalize the information. Then you can use the
  functions/aliases/plugins.
+ You download Lotus Notes 123: How do you use it? You read the manual and
  internalize the information.
+ Your department is full of software, systems, marketing and systems
  experience. What software, systems or platforms do you choose? You get
  feedback from the team on their skills/preferences, consider budgets and
  product synergy, then decide. But determining /who needs to know how to use it
  in order to benefit from it/ are some of the first conditional variables you
  need to evaluate.

In other words, there is no such thing as software without users. Software
inherently needs a person, agent or entity to be aware of it in order to be
used. Using the software requires internalizing the reflected information about
it its features, location, structure, etc so much so that it's almost pointless
to think of software as a thing without considering its trained/capable users as
dependencies.

Do you budget for SQL Server? Or do you budget for SQL Server + DBA + DBD?  You
never simply budget the software costs. But what is the DBA other than a person
who has installed software related to SQL Server Administration?

So when you severely restrict the usage or adoption of some software to the
point, you severely restrict the benefits people get from it. When you unfairly
awared government contracts that force Windows computers in
government/education, you severely restrict free choice and the benefits of
choosing alternatives in the future.

Let me step off this soapbox for a second, since preaching about moral
implications of this and that is not nearly as pragmatic as fallibalism ... Is
it /not/ though?

Software is simple, whereas socializing software and integrations (software's
negative image) are complicated. How you teach software, whether it's design or
usage, is not necessarily encoded in the software itself. When software
integrations find their way into documentation, it ends up creating a
combinatorial explosion that decays rapidly without maintainence. An
individualist that lacks integration of the collective is going to be primarily
concerned with the software itself.

*** TODO segue collectivism so this has a proper thesis for the conclusion

I hate writing -- or really, i hate editing.

* The Problem With Your Window Manager

The GUI is literally the root of all evil. Projects like =kmscon= engender
giggling responses like "is that still a thing?" Yes its still a fucking
thing. It gives you images in the console. You can rice your VTY if that's what
you care about. And most critically, you can arrange your VTY's across multiple
monitors.

Or at least we could, but the vast majority of manpower in the linux world goes
towards the GUI and the window managers -- oh God don't even get me started on
Javascript. The year of the Linux Desktop isn't coming, but in trying to prepare
for it, you seem to have forgotten how much time is required in maintaing these
"Field of Dreams" style GUI's that you hope the normies will love to learn.

In the meantime, there seems to have been a gradual decay in collective
skills/knowledge. Anyone who makes money doing this stuff works in RedHat or on
containers and doesn't get to do much that's not in the cloud or at least
cloud-native.

Since there are so few people with the requisite skills to run software
involving the Kernel, IPC or name-your-low-level-component, then economic forces
allocate those users' time towards other projects. That is why it takes projects
like =kmscon= so long to produce results.

Meanwhile, there are those of us who would actually prefer to abandon the GUI at
least on some systems

Oh, and working on the kernel isn't hard? Go script me a build farm to
maintainably test patchsets. Show me how you've _automated_ the things you're
talking about and show me how they can be scaled out to the broader culture and
then tell me about how easy it is.

And if things like kernel development, module development, IPC aren't
challenging then why doesn't the Arch Wiki ever tell you to write a package? Was
this implied? Ok that's great. So if this is implied, why don't any of the
documentation systems point you towards tools for templating/testing packages?
The only thing like this is =mock= from RPM.

It is not challenging to write packages, but there is quite a bit of overhead.
Turn aspects of your dotfiles into packages on any distributions other than Nix,
Guix and maybe Silverblue -- and what do you have? A mess. Good luck with that.

And thus what we've got hence: "naming and caching are the 3 hardest problems in
computer science ... " Write a package, name a package, someone uses a package,
some script needs to fetch a package. What package? it has a name. The user or
script now needs to know that name, but don't forget to add the semantic
versioning dimension. And from where does the script install it?  Now you need a
abstraction of a package source. The scripts doing the fetching need to cache
names of packages and of sources.

Even if you are your package's only user, then so long as you install to
multiple locations, it's not a small amount of information to internalize.
Writing the package was never the hard part, which is why you need to make that
as simple as possible? Or maybe not (automate a simple problem and now you have
1,000 problems)

** Individualism vs. Collectivism

The Western world's curse of individuality rears its head: you would
instinctively view this from the individual's perspective:

#+begin_quote
It's not hard for [me or someone] to write a package.
#+end_quote

True. That's straightforward. But if this is your first instinct -- to think of
the subject here as being the individual(s) interacting with packages some unit
of functionality -- then you are thinking in a Western individual-first
mindset. Of course, any developer or admin with much experience will already be
thinking to second or third-order patterns (e.g. the repositories, the names,
the versioning, the impacts on other users, whether its a fork). But they still
arrive to that point after accumulating experience on top of a primarily
individualistic perspective. It is hard to imagine a perspective that is truly
collectivist-first -- and of course, I don't mean "communist" or "radical"
collectivism .. i'm merely talking about a group's self consciousness. This is
best described by reflecting on consensus: how much do individuals feel like
there is consensus in group consciousness? i.e. how much awareness do
individuals have invested in the awareness of other individuals? If almost none,
that would definitely be individualistic. If their awareness of other
individuals' experience is biased, not accurate or delusional ... well that's
not a particularly pragmatic kind of collective consensus is it?

But the complexity of software lies not in the implementation but in the
integration.  The West is terrible at jailbreaking the blinders is individualism
forces onto it. The more "conscious" westerners or moderners think they are, the
more potential for awareness they forego by asserting their "consciousness"
instead of being or becoming conscious. The dichotomy or dialectic between
collectivism/individualism is relevant here because computers, networking and
technology are primarily inventions of the West -- and thus they bring along
with them the problems of individualism (i.e. materialism, consumerism,
egoism).

This may sound pompous or arrogant, esp. since "oh he doesn't even know what
he's talking about." That's fair, but to this, I would challenge you to begin
using a computer. Log in to your laptop or desktop. What are you looking at? Is
it a person? Or a digital device. Not only are computers brought to us by the
West, the phenomological consequences of their usage -- you have to look at
them, think about their digital state -- at least at a micro-level causes to
become less aware of each other. At a macro-level, you may point out many
examples of how computers and social media cause us to become "more connected"
... but at the lowest level -- at the level of the individuals you're no longer
looking at, whose perspective you're individualistic bias requires effort to
think about -- then individuals are _first_ made less connected. The
individual's attention is required to use digital technology and _then_ if
conditional dependencies are satisfied perhaps we may benefit.

You see, it's not a matter of software or systems expertise, it is philosophy.
Perhaps its not significant, but it it can wormhole its way into any subject or
topic in profound ways. It's concerned with logic or thought or dialectic and
appears wherever you have such.
