:PROPERTIES:
:ID:       cf2191d6-e159-47b1-8e57-4154e190b956
:END:
#+TITLE: Crypto: Coursera Notes
#+CATEGORY: slips
#+TAGS:

* Resources
** Stream Ciphers

*** Discrete Prob

$U = \{0,1\}^n$ and $X : U \rightarrow V$ is a random variable mapping U to V

$A \subseteq U$ is an event, whose probability sums to 1.

Independence: $Pr[A\wedge B] = Pr[A] \cdot Pr[B]$

To prove independence, then, given definitions of random variables, prove that
there is no correlation in there values. e.g. that for $X = lsb(r)$ and $Y =msb(r)
=$ i.i.d if for all possible values, $P[lsb(r)] = P[msb(r)]$

**** Important prop of XOR

The most basic techniques are the most important to reinforce at the beginning
of this class.

If $Y := \{0,1\}^n$ is rand var (distr unknown) and $X := \{0,1\}^n$ is
indep. uniform var, then $Z := X\oplus Y$ is uniform var on ${0,1}^n$

+ Construct prob table for each var, then for their conjunction.
+ For $n=1$ then every value in $X\wedge Y$ is $\frac{P(y_i)}{2}}$
+ The intuition is that, to avoid correlation in how Y affects $X\wedge Y$ then
  Z must also be i.i.d uniform, so P(Y) is always such that tensor contractions
  along bits $i_j ... i_k$ of the domains of X and Y must have their probability
  values "balance out."

For $n = 1$ this means you're contracting (summing) along $Y = X = {0,1}$, but
if you generalize this, you might contract on $Y_i = X_i = {0,1}$ or along on
permutations of indices ${i .. n}$. This must balance out because by definition
$Z = X \oplus Y$ and thus the measure of Z for $Y_i = X_i = {0,1}$ must equal
it's measure for $Y_i \neq X_i = {0,1}$. This is because of how the symmetries
ripple through the values of X,Y,Z, which is more interesting with:

+ more bits
+ or various distributions for Y
+ or esp. with constraints on max. correlation between X and Y

As far as I can remember, when you generalize the concept of xor so that "it's
doing the same thing" but works with sets of bits instead, the particular values
that compose the domains/ranges do interesting things w.r.t the measures (I
don't feel like fully unpacking it right now).

*** Symmetric Ciphers

+ Efficient :: encryption runs in polynomial time

Enc. algorithms consume bits of entropy (produce randomness for their use)
whereas Dec. algorithms are _always deterministic_. There are maybe a few
exceptions where sufficient information is intended to weaken the key, like with
[[https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing][Shamir's Secret Sharing]] and some techs used in the cloud for unlocks, but these
aren't "algorithms" in the same sense used here ......... okay nevermind, still
deterministic.



* Roam
