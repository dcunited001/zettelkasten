:PROPERTIES:
:ID:       b4ed155f-4f10-4754-95aa-946e4bb2738a
:END:
#+TITLE: Arch: Migrate from Garuda to Omarchy
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:fbf366f2-5c17-482b-ac7d-6dd130aa4d05][Arch]]
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:d7cc15ac-db8c-4eff-9a1e-f6de0eefe638][File Systems]]
+ [[id:d8216961-cd6a-47cd-b82a-8cd67fe7190f][BTRFS]]

* Docs

* Resources
+ Omarchy [[https://learn.omacom.io/2/the-omarchy-manual/96/manual-installation][Manual Installation method]]

** Networking

+ [[https://wiki.archlinux.org/title/Systemd-networkd][archwiki: systemd-networkd]]

*** Netplan
Netplan can generate the systemd =.network=, =.link= and =.netdev= units from YAML,
but meant for servers/infrastructure. It's overkill for a desktop.

*** Man Pages

+ [[https://man.archlinux.org/man/networkctl.1.en][networkctl (1)]]
+ [[https://man.archlinux.org/man/systemd.link.5.en][systemd.link (5)]] layer 2 link
+ [[https://man.archlinux.org/man/systemd.netdev.5.en][systemd.netdev (5)]] layer 2 interface
+ [[https://man.archlinux.org/man/systemd.network.5.en][systemd.network (5)]] layer 3 configuration
+ [[https://man.archlinux.org/man/org.freedesktop.network1.5.en][org.freedesktop.network1 (5)]] dbus interface
+ [[https://man.archlinux.org/man/systemd-networkd.8][systemd-networkd (8)]]
+ [[https://man.archlinux.org/man/systemd-network-generator.service.8.en][systemd-network-generator.service (8)]] one-shot, waits for at least one online
  interface

* Setup
** Installation

+ Fed it the entire disk & used a generic password to change LUKS encryption and
  user password later.
  - I'll already reload and edit the btrfs layout. I'll re-encrypt with a new
    password before then
    - The luks master key for the volume generation is, by default, distinct from
      the passphrases used to unlock the master key
  - I'm paranoid about having LUKS equivalent to user password and about btrfs
    snapshots (overkill but idk, one pass shouldn't get you the other there)
+ I didn't switch =vty= to setup network before the installation
  - Probably should have.
+ After install, the system bootloops once at UEFI.
  - Reboot into omarchy. Clicked wifi notification. Initial sudo prompt shows
    up, but for the initial btrfs snapshot.
  - Restarted before initial snapshot. Tests robustness of init scripts, which
    is one possible channel for early issues.
    - this turns out to be triggered by the =omarchy-update-branch= script FIXME)

*** Change LUKS

Reboot into the custom =nixos-anywhere= ISO to reencrypt. The command below wasn't
working, with or without various luks parameters. I just used [[https://github.com/basecamp/omarchy/blob/2df8c5f7e0a2aafb8c9aacb322408d2ed7682ea5/bin/omarchy-drive-set-password#L3][the command from
omarchy's script to re/set it]]

#+begin_src shell
cryptsetup luksChangeKey $disk <(read -sp 'LUKS Passphrase: ' lukspass; echo $lukspass)
#+end_src

The partition layout by default doesn't use LVM, so the [[https://learn.omacom.io/2/the-omarchy-manual/96/manual-installation][Manual Installation
method]] is required for that. I don't have time.

+ Except for the laptop's recent Garuda, I haven't tried a mono-partition
  installation. It's probably more of a feature anyways.
+ LVM is a pita and partition boundaries end up wasting a lot of space.
  - Aannnd I don't have =btrfs= CLI on this ISO?


*** Re-run =omarchy-cmd-first-run=

Reboot into omarchy, but the initial snapshot setup script didn't run.

[[https://github.com/basecamp/omarchy/blob/2df8c5f7e0a2aafb8c9aacb322408d2ed7682ea5/bin/omarchy-cmd-first-run#L5][omarchy-cmd-first-run]] will run if the the =FIRST_RUN_MODE= marker is still in
tact, which gets set by [[https://github.com/basecamp/omarchy/blob/2df8c5f7e0a2aafb8c9aacb322408d2ed7682ea5/install/preflight/first-run-mode.sh#L4][./install/preflight/first-run-mode.sh]]

+ hyprland runs this with =exec-once= this
+ =touch ~/.local/state/omarchy/first-run.mode=
  - neither relogin nor reboot seem to rerun it
  - just touch this file and run =$OMARCHY_PATH/bin/omarchy-cmd-first-run=

It turns out the welcome notifications did display and the command had run. I
got the initial =sudo= prompt & 'Create system snapshot" dialog from:

** Configuration

*** Desktop

+ setup xkb in hypr, linked =~/.config/xkb=

*** Misc System

+ set root password, set user password, relogin
  - changing password requires reboot for sudo: uwsm doesn't necessarily end
    the user session?
+ restricted algorithms/etc in to =sshd_config.d=
  - trying to determine the best way to deploy misc changes like this


**** Remaining

+ how to configure a display manager? or enforce login?

*** GnuPG and SSH

**** Setup yubikey

For me, after the config, i just need the packages

+ pcsclite
+ yubikey-manager
+ yubikey-personalization
+ yubikey-personalization-gui
+ yubikey-piv-tool
+ yubico-touch-detector :: this creates a notification when yubikey is prompted
  for PIN

Still not sure what omarchy is using for package installation.

+ Run =cat `which omarchy-pkg-install`=, this contains the fzf menu
  - omarchy-pkg-install :: with =pacman=
  - omarchy-pkg-aur-install :: with =yay=
+ And =less /var/log/pacman.log= to grab the package names again
+ I didn't want to use =yay= until i was sure.

**** Tramp, =ssh= and =scp=

From here, I can do mostly everything remotely until I adjust to the environment
(and configure hyprland, etc)
 
**** Setup config for SSH and GPG
Mount old FS and copy over. Then restart

#+begin_src shell
# The garuda BTRFS disk (gh: garudahome)
gh=/run/media/$USER/$d/@home/$USER

# backup, in case.
# you may have created known_hosts, authorized_keys, etc
mv ~/.gnupg ~/.gnupg.oma
mv ~/.ssh ~/.ssh.oma

cp -R $gh/.gnupg $gh/.ssh $HOME
gpg-connect-agent /reloadagent /bye
#+end_src

+Now things like =ssh -T git@github.com= succeed+ ... (it fails).

occasionally I go through this in more detail. It requires more setup/checks on
=nix= & =guix=.

**** Fix =gpg-agent= and =pcscd=

***** Setup =pcscd=

I think =pcscd= ships with omarchy.

I needed to run =sudo systemctl start pcscd=, but it should get activated when an
application needs to hit the =pcscd.socket=.

***** Restub the private keys in =$GNUPGHOME=

To restub the keys:

#+begin_src shell
gpg-connect-agent "scd seriano" "learn --force" /bye
#+end_src

After pcscd is running, this will succeed. still no =ssh -T git@github.com=. It's
failing on =libcrypto=, but having =pcscd= online definitely allowed this to succeed.

***** Setup pinentry

The problem was the pinentry. Running =/usr/bin/pinentry-qt5= throws an error
about =libKFSWaylandClient.so.5= .... okay =/usr/bin/pinentry-qt= is definitely the
newer one (wtf this is always so hard to answer lol)

***** Ensure =ssh= uses the right socket

Ensure this runs in =.profile= setup

#+begin_src shell
unset SSH_AGENT_PID
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
#+end_src

** Tools

#+begin_src shell
pkgs=()

pkgs+=(pcsclite yubikey-manager
  yubikey-personalization yubikey-personalization-gui
  yubikey-piv-tool yubico-touch-detector)

# btrfs
pkgs+=(compsize)

# misc
pkgs+=(tree jc yq)

yay -Syu ${pkgs[@]} # i think this is equivalent
#+end_src


** Programming

*** Repo



*** Emacs

#+begin_quote
I still need to setup guix/nix, but getting guix to install the way I want (with
the =/var/guix= in =/gnu/var/guix=) requires it to be built on my machine.

Can't do much without emacs.
#+end_quote

I just set up the =emacshop= profile here, with those desktop files.

+ I had to ensure that =custom.el= didn't load initially. I moved it to
  =custom.el.bak=, since running emacs without =custom.el= created will probably
  create a =custom.el= file.
  - Emacs will fail to load until the packages are installed if it runs with the
    =init.el=). Just look at the list in =custom.el.back=, select them, install to
    =~/.emacs.d/= and ensure that no other emacs profile uses those
    =~/.emacs.d/{elpa,eln-cache}= directories.
+ I ran with =--debug-init= to step through the config file after installing the
  packages manually. After that, shut down emacs, then move the =custom.el.bak=
  file into place.
+ From here, =mkdir -p ~/.local/share/systemd/{system,user}=
  - I checked =systemd-path= and these are there, though the directories are not.
  - I copied =~/.dotfiles/.emacs.hop/emacshop.service= into place
  - Then copied =~/.dotfiles/.emacs.hop/emacshopclient.desktop= into place
*** Doom Emacs



*** FRC

**** Setup =wpilib= and its =vscode=

Installed everything through the package manager.

* Response

** Initial usage

+ ~/.local/share/omarchy :: the distribution's logic in one place as a git repo.
  perfect. There's also logic in =omarchy-update-branch= to handle git stash,
  which is great.
+ s-M SPC :: Omarchy Menu
  - =Learn= quickly into a =walker= menu that lists human-readable default
    shortcuts. Very nice.

** Pros/Cons
Some notes from elsewhere not summarized here

*** Great
+ ships a tiling window manager by default
+ balances /emptiness/ with /fullness/:
  - the profile is pretty extensible (starship/etc aren't overbearing)
  - there's a lot of polish but i don't see anything i'd want to remove.
+ for a developer, kinda exactly what you want.
  - simple things are simple, as they should be
  - lazyvim, lazydocker just seem to work. as an emacs user, pretty awesome.

*** Good

+ following through the =first-run= scripts was helpful
  + The omarchy scripts are easy to understand and it uses its own "API" there
    -- it expresses the functionality to setup using the same terminology you'd
    use to automate things
  + e.g. =omarchy-launch-floating-terminal-with-presentation omarchy-update= runs
    if you click on that =mako= notification
+ easy to automate & manage customizations
+ nice screensavers

many more.

*** IDK

+ Doesn't include =nmtui= by default ... doesn't have Network Manager?
  - Okay. Uses =systemd-networkd= by default. hmmm editing the =.network= units
    seems simple enough.
  - =systemd-networkd= This leads into configuring linux on the server

*** Could be better
+ =.bash_profile= shouldn't source =.bashrc=. not sure whether the =.profile= would
  need the interactive content in =~/.local/share/omarchy/default/bash/rc=

**** LUKS block size

Wrong about this. It's fine. See [[id:c08270ed-9062-4fb4-b4ec-3cd2bfe39e52][File Systems and Omarchy: TIL about 512e SSDs
and LUKS reencrypt]]

** System

*** FS
**** BTRFS

By default, there are four mounted subvolumes under =subvolid=5=. 

#+begin_src shell :results output verbatim
echo '/@/ subvolid=256,compress=zstd:3,ssd,space_cache=v2
/@/@home/ subvolid=257,compress=zstd:3,ssd,space_cache=v2
/@/@home/.snapshots/ 263
/@/@log/ subvolid=258,compress=zstd:3,ssd,space_cache=v2
/@/@pkg/ subvolid=259,compress=zstd:3,ssd,space_cache=v2
/@/.snapshots/ 262
/@/var/lib/portables/ 260
/@/var/lib/machines/ 261' | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── @
    ├── @home
    │   └──  subvolid=257,compress=zstd:3,ssd,space_cache=v2
    ├── @log
    │   └──  subvolid=258,compress=zstd:3,ssd,space_cache=v2
    ├── @pkg
    │   └──  subvolid=259,compress=zstd:3,ssd,space_cache=v2
    ├──  subvolid=256,compress=zstd:3,ssd,space_cache=v2
    └── var
        └── lib
            ├── machines
            │   └──  261
            └── portables
                └──  260

9 directories, 6 files
#+end_example

***** Add brtfs subvolumes for =nix= and =guix=

+ I don't actually want compression on =/nix= and =/gnu= subvolumes.
+ I definitely want to avoid having these be snapshotted. This means they need
  to be on a separate partition or at least directly under the root =subvolid=5=
  - IDK how BTRFS slides its snapshots, but i imagine it's more important for
    the earliest remaining snapshots on disk.
+ I'd prefer slightly faster builds and =guix gc= will de-dupe files with
  hard-links, so this ends up being a dozen or so unnecessary re/compressions
  and then deletes.

After reading through =cat `which omarchy-snapshot`=, the mounted subvolumes are
snapshoted -- so I don't need to worry about a second partition, phew.

I don't really know the BTRFS compression internals. It's unclear how much space
you'd save on writes to =/nix/store= and =/gnu/store=.

Running =compsize $subvolumeMount= can calculate that. Where =zstd= is used, get
something like =2.8G= usage on =8.5G= data, but there's =15G= uncompressed.

#+begin_src shell
compsize /{etc,home,opt,usr,var}
#+end_src

****** Anyways...

TLDR, what's in [[https://github.com/dcunited001/ellipsis/blob/master/nixos/hosts/kharis/kharis.chroot#L28][this same script]] should basically work, though I guess the
compression options are at mount time. Reboot into the nixos-anywhere iso (btrfs
can't be mounted if operating on the lower-level subvolumes)

To create them

#+begin_src shell
mr=/mnt/foo
disk=/dev/nvme0n1p2
dmap=/dev/mapper/oma
mkdir -p /mnt/foo
cryptsetup open $disk oma
mount $dmap $mr
btrfs subvolume list $mr
btrfs subvolume create $mr/@nix
btrfs subvolume create $mr/@gnu
umount $mr
#+end_src

Don't create the directories yet. Remount first. Check =/etc/fstab= to make sure
the mount options match

#+begin_src 
bops=defaults,noatime
mount $dmap -o rw,relatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@ $mr
mkdir $mr/{nix,gnu}
umount $mr
#+end_src

Edit the =/etc/fstab= and add lines for =/nix= and =/gnu=. These directories should be
completely empty when you go to setup =nix= and =guix=

#+begin_src shell :results output verbatim :dir /ssh:kharis:/home/dc :shebang "#!/usr/bin/env bash"
grep -E '(nix|gnu)' /etc/fstab
#+end_src

#+RESULTS:
: UUID=$uuid	/nix  	btrfs     	rw,defaults,noatime,subvol=/@nix	0 0
: UUID=$uuid	/gnu  	btrfs     	rw,defaults,noatime,subvol=/@gnu	0 0

****** Misc Notes (probably wrong)

Usually these things revolve around whether the following are "linear
operators", figuratively speaking:

+ disk content (maybe files)
+ compressed content
+ disk deltas
+ compressed disk deltas

By =delta=, I literally mean the differential operator. Other properties may be
useful as well: composition of the above, commutivity/associativity (preferably
both ... but nope), idempotance (not relavent here), isomorphisms (natural
transformation)

How your data backend makes design decisions changes which sets of these
properties you get and, thus, which operations are fast or slow (or possible).

There's a design choice of forward or backwards (similar to how databases for
large [[https://dataengineeracademy.com/module/best-practices-for-managing-schema-evolution-in-data-pipelines/][data pipelines allow forward/reverse schema migration]]), where the data
actually lives, how the file-like objects are produced.
****** In terms of Rails Migrations

The Rails migrations have some of these properties for forwards and reverse
morphisms (changes to the total DB schema object) that can be guaranteed when
applied in sequence.

+ Each migration captures a schema delta and must be wrapped in a migration
  (where the changes to the DB schema can be guaranteed to complete while
  locking out other changes to relevant SQL tables, etc.)
+ There is an assumption made in the starting point for a database which is
  similar to the =./db/schema.rb= which captures the endpoint for the database
  after all migrations have been applied.
+ The migrations could sometimes be applied out-of-order or when changes are
  made outside the system of =db/migrations=, but doing so is silly and
  complicated.

For BTRFS, does a snapshot capture the change or the content or a mixture
(probably a mixture).

+ What I do know is that the migrations add up to a lot of storage of you don't
  remove them.
+ The other thing i know is that accidentally snapshotting the =/nix= and =/guix=
  subvolumes (or directories) is a huge problem for storage, IO and unnecessary
  wear on an SSD. BTRFS is a good choice for these, but a terrible choice if
  they are snapshotted.
+ They do provide access to file-like objects directly (if you accidentally
  mount the =@.snapshots= directory, you'll discover that)
**** Mounts

These are the default mounts. This is running on the remote system:

+ =#+headers: :dir /ssh:kharis:/home/dc :shebang #!/usr/bin/env bash=

#+headers: :dir /ssh:kharis:/home/dc :shebang #!/usr/bin/env bash
#+begin_src shell :results output verbatim
mount | cut -f3,5 -d' ' \
    | sort | uniq \
    | sed -e 's/^/root/g' \
    | sed -E 's/ (.*)$/ (\1)/g'\
    | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── root
    ├── boot (vfat)
    ├──  (btrfs)
    ├── dev
    │   ├── hugepages (hugetlbfs)
    │   ├── mqueue (mqueue)
    │   ├── pts (devpts)
    │   └── shm (tmpfs)
    ├── dev (devtmpfs)
    ├── home (btrfs)
    ├── proc
    │   └── sys
    │       └── fs
    │          ├── binfmt_misc (autofs)
    │          └── binfmt_misc (binfmt_misc)
    ├── proc (proc)
    ├── run
    │   ├── credentials
    │   │   ├── systemd-journald.service (tmpfs)
    │   │   ├── systemd-networkd.service (tmpfs)
    │   │   └── systemd-resolved.service (tmpfs)
    │   ├── media
    │   │   └── dc
    │   │       └── garuda-root (btrfs)
    │   └── user
    │       ├── 1000
    │       │   ├── doc (fuse.portal)
    │       │   └── gvfs (fuse.gvfsd-fuse)
    │       └── 1000 (tmpfs)
    ├── run (tmpfs)
    ├── sys
    │   ├── firmware
    │   │   └── efi
    │   │       └── efivars (efivarfs)
    │   ├── fs
    │   │   ├── bpf (bpf)
    │   │   ├── cgroup (cgroup2)
    │   │   ├── fuse
    │   │   │   └── connections (fusectl)
    │   │   └── pstore (pstore)
    │   └── kernel
    │       ├── config (configfs)
    │       ├── debug (debugfs)
    │       ├── security (securityfs)
    │       └── tracing (tracefs)
    ├── sys (sysfs)
    ├── tmp (tmpfs)
    └── var
        ├── cache
        │   └── pacman
        │       └── pkg (btrfs)
        └── log (btrfs)

21 directories, 32 files
#+end_example
* Data
** Garuda FS

*** Boot & LUKS
I hadn't gotten around to setting up =/etc/cryptab=, =/etc/fstab=, etc for LUKS
because I never decided on how to handle the dracut image scripts for
systemd-boot

+ Need to copy the partitions to an external disk so that their size & ordering
  are preserved

*** Nix/Guix partition

+ These had been created in a separate BTRFS partition using [[https://github.com/dcunited001/ellipsis/blob/master/nixos/hosts/kharis/kharis.chroot#L28][this script]]
+ They can be safely removed from the partition table

*** Backups

I ended up installing omarchy on the fresh disk.

Notes in [[id:e1f0e2af-c208-4fed-8717-3b6c5b49b804][File Systems: Being overly cautious with sfdisk and duplicate uuids]].
Easier to handle the partition images with UUIDs and Partition UUIDs in tact.

** Extant Configuration

There's little work on the laptop recently and I've contained everything inside
=$HOME= ... so that's pretty easy.

+ XDG_CONFIG_HOME :: was held together with popsicle sticks & symlinks
  - I have an =~/.emacs.d -> ~/.dotfiles/.emacs.hop= symlink for a barebones emacs
    config and a few things like that
+ XDG_DATA_HOME :: a few things:
  - OrcaSlicer configuration
  - Wine/Bottle configuration for Carbide Create (with a =C:\= filesystem
    somewhere idk)

* Migration

** Overview

+ Going to run commands via =ssh= so taking notes is a bit easier.
+ After pruning/draining files that can't easily be sync'd:
  - make sure it boots up again
  - shutdown, boot an ISO and copy the partition to an extra NVMe
+ Install omarchy
  - look around
  - check brtfs subvolumes, add subvolumes for =/nix= and =/gnu= that don't inherit
    from the main =subvolid=5=, potentially adding a separate partition for this
  - Maybe install again. depends on how/whether LUKS is setup within LVM or not
    - if not, then I need a second LUKS drive (hence the reinstall using the
      [[https://learn.omacom.io/2/the-omarchy-manual/96/manual-installation][Manual Installation method]]).
    - The main difference is whether you want to move partitions later as
      singular images. If not, then top-level btrfs subvolumes are way simpler.
+ Configure some basic dotfiles
  - setup =~/.emacs.hop=
  - make =.profile= consistent
  - re-shim the laptop's hyprland configs

** Escape Hatch

Kinda the most important part. I want to drain some of the scattered files from
the disk, but not too many so that the installation + =$HOME= dotfiles don't work.

** Omarchy

*** FS & Boot
+ LUKS+BTRFS :: I'm guessing the requirement is enforced through package
  updates in their custom mirror
+ Limine :: Boots via limine from EFI.
  - It's probably okay to assume this can live with the grub EFI image, but to
    be safe, I'm just backing up the image to a smaller disk.

I think dropping the LVM & Partitions approach & moving towards 95% btrfs would
be very beneficial

**** Partitions
I'm trying to get a feel for the subvolumes

*** Dotfiles

I just don't know that I want to manage two sets of scripts or hyprland configs.

+ One method for addressing this is to move some custom functionality into
  nix/guix packages, which I'm already doing.
  - e.g. the =hjinspect.jq= bin script that helps dump window titles
  - /Some of these packages/ can be installed into the main =~/.nix-profile= where
    the bin scripts & maybe some configs would be available in the environment.
    This would already be preferable to how I'm handling this shared
    functionality now (again... popsickle stick & symlinks).
+ Another method is to just start a separate set of dotfiles and figure it out
  from there.

**** SSH & GnuPG

It's a pain if it's not setup quickly

**** XKB

The custom bindings for =ISO_LEVEL_5= should still work

*** Profile

This is always a pain to manage across distros, but should be easier in Omarchy.

+ It's intended for developers. I haven't fully evaluated it (and I won't know).
  The installation scripts for isolated programming environments: a good sign
  that there's a more solid =.profile= foundation to build on.
*** Desktop
**** Notifications

Uses =mako= whereas I would prefer =swaync=, but idk =mako= seems to have good
support. I haven't used it yet though.

+ =swaync= is simple enough for me to decouple, since I don't have a heavy
  =home-manager= config.

**** Waybar

This looks simple enough to extend/customize. One thing that's missing is the
=yubikey-touch-detector=

**** SystemD & D-Bus

+ I had planned to explore adding custom d-bus specifications
+ I believe both these and system-d units can be installed through nix-profile,
  though the latter could maybe get messy.

**** Walker

I was about to shift towards =rofi=, but =walker= covers that functionality. The
=walker= author popped into a chat recently and the project piqued my interest.

+ It's a mix of =go= and =rust= with an underlying component =elephant=
+ =walker= has a creative design providing a service-managed backend index, along
  with a socket interface to provide fast access to results.
+ A bit of =golang= and a socket-based API are all helpful to learn anyways.

***** Rofi/Dmenu

With custom scripts or random dots, my concern here was cargo culting the wrong
scripts/patterns. A lot of what's done with =dmenu=-style interfaces should
actually be provided over d-bus.

+ I do a lot of this through Emacs' consult/vertigo anyways
+ I have a large collection of PDFs/cheatsheets that I need access to
*** Hyprland

The Omarchy hyprland is simple enough for me to shim what I need on top. omarchy
has some defaults, where you kinda want to choose which main configs to include
and how to shim the rest of what you need.

+ If you want their keybindings/modkeys, they're =const= in (e.g. SHIFT, ALT).
+ This is fine, as the point here is to gain functionality from what they
  provide (e.g. =walker=, =./bin= scripts). modkeys are easy enough to adjust to
  and I was already considering it.
+ Adapting to the standard hotkeys/etc and having a consistent interface from
  machine to machine is far preferable.

hyprland launch: they're using UWSM, which should be simple enough for me wrap
or both laptop/desktop.

* Compare Hyprland Configs

** Binds

#+name: jqBindsSort
#+begin_example jq
sort_by("\(.key),\(.keycode),\(.modmask)")
#+end_example

This first query's diffable as i would've liked (I guess I tried csv to line up
the tables)

#+name: jqBindsFormat
#+begin_example jq
map([
  .modmask,
  .key,
  .keycode,
  ([
    if (.mouse)           then "m" else "." end,
    if (.release)         then "r" else "." end,
    if (.repeat)          then "e" else "." end,
    if (.non_consuming)   then "n" else "." end,
    if (.has_description) then "d" else "." end,
    if (.catch_all)       then "C" else "." end, # i think this is correct
    if (.longPress)       then "o" else "." end
    ] | join("")),
    .dispatcher,
    .arg,
    .description
  ])
#+end_example

This just lists duplicated keybinds

#+name: jqBindsFormatShort
#+begin_example jq
map([(.key // .keycode), .modmask]   | join("	")) | join("\n")
#+end_example

#+headers: :var qs=jqBindsSort qf=jqBindsFormat
#+begin_src shell :results output verbatim
hypr_instance="71a1216abcc7031776630a6d88f105605c4dc1c9_1759038644_2145885464"
hyprctl binds -j | jq -r "$qs | $qf"
#+end_src

*** Diff

Here are the modmap binds to codes

#+headers: :var qs=jqBindsSort qf=jqBindsFormatShort
#+begin_src shell :results output code :wrap example diff
hypr_instance="71a1216abcc7031776630a6d88f105605c4dc1c9_1759038644_2145885464"

# some quoting issues here
diff <(hyprctl binds -j | jq -r "$qs | $qf") \
  <(ssh kharis \
    env HYPRLAND_CMD=Hyprland \
    HYPRLAND_INSTANCE_SIGNATURE="$hypr_instance" \
    hyprctl binds -j | jq -r "$qs | $qf")
#+end_src

#+RESULTS:
#+begin_example diff
1,4d0
< $osObsKey	73
< $wsDocksKey	73
<       32
<       33
7,8d2
<       32
<       33
11,12d4
<       32
<       33
15,21d6
<       0
<       32
<       33
<       0
<       0
<       32
<       33
32,34d16
<       0
<       0
<       0
39,55c21,33
<       0
<       0
<       72
<       73
<       72
<       73
<       32
<       33
<       32
<       33
<       32
<       33
< 1	0
< A	0
< A	1
< D	0
< D	1
---
>       64
>       65
>       64
>       65
> A	64
> A	65
> B	64
> B	65
> BACKSPACE	64
> C	64
> COMMA	64
> COMMA	65
> COMMA	68
57,58c35
< Delete	72
< Delete	73
---
> DELETE	12
59a37,38
> E	68
> ESCAPE	64
61,89c40,78
< F	69
< F1	0
< F1	72
< F10	32
< F11	32
< F12	32
< F9	72
< F9	73
< H	0
< H	1
< H	72
< J	0
< J	1
< J	72
< K	0
< K	1
< K	72
< L	0
< L	1
< L	72
< Prior	32
< Prior	33
< R	65
< S	0
< S	1
< S	72
< S	73
< W	0
< W	1
---
> F1	4
> F11	1
> F11	8
> F2	4
> F2	5
> G	64
> G	65
> G	72
> I	68
> J	64
> K	64
> M	64
> N	64
> N	68
> O	64
> P	64
> PRINT	0
> PRINT	1
> PRINT	12
> PRINT	13
> PRINT	4
> PRINT	64
> PRINT	8
> PRINT	9
> S	68
> SPACE	64
> SPACE	65
> SPACE	68
> SPACE	69
> SPACE	72
> T	64
> TAB	64
> TAB	65
> TAB	68
> Tab	8
> Tab	8
> Tab	9
> Tab	9
> V	64
90a80,93
> X	64
> X	65
> XF86AudioLowerVolume	0
> XF86AudioLowerVolume	8
> XF86AudioMicMute	0
> XF86AudioMute	0
> XF86AudioMute	64
> XF86AudioNext	0
> XF86AudioPause	0
> XF86AudioPlay	0
> XF86AudioPrev	0
> XF86AudioRaiseVolume	0
> XF86AudioRaiseVolume	8
> XF86Calculator	0
91a95
> XF86MonBrightnessDown	8
93,102c97,99
< Z	64
< Z	65
< backslash	100
< backslash	32
< backslash	33
< backspace	100
< backspace	32
< backspace	33
< d	72
< delete	100
---
> XF86MonBrightnessUp	8
> XF86PowerOff	0
> Y	64
105,111d101
< equal	32
< equal	33
< escape	0
< escape	0
< escape	72
< home	32
< home	33
114,115d103
< m	72
< m	73
118,124d105
< mouse:277	0
< mouse:277	64
< mouse:280	0
< mouse:280	64
< mouse:280	65
< mouse:280	68
< mouse:280	69
127,132c108
< p	72
< p	73
< pause	72
< return	100
< return	32
< return	33
---
> return	64
135,143c111
< space	0
< space	100
< space	65
< space	72
< tab	100
< tab	64
< tab	65
< tab	72
< tab	73
---
> slash	64
#+end_example
