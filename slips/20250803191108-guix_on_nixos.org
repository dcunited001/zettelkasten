:PROPERTIES:
:ID:       f02112b7-890c-4d98-81c9-41613e64aff7
:END:
#+TITLE: Guix on NixOS
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
+ [[id:2049060e-6755-4a64-b295-F7B563B41505][NixOS]]
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]

* Resources

* Issues

** Updating =$USER/.config/guix/current=

** Emacs

*** Misc

**** Treesitter

These need to build directly against the Emacs they'll run in, which is why
those packages are in my =$DOOMDIR/.guix-profile=. The selection on Guix is
slightly more limited than on nix, but the packages are easy enough to extend.

**** Missing Fonts

Just needed to resolve some XDG and GTK issues to ensure a consistent font
cache, even though =bin/doomemacs= starts entirely using a Guix profile.

**** Emacs in Systemd Crashes Hyprland/UWSM/SDDM

This has something to do with emacs interacting with graphical components and
not having the kind of state that a compositor should have under =uwsm start=.

It seems resolved when running the emacs server under =uwsm app=, though it's just
happened once running =bin/doomemacs= directly within =alacritty= and connecting
with =bin/doomclient=

*** Other Native Tools

+ vterm :: build requires cmake (and what else...?) either being bundled into
  =$DOOMDIR/.guix-profile= or having a compatible =gcc/cmake= toolchain shimmed in
  with pinned deps or immediately after =bin/doomup= to update & build =.elc=
+ epdf-tools :: the build seems to run, but checks distro details and installs
  via =nix=. idk...
+ zmq :: this is used for =jupyter= to synchronize/facilitate ipykernel
  interaction -- see [[https://ipython.org/ipython-doc/3/api/generated/IPython.kernel.zmq.zmqshell.html][kernel.zmq.zmqshell]]. it's required by a few other
  libraries. I need to review the [[https://github.com/nnicandro/emacs-zmq/blob/master/zmq.el#L623][zmq.el]] build functionality, but this lib more
  likely to build/run without being obvious.

**** PDF Tools

+ =ldd `which epdftools`= and =readelf -ha= show it's linked entirely outside of
  =$DOOMDIR/.guix-profile= paths
+ still, it's an =ELF= that links in graphics and I'm not sure how the graphics
  renders are relayed to emacs... but hopefully there aren't issues sockets and
  mismatched wireprotocols. (this would lead to periods of intermittent
  instability)
+ There also seem to be a lot of unnecessary =*.so= files in this build for
  whatever reason: networking (gssapi, kerberos, etc), nss3 (potentially a separate
  cert cache (?)

** Misc

Polkit

+ add hyprpolkitagent to =users.users.$USER.packages
+ =systemctl --user enable --now hyprpolkitagent.service=

** SDDM, UWSM and Hyprland
** D-Bus

*** Debugging

You'll probably want these apps

#+begin_src shell
# enumerate d-bus services via introspection
flatpak --user install io.qt.qdbusviewer

# not available
# flatpak --user install D-Feet

# filter, record & diff pcaps for session bus
flatpak --user install org.gnome.Bustle
#+end_src

Flatpak seems to =bwrap= an =xdg-dbus-proxy=, so that may affect things.

*** "Ignoring duplicate name =org.somebodybus.service= ..."

See below for more info.



*** D-Bus Activation Environment

See [[https://wiki.hypr.land/Nix/Hyprland-on-Home-Manager/#programs-dont-work-in-systemd-services-but-do-on-the-terminal][Hyprland on Home Manager: programs dont work in systemd services but do on
the terminal]]

Unless using UWSM, this needs to be invoked by hyprland's config somewhere,

#+begin_src hyprlang
exec-once = dbus-update-activation-environment --systemd --all
#+end_src

When using UWSM then =$XDG_CONFIG_HOME/uwsm/env= needs to provide =sessionVariables=

+ some require PAM authorization when using NixOS to configure the system. IDK
  how Home Manager accomplishes this (I guess it req. authorization somehow?)

*** D-Bus Broker

=dbus-broker= is apparently less limited than the traditional =dbus-daemon= when
refreshing the activation environment. Examples in =man
dbus-update-activation-environment= show using a subshell to isolate the parent
shell's environment from =Δenv= (... this is where Scheme's environment/binding
concepts come in handy)

The =man= also states:

#+begin_quote
*LIMITATIONS*

=dbus-daemon= does not provide a way to =unset= environment variables after they
have been set (although =systemd= does), so =dbus-update-activation-environment=
does not offer this functionality either.

POSIX does not specify the encoding of non-ASCII environment variable names or
values and allows them to contain any non-zero byte, but neither =dbus-daemon= nor
=systemd= supports environment variables with non-UTF-8 names or values.

Accordingly, =dbus-update-activation-environment= assumes that any name or value
that appears to be valid UTF-8 is intended to be UTF-8, and ignores other names
or values with a warning.
#+end_quote

I had been having some trouble with this, as most docs still under-articulate
differences between =uwsm= and other compositor methods. There weren't many
examples in dotfiles. I suspected a difference here and made about =¾= of the
changes. Still, I have both =dbus-daemon= and =dbus-broker=

**** Stability in successive Home Manager updates

You probably wanna pin =dbus-broker= and related dependencies, since there maybe
remaining problems with long-term compositor sessions

#+begin_quote
various effects are exhibited on both my nix & arch hyprland sessions (though
idk if it's related). Sessions lasting about a day seem to encounter issues with
hyprland's keybindings and UI/Graphics glitching on chrome. The main symptoms
are inconsistent focus switching after Chrome fails to switch between tabs.

NOTE: this seems to be correlated to additional =xkbcomp= errors in =journalctl=.

+ Using Control, ignoring Lock.
+ Key <CAPS> added to map or multiple monitors.

#+end_quote

The user d-bus session should persist through the compositor session, so it's
process isn't so easy to update in real-time (not without [[https://www.redhat.com/en/blog/kernel-live-patching-linux][the kind of elf-magic
that patches a live kernel without reboot]]... Though I guess you could negotiate
a swap-out of a running d-bus daemon (if only you had some degree of abstraction
in front of it, like maybe some kind of "broker")

Potential issues:

+ Interactions between user/system bus?
+ Warnings about =Ignoring duplicate name "org.freedesktop.qwerty"= ... oh...
+ Paths like =/nix/store/.../{bin,lib}= that may not be refreshed in memory of
  running processes that leverage specialized invocation of processes.
+ Disowned processes that are unaccounted for, but still impact the running
  system.
+ Assumptions about =*.so= linking, esp. when NixOS or Home Manager paths change.
  Typically the full path must be specified in config-files when patching
  shebangs --
+ Long-running d-bus service calls that return in a format that's changed
+ The D-Bus socket protocol should be fairly constant, so the wire protocol
  shouldn't change. Redefining updated Interface XML /should/ be straightforward.

**** Comparing =dbus-daemon= and =dbus-broker=

Dependencies are fairly minimal, which I inferred after speccing out the above.
D-Bus can't have many dependencies, if it needs to handle those problems. I've
had D-Bus startup problems (the chopped and screwed desktop), but long-term
issues would be hard to notice. GNU =shepherd= seems to have sidestepped the need
for backwards compatibility and I guess now it makes a lot more sense.

#+begin_src shell :results output verbatim
echo -e "dbus-broker\n"
ldd `which dbus-broker` | tr -d "	" | sort

echo -e "\ndbus-daemon\n"
ldd `which dbus-daemon` | tr -d "	" | sort
#+end_src

#+RESULTS:
#+begin_example
dbus-broker

libcdvar-1.so.0 => /nix/store/370kymia4l5f8h9cpd2j65inn1rqb6yl-c-dvar-1.1.0/lib/libcdvar-1.so.0 (0x00007ff3bac81000)
libcrbtree-3.so.0 => /nix/store/ygawynjpi8bv5aby4ghg998b1gdibvsf-c-rbtree-3.2.0/lib/libcrbtree-3.so.0 (0x00007ff3bac7b000)
libc.so.6 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/libc.so.6 (0x00007ff3ba800000)
libcutf8-1.so.0 => /nix/store/kpydsdwknvv3cfgzch97x2g48rdal4cb-c-utf8-1.1.0/lib/libcutf8-1.so.0 (0x00007ff3bab8b000)
libm.so.6 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/libm.so.6 (0x00007ff3bab92000)
linux-vdso.so.1 (0x00007ff3bac91000)
/nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/ld-linux-x86-64.so.2 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib64/ld-linux-x86-64.so.2 (0x00007ff3bac93000)

dbus-daemon

libapparmor.so.1 => /nix/store/28dk0x39djdqlkcm0i1a2y3akpgyp8kk-libapparmor-4.1.1/lib/libapparmor.so.1 (0x00007fb0fb608000)
libcap.so.2 => /nix/store/q2ps6hq2jr2xwvs60m39fnjrnsx94a3w-libcap-2.75-lib/lib/libcap.so.2 (0x00007fb0fb5f9000)
libc.so.6 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/libc.so.6 (0x00007fb0fb200000)
libdbus-1.so.3 => /nix/store/231d6mmkylzr80pf30dbywa9x9aryjgy-dbus-1.14.10-lib/lib/libdbus-1.so.3 (0x00007fb0fb7a1000)
libexpat.so.1 => /nix/store/l0d83xf43lsyhzqziy0am1cidhkcxs9q-expat-2.7.1/lib/libexpat.so.1 (0x00007fb0fb61f000)
libm.so.6 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/libm.so.6 (0x00007fb0fb510000)
libpthread.so.0 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/libpthread.so.0 (0x00007fb0fb50b000)
libsystemd.so.0 => /nix/store/n4kqvn450iwdyj83q80is8ija3lfi2iw-systemd-minimal-257.6/lib/libsystemd.so.0 (0x00007fb0fb64d000)
linux-vdso.so.1 (0x00007fb0fb802000)
/nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib/ld-linux-x86-64.so.2 => /nix/store/zdpby3l6azi78sl83cpad2qjpfj25aqx-glibc-2.40-66/lib64/ld-linux-x86-64.so.2 (0x00007fb0fb804000)
#+end_example

** GPG

This was working... now only SSH works.

+ =programs.gnupg.enable= will apparently also start a =/root/.gnupg=-based
  gpg-agent for root only.
+ TLDR: from a fresh nixos-created =~/.gnupg= config which merges settings from a
  magical =/nix/store= path somewhere, then it will create the private keystubs
  from your yubikey, but it won't import your public keys.
  - =gpg --import $muhkeys.asc= will fix this
  - I need to refresh this =.asc= pubkey after creating new private keys anyways.

*** =programs.gnupg.agent=

**** Starting point

#+begin_src nix
{ config, lib, pkgs, ... }: {
  programs.gnupg = {
    agent = {
      enable = true;
      enableSSHSupport = true;
      pinentryPackage = pkgs.pinentry-qt;
    };
  };
}
#+end_src

The nixos-mediated =gpg-agent= service only imports the subkey keystubs that
relate to the operations you're trying to run (e.g. decryption). A configuration
like the above, on =gpg-service= socket activation creates =$GNUPGHOME= inside =$HOME=
only if it doesn't exist.

+ gpg -d $decryptme :: imports two private keystubs
  - ABCD...123.key :: encryption subkey
  - DCBA...123.key :: signature subkey
+ ssh $somehost :: imports the other two private keystubs
  - 1234...ABC.key :: authentication subkey
  - 4321...CBA :: ... a =PIV-9A= subkey which is fantabulous news, since i've just
    been relaying those keys to my hosts' =~/.ssh/authorized_keys= anyways, since
    they only ever existed on cards anyways.
+ It does nothing with the master certification key, since that's never existed
  off an airgapped filesystem.

So... it imports keystubs from the yubikey into =$GNUPGHOME/.private-keys-v1.d=
which don't contain secrets themselves when on a yubikey. That's nice to know,
since I've been wondering how it was working seemlessly while recalling that I
never fully set it up.

#+begin_quote
I think I ported over a configuration and needed it to =just work= ... when it
did, I didn't spend too much effort thinking about it. I can =scp= to transfer
to/from any host as long as one host has =ssh= and =gpg-agent= working.
#+end_quote

However, after doing so, =gpg -K= lists no private keys.

Also, =gpg -k= lists no public keys for those identities. IIRC the public keys are
required for private key operations... EDIT: they are.

**** =programs.gnupg.agent.settings=

I guess this creates an etc-like directory and gets merged into =~/.gnupg/*.conf=
the program's running state somehow.

**** =scdaemon.conf=

This just needs to reside inside =~/.gnupg/scdaemon.conf= I think

*** Misc Issues

For me, problems like this usually involve invalid state in =pcscd= some way and
some how.

**** porting a GnuPG configuration system

... from a previous system whether an -ixy system or not probably means:

+ your =pinentry= path will be messed up
+ and the =pcscd-driver= from your =scdaemon.conf=
+ The =nixos= settings don't cover =gpg.conf=, so import that file


**** pinentry

+ you won't get a popup or it may request on an alternate =GPG_TTY=, so check
  other vty's just in case.
+ for me, it's not popping up when responding to =gpg= operations only. not =ssh=
  operations.

**** sockets

It's possible that, but i need to check my other systems to see what =gpgconf
--list-dirs= shows...

This wasn't the issue though (but i still see =dirmngr= sockets, which should be
disabled by default)

* Initial Notes

** TL;DR:

idk much about nix really, so i may have borked the install

+ if it's possible only partially use =services.guix= and supply your own
  guix. the executables are designed to be portable anyways.
+ idk about first-order problems, but constructing systemd units with
  =/var/guix/profiles/...= links /should/ be possible . . .
  - (thinks very hard, runs into wall anyways)

**** User environment setup for =guix pull=

+ don't add =pkgs.guix= to user =.nix-profile= or =users.users.dc.packages=
  - also don't install =guix= using =nix-home=
+ mainly, ensure that =environment.sessionVariables= defines =XDG_CONFIG_PATH=
  and other =XDG= vars
  - nix =home-manager= may also do it, but this doesn't permit the nix
    builders to modify it for activation scripts (something about PAM and
    other processes ... something something)
  - if this is happening, =$PATH= includes =/guix/profile/bin=
  - =home-manager= is maybe not the place for XDG & some vars (idk)
+ if you run =guix describe= using =pkgs.guix=, it doesn't have repo history.
  - once you start adding to the store, it may not create links/etc correctly
    - you should probably start over. i encountered a few errors where =guix=
      (not =pkgs.guix=) refused to install links.
  - doing this in the console is easier because you can't have 50 shells with
    unique environments (env somewhat inherited from WM)

**** Problems with =services.guix=

+ maybe possible to unpack guix =.tar.gz= to =/gnu/store=
  - unless the =/gnu/store= exists (also remove =/var/guix/db=, etc
+ it may be possible to bootstrap guix from source instead
  - see the "Perfect Setup" instructions. This needs some automation to keep
    it up to date for =guix pull.
+ to restrict access to guix daemons by group membership, the services/etc
  need customization.

**** Existential problem

+ if =pkgs.guix= used by =services.guix= provide an incompatible =guix= or
  =guix-daemon= (particularly the latter), this may eventually cause problems
  - releases from =nixpkgs= should keep it reasonably up-to-date (it's
    pinned). the wrappers & service units likely hardcode the guix/daemon
    paths
  - you can easily bump this forward, but your system upgrades must build
    guix... which is an example of why you may like your system config
    decoupled from your =home-manager=, depending on wherein the deptree you
    build/overlay.



** Doom Emacs setup

| DOOMDIR | $HOME/.doom.d | EMACSDIR | $HOME/.emacs.doom |

clear out old =eln= code and =straight=

+ install the =.guix-profile with emacs, etc.=
+ =rm -rf $EMACSDIR/.local/{cache/eln,straight}=
+ run =doomup=. see [[https://github.com/dcunited001/ellipsis][scripts in dcunited001/ellipsis]]

*** Guile environment setup

Setting up a guix profile with a GC root for a project

#+begin_src shell
guix package  -L ~/.dotfiles/ellipsis -L ~/.dotfiles/dc \
	 -p .guix-profile -m manifest.scm
#+end_src

I assumed more guile setup, since =GUILE_LOAD_PATH= wasn't in my env, but
that's implicit in the =guix= wrapper ... i didn't think i'd need it, but i
had specified the load path incorrectly (misread module refs in errors)

*** doom.service

Ran into issues here, somewhat because systemd needed a restart.

Either dump the env with =systemctl --user show-environment= or set
=ExecStart=/bin/sh -c "guix shell -p $DOOMDIR/$GPROFILE -- env | sort
&& sleep 3"=

...... dammit, this is starting to look like, um, maybe a bad idea --
emacs may launch quite a few procs. I mean it's not that bad, but it
will drift. And I don't want to wonder why my wayland sessions
suddenly crash in 3 months. it's been so much more stable since Sawy
in 2021.


#+begin_example diff
diff -u /home/$USER/.dotfiles/nixos/systemd.user.env /home/$USER/.dotfiles/nixos/systemd.guix.env
--- /home/$USER/.dotfiles/nixos/systemd.user.env	2025-07-19 04:26:35.689472526 -0400
+++ /home/$USER/.dotfiles/nixos/systemd.guix.env	2025-07-19 04:29:35.086260723 -0400
@@ -8,6 +8,7 @@
 EDITOR=emacsclient -- -nw
 EMACSDIR=/home/$USER/.emacs.doom
 EMACS=/home/$USER/.doom.d/.guix-profile/bin/emacs
+EMACSLOADPATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/share/emacs/site-lisp
 GDK_BACKEND=wayland
@@ -15,13 +16,15 @@
 GPROFILE=.guix-profile
 GTK_A11Y=none
 GTK_PATH=/home/$USER/.config/guix/current/lib/gtk-2.0:/home/$USER/.config/guix/current/lib/gtk-3.0:/home/$USER/.config/guix/current/lib/gtk-4.0:/home/$USER/.guix-home/profile/lib/gtk-2.0:/home/$USER/.guix-home/profile/lib/gtk-3.0:/home/$USER/.guix-home/profile/lib/gtk-4.0:/home/$USER/.guix-profile/lib/gtk-2.0:/home/$USER/.guix-profile/lib/gtk-3.0:/home/$USER/.guix-profile/lib/gtk-4.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-2.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-3.0:/home/$USER/.local/share/flatpak/exports/lib/gtk-4.0:/var/lib/flatpak/exports/lib/gtk-2.0:/var/lib/flatpak/exports/lib/gtk-3.0:/var/lib/flatpak/exports/lib/gtk-4.0:/home/$USER/.nix-profile/lib/gtk-2.0:/home/$USER/.nix-profile/lib/gtk-3.0:/home/$USER/.nix-profile/lib/gtk-4.0:/home/$USER/.local/state/nix/profile/lib/gtk-2.0:/home/$USER/.local/state/nix/profile/lib/gtk-3.0:/home/$USER/.local/state/nix/profile/lib/gtk-4.0:/home/$USER/.local/state/nix/profile/lib/gtk-2.0:/home/$USER/.local/state/nix/profile/lib/gtk-3.0:/home/$USER/.local/state/nix/profile/lib/gtk-4.0:/etc/profiles/per-user/$USER/lib/gtk-2.0:/etc/profiles/per-user/$USER/lib/gtk-3.0:/etc/profiles/per-user/$USER/lib/gtk-4.0:/nix/var/nix/profiles/default/lib/gtk-2.0:/nix/var/nix/profiles/default/lib/gtk-3.0:/nix/var/nix/profiles/default/lib/gtk-4.0:/run/current-system/sw/lib/gtk-2.0:/run/current-system/sw/lib/gtk-3.0:/run/current-system/sw/lib/gtk-4.0
-GUIX_LOCPATH=/home/$USER/.config/guix/current/lib/locale:/home/$USER/.guix-home/profile/lib/locale:/home/$USER/.guix-profile/lib/locale
+GUIX_ENVIRONMENT=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile
+GUIX_LOCPATH=/home/$USER/.config/guix/current/lib/locale:/home/$USER/.guix-home/profile/lib/locale:/home/$USER/.guix-profile/lib/locale:/gnu/store/j56gxg83w1a50h2bw6531by30kmc277y-glibc-utf8-locales-2.41/lib/locale
+_=/home/$USER/.config/guix/current/bin/guix
 HOME=/home/dc
 HYPRLAND_CONFIG=/home/$USER/.dotfiles/.config/hypr/kratos.hyprland.conf
 HYPRLAND_INSTANCE_SIGNATURE=9958d297641b5c84dcff93f9039d80a5ad37ab00_1752911948_1640879395
-INFOPATH=/home/$USER/.config/guix/current/info:/home/$USER/.config/guix/current/share/info:/home/$USER/.guix-home/profile/info:/home/$USER/.guix-home/profile/share/info:/home/$USER/.guix-profile/info:/home/$USER/.guix-profile/share/info:/home/$USER/.local/share/flatpak/exports/info:/home/$USER/.local/share/flatpak/exports/share/info:/var/lib/flatpak/exports/info:/var/lib/flatpak/exports/share/info:/home/$USER/.nix-profile/info:/home/$USER/.nix-profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/etc/profiles/per-user/$USER/info:/etc/profiles/per-user/$USER/share/info:/nix/var/nix/profiles/default/info:/nix/var/nix/profiles/default/share/info:/run/current-system/sw/info:/run/current-system/sw/share/info
-INVOCATION_ID=25541bb5e9094e27b3ec6c05b39802e1
-JOURNAL_STREAM=9:60961
+INFOPATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/share/info:/home/$USER/.config/guix/current/info:/home/$USER/.config/guix/current/share/info:/home/$USER/.guix-home/profile/info:/home/$USER/.guix-home/profile/share/info:/home/$USER/.guix-profile/info:/home/$USER/.guix-profile/share/info:/home/$USER/.local/share/flatpak/exports/info:/home/$USER/.local/share/flatpak/exports/share/info:/var/lib/flatpak/exports/info:/var/lib/flatpak/exports/share/info:/home/$USER/.nix-profile/info:/home/$USER/.nix-profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/home/$USER/.local/state/nix/profile/info:/home/$USER/.local/state/nix/profile/share/info:/etc/profiles/per-user/$USER/info:/etc/profiles/per-user/$USER/share/info:/nix/var/nix/profiles/default/info:/nix/var/nix/profiles/default/share/info:/run/current-system/sw/info:/run/current-system/sw/share/info
+INVOCATION_ID=0ee71ed9d4374f6594d9b668a48b0938
+JOURNAL_STREAM=9:61433
 LANG=en_US.UTF-8
 LD_LIBRARY_PATH=/nix/store/0vsc2vbzkhm5cdyg2c9rywdrbh0hycs2-pipewire-1.4.5-jack/lib
@@ -40,18 +43,17 @@
-PATH=/run/wrappers/bin:/home/$USER/.config/guix/current/bin:/home/$USER/.guix-home/profile/bin:/home/$USER/.guix-profile/bin:/home/$USER/.local/share/flatpak/exports/bin:/var/lib/flatpak/exports/bin:/home/$USER/.nix-profile/bin:/home/$USER/.local/state/nix/profile/bin:/home/$USER/.local/state/nix/profile/bin:/etc/profiles/per-user/$USER/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/2gkh9v7wrzjq6ws312c6z6ajwnjvwcmb-binutils-wrapper-2.44/bin:/nix/store/xizrx0pmgjbsx6miwk352nf77jw2rb60-hyprland-qtutils-0.1.4/bin:/nix/store/7gspl5402q53m36mavbq3rxxlh70kqfv-pciutils-3.13.0/bin:/nix/store/9aanvmg69mvcs192ikk7rvs3gw1rgy37-pkgconf-wrapper-2.4.3/bin
+PATH=/gnu/store/2swxcw7ii7gir1kn6rm0xqrp4lr1j77w-profile/bin:/run/wrappers/bin:/home/$USER/.config/guix/current/bin:/home/$USER/.guix-home/profile/bin:/home/$USER/.guix-profile/bin:/home/$USER/.local/share/flatpak/exports/bin:/var/lib/flatpak/exports/bin:/home/$USER/.nix-profile/bin:/home/$USER/.local/state/nix/profile/bin:/home/$USER/.local/state/nix/profile/bin:/etc/profiles/per-user/$USER/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/m10ngkbjxbj0lqdq6rsyys9h2gj1f27d-util-linux-2.41-bin/bin:/nix/store/bflsjj2cndl8fz690nx8aigf2x3q16d4-newt-0.52.24/bin:/nix/store/7x3jv5lbhc836hczmx642jg8gwwsyvf6-libnotify-0.8.6/bin:/nix/store/0nxvi9r5ymdlr2p24rjj9qzyms72zld1-bash-interactive-5.2p37/bin:/nix/store/ymmaa926pv3f3wlgpw9y1aygdvqi1m7j-systemd-257.6/bin:/nix/store/avhdfiwxm991wgmcgvmhmvgvwn9gavq6-python3-3.12.11-env/bin:/nix/store/gwk546kxw024v371l34sw11zvzqrxhdv-dmenu-5.3/bin:/nix/store/2gkh9v7wrzjq6ws312c6z6ajwnjvwcmb-binutils-wrapper-2.44/bin:/nix/store/xizrx0pmgjbsx6miwk352nf77jw2rb60-hyprland-qtutils-0.1.4/bin:/nix/store/7gspl5402q53m36mavbq3rxxlh70kqfv-pciutils-3.13.0/bin:/nix/store/9aanvmg69mvcs192ikk7rvs3gw1rgy37-pkgconf-wrapper-2.4.3/bin
 PWD=/home/dc
 QT_QPA_PLATFORM=wayland
 QTWEBKIT_PLUGIN_PATH=/home/$USER/.config/guix/current/lib/mozilla/plugins/:/home/$USER/.guix-home/profile/lib/mozilla/plugins/:/home/$USER/.guix-profile/lib/mozilla/plugins/:/home/$USER/.local/share/flatpak/exports/lib/mozilla/plugins/:/var/lib/flatpak/exports/lib/mozilla/plugins/:/home/$USER/.nix-profile/lib/mozilla/plugins/:/home/$USER/.local/state/nix/profile/lib/mozilla/plugins/:/home/$USER/.local/state/nix/profile/lib/mozilla/plugins/:/etc/profiles/per-user/$USER/lib/mozilla/plugins/:/nix/var/nix/profiles/default/lib/mozilla/plugins/:/run/current-system/sw/lib/mozilla/plugins/
-_=/run/current-system/sw/bin/env
 SDL_VIDEODRIVER=wayland
 SHELL=/run/current-system/sw/bin/zsh
-SYSTEMD_EXEC_PID=12911
+SYSTEMD_EXEC_PID=13165
 TERMINFO_DIRS=/home/$USER/.config/guix/current/share/terminfo:/home/$USER/.guix-home/profile/share/terminfo:/home/$USER/.guix-profile/share/terminfo:/home/$USER/.local/share/flatpak/exports/share/terminfo:/var/lib/flatpak/exports/share/terminfo:/home/$USER/.nix-profile/share/terminfo:/home/$USER/.local/state/nix/profile/share/terminfo:/home/$USER/.local/state/nix/profile/share/terminfo:/etc/profiles/per-user/$USER/share/terminfo:/nix/var/nix/profiles/default/share/terminfo:/run/current-system/sw/share/terminfo
#+end_example

** System Guix

See ./modules/services/guix.nix

+ =stateDir= forces compilation of =pkgs.guix= when the pin changes...
  - but I really need the system entirely on one partition

** User Guix

#+begin_quote
NOTE: this was an earlier response to trying to get guix to work. It's not
current and probably not 100% accurate.

There's still some kind of problem with updating the =$USER= Guix profile and I
haven't gotten to updating the root Guix profile yet. The fix is above in the
section on "Updating =$USER/.config/guix/current=". I'll probably file an issue
soon, but everything's been in flux.
#+end_quote



#+begin_example nix
{pkgs,...}:
{
user.users.dc.packages = [
  # ...
  pkgs.guix

  # overrides are bad (this is wrong) ...
  #   and idk, but if I superstitiously repeat pkgs.foobar,
  #   then for now, super douple plus good
  # pkgs.guix.override { stateDir = "/gnu/var"; }
}
#+end_example

*** Fix Activation script

See [[https://discourse.nix.org/t/why-does-nixos-not-set-xdg-config-home-by-default/45296][Why does NixOS not set =$XDG_CONFIG_HOME= by default]]

Maybe this occured because I ported in my home directory. I removed
=~/.profile= to check the environment.

=/nix/profile/bin=

- should be =$XDG_STATE_HOME/nix/profile/bin=
- the link =$XDG_STATE_HOME/nix/profile= doesn't exist.
- i'm not sure whether it's supposed to link to
  =/nix/var/nix/profiles/per-user/$USER/channels=

=/guix/current/bin=

- same thing: should link to =$XDG_CONFIG_HOME/guix/current/bin=
- the link =$XDG_CONFIG_HOME/guix/current= /does/ exist
- the link gets created by the activation script, which never actually
  creates the =/gnu/var/guix/profiles/per-user/$USER/current-guix=. i
  set =services.guix.stateDir = /gnu/var= so it's a bit different. that
  threw me for a loop when debugging.

so for me, I needed to manually create that by running:

#+begin_src sh
# in bash, fresh login
$prof=$XDG_CONFIG_HOME/guix/current
guix package -p $prof -i guix # install the package

# ensure path is right

GUIX_PROFILE=$prof
source $prof/etc/profile

# now guix pull works
guix pull

# logout of vty & window manager, login with fresh env
echo $PATH | tr ':' '\n'

# the profile is still incorrect in the path (since the activation script was created incorrectly...)
#+end_src

maybe it was my install, idk. the process for =nix= is likely similar. I
have a feeling once the correct =$PATH= is exported, then a system
update will allow the nix builder to build correctly

**** Original =$PATH=

testing file exists using =stat $(echo $PATH | tr ":" " ")=

| y   | link points to file that exists |
| !!! | invalid link                    |

root $PATH

| y   | /run/wrappers/bin                    |
| !!! | /guix/current/bin                    |
|     | /root/.guix-home/profile/bin           |
|     | /root/.guix-profile/bin                |
|     | /root/.local/share/flatpak/exports/bin |
| y   | /var/lib/flatpak/exports/bin         |
|     | /root/.nix-profile/bin                 |
| !!! | /nix/profile/bin                     |
|     | /root/.local/state/nix/profile/bin     |
|     | /etc/profiles/per-user/root/bin      |
|     | /nix/var/nix/profiles/default/bin    |
| y   | /run/current-system/sw/bin           |

user $PATH

| y   | /home/$USER/.local/bin                       |
| y   | /run/wrappers/bin                          |
| !!! | /guix/current/bin                          |
|     | /home/$USER/.guix-home/profile/bin           |
|     | /home/$USER/.guix-profile/bin                |
| y   | /home/$USER/.local/share/flatpak/exports/bin |
| y   | /var/lib/flatpak/exports/bin               |
|     | /home/$USER/.nix-profile/bin                 |
| !!! | /nix/profile/bin                           |
|     | /home/$USER/.local/state/nix/profile/bin     |
| y   | /etc/profiles/per-user/$USER/bin           |
|     | /nix/var/nix/profiles/default/bin          |
| y   | /run/current-system/sw/bin                 |


**** User Guix =stateDir= mismatch

#+begin_quote
This was what I was speculating...

I actually did end up linking =/var/guix -> /gnu/var/guix= instead of creating
a new subvolume at =/var/guix=. it seems to work.
#+end_quote

The system has a single store with various GC roots. Usually have two main
profiles. I don't think installing Guix with =nix home-manager= is going to
work.

+ A symlink seems to work to fix the =stateDir= mismatch between the system &
  user guix: =sudo ln -s /gnu/var/guix /var/guix=. It seems to work...
  avoiding the override.
  - i'm seeing a build failure when updating user's default profile.
  - using =guix gc --verify={contents,repair}= somewhat frequently probably
    couldn't hurt. store corruption is the main worry, esp. if sharing between
    systems...
  - it also eliminates the recompile of guix (system+user) for at least user
    (guix is pinned on nix).
+ I have confidence that the =/var/guix= path is =12-factor= ...
  - sharing b/w systems is somewhat out of scope for design.
  - the host can share a store to a hosted VM. CI requires special GC
    configuration (& other concerns) for storage replication & distributed
    substitutes. So there are at least two use cases that require decoupling.
  - I'm mostly curious.

in theory, I can have btrfs subvolumes for /var on guix system the sqlite db
cache needs to match for both nix/guix systems... probably not a great idea,
but as long as sqlite cache is in tact, it should work.
