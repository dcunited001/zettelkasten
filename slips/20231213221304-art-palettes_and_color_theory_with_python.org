:PROPERTIES:
:ID:       66e4601b-ae1d-4766-9682-a7ee6efcb515
:END:
#+TITLE: Art: Palettes and Color Theory With Python
#+CATEGORY: slips
#+TAGS:
#+PROPERTY: header-args:jupyter-python  :session jupyter-python-11ac4ffa05c51f3a9ea6a9c6a02a56df


* Resources
+ Python [[https://pypi.org/project/extcolors/][extcolors]]
+ [[https://michaellynnadams.com/color-chart-exercise-for-oil-paints/][Richard Schmid Color Charts]] from Michelle Lynn Adams
+ Using venv in org-babel ([[https://github.com/doomemacs/doomemacs/issues/2416][doomemacs issue 2416]]) or just use =jupyter.el=

* Notes

Set =:kernel emacs-ipykernel= to use another kernel ... or run on the network
for bonus points.

** Finding python

#+begin_src jupyter-python
!pyenv which python
#+end_src

#+RESULTS:
: /my/lang/.pyenv/versions/3.12.1/bin/python

#+begin_src jupyter-python
!pwd
#+end_src

#+RESULTS:
: /this/dir

* Test Run

All the images of palettes were sourced from Michelle Lynn Adams' blog on
[[https://michaellynnadams.com/color-chart-exercise-for-oil-paints/][Richard Schmid Color Charts]].

#+ATTR_HTML: :style width:800px;
[[file:img/art/palettes/_basic.jpg]]

** As An Image

The palette as an image

#+begin_src jupyter-python
!extcolors "img/art/palettes/_basic.jpg" --image "img/art/palettes/_basic-palette" --silence --tolerance 10
!mogrify -resize "10%" "img/art/palettes/_basic-palette.png"
#+end_src

#+RESULTS:

For now, it's not too useful to an artist, since you can't easily tell which
colors are duplicated or which belong to each pigment. To intelligently sort the
colors in the palette it's going to need a bit of python or manual
cropping/labelling. The gimp pallets would need to be concatenated and/or
organized. Honestly, it's easier to just use images for digital painting
palettes.

#+ATTR_HTML: :style height:400px;
[[file:img/art/palettes/_basic-palette.png]]

** As a GIMP Palette

A gimp palette to import as a Krita resource

#+begin_src jupyter-python
!extcolors "img/art/palettes/_basic.jpg" --gpl "img/art/palettes/_basic" --silence --tolerance 10
#+end_src

#+RESULTS:

file:img/art/palettes/_basic.gpl

* Palettes

** Dimensions

The palettes I downloaded are basically pixel-perfect. For the level of effort
she went through (and for other reasons), I'm also assuming she handled the
photography well. This simplifies quite a bit for me.

+ There are 5 rows and 11 columns.
+ The squares are all about =70px x 70ox=. Each square has a =50px x 50px=
  region that lines up across the lattice.
+ Since the images are head on, the squares are translated by =85px= along the X
  and Y. This is maintained throughout all the images.
+ The top-left corner is at =60,75= and the top-left corner of the bottom right
  square is at =(65,75) + (11*85,5*85) = (910,415)= ... (just some personal
  notes on dims, in case I can't finish everything now).

The dimensions and consistency give enough wiggle room to handle basically
everything in one go with bash scripts using ImageMagick's =mogrify= to cut the
squares into their own images.

+ Some metadata describing the pixels and filenames in yaml is needed.
+ This needs to map to a pigment naming scheme for the generated images.
+ I'll average across the color for each cropped square ... or something.

** Script

I want a python tool that can generate multiple palettes given pigment
IDs/names, but first I just want one palette, though I may want to sort it in
various ways.

#+begin_quote
The main problem with combinatorics is that it just overloads you with details.
#+end_quote

You can simply concatenate RGB values to the the GIMP pallets, so it's really a
matter of extracting the value for each square and then using the metadata to
tell a script which colors to pull.

*** Ideas for Later

**** PyVista: Plot Palettes In Color Space

I'd like to plot the colors in various spaces in PyVista or something.

It would be handy to determine which colors are most unique to a specific
pigment. In other words...

+ What volume of a colorspace can I reach from color X by mixing color Y?
+ Where do these regions overlap?

Of course, there are a few places, at least, where the images/colors have had
their values shifted:

+ The painters eye
+ Lighting spectrum and highlights/shadows.
+ The camera sensors (activations for CMOS sensors, stored as RGB data)
+ Any image processing (reencoded as RGB data)

None of this really accounts for what the colors look like IRL, since the way
our cones/rods work is based on their affinity for color/intensity. We do see
three colors, but the rods handle value a bit differently (there is no value
channel in RGB). The way we perceive color is based on the spectrum.

... which I guess should have interesting implications for [[https://www.telescope-optics.net/eye_spectral_response.htm][how we would see
"value" in red objects]] -- if you could eliminate orange wavelengths from the
reflected spectrum.

#+begin_quote
In the Artists Handbook's pigment spectrum graphs, the Reds with minimal
reflectance above 600nm seem to be the only graphs where "Dark" is noted in the
bottom right corner. It's not really explained.
#+end_quote

Your vision also transitions from the scotopic to metopic to phototopic modes of
vision (terms i'll never actually remember), depending on the distance to fovea
and illuminance.

[[file:img/art/eye-spectral-response.png]]

* Roam
+ [[id:b4c096ee-6e40-4f34-85a1-7fc901e819f5][Python]]
+ [[id:beafc05d-75b4-4013-8b43-9c0483a30328][Art]]
