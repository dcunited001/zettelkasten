:PROPERTIES:
:ID:       66e4601b-ae1d-4766-9682-a7ee6efcb515
:END:
#+TITLE: Art: Palettes and Color Theory With Python
#+CATEGORY: slips
#+TAGS:
#+PROPERTY: header-args:jupyter-python  :session jupyter-python-11ac4ffa05c51f3a9ea6a9c6a02a56df


* Resources

+ Python [[https://pypi.org/project/extcolors/][extcolors]]
+ [[https://michaellynnadams.com/color-chart-exercise-for-oil-paints/][Richard Schmid Color Charts]] from Michelle Lynn Adams
+ Using venv in org-babel ([[https://github.com/doomemacs/doomemacs/issues/2416][doomemacs issue 2416]]) or just use =jupyter.el=

** Python

+ [[https://dev.to/codesphere/visualizing-the-color-spaces-of-images-with-python-and-matplotlib-1nmk][Visualizing Color Spaces]]

* Notes

Set =:kernel emacs-ipykernel= to use another kernel ... or run on the network
for bonus points.

** Finding python

#+begin_src jupyter-python
!pyenv which python
#+end_src

#+RESULTS:
: /my/lang/.pyenv/versions/3.12.1/bin/python

#+begin_src jupyter-python
!pwd
#+end_src

#+RESULTS:
: /this/dir

* Test Run

All the images of palettes were sourced from Michelle Lynn Adams' blog on
[[https://michaellynnadams.com/color-chart-exercise-for-oil-paints/][Richard Schmid Color Charts]].

#+ATTR_HTML: :style width:800px;
[[file:img/art/palettes/_basic.jpg]]

** As An Image

The palette as an image

#+begin_src jupyter-python
!extcolors "img/art/palettes/_basic.jpg" --image "img/art/palettes/_basic-palette" --silence --tolerance 10
!mogrify -resize "10%" "img/art/palettes/_basic-palette.png"
#+end_src

#+RESULTS:

For now, it's not too useful to an artist, since you can't easily tell which
colors are duplicated or which belong to each pigment. To intelligently sort the
colors in the palette it's going to need a bit of python or manual
cropping/labelling. The gimp pallets would need to be concatenated and/or
organized. Honestly, it's easier to just use images for digital painting
palettes.

#+ATTR_HTML: :style height:400px;
[[file:img/art/palettes/_basic-palette.png]]

** As a GIMP Palette

A gimp palette to import as a Krita resource

#+begin_src jupyter-python
!extcolors "img/art/palettes/_basic.jpg" --gpl "img/art/palettes/_basic" --silence --tolerance 10
#+end_src

#+RESULTS:

file:img/art/palettes/_basic.gpl


* G'MIC


** Resources

*** Filter Ideas

Useful filters for palette selection

+ [[https://piaille.fr/@gmic][G'MIC Mastadon]]
+ [[https://gmic.eu/gmic300/][3.0.0 Release]]

** Ideas


*** Colormap

+ Chop into pieces or identify coords for input.
+ Use a grid system: for a 16x9 image: subdivide (h/16)-pixel sized blocks
+ Maybe plot a grid on the image to select blocks.
+ Pick block indexes $\left(x_i,y_i\right)$ to send to G'MIC. Use CLI options to
  get raw data from the output.
+ Send the output to something that plots the colors in a colorspace.

*** Laplacian
****** TODO finish editing gmic/laplacian (but i don't think it's as useful as i thought)
+ $Laplacian \circ Sobel \circ dilate$ this will increase the appparent edges
  without appearing to blur (use with small =del_smoothness= value)

**** Landscape Filter

Similar to the Sobel filter, the Laplacian filter identifies edges, but it's
color-aware.  It evaluates a kernel per-pixel to calculate a directional
derivative. It looks for the nearby changes in pixel value adds a
position-shifted delta back onto the image.

#+NAME: gmic_del_landscape
| del_smoothness      | 1.00 |
| del_min_threshold   |   50 |
| del_max_threshold   |   70 |
| del_absvalue        |      |
| del_negative_colors |    1 |

+ del_negative_colors=0 :: appears to add $\Delta RGB$ back into the
  interiors of shapes. Using the =subtraction= blend-mode here is a smarter way
  to sharpen the image ... but it's computationally expensive.
+ del_negative_colors=1 :: appears to enhance color opposition around
  edges. With a bit of imagination, it's basically a =Van Gogh= filter.
+ With the exception of the image boundaries, summing over the Laplacian should
  conserve values. i.e. $|\pm\Delta RGB| \approx |\mp\Delta RGB|$. So setting the
  blend-mode to normal, addition, subtraction is sufficient.

#+begin_src jupyter-python
!extcolors "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.jpg" --image "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.palette" --silence --tolerance 10
!mogrify -resize "10%" "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.palette.png"
#+end_src

#+RESULTS:

#+begin_src jupyter-python
!extcolors "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.orig.jpg" --image "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.orig.palette" --silence --tolerance 10
!mogrify -resize "10%" "/data/xdg/Documents/art/reference/20231225-xmas-mom/_irises.orig.palette.png"
#+end_src

#+RESULTS:

***** Filter masks:

Some blendmodes will require noise reduction. The Laplacian filter could benefit
from edge detection.

Adjust Laplacian results to emphasize specific color deltas:

+ Color to Alpha (post-process)
+ Levels (Hue, post-process)

Can also use normal masking or channel-based masking, but it requires more
layers.


**** Misc

The right settings combine well with the layer blending modes:


+ set the bottom layer to the original image, top to laplacian results
+ the superposition of both can be further refined with filter transformations
  in between the layers.
+ The =boolean= blending modes actually produce good good results ... maybe.


*** CLUT


* Palettes

** Dimensions

The palettes I downloaded are basically pixel-perfect. For the level of effort
she went through (and for other reasons), I'm also assuming she handled the
photography well. This simplifies quite a bit for me.

+ There are 5 rows and 11 columns.
+ The squares are all about =70px x 70ox=. Each square has a =50px x 50px=
  region that lines up across the lattice.
+ Since the images are head on, the squares are translated by =85px= along the X
  and Y. This is maintained throughout all the images.
+ The top-left corner is at =60,75= and the top-left corner of the bottom right
  square is at =(65,75) + (11*85,5*85) = (910,415)= ... (just some personal
  notes on dims, in case I can't finish everything now).

The dimensions and consistency give enough wiggle room to handle basically
everything in one go with bash scripts using ImageMagick's =mogrify= to cut the
squares into their own images.

+ Some metadata describing the pixels and filenames in yaml is needed.
+ This needs to map to a pigment naming scheme for the generated images.
+ I'll average across the color for each cropped square ... or something.

** Script

I want a python tool that can generate multiple palettes given pigment
IDs/names, but first I just want one palette, though I may want to sort it in
various ways.

#+begin_quote
The main problem with combinatorics is that it just overloads you with details.
#+end_quote

You can simply concatenate RGB values to the the GIMP pallets, so it's really a
matter of extracting the value for each square and then using the metadata to
tell a script which colors to pull.

*** Ideas for Later

**** PyVista: Plot Palettes In Color Space

I'd like to plot the colors in various spaces in PyVista or something.

It would be handy to determine which colors are most unique to a specific
pigment. In other words...

+ What volume of a colorspace can I reach from color X by mixing color Y?
+ Where do these regions overlap?

Of course, there are a few places, at least, where the images/colors have had
their values shifted:

+ The painters eye
+ Lighting spectrum and highlights/shadows.
+ The camera sensors (activations for CMOS sensors, stored as RGB data)
+ Any image processing (reencoded as RGB data)

None of this really accounts for what the colors look like IRL, since the way
our cones/rods work is based on their affinity for color/intensity. We do see
three colors, but the rods handle value a bit differently (there is no value
channel in RGB).

*** Notes on color perception

The way we perceive color is based on the spectrum.

... which I guess should have interesting implications for how we would see "value" in red objects -- if you could eliminate orange wavelengths from the
reflected spectrum.

#+begin_quote
In the Artists Handbook's pigment spectrum graphs, the Reds with minimal
reflectance above 600nm seem to be the only graphs where "Dark" is noted in the
bottom right corner. It's not really explained.
#+end_quote

Your vision also transitions from the [[https://www.telescope-optics.net/eye_spectral_response.htm][scotopic to metopic to phototopic modes of
vision]] (terms i'll never actually remember), depending on the distance to
fovea and illuminance.

[[file:img/art/eye-spectral-response.png]]

Other misc info, now that i'm unpacking this.

+ Violets should have a similar but complementary problem as deep reds. Violets
  and blues will tend to become indistinguishable as colors in low light (it
  depends on the luminance req. for S-cones)
+ Everything appears to be blue in moonlight because the light source is
  blueshifted and dim (while being relatively brighter than other light sources
  at night). It is not simply the Purkinje effect that makes the moon appear
  blue (see [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6961272/][spectrum charts in this article]])
+ In low light, yellows/greens apparently retain wider perceived color variety
  relative to other colors.
+ For colors from cyan through yellows, the large spectral overlap cones/rods
  could complicate judging values, esp for high-chroma colors. This may depend
  on the spectra of pigments used to tone these colors down.
+ It would be easier to judge how a color will reduce chrome/value (for teals
  through yellows) if it has a "noisy" spectrum like iron oxides, green earth,
  umber, etc. This assumes the tinting strength, etc. is not an issue.
+ The earth tones are useful because they create predictable results. This is
  one of the first things I figured out when looking at spectrums in Artist's
  Handbook. The other colors are highly non-linear (or complicated). The earth
  tones are like wideband filters on the light spectrum. There are no sharp
  peaks. They either affect the hue or they don't (they usually will). They
  won't really introduce new hues to the "linear hull" -- it's actually more
  complicated, since they introduce many new hue-vectors to the linear hull but
  at reduced intensity, so whatever hue was in the paint before adding earth
  tone is still the dominant hue.
+ This depends on the light source, so flourscent lighting never did anyone any
  favors. Whether your paintings can take natural light really depends on the
  pigments you use. This all makes expression of color a very hard problem,
  since it's tricky to get high-chroma out of colors mixed with earth tones. But
  mixing any colors should actually reduce the chroma, though it depends on
  perception.

Also, one more thing: mixing and preservation in organics vs inorganics.

+ Organics are typically easier to mix: smaller particles, fewer issues with
  grain size really. So some have high tinting strength. They're just naturally
  soluble. But organic chemicals form lattices where the lattice bonds are
  rarely much stronger than the covalent bonds ... if they form a lattice at
  all. This means they're readily accessed by volatile/oxidizing compounds in
  the paint solution /and/ gradually degrading from UV radiation which
  introduces the aforementioned volatile componds.
+ As long as a pigment is in a lattice, it can only be chemically attacked from
  the outside. The lattice doesn't really protect it from UV radiation, but the
  larger mass of particles requires much larger forces to act on the particles
  to disrupt bonds. A photon might knock the electrons off/out, but the massive
  particles aren't going very far, esp if they're docked in a lattice. I guess
  as long as the paint doesn't soap up or fall off the canvas, then you're fine.
+ For inorganics, the strength of the lattice makes it hard to get smaller grain
  size (it takes more milling). I don't know how the size of Cadmium red affects
  its tinting strength, but it's known to be high.


* Roam
+ [[id:b4c096ee-6e40-4f34-85a1-7fc901e819f5][Python]]
+ [[id:beafc05d-75b4-4013-8b43-9c0483a30328][Art]]
