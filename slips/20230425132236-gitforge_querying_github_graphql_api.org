:PROPERTIES:
:ID:       38d0b5bb-ec7b-4fac-ae15-049071ea4108
:END:
#+TITLE: Gitforge: Querying Github GraphQL API
#+CATEGORY: slips
#+TAGS:
* Roam
+ [[id:8d789c98-5e74-4bf8-9226-52fb43c5ca51][Gitforge]]
+ [[id:7a4a7eea-5795-44e5-86e8-eec2afebf110][GraphQL]]
+ [[id:8fb0a586-9c0f-4f36-b1ab-dc5c26681d15][Open Source]]

* Docs

+ [[https://medium.com/@tharshita13/github-graphql-api-cheatsheet-38e916fe76a3][Github GraphQL Cheatsheet]]

See [[https://github.com/magit/ghub/blob/main/lisp/ghub-graphql.el][ghub-graphql.el]] in [[https://github.com/magit/ghub][magit/ghub]] for API, particularly the queries defined as
=defconstant= like =ghub-fetch-repository= and the matching =cl-defun=.

And see [[https://github.com/vermiculus/graphql.el][vermiculus/graphql.el]] for graphql queries generally.

#+begin_src emacs-lisp
(setq-local org-confirm-babel-evaluate nil)
#+end_src

** Query Format for Search Interface

#+begin_src graphql

query($org:String!){
  search (
    type:REPOSITORY,
    query: """
      stars:>100
      size:>2000
      pushed:>=2020-08-08
    """, last: 100) {
    repos: edges {
      repo: node {
        ... on Repository {
          url

          allIssues: issues {
            totalCount
          }
          openIssues: issues(states:OPEN) {
            totalCount
          }
        }
      }
    }
  }
}

#+end_src

* Oh so now I figure it out

Oh and apparently =magit= and =forge= will handle managing an organization's
repositories for you -- including pulling/syncing. I would have known this if
either of two things had happened earlier:

+ I encounter and briefly work alongside someone who needs to read source code
  in volume (probably someone from San Francisco, not Roanoke)
+ I had gotten my GPG key to enable integrating Emacs API's earlier.

I've been thinking about managing code like this using repo with automated XML
for 2+ years at least. Oh, but now that I go to see if I can "add a repository"
using Forge for the exact same thing -- oh that's when I find out how you do
these things.

Is it any wonder that most open source is 99% corporate if you can't easily pull
the KDE or Gnome repositories? As in all of them -- without running a custom ISO
like KDE Neon. And I guess you can get that from the source RPM's, but who is
going to tell you that? Nobody.

Repo is still better for this purpose though.

* Querying repositories

#+begin_example emacs-lisp
(graphql-query
 (myField1 myField2 (myEdges (edges (node myField3)))))
#+end_example

#+RESULTS:
: query{__schema{types{name{kind description fields{name}}}}}

** Check API Rate Limit

Running each block with a =:var= that references another block will run that
again.

#+begin_src emacs-lisp :results value code :exports code
(ghub-graphql-rate-limit)
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
((limit . 5000)
 (cost . 1)
 (remaining . 5000)
 (resetAt . "2023-05-01T23:35:35Z"))
#+end_src

** List An Organization's Repositories

Get the core repositories. These should go into =/data/ecto/tensorflow/core=.

#+name: nrepos
#+begin_src emacs-lisp
100
#+end_src

#+RESULTS: nrepos
: 100

#+name: tensorflow-repos
#+begin_src emacs-lisp :var nrepos=200 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "tensorflow"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

#+RESULTS: tensorflow-repos
| data | (organization (repositories (edges ((node (owner (login . tensorflow)) (name . tensorflow) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tensorflow) (updatedAt . 2023-04-26T13:30:55Z) (isArchived))) ((node (owner (login . tensorflow)) (name . nmt) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/nmt) (updatedAt . 2023-04-26T13:11:33Z) (isArchived))) ((node (owner (login . tensorflow)) (name . lucid) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/lucid) (updatedAt . 2023-04-26T12:58:56Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tensor2tensor) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tensor2tensor) (updatedAt . 2023-04-26T12:54:16Z) (isArchived))) ((node (owner (login . tensorflow)) (name . text) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/text) (updatedAt . 2023-04-26T12:53:06Z) (isArchived))) ((node (owner (login . tensorflow)) (name . io) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/io) (updatedAt . 2023-04-26T12:43:37Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tflite-micro) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/tflite-micro) (updatedAt . 2023-04-26T11:50:26Z) (isArchived))) ((node (owner (login . tensorflow)) (name . federated) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/federated) (updatedAt . 2023-04-26T11:19:57Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tflite-support) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tflite-support) (updatedAt . 2023-04-26T11:00:26Z) (isArchived))) ((node (owner (login . tensorflow)) (name . playground) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/playground) (updatedAt . 2023-04-26T10:55:06Z) (isArchived))) ((node (owner (login . tensorflow)) (name . build) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/build) (updatedAt . 2023-04-26T10:03:14Z) (isArchived))) ((node (owner (login . tensorflow)) (name . model-optimization) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/model-optimization) (updatedAt . 2023-04-26T09:55:10Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs) (updatedAt . 2023-04-26T09:49:26Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-models) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-models) (updatedAt . 2023-04-26T09:02:28Z) (isArchived))) ((node (owner (login . tensorflow)) (name . recommenders) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/recommenders) (updatedAt . 2023-04-26T09:01:43Z) (isArchived))) ((node (owner (login . tensorflow)) (name . ecosystem) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/ecosystem) (updatedAt . 2023-04-26T08:51:31Z) (isArchived))) ((node (owner (login . tensorflow)) (name . similarity) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/similarity) (updatedAt . 2023-04-26T08:47:07Z) (isArchived))) ((node (owner (login . tensorflow)) (name . docs-l10n) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/docs-l10n) (updatedAt . 2023-04-26T08:37:18Z) (isArchived))) ((node (owner (login . tensorflow)) (name . models) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/models) (updatedAt . 2023-04-26T08:08:18Z) (isArchived))) ((node (owner (login . tensorflow)) (name . transform) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/transform) (updatedAt . 2023-04-26T07:55:23Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tpu) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tpu) (updatedAt . 2023-04-26T07:38:53Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-core) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-core) (updatedAt . 2023-04-26T07:29:20Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . serving) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/serving) (updatedAt . 2023-04-26T06:29:40Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tflite-micro-arduino-examples) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/tflite-micro-arduino-examples) (updatedAt . 2023-04-26T06:16:21Z) (isArchived))) ((node (owner (login . tensorflow)) (name . recommenders-addons) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/recommenders-addons) (updatedAt . 2023-04-26T06:10:49Z) (isArchived))) ((node (owner (login . tensorflow)) (name . deepmath) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/deepmath) (updatedAt . 2023-04-26T05:44:14Z) (isArchived))) ((node (owner (login . tensorflow)) (name . agents) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/agents) (updatedAt . 2023-04-26T03:49:10Z) (isArchived))) ((node (owner (login . tensorflow)) (name . datasets) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/datasets) (updatedAt . 2023-04-26T03:04:46Z) (isArchived))) ((node (owner (login . tensorflow)) (name . minigo) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/minigo) (updatedAt . 2023-04-26T02:20:02Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . adanet) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/adanet) (updatedAt . 2023-04-26T01:48:05Z) (isArchived))) ((node (owner (login . tensorflow)) (name . examples) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/examples) (updatedAt . 2023-04-26T01:27:16Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfx) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfx) (updatedAt . 2023-04-25T20:53:47Z) (isArchived))) ((node (owner (login . tensorflow)) (name . ranking) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/ranking) (updatedAt . 2023-04-25T20:23:18Z) (isArchived))) ((node (owner (login . tensorflow)) (name . community) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/community) (updatedAt . 2023-04-25T19:47:48Z) (isArchived))) ((node (owner (login . tensorflow)) (name . docs) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/docs) (updatedAt . 2023-04-25T19:37:25Z) (isArchived))) ((node (owner (login . tensorflow)) (name . rust) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/rust) (updatedAt . 2023-04-25T18:41:57Z) (isArchived))) ((node (owner (login . tensorflow)) (name . profiler) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/profiler) (updatedAt . 2023-04-25T17:50:09Z) (isArchived))) ((node (owner (login . tensorflow)) (name . gnn) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/gnn) (updatedAt . 2023-04-25T17:31:05Z) (isArchived))) ((node (owner (login . tensorflow)) (name . swift) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/swift) (updatedAt . 2023-04-25T15:18:19Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . tcav) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tcav) (updatedAt . 2023-04-25T14:07:09Z) (isArchived))) ((node (owner (login . tensorflow)) (name . embedding-projector-standalone) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/embedding-projector-standalone) (updatedAt . 2023-04-25T13:59:37Z) (isArchived))) ((node (owner (login . tensorflow)) (name . compression) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/compression) (updatedAt . 2023-04-25T12:49:02Z) (isArchived))) ((node (owner (login . tensorflow)) (name . addons) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/addons) (updatedAt . 2023-04-25T12:36:39Z) (isArchived))) ((node (owner (login . tensorflow)) (name . java) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/java) (updatedAt . 2023-04-25T12:22:52Z) (isArchived))) ((node (owner (login . tensorflow)) (name . workshops) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/workshops) (updatedAt . 2023-04-25T12:15:03Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . quantum) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/quantum) (updatedAt . 2023-04-25T11:43:15Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-examples) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-examples) (updatedAt . 2023-04-25T09:09:29Z) (isArchived))) ((node (owner (login . tensorflow)) (name . privacy) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/privacy) (updatedAt . 2023-04-25T07:14:17Z) (isArchived))) ((node (owner (login . tensorflow)) (name . lingvo) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/lingvo) (updatedAt . 2023-04-25T06:54:32Z) (isArchived))) ((node (owner (login . tensorflow)) (name . probability) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/probability) (updatedAt . 2023-04-25T03:50:23Z) (isArchived))) ((node (owner (login . tensorflow)) (name . custom-op) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/custom-op) (updatedAt . 2023-04-25T03:20:45Z) (isArchived))) ((node (owner (login . tensorflow)) (name . hub) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/hub) (updatedAt . 2023-04-25T01:52:57Z) (isArchived))) ((node (owner (login . tensorflow)) (name . mesh) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/mesh) (updatedAt . 2023-04-25T00:34:43Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-node) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-node) (updatedAt . 2023-04-24T20:35:50Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . decision-forests) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/decision-forests) (updatedAt . 2023-04-24T14:14:38Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfrc) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfrc) (updatedAt . 2023-04-24T12:41:19Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . java-ndarray) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/java-ndarray) (updatedAt . 2023-04-24T12:30:51Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-wechat) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-wechat) (updatedAt . 2023-04-24T09:56:07Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tensorrt) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tensorrt) (updatedAt . 2023-04-24T06:50:08Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tensorboard) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tensorboard) (updatedAt . 2023-04-24T01:37:22Z) (isArchived))) ((node (owner (login . tensorflow)) (name . neural-structured-learning) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/neural-structured-learning) (updatedAt . 2023-04-23T18:56:22Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-tsne) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-tsne) (updatedAt . 2023-04-23T14:06:34Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . fairness-indicators) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/fairness-indicators) (updatedAt . 2023-04-23T08:18:22Z) (isArchived))) ((node (owner (login . tensorflow)) (name . data-validation) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/data-validation) (updatedAt . 2023-04-23T07:47:21Z) (isArchived))) ((node (owner (login . tensorflow)) (name . model-analysis) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/model-analysis) (updatedAt . 2023-04-22T15:18:42Z) (isArchived))) ((node (owner (login . tensorflow)) (name . haskell) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/haskell) (updatedAt . 2023-04-22T11:37:17Z) (isArchived))) ((node (owner (login . tensorflow)) (name . runtime) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/runtime) (updatedAt . 2023-04-22T10:57:40Z) (isArchived))) ((node (owner (login . tensorflow)) (name . graphics) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/graphics) (updatedAt . 2023-04-22T04:58:22Z) (isArchived))) ((node (owner (login . tensorflow)) (name . gan) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/gan) (updatedAt . 2023-04-21T15:31:24Z) (isArchived))) ((node (owner (login . tensorflow)) (name . mlir-hlo) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/mlir-hlo) (updatedAt . 2023-04-21T06:51:13Z) (isArchived))) ((node (owner (login . tensorflow)) (name . fold) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/fold) (updatedAt . 2023-04-20T07:17:54Z) (isArchived))) ((node (owner (login . tensorflow)) (name . mlir) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/mlir) (updatedAt . 2023-04-19T10:54:34Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . skflow) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/skflow) (updatedAt . 2023-04-19T07:55:19Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . benchmarks) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/benchmarks) (updatedAt . 2023-04-19T06:36:34Z) (isArchived))) ((node (owner (login . tensorflow)) (name . estimator) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/estimator) (updatedAt . 2023-04-19T05:51:48Z) (isArchived))) ((node (owner (login . tensorflow)) (name . model-card-toolkit) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/model-card-toolkit) (updatedAt . 2023-04-18T16:49:46Z) (isArchived))) ((node (owner (login . tensorflow)) (name . lattice) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/lattice) (updatedAt . 2023-04-18T09:24:46Z) (isArchived))) ((node (owner (login . tensorflow)) (name . codelabs) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/codelabs) (updatedAt . 2023-04-18T08:32:38Z) (isArchived))) ((node (owner (login . tensorflow)) (name . networking) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/networking) (updatedAt . 2023-04-18T02:50:21Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfx-addons) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/tfx-addons) (updatedAt . 2023-04-17T09:33:42Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tensorstore) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tensorstore) (updatedAt . 2023-04-17T07:29:29Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . java-models) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/java-models) (updatedAt . 2023-04-17T07:27:22Z) (isArchived))) ((node (owner (login . tensorflow)) (name . kfac) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/kfac) (updatedAt . 2023-04-17T07:26:44Z) (isArchived))) ((node (owner (login . tensorflow)) (name . toolchains) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/toolchains) (updatedAt . 2023-04-17T07:26:25Z) (isArchived))) ((node (owner (login . tensorflow)) (name . moonlight) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/moonlight) (updatedAt . 2023-04-17T07:25:37Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . swift-apis) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/swift-apis) (updatedAt . 2023-04-17T07:24:16Z) (isArchived))) ((node (owner (login . tensorflow)) (name . dtensor-gcp-examples) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/dtensor-gcp-examples) (updatedAt . 2023-04-17T07:24:06Z) (isArchived))) ((node (owner (login . tensorflow)) (name . .allstar) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/.allstar) (updatedAt . 2023-04-17T07:23:27Z) (isArchived))) ((node (owner (login . tensorflow)) (name . oss-fuzz) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/oss-fuzz) (updatedAt . 2023-04-17T07:23:12Z) (isArchived))) ((node (owner (login . tensorflow)) (name . cloud) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/cloud) (updatedAt . 2023-04-17T07:22:51Z) (isArchived))) ((node (owner (login . tensorflow)) (name . sig-tfjs) (defaultBranchRef (prefix . refs/heads/) (name . main)) (url . https://github.com/tensorflow/sig-tfjs) (updatedAt . 2023-04-17T07:22:27Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tf-build-actions) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tf-build-actions) (updatedAt . 2023-04-17T07:21:49Z) (isArchived))) ((node (owner (login . tensorflow)) (name . model-remediation) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/model-remediation) (updatedAt . 2023-04-17T07:21:27Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-website) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-website) (updatedAt . 2023-04-17T07:09:25Z) (isArchived))) ((node (owner (login . tensorflow)) (name . metadata) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/metadata) (updatedAt . 2023-04-17T07:08:41Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfhub.dev) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfhub.dev) (updatedAt . 2023-04-17T07:08:15Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfx-bsl) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfx-bsl) (updatedAt . 2023-04-17T07:08:06Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-vis) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-vis) (updatedAt . 2023-04-11T08:32:12Z) (isArchived . t))) ((node (owner (login . tensorflow)) (name . profiler-ui) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/profiler-ui) (updatedAt . 2023-04-10T17:58:55Z) (isArchived))) ((node (owner (login . tensorflow)) (name . tfjs-converter) (defaultBranchRef (prefix . refs/heads/) (name . master)) (url . https://github.com/tensorflow/tfjs-converter) (updatedAt . 2023-03-30T07:38:19Z) (isArchived . t)))))) |

*** Convert to XML

All hail =ripgrep=. The browser is dead.

#+name: tensorflow-core
#+begin_src emacs-lisp :var gqldata=tensorflow-repos :results value html
(thread-first
  (thread-last
    (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
    (mapcar (lambda (el) (a-get* el 'node)))
    (seq-filter (lambda (el) (not (a-get* el 'isArchived))))
    (mapcar (lambda (el)
              (let* (;; (defaultBranchRef (a-get* 'defaultBranchRef))
                     (path (a-get* el 'name))
                     (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                  (a-get* el 'defaultBranchRef 'name)))
                     (name (string-join (list (a-get* el 'owner 'login)
                                              (a-get* el 'name)) "/")))
                (concat "<project"
                        " name=\"" name
                        "\" path=\"" path
                        "\" ref=\"" ref "\" remote=\"github\" />")))))
  (cl-sort 'string-lessp :key 'downcase)
  (string-join "\n"))
#+end_src

#+RESULTS: tensorflow-core
#+begin_export html
<project name="tensorflow/.allstar" path=".allstar" ref="refs/heads/master" remote="github" />
<project name="tensorflow/adanet" path="adanet" ref="refs/heads/master" remote="github" />
<project name="tensorflow/addons" path="addons" ref="refs/heads/master" remote="github" />
<project name="tensorflow/agents" path="agents" ref="refs/heads/master" remote="github" />
<project name="tensorflow/benchmarks" path="benchmarks" ref="refs/heads/master" remote="github" />
<project name="tensorflow/build" path="build" ref="refs/heads/master" remote="github" />
<project name="tensorflow/cloud" path="cloud" ref="refs/heads/master" remote="github" />
<project name="tensorflow/codelabs" path="codelabs" ref="refs/heads/main" remote="github" />
<project name="tensorflow/community" path="community" ref="refs/heads/master" remote="github" />
<project name="tensorflow/compression" path="compression" ref="refs/heads/master" remote="github" />
<project name="tensorflow/custom-op" path="custom-op" ref="refs/heads/master" remote="github" />
<project name="tensorflow/data-validation" path="data-validation" ref="refs/heads/master" remote="github" />
<project name="tensorflow/datasets" path="datasets" ref="refs/heads/master" remote="github" />
<project name="tensorflow/decision-forests" path="decision-forests" ref="refs/heads/main" remote="github" />
<project name="tensorflow/deepmath" path="deepmath" ref="refs/heads/master" remote="github" />
<project name="tensorflow/docs" path="docs" ref="refs/heads/master" remote="github" />
<project name="tensorflow/docs-l10n" path="docs-l10n" ref="refs/heads/master" remote="github" />
<project name="tensorflow/dtensor-gcp-examples" path="dtensor-gcp-examples" ref="refs/heads/main" remote="github" />
<project name="tensorflow/ecosystem" path="ecosystem" ref="refs/heads/master" remote="github" />
<project name="tensorflow/embedding-projector-standalone" path="embedding-projector-standalone" ref="refs/heads/master" remote="github" />
<project name="tensorflow/estimator" path="estimator" ref="refs/heads/master" remote="github" />
<project name="tensorflow/examples" path="examples" ref="refs/heads/master" remote="github" />
<project name="tensorflow/fairness-indicators" path="fairness-indicators" ref="refs/heads/master" remote="github" />
<project name="tensorflow/federated" path="federated" ref="refs/heads/main" remote="github" />
<project name="tensorflow/fold" path="fold" ref="refs/heads/master" remote="github" />
<project name="tensorflow/gan" path="gan" ref="refs/heads/master" remote="github" />
<project name="tensorflow/gnn" path="gnn" ref="refs/heads/main" remote="github" />
<project name="tensorflow/graphics" path="graphics" ref="refs/heads/master" remote="github" />
<project name="tensorflow/haskell" path="haskell" ref="refs/heads/master" remote="github" />
<project name="tensorflow/hub" path="hub" ref="refs/heads/master" remote="github" />
<project name="tensorflow/io" path="io" ref="refs/heads/master" remote="github" />
<project name="tensorflow/java" path="java" ref="refs/heads/master" remote="github" />
<project name="tensorflow/java-models" path="java-models" ref="refs/heads/master" remote="github" />
<project name="tensorflow/java-ndarray" path="java-ndarray" ref="refs/heads/main" remote="github" />
<project name="tensorflow/kfac" path="kfac" ref="refs/heads/master" remote="github" />
<project name="tensorflow/lattice" path="lattice" ref="refs/heads/master" remote="github" />
<project name="tensorflow/lingvo" path="lingvo" ref="refs/heads/master" remote="github" />
<project name="tensorflow/lucid" path="lucid" ref="refs/heads/master" remote="github" />
<project name="tensorflow/mesh" path="mesh" ref="refs/heads/master" remote="github" />
<project name="tensorflow/metadata" path="metadata" ref="refs/heads/master" remote="github" />
<project name="tensorflow/mlir-hlo" path="mlir-hlo" ref="refs/heads/master" remote="github" />
<project name="tensorflow/model-analysis" path="model-analysis" ref="refs/heads/master" remote="github" />
<project name="tensorflow/model-card-toolkit" path="model-card-toolkit" ref="refs/heads/main" remote="github" />
<project name="tensorflow/model-optimization" path="model-optimization" ref="refs/heads/master" remote="github" />
<project name="tensorflow/model-remediation" path="model-remediation" ref="refs/heads/master" remote="github" />
<project name="tensorflow/models" path="models" ref="refs/heads/master" remote="github" />
<project name="tensorflow/networking" path="networking" ref="refs/heads/master" remote="github" />
<project name="tensorflow/neural-structured-learning" path="neural-structured-learning" ref="refs/heads/master" remote="github" />
<project name="tensorflow/nmt" path="nmt" ref="refs/heads/master" remote="github" />
<project name="tensorflow/oss-fuzz" path="oss-fuzz" ref="refs/heads/master" remote="github" />
<project name="tensorflow/playground" path="playground" ref="refs/heads/master" remote="github" />
<project name="tensorflow/privacy" path="privacy" ref="refs/heads/master" remote="github" />
<project name="tensorflow/probability" path="probability" ref="refs/heads/main" remote="github" />
<project name="tensorflow/profiler" path="profiler" ref="refs/heads/master" remote="github" />
<project name="tensorflow/profiler-ui" path="profiler-ui" ref="refs/heads/master" remote="github" />
<project name="tensorflow/quantum" path="quantum" ref="refs/heads/master" remote="github" />
<project name="tensorflow/ranking" path="ranking" ref="refs/heads/master" remote="github" />
<project name="tensorflow/recommenders" path="recommenders" ref="refs/heads/main" remote="github" />
<project name="tensorflow/recommenders-addons" path="recommenders-addons" ref="refs/heads/master" remote="github" />
<project name="tensorflow/runtime" path="runtime" ref="refs/heads/master" remote="github" />
<project name="tensorflow/rust" path="rust" ref="refs/heads/master" remote="github" />
<project name="tensorflow/serving" path="serving" ref="refs/heads/master" remote="github" />
<project name="tensorflow/sig-tfjs" path="sig-tfjs" ref="refs/heads/main" remote="github" />
<project name="tensorflow/similarity" path="similarity" ref="refs/heads/master" remote="github" />
<project name="tensorflow/swift-apis" path="swift-apis" ref="refs/heads/main" remote="github" />
<project name="tensorflow/tcav" path="tcav" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensor2tensor" path="tensor2tensor" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensorboard" path="tensorboard" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensorflow" path="tensorflow" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensorrt" path="tensorrt" ref="refs/heads/master" remote="github" />
<project name="tensorflow/text" path="text" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tf-build-actions" path="tf-build-actions" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfhub.dev" path="tfhub.dev" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs" path="tfjs" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs-examples" path="tfjs-examples" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs-models" path="tfjs-models" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs-website" path="tfjs-website" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs-wechat" path="tfjs-wechat" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tflite-micro" path="tflite-micro" ref="refs/heads/main" remote="github" />
<project name="tensorflow/tflite-micro-arduino-examples" path="tflite-micro-arduino-examples" ref="refs/heads/main" remote="github" />
<project name="tensorflow/tflite-support" path="tflite-support" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfx" path="tfx" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfx-addons" path="tfx-addons" ref="refs/heads/main" remote="github" />
<project name="tensorflow/tfx-bsl" path="tfx-bsl" ref="refs/heads/master" remote="github" />
<project name="tensorflow/toolchains" path="toolchains" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tpu" path="tpu" ref="refs/heads/master" remote="github" />
<project name="tensorflow/transform" path="transform" ref="refs/heads/master" remote="github" />
#+end_export

* Querying Schema

** with ghub

Okay jebus it's 11,500 lines long (and in my kill-ring)

*** Types

**** Repository

#+name: github-type-repository
#+header: :mkdirp t
#+begin_src emacs-lisp :results value none :exports both
(ghub-graphql
 (graphql-query ((__type :arguments ((name . "Repository"))
                         name kind description (fields (name))))))
#+end_src

*** Full Schema

#+name: github-schema
#+begin_src emacs-lisp :results value silent :exports code :file (expand-file-name "assets/github.sdl" (cdr (project-current)))
(ghub-graphql
 (graphql-query ((__schema (types name kind description (fields (name)))))))
#+end_src

*** Dump Schema to JSON

Hmmm, but i need an =sdl= file

#+begin_src emacs-lisp :results value none :exports both
(json-encode
 (ghub-graphql
  (graphql-query ((__type :arguments ((name . "Repository"))
                          name kind description (fields (name)))))))
#+end_src

** WIth ob-graphql

I can't get this to work. It doesn't accept the authorization token.

#+name: graphql-headers
#+begin_src emacs-lisp
'(("Authorization" . "token mytokenhere"))
#+end_src

#+name: obgql-schema-full
#+header: :url https://api.github.com/graphql :headers graphql-headers
#+begin_src graphql :results output :file github.sdl :exports code
##+begin_src graphql :results output file :file github.sdl :exports code
##+begin_src graphql :results value :file github.sdl :exports code
query{
  __schema{
    types{
      name
      kind
      description
      fields{name}
    }
  }
}
#+end_src

** With ob-restclient

#+name: gql-query-schema
#+begin_example graphql
query {
  __schema {
    types {
      name
      kind
      description
      fields { name }
    }
  }
}
#+end_example

#+name: gql-request-schema
#+header: :var token=(identity ghub-graphql-token) query=gql-query-schema
#+begin_src restclient
# Authorization: Bearer :token
POST https://api.github.com/graphql
Authorization: Bearer :token
Content-Type: application/json
User-Agent: Emacs

{
  "query": ":query",
  "variables": {}
}
#+end_src

#+RESULTS: gql-request-schema
#+BEGIN_SRC js
{
  "message": "Problems parsing JSON",
  "documentation_url": "https://docs.github.com/graphql"
}
// POST https://api.github.com/graphql
// HTTP/1.1 400 Bad Request
// Server: GitHub.com
// Date: Mon, 01 May 2023 23:33:45 GMT
// Content-Type: application/json; charset=utf-8
// Content-Length: 89
// X-OAuth-Scopes:
// X-Accepted-OAuth-Scopes: repo
// github-authentication-token-expiration: 2023-05-31 16:32:23 UTC
// X-GitHub-Media-Type: github.v4; format=json
// X-RateLimit-Limit: 5000
// X-RateLimit-Remaining: 4999
// X-RateLimit-Reset: 1682986006
// X-RateLimit-Used: 1
// X-RateLimit-Resource: graphql
// Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset
// Access-Control-Allow-Origin: *
// Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
// X-Frame-Options: deny
// X-Content-Type-Options: nosniff
// X-XSS-Protection: 0
// Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
// Content-Security-Policy: default-src 'none'
// Vary: Accept-Encoding, Accept, X-Requested-With
// X-GitHub-Request-Id: 818B:4D2A:894CA1:117BEF0:64504C59
// Request duration: 0.077842s
#+END_SRC


#+name: curl-gql-request-test
#+headers: :var token=(identity ghub-graphql-token) query=gql-query-schema
#+begin_src sh :results output
body='{ "query": "'$query'", "variables": {} }'

echo $body
echo $body | jq
#+end_src

#+RESULTS: curl-gql-request-test
: { "query": "query{ __schema{ types{ name kind description fields{name} } } } ", "variables": {} }
: {
:   "query": "query{ __schema{ types{ name kind description fields{name} } } } ",
:   "variables": {}
: }

When the quotes are too close to the brackets ='{"query": "'$query'",
"variables": {}}'= i get an error


#+name: curl-gql-request-schema
#+headers: :var token=(identity ghub-graphql-token) query=gql-query-schema
#+begin_src sh :results output :noweb t
body='{ "query": "'$query'", "variables": {} }'
#-H "Authorization: token $token" \

echo "'"$body"'"
echo $body

body=$(echo $body | tr -d '\n')

echo curl -g -X POST --silent -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d $body https://api.github.com/graphql
#echo curl -g -X POST --silent -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d $body https://api.github.com/graphql

curl -g -X POST \
     --silent \
     -H "Content-Type: application/json" \
     -H "Authorization: Bearer $token" \
     --data $body \
     https://api.github.com/graphql

#     -d '{ "query": "query{ __schema{ types{ name kind description fields{name} } } } ", "variables": {} }' \
#     -d '"'$body'"' \
#     -d "'"$body"'" \
#echo $foovar
#+end_src

#+RESULTS: curl-gql-request-schema
: '{ "query": "query{ __schema{ types{ name kind description fields{name} } } } ", "variables": {} }'
: { "query": "query{ __schema{ types{ name kind description fields{name} } } } ", "variables": {} }
: {"errors":[{"message":"A query attribute must be specified and must be a string."}]}
