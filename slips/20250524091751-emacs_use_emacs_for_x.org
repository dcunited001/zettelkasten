:PROPERTIES:
:ID:       56c9c21b-3db7-4ad7-bb74-aba0f9c33ee0
:END:
#+TITLE: Emacs: Use Emacs for X?
#+CATEGORY: slips
#+TAGS:
* Roam
+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:711d6a41-5425-4853-97ed-f7698a4a3605][LSP]]

* Which Tool?

it's not super-efficient for workflow, though it can be. The main factors
differentiating Emacs from VSCode or Vim (afaik):

+ The =project= abstraction doesn't govern your UI/UX or your extension
  state/configuration (at least, not necessarily). So you should be aware of the
  functionality in =project.el= or =projectile= that allows you to jump between
  projects or run find/replace/search on other directory trees.
+ The =buffer= concept means many files can be viewed in many ways and that a file
  is just a region of memory (more or less).
  - =elf-mode= turns blobs into =readelf= output, but it's the same underlying code.
  - =org-mode= could be viewed in =text-mode= or =outline-mode= (and
    =outline-minor-mode= any source into an =org-like= document, somewhat)
  - archives like =tar= or =cpio= from initramfs & RPM packages open (after warning)
    into a limited version of dired. You can select/mark single files using a
    consistent interface (common feature), but this is helpful when you
    generate/extracted the files rather than downloaded them. I would've /never/
    known that an RPM _is_ a CPIO archive if it weren't that I found I could open
    it in Emacs.
  - =svg= is an Image /or it's XML/, so I was able to find/replace the =Protobuf=
    string from [[https://github.com/dcunited001/zettelkasten/blob/master/slips/img/frc/proto/kinematics_pb2.svg][these SVGs]] and add =fill-opacity=0.0= so I could import into
    Draw.io, which likes to Base64 encode things unnecessarily because it's not
    an image editor. Later, I found that Inkscape would inject XML (and
    reformat). Having most nodes take up a single line made the regexp easier to
    anticipate. I could check the changes in =magit= without destroying/copying
    the images.
+ Text handling is always the same. Regexp replace isn't excruciating; doesn't
  require the mouse. Regexp escaping isn't great, but that's not Emacs' fault.
  That's always different in every program.
+ Hotkeys are always the same or at least consistent. e.g. =C-a, C-e= and similar
  movement keys. They always have similar effects, regardless of the programming
  language. That's because of some of the older lower-level parsing.
+ =comint-mode= can interpret any repl or process output. =iterm2= can do similar
  things with scripts that run when text matching specific regexps is emitted
  (but it's unclear whether those are one-line regexp, how the regexp should be
  escaped, etc)
+ It has =lsp-mode= and =eglot=, but if you can use something else, it's probably
  better that you do. Lisp doesn't really need it. Clojure/Scheme extract it
  from the repl (i.e. they always "had LSP").
+ Working with =docker= and containers is simple, but it's easier to do at least
  some of that from the Docker Desktop app. It doesn't has some of the container
  functionality that VS Code does

** In summary

+ In how many projects do you need editor functionality?
+ Do you want granular control over how file-local and buffer-local state
  affects non-lexical scopes or global state?
+ Do you jump across a ton of source code? Use find/grep? Locate?
+ Are there simple edge cases or rigid rules that cause annoying behavior?
+ How often do you need to shim the environment for a python project? When
  developing on different platforms? (e.g. getting the same CLI tools to be
  available with the same =VIRTUAL_ENV= and =PATH=)
+ Do you ever close VS Code to reopen a subdirectory? Does this affect how you
  start processes/commands? It shouldn't if extensions pull data from VSCode's
  project abstraction ... but it may for superprojects.
+ Do you open the Electron debugger in VS Code? Ever?
  - The javascript debugger is easier to work with, but I never really opened
    extension source code to see what's happening there.
+ How badly do you want to learn =emacs-lisp=?

VS Code is simpler, but you'll max out, especially if you find yourself opening
projects apropos to yours. It's probably best to be able to jump to VSCode/vim
where necessary, but those tools have, basically, an equivalent number of
problems solved by extensions (if not more).
