:PROPERTIES:
:ID:       5e45be68-3355-4023-99c7-1a812e867ea8
:END:
#+TITLE: Guix: Building Libsecret With TPM Support
#+CATEGORY: slips
#+TAGS:

The main advantage of the TPM-based support is that files cannot be exfiltrated
from the computer where secrets are encoded. There may still be issues in
limiting access to sockets or applications on the machine which can access
secrets.

I'm trying to find a better way to manage passwords without worrying about every
application having access to every secret in my keychain. Maybe that's not a
realistic concern, but I life in butt-fucking egypt, so I would never find out
otherwise.

I'm still looking for something that:

+ integrates with 2FA
+ syncs easily without complicated scripts
+ doesn't allow =X11= or =XWayland= apps access to the clipboard
+ doesn't use a crappy generic browser extension or at least properly handles
  keyboard input

If people weren't literal thalidomide-babies then maybe we could just use =pass=
-- or shit at least consistently pass filehandlers to CLI. But no... how are you
going to charge money for that?

* Resources

** Libsecret

*** Meson

+ Main [[https://gitlab.gnome.org/GNOME/libsecret/-/blob/master/meson.build?ref_type=heads][meson.build]]
+ PAM [[https://gitlab.gnome.org/GNOME/libsecret/-/blob/master/pam/meson.build?ref_type=heads][meson.build]]

* Tasks

** TODO add PAM module support

** TODO Guix: determine whether it's practical to use transformations in package definitions

The second pattern here appears more frequently now

#+begin_example scheme
(package (inherit pkgref) ... )

(package/inherit pkgref (arguments ...))
#+end_example

the following returns a procedure (which uses package/inherit)

#+begin_example scheme
(options->transormation '((with-configure-flag "-Dtpm2")))
#+end_example

problems would involve package references and whether the (name "pgkname")
should be defined inside/outside of the transformation. it seems there
aren't many usages of (guix transformations) module in package definitions.

* Package

To update the package on Guix, I extended the default =libsecret= package. The
=check= phase was failing, which I couldn't easily address without adding new
packages.

Package source at end of testing:

#+begin_example scheme
;; the package source here likely won't be updated
(define-module (ellipsis packages gnome)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix gexp)
  #:use-module (guix utils)
  #:use-module (guix download)
  #:use-module (guix git-download)
  #:use-module (guix packages)

  #:use-module (guix build utils)
  #:use-module (guix transformations)

  #:use-module (gnu packages)
  #:use-module (gnu packages base)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages hardware)

  #:use-module (ellipsis packages)
  #:use-module (ellipsis packages perl)
  #:use-module (srfi srfi-1))

(define-public libsecret-tpm2
  (package/inherit libsecret
    (name "libsecret-tpm2")
    (version "0.21.4")
    (propagated-inputs
     (modify-inputs (package-propagated-inputs libsecret)
       (append tpm2-tss)))
    (native-inputs
     (modify-inputs (package-native-inputs libsecret)
       (append tpm2-tools)))
    (arguments
     (substitute-keyword-arguments (package-arguments libsecret)
       ((#:configure-flags flags #~'())
        ;; Add EXTRA-FLAG to the end so it can potentially override FLAGS.
        #~(append #$flags '("-Dtpm2=true")))

       ((#:phases phases)
        #~(modify-phases #$phases
            (delete 'check)))))))
#+end_example

** TPM2 Tools
To manage the TPM via CLI, =tpm2-tools= is required.

Practical usage of =libsecret-tpm2= in services/etc may require configuration of
users/groups: see =tmpfiles.d= and =sysusers.d=.

*** TSS Shared Libs

The following shared dependencies are required, according to the main
=meson.build=.

| tss2-esys | tss2-mu | tss2-rc | tss2-tctildr |

They are all provided by =tpm2-tss 3.0.3= according to [[https://launchpad.net/ubuntu/+source/tpm2-tss][Ubuntu
Launchpad]]

** Testing with =kwallet=

+ kwallet shows the password stored under "foo" context
+ I tried testing with the following strace and ltrace, but it's unclear whether
  it passes through to tpm. No device files appear to have been accessed by
  =secret-tool=

#+begin_example sh
guix shell -L ~/.dotfiles tpm2-tss tpm2-tools libsecret-tpm2

secret-tool store --label foo bar baz

strace -e all -o /tmp/secrettools.strace secret-tool lookup bar baz

ltrace -e '*@*' -o /tmp/tpm.ltrace.strace secret-tool lookup bar baz
#+end_example


** Test Failures

The two TPM tests are failing

#+begin_quote
 6/23 libsecret:secret-tool / test-secret-tool-tpm2.sh FAIL            0.02s   exit status 1
>>> MALLOC_PERTURB_=28 abs_top_builddir=/tmp/guix-build-libsecret-tpm2-0.21.4.drv-0/build /tmp/guix-build-libsecret-tpm2-0.21.4.drv-0/libsecret-0.21.4/tool/test-secret-tool-tpm2.sh
――――――――――――――――――――――――――――――――――――― ✀  ―――――――――――――――――――――――――――――――――――――
stdout:
1..6
stderr:
ERROR:tcti:src/tss2-tcti/tctildr-dl.c:254:tctildr_get_default() No standard TCTI could be loaded
ERROR:tcti:src/tss2-tcti/tctildr.c:416:Tss2_TctiLdr_Initialize_Ex() Failed to instantiate TCTI
secret-tool: Tss2_TctiLdr_Initialize: tcti:IO failure
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 7/23 libsecret:libegg / test-tpm2                     FAIL            0.12s   killed by signal 6 SIGABRT
>>> MALLOC_PERTURB_=176 /tmp/guix-build-libsecret-tpm2-0.21.4.drv-0/build/egg/test-tpm2
――――――――――――――――――――――――――――――――――――― ✀  ―――――――――――――――――――――――――――――――――――――
stdout:
TAP version 13
# random seed: R02S408bb1c2a62e5d908ba111d7e1a7b23c
1..2
# Start of tpm tests
not ok /tpm/test_egg_tpm2_generate_master_password - ERROR:../libsecret-0.21.4/egg/test-tpm2.c:34:test_egg_tpm2_generate_master_password: 'context' should not be NULL
Bail out!
stderr:
ERROR:tcti:src/tss2-tcti/tctildr-dl.c:254:tctildr_get_default() No standard TCTI could be loaded
ERROR:tcti:src/tss2-tcti/tctildr.c:416:Tss2_TctiLdr_Initialize_Ex() Failed to instantiate TCTI
ERROR:../libsecret-0.21.4/egg/test-tpm2.c:34:test_egg_tpm2_generate_master_password: 'context' should not be NULL
#+end_quote

*** Adding swtpm support

Guix doesn't have an =swtpm= package, though =tpm2-tss= builds shared libs for
its use. To test properly, =swtpm= package is needed in native-inputs, along
with test setup.

+ Test setup: [[https://gnome.pages.gitlab.gnome.org/libsecret/libsecret-tpm2.html][Gnome Libsecret TPM Instructions]]
+ Archilinux package: [[https://gitlab.archlinux.org/archlinux/packaging/packages/swtpm/-/blob/main/PKGBUILD?ref_type=heads][PKGBUILD for swtpm]]
+ [[https://github.com/stefanberger/swtpm][stefanberger/swtpm]] For source

*** Testing with Device-based TPM

Trying to force device-based TPM support (to test) doesn't help

#+begin_example scheme
((#:phases phases)
 #~(modify-phases #$phases
     (replace 'check
       (lambda* (#:key tests? test-options #:allow-other-keys)
         (when tests?
           (setenv "HOME" "/tmp")
           (setenv "XDG_DATA_DIRS"    ;for /org/freedesktop/secrets/collection
                   (string-append #$output "/share:"
                                  (getenv "XDG_DATA_DIRS")))

Test with raw device instead of swtpm (require tpm user/group)

           ;; doesn't help...
           (setenv "TPM2TOOLS_TCTI" "device:/dev/tpm0")

           (apply invoke "dbus-run-session" "--"
                  "meson" "test" "--print-errorlogs" "-t" "0"
                  test-options))))))
#+end_example


* Roam
+ [[id:a3a83227-d12f-4fd4-aa7b-700d7c51fc89][TPM]]
+ [[id:c2afa949-0d1c-4703-b69c-02ffa854d4f4][Crypto]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
