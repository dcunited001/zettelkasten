:PROPERTIES:
:ID:       84421ca8-c324-4fe2-9ed4-dbfa85c1478e
:END:
#+TITLE: VyOS: On Dell D10U
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:5aa36ac8-32b3-421f-afb1-5b6292b06915][VyOS]]

* Docs

* Overview

Once SSH is set up, you can use =tramp= to modify scripts on the router or =babel=
to execute scripts on the server.

** Install

+ Partitions need to be complete before installation
+ Debops is an option: when using ansible/debops post-install, care should be
  taken not to install anything that would be managed

*** SSH

If the system comes up without ssh, put the keys on a disk, then for =$pubkey= do

#+begin_src shell
# after mount /dev/sdXn /mnt/usb
# variables exported before configure or defined within (separate proc)
configure
sshkey=$(sudo cat /mnt/usb/home/dc/.ssh/yk.pub | cut -f2 -d' ')
sshcomment=$(sudo cat /mnt/usb/home/dc/.ssh/yk.pub | cut -f3 -d' ')
sshtype=$(sudo cat /mnt/usb/home/dc/.ssh/yk.pub | cut -f1 -d' ')
set system login user vyos authentication public-keys $sshcomment key $sshkey
set system login user vyos authentication public-keys $sshcomment type $sshtype
set system service ssh port 22
set system service ssh listen-address 198.18.0.1
# maybe: set system service ssh log-level verbose
commit
save
exit

# maybe: restart ssh
#+end_src

For SSH via yubikey, the pkcs11 failures will happen on the host side (vyos
doesn't need to know). Simpler to configure via =$HOME/.ssh/config=.

** Hardware

Comes up with two ethernet interfaces: =eth0= and =eth1=

** Packages

To add:

+ tree
+ yq/xq (jq on system)

** Containers

Containers use =podman=

#+begin_example
.
└── etc
    └── containers
        ├── containers.conf
        ├── networks
        ├── policy.json
        ├── registries.conf
        ├── registries.conf.d
        │   └── shortnames.conf
        └── storage.conf
#+end_example

*** Podman

**** Storage

/etc/containers/storage.conf

#+begin_example conf
### autogenerated by container.py
[storage]
  driver = "overlay"
  graphroot = "/usr/lib/live/mount/persistence/container/storage"
  runroot = "/var/run/containers/storage"
[storage.options]
  mount_program = "/usr/bin/fuse-overlayfs"
#+end_example


*** Postgres

*** Redis

* Config

** Addressing

** System

+ public-keys $comment key $key :: key
+ public-keys $comment type $alg :: algo

** Network

** Protocols

** Service

*** DHCP

*** SSH

+ disable-host-validation :: disables rDNS lookupp384
+ loglevel :: =info= is default
+ vrf :: if needed
+ dynamic-protection :: config block to protect against brute force

*** NTP

+ redefine to US NTP servers
+ delete the config section that subscribes internal networks to NTP on vyos


** Container

*** Registry

*** Network

*** Postgres

*** Redis

* Issues

Trying to test linking up to the extra port on my Linux desktop (not the
gateway) with DHCP instead of static.

+ I guess =DHCP= is the "adapter" I was looking for to avoid specifying any
  details about the network the appliance would be connected to.
+ I don't have a wifi (either in the applicance or the orange pi)
+ In any case, i'd like to stream logs over the network back to the appliance.
  - I'm not quite sure it'd be as simple as I'd like, esp. given that there's
    little control over the networking details of the other devices.
  - also, there are weird configs (multiple DHCP pools, multiple gateways)

** Test DHCP with =dnsmasq=

#+begin_src shell
delete interfaces ethernet eth0 address 198.18.0.1/24
set interfaces ethernet eth0 address dhcp
commit
save # ssh broken unless serial
#+end_src

On host, create =dnsmasq.conf=

#+begin_example
interface=enp5s0
listen-address=198.18.0.10
bind-interfaces
dhcp-option=3,198.18.0.10
dhcp-option=6,$addr
dhcp-range=198.18.0.100,198.18.0.110,1h
#+end_example

Start dnsmasq with the conf (no output)

#+begin_src shell
sudo dnsmasq -k --conf-file=./dnsmasq.conf
#+end_src

+ On =vyos= in =vt1= start =monitor traffic eth0=
  - Then jump to =vt2= and run =renew dhcp interface ethernet=
+ Traffic is scrolling (vyos is asking), but =dnsmasq= is not responding
  - Traceroute does not go out across the interface (though default route on
    =eth0= interface...)
+ I'm guessing =dnsmasq= receives the message (no logs though), sends packets
  which don't make it.
  - ARP exchange comes through when flapping host =enp5s0= whose gateway is
    =0.0.0.0= .... changed through several apps. I think it's unrouted by =enp5s0='s
    host. It doesn't set in multiple apps,
  - Maybe bc single-gateway per VRF?
+ =arp= seems to show nothing on either side... usually nice to see earlier, but
  you never do... idk. I'm going to guess it works in a normal networking config.
+ an =mdns= packet made it through though.

#+begin_src shell
d=$(mktemp -d)
p="$d/dnsmasq.pid"
ifx=enp5s0
addr="$(ip addr show dev enp5s0 | grep -e 'inet ' | tr -s ' ' | cut -f3 -d' ')"
opts=(--no-hosts --no-resolve)
dnsmasq ${opts[@]} --interface=$ifx --listen-address=$addr --pidfile=$p
#+end_src

hmmmm


** Issues With ISO Creation

This config format differs more than I first thought. I believe there are
development tools for syntax validation (+ some semantic), but that's not going
to catch everything.

+ The boot mounts the config files, then migrates vyos from a "pre-booted=
  config to the config specified in the kernel boot argument.
+ This ISO build flavor mounts the files, config doesn't survive migration at boot
  - This ends up locking out the =vyos= user. idk if there's a decent way to
    address this. best to use =set= and =delete= commands, then extract with =show
    configuration=

I found this format elsewhere, but =show conf= produces something else.

#+begin_example
    interface-route 10.12.34.0/24 {
      next-hop-interface eth1 {
        distance 20
      }
    }
#+end_example

* Flavor

** To Add

*** mDNS

+ permit through firewall
+ vyos can curl =photonvision.local:5800=

**** Testing with tunnel

With tunnel =ssh -fN -R 127.0.0.1:58000:photonvision.local:5800 vyostest=, I can
almost get photonvision to respond over the hop via mDNS ... or so I thought. I
was capturing mDNS requests being advertised over =enp5s0= to =vyostest=, but
without any way for an ip resolution to be routed.

Instead, what may work is to briefly route the mDNS multicast over the tunnel,
if it doesn't reject the address (maybe in netns). Then, the SSH process has the
name/ip mapping and may decide to jump through the proxy.

Also, this apparently runs tcpdump where "host photonvision.local" is a pcap
filter: =monitor traffic interface eth0 filter "host photonvision.local"=

It's been awhile since i've used the tunnel (this is more of an SSH thing than a
vyos thing)

*** DHCP and DNS via Uplink (WAN)

OPNSense is blocking DNS requests for now

#+begin_example conf
system {
    name-server 192.0.2.1
    name-server 192.0.2.2
    name-server 2001:db8:200::1
    name-server 2001:db8:200::2
}
interfaces {
  ethernet eth0 {
    address dhcp
    description "WAN Interface"
    offload {
      gro
      gso
      sg
      tso
    }
  }
}
#+end_example
** Flavor

./data/build-flavors/generic.toml

#+begin_src toml :tangle /data/ecto/vyos/vyos/vyos-build/data/build-flavors/generic.toml
image_format = "iso"
packages = [
  "lvm2",
  "hwinfo",
  "yubico-piv-tool",
  "opensc-pkcs11",
  "opensc",
  "age"
]

default_config="""
system {
  host-name vyos
  time-zone America/New_York
  login {
    user vyos {
      authentication {
        encrypted-password "*"
        plaintext-password ""
        public-keys cardno:25019591 {
          key AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBGE6wqFapBOKBA2wCTB22nG+GANmh9JXNG54tBajKNu/Fh61ywzilEI6MYLpvolCuS0YWGAgv4h5MHzk45KnWXKJ1NSNTLJ4koa+NvAAHIVXKA19IZ+s6UyX7eyCWLx58w==
          type ecdsa-sha2-nistp384
        }
        public-keys cardno:25019591 {
          key AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBGE6wqFapBOKBA2wCTB22nG+GANmh9JXNG54tBajKNu/Fh61ywzilEI6MYLpvolCuS0YWGAgv4h5MHzk45KnWXKJ1NSNTLJ4koa+NvAAHIVXKA19IZ+s6UyX7eyCWLx58w==
          type ecdsa-sha2-nistp384
        }
      }
      level admin
    }
  }
  syslog {
    global {
      facility all {
        level info
      }
      facility protocols {
        level debug
      }
    }
  }
  console {
    device ttyS0 {
      speed 115200
    }
  }
  config-management {
    commit-revisions 100
  }
}

interfaces {
  loopback lo {
  }
  ethernet eth0 {
    address 198.18.0.1/24
    description "WAN Interface"
    offload {
      gro
      gso
      sg
      tso
    }
  }
  ethernet eth1 {
    address 10.12.34.12/24
    description "LAN Interface"
    offload {
      gro
    }
  }
}

protocols {
  static {
    route 0.0.0.0/0 {
      next-hop 198.18.0.10 {
      }
    }
    route 10.12.34.0/24 {
      interface eth1 {
        distance 20
      }
    }
  }
}

service {
  ssh {
    port 22
    listen-address 198.18.0.1
    disable-password-authentiation
    disable-host-validation
    loglevel info
  }

  dhcp-server {
    shared-network-name LAN {
      subnet 10.12.34.0/24 {
        option {
          default-router 10.12.34.1
          name-server 198.18.0.1
        }
        range 0 {
          start 10.12.34.20
          stop 10.12.34.199
        }
        subnet-id 1234
      }
    }
  }

  ntp {
    server 3.us.pool.ntp.org {
    }
    server 2.us.pool.ntp.org {
    }
    server 1.us.pool.ntp.org {
    }
    server 0.us.pool.ntp.org {
    }
  }
}
"""
#+end_src

* Misc

** SSH Algorithms

ciphers

|------------+--------------+-------------|
| 3des-cbc   | blowfish-cbc | cast128-cbc |
| aes128-cbc | aes192-cbc   | aes256-cbc  |
| aes128-ctr | aes192-ctr   | aes256-ctr  |
| arcfour128 | arcfour256   | arcfour     |
|------------+--------------+-------------|

mac

|--------------------------------+-------------------------------|
| hmac-md5                       | hmac-md5-96                   |
| hmac-ripemd160                 |                               |
| hmac-sha1                      | hmac-sha1-96                  |
| hmac-sha2-256                  | hmac-sha2-512                 |
| umac-64@openssh.com            | umac-128@openssh.com          |
| hmac-md5-etm@openssh.com       | hmac-md5-96-etm@openssh.com   |
| hmac-ripemd160-etm@openssh.com |                               |
| hmac-sha1-etm@openssh.com      | hmac-sha1-96-etm@openssh.com  |
| hmac-sha2-256-etm@openssh.com  | hmac-sha2-512-etm@openssh.com |
| umac-64-etm@openssh.com        | umac-128-etm@openssh.com      |
|--------------------------------+-------------------------------|

key-exchange

|--------------------------------------+-------------------------------|
| diffie-hellman-group1-sha1           | diffie-hellman-group14-sha1   |
| diffie-hellman-group14-sha256        |                               |
| diffie-hellman-group16-sha512        | diffie-hellman-group18-sha512 |
| diffie-hellman-group-exchange-sha1   |                               |
| diffie-hellman-group-exchange-sha256 |                               |
| ecdh-sha2-nistp256                   | ecdh-sha2-nist                |
| ecdh-sha2-nistp521                   |                               |
| curve25519-sha256                    | curve25519-sha256@libssh.org  |
|--------------------------------------+-------------------------------|

pubkey-accepted-algorithm

|---------------------------------------------+---------------------------------------------|
| ssh-ed25519                                 | ssh-ed25519-cert-v01@openssh.com            |
| sk-ssh-ed25519@openssh.com                  | sk-ssh-ed25519-cert-v01@openssh.com         |
| ecdsa-sha2-nistp256                         | ecdsa-sha2-nistp256-cert-v01@openssh.com    |
| ecdsa-sha2-nistp384                         | ecdsa-sha2-nistp384-cert-v01@openssh.com    |
| ecdsa-sha2-nistp521                         | ecdsa-sha2-nistp521-cert-v01@openssh.com    |
| sk-ecdsa-sha2-nistp256@openssh.com          | sk-ecdsa-sha2-nistp256-cert-v01@openssh.com |
| webauthn-sk-ecdsa-sha2-nistp256@openssh.com |                                             |
| ssh-dss                                     | ssh-dss-cert-v01@openssh.com ssh-rsa        |
| ssh-rsa-cert-v01@openssh.com                |                                             |
| rsa-sha2-256                                | rsa-sha2-512                                |
| rsa-sha2-256-cert-v01@openssh.com           | rsa-sha2-512-cert-v01@openssh.com           |
|---------------------------------------------+---------------------------------------------|

