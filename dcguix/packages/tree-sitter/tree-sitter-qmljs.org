:PROPERTIES:
:ID:       22d49a77-88d3-4134-9612-a5ba6aa24782
:END:
#+title: DC Guix: Tree Sitter Qmljs
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

Notes on tree-sitter packages and related emacs modes.

#+begin_quote
imported from dotfiles. info's a bit dated

;; TODO: https://github.com/shopify/tree-sitter-liquid ?
#+end_quote

* [[https://github.com/yuja/tree-sitter-qmljs][tree-sitter-qmljs]]

Once I got the dependencies for =tree-sitter-qmljs= building, this was pretty
straightforward, but I ran into problems getting tests to pass.

But if I come back to looking through KDE projects, I really kinda need
functionality to understand cmake and qml. Using various QT tools or debugging
with Gamma Ray may help, but not really for gaining insight across most of the
KDE codebases. If doing much of this development at all

** Dependencies

|------------------------+---------+-------------------|
| guix pkg               | version | available         |
|------------------------+---------+-------------------|
| tree-sitter-typescript |  0.20.5 | 0.20.3            |
| tree-sitter-javascript |  0.20.3 | 0.20.0-22.f772967 |
|------------------------+---------+-------------------|

*** Test Upgrading Deps

#+begin_example sh :results output :eval confirm
guix build --with-version=tree-sitter-typescript=0.20.5 \
     --with-version=tree-sitter-javascript=0.20.3 \
     --keep-failed
     tree-sitter-typescript
#+end_example

Looks like it be simple, though it did not complete without including the
upgraded javascript version.

#+begin_quote
successfully built /gnu/store/4j1pgl9kvqybk77fz80kdz835l667sz8-tree-sitter-typescript-0.20.5.drv
/gnu/store/k0r1dq5axd9f8zxc166rab3akvx48a4z-tree-sitter-typescript-0.20.5-js
/gnu/store/bbjlh3hch5yq4jfz5i36hgsmbvck9809-tree-sitter-typescript-0.20.5
#+end_quote

Now to figure out how to specify the transforms in scheme.

*** Graphs

#+name: gg-tree-sitter-typescript
#+begin_src sh :results output file :file img/guix-pkg-tree-sitter-typescript.svg
guix graph --type=referrers tree-sitter-typescript | dot -Tsvg
#+end_src

#+RESULTS: gg-tree-sitter-typescript
[[file:img/guix-pkg-tree-sitter-typescript.svg]]

**** Referrers

What would definitely break if javascript and typescript upgraded? The
referrers graph doesn't include implicit references

#+name: gg-tree-sitter-javascript-referrers
#+begin_src sh :results output file :file img/guix-pkg-tree-sitter-javascript-referrers.svg
guix graph --type=referrers tree-sitter-javascript | dot -Tsvg
#+end_src

#+RESULTS: gg-tree-sitter-javascript-referrers
[[file:img/guix-pkg-tree-sitter-javascript.svg]]

** Finishing the build

I'm trying to learn more about tree-sitter, guix and build systems generally,
which is why I'm interested in walking through builds like these. If I build
using the master branch, this grammar seems to work for =qml-ts-mode= in
emacs.

... But the tests should really pass.

*** Tree Sitter Build System

Phases

|---------------------------------+----------------------------------+----------------------------|
| gnu-build-system                | node-build-system                | tree-sitter-build-system   |
|---------------------------------+----------------------------------+----------------------------|
| set-SOURCE-DATE-EPOCH           |                                  |                            |
| set-paths                       |                                  |                            |
| install-locale                  |                                  |                            |
| unpack                          | set-home =add-after=               |                            |
| bootstrap                       |                                  |                            |
| patch-usr-bin-file              |                                  |                            |
| patch-source-shebangs           |                                  |                            |
| ...                             | patch-dependencies =add-before=    | patch-dependencies =replace= |
| ...                             | delete-lockfiles =add-after=       |                            |
| configure                       | configure =replace=                | configure =replace=          |
| patch-generated-file-shebangs   |                                  |                            |
| build                           | build =replace=                    | build =replace=              |
| check                           | check =replace=                    | check =replace=              |
| ...                             | repack =add-before=                |                            |
| install                         | install =replace=                  | install =replace=            |
| ...                             | ...                              | install-js =add-after=       |
| ...                             | avoid-node-gyp-rebuild =add-after= |                            |
| patch-shebangs                  |                                  |                            |
| strip                           |                                  |                            |
| validate-runpath                |                                  |                            |
| validate-documentation-location |                                  |                            |
| delete-info-dir-file            |                                  |                            |
| patch-dot-desktop-files         |                                  |                            |
| make-dynamic-linker-cache       |                                  |                            |
| install-license-files           |                                  |                            |
| reset-gzip-timestamps           |                                  |                            |
| compress-documentation          |                                  |                            |
|---------------------------------+----------------------------------+----------------------------|

*** Differences for =tree-sitter-qmljs=

I'm documenting my process here, so some of this may be incorrect.

The master branch seems to build if I skip tests, but this already includes
several build artifacts. The project README specifies some different
instructions.

+ the grammar is built with a Makefile that may specify custom tasks. I don't
  have the time to delve into it now,
+ package.json: the =devDependencies= are updated with links to the correct
  versions. The Guix =ts= build system provides =tree-sitter-cli= and so it
  gets removed.
+ Guix doesn't support =node-gyp= so I don't specify the dependency for
  =node-nan=. The =build= step runs =tree-sitter generate --no-bindings=

Building from the =dev= branch fails on =#include "typescript-scanner.h"=.
The Makefile may have some custom logic that needs to be ported either with
string substitution or a patch. The lack of =node-gyp= bindings may also be a
problem when running =tree-sitter generate=.

#+begin_src makefile
.PHONY: generate
generate:
	$(MAKE) queries/highlights-javascript.scm queries/highlights-typescript.scm
	$(MAKE) src/typescript-scanner.h
	$(TREE_SITTER) generate
#+end_src

* [[https://github.com/xhcoding/qml-ts-mode/tree/main][qml-ts-mode]]

This was fairly straightforward (see emacs-xyz.scm)
