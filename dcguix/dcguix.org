:PROPERTIES:
:ID:       bd7dd6c8-7035-4e7a-b730-0d7f9c61ef9f
:END:
#+TITLE:     DC Guix
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

The main goal here is to provide a place for me to:

+ learn about build systems using Guix
+ work on packages (without commiting to a final product)
+ search my notes on build systems or previously encountered issues.

So don't expect for much information here to be correct ad infinitum.

* Guile Modules

+ For each module, there should be an org-file that accompanies it, but I may
  deviate from that eventually.
+ As I complete packages or services, they will be pulled into my
  =$dotfiles/ellipsis= project, but the notes will remain here. _And I will not
  almost never update them_.
+ If I have issues when building a tangled file, then I'll move it into a
  =dcguix/packages/$lang-build-system/package.scm=
+ If tangled files share adhoc dependencies that haven't been ported into
  =$dotfiles/ellipsis=, then I may move them into =dcguix/packages/$lang.scm=
  which would have its own org file.

* Example

** GoogleCloudPlatform/proto-gen-md-diagrams

***** TODO move this to a zettel

This package was designed to be very flat with minimal dependencies. As such,
it's a good example of getting =guix import= to generate code.

+ There is also kinow/protobuf-uml-diagram

*** openconfig/ondatra

**** Import

run =guix import go =

**** Test

Grab a repo with protobufs

#+begin_example shell
# creating arbitrary data in =/tmp= does come with some caveats
testdir=/tmp/ondatra
mychan=$HOME/.dotfiles

# other repos in the openconfig organization have protos, but this repo
# has models for fairly generic routing protocols
git clone https://github.com/openconfig/ondatra $testdir
cd $testdir

guix shell -L $mychan pandoc proto-gen-md-diagrams
#+end_example

Test generation

#+begin_example shell
mkdir $testdir/pb2doc

proto-gen-md-diagrams --help
proto-gen-md-diagrams -d ./proto -o ./pb2doc
#+end_example

Now you should be able to convert the markdown to html with a mermaid plugin
active to get the svg's.

I would like a bit more control over how the generated images are named and how
the content is structured. So, pandoc helps the initial conversion, though it
could be a bit messy. Either way, the file can be processed in emacs using
=C-M-%= to run =query-replace-regexp=.

***** Test conversion to org

#+begin_src shell
# markdown_mmd may work (unsure)
panFrom=markdown
panTo=org

# Pandoc converts fairly easily, but it requires looping, =xargs=, etc
find $testdir/pb2doc -type f -name "*.md" -print \
    | xargs -I '{}' pandoc -f $panFrom -t $panTo -o {}.org {}
#+end_src

***** TODO follow up and finish notes

This converts to org, but it's still unclear to me how =proto-gen-md-diagrams=
culled out the graphs to produce the =mermaid= code.

+ Several proto definitions are duplicated across various diagrams. I'll need to
  look at either the docs or pb2 files to see why. It's either simplifying the
  graphs (perhaps missing references) or its search for potential references is
  not exhaustive or the output is based on the pb2 & directory structure.
+ Also, there were a few protobufs with duplicated identifiers. When Go
  processes pb2 files for codegen, it prefixes them to avoid namespace
  collisions.
+ Doxygen will construct diagrams, but AFAIK the output/complexity is controlled
  by fairly straightforward distance metric (max # of edges from current node)

The specification of args to pandoc presents a potential source of friction.

+ It doesn't make sense to use tree traversal & typelifting from
  =proto-gen-md-diagrams= just to reprocess the =md/org= output with =org-element=
  or =awk=
+ With control over the input/output to group related models in the same
  diagrams, the results could potentially be valuable enough to justify the
  overhead. There are than enough data domains that have been translated into
  =pb2= and it's implicitly a filter to weed out crap -- if it's been done,
  there's reason /and/ experience.

Also, where OpenAPI also models domains (for the stateless REST paradigm),
Protobuf is used for the "RPC paradigm" of network-interaction.

+ Thus, the way your proto objects are modeled expects them to be interacting
  together. That is, the objects will be loaded into a runtime where the interact
  with morecontinuity than with REST -- i.e. the caller often expects the RPC
  runtime to synchronously process on the other end and coordinating response to
  the caller can be difficult.
+ With OpenAPI's REST, the =POST= and =PUT= actions don't necessarily specify
  the expected JSON format for models & data. Much of this is left to the
  providing service or to the API consumer.

**** Why Protobufs?

Well ... why now?

RFC 4880 and the OpenPGP Standard contain descriptions of the data format which
is binary and doesn't segment data along byte boundaries ... if you didn't just
read wire protocol, you probably maybe suck. (hey, I said "maybe")

It's easy to convert these data structures to other languages, which lends
itself to code generation... but also diagrams. So, to prepare
content/cheatsheets for a presentation on GnuPG, I would like to produce
diagrams that describe:

+ data structures for OpenPGP and Yubikey Object Storage
+ wierd things like =scd apdu= bytes that are impossible to remember
+ but mainly the configuration surface for such applications (i.e. what secrets
  do you need, what data points are available to =gpg --card-edit=)

** smallstep/linkedca

#+begin_src shell
guix shell -L $mychan pandoc proto-gen-md-diagrams

testdir=linkedca
git clone https://github.com/smallstep/linkedca $testdir

cd $testdir
mkdir pb2doc

proto-gen-md-diagrams -d ./spec -o $testdir
#+end_src

It's easier to just work from the markdown, as it requires some manual
intervention anyways. Since mermaid doesn't support inline enums, the
=proto-gen-md-diagrams= must output them as mermaid classes inline. Thus, they
are all named =Type=. These need to be renamed. Further, there are too many
relationships included: =--o= (aggregation) includes an additional =-->=
(assocation).

Javascript proto being what it is, probably ... nevermind. Anyways, to clean up:

+ Look at the top of each markdown file to loosely construct a dependency graph. Create a file =linkedca.mmd=
+ Start with the nodes with the least dependencies (it probably constructs a
  full graph). Copy over the classes, but skip the extra enums. Awk could do this, but ... skip the extra enums.
+ For each class that references =Type=, prepend it to look like =AdminType=.
  Otherwise, it will continually append to the enum.
+ search for references to =--\(o>\) google\.protobuf.Timestamp= and replace
  with =Timestamp=.
+ then replace =google\.protobuf\.Timestamp= with =Timestamp=. The lack of dots
  is magical and greatly simplyflies graph balancing... Actually, it's only necessary to remove the lines corresponding to a relationship with imported types.

#+begin_src shell
mmdc -i linkedca.mmd -o linkedca.svg
#+end_src

* Packages

These will be found in the =./dcguix/packages= directory.


** Build Systems

*** GNU

**** Phases

 | set-SOURCE-DATE-EPOCH           | _                                                                                                                                |
 | set-paths                       | #:key target inputs native-inputs search-paths native-search-paths                                                               |
 | install-locale                  | #:key locale locale-category                                                                                                     |
 | unpack                          | #:key source                                                                                                                     |
 | bootstrap                       | #:key bootstrap-scripts                                                                                                          |
 | patch-usr-bin-file              | #:key native-inputs inputs patch-/usr/bin/file?                                                                                  |
 | patch-source-shebangs           | #:key source                                                                                                                     |
 | configure                       | #:key build target native-inputs inputs outputs configure-flags out-of-source?                                                   |
 | patch-generated-file-shebangs   | rest                                                                                                                             |
 | build                           | #:key make-flags parallel-build?                                                                                                 |
 | check                           | #:key target make-flags tests? test-target parallel-tests? test-suite-log-regexp                                                 |
 | install                         | #:key make-flags                                                                                                                 |
 | patch-shebangs                  | #:key inputs outputs patch-shebangs?                                                                                             |
 | strip                           | #:key target outputs strip-binaries? strip-command objcopy-command strip-flags strip-directories                                 |
 | validate-runpath                | #:key validate-runpath? elf-directories outputs                                                                                  |
 | validate-documentation-location | #:key outputs                                                                                                                    |
 | delete-info-dir-file            | #:key outputs                                                                                                                    |
 | patch-dot-desktop-files         | #:key outputs inputs                                                                                                             |
 | make-dynamic-linker-cache       | #:key outputs make-dynamic-linker-cache?                                                                                         |
 | install-license-files           | #:key outputs license-file-regexp out-of-source?                                                                                 |
 | reset-gzip-timestamps           | #:key outputs                                                                                                                    |
 | compress-documentation          | #:key outputs compress-documentation? documentation-compressor documentation-compressor-flags compressed-documentation-extension |

This extracts the arguments from each phase

#+begin_src scheme
(use-modules ((guix build gnu-build-system) :prefix gnu:)
             (ice-9 session) ; contains procedure-arguments
             ;; (ice-9 vlist)
             (ice-9 pretty-print))

gnu:%standard-phases

;; to list phases
;; (map (lambda (ph) (car ph)) gnu:%standard-phases)

;; this may be preferable to `program-arguments`
;; program-code -> find-program-arities -> arity-arguments-alist

(define (phase-arguments phases)
  (map (lambda (ph)
         (let* ((proc (cdr ph))
                (phname (procedure-name proc))
                (phargs (procedure-arguments proc)))
           ;; `((keyword ,(map car (assoc-ref phargs 'keyword)))
           ;;   (rest ,(assoc-ref phargs 'rest)))

           ;; the dot does crazy things here
           ;; (list phname . (map car (assoc-ref phargs 'keyword)))
           (list phname (map (lambda (ks) (car ks)) (assoc-ref phargs 'keyword)))))
       phases))

(phase-arguments gnu:%standard-phases)
#+end_src

*** RPM



*** Appimage

I though an appimage build system already existed.

*** Java

See [[https://lepiller.eu/en/supporting-java-modules-in-guix.html][Supporting Java Modules in Guix]] for a guide to building the JOSM Open Street
Maps editor

**** Ant Build System

**** Maven Build System

*** Golang

**** TODO figure out CGO_ENABLED builds

**** TODO package Open/Lens
[[https://github.com/NixOS/nixpkgs/blob/2230a20f2b5a14f2db3d7f13a2dc3c22517e790b/pkgs/applications/networking/cluster/lens/linux.nix#L34][nixpkgs]] installs from appimage

*** Rust

** Services



* Rationale

I'm not sure of a good way to separate out modules for packages/services that
I'm working on from my dotfiles project.

I have Guix packages/services in =./ellipsis= and =./dc=, but a few modules
with packages I'm working on in =./ellipsis/packages=.  Quite often, I just
want to see if I can build from source. If I don't finish, I either need to to
stash, save patches (via magit) or create branches.

+ This ends up creating a mess with many references that are hard to remember,
  if they're in Git at all.
+ If I don't remove them, there are a lot of sketchy warnings when building
  packages every time I do anything with Guix, since I don't have a proper
  channel.

I'm trying to use Guix to learn the various build systems, so I don't want
that learning to be conditionally predicated on the overhead and percarious
nature of running a channel... As they say: "don't let the perfect be the
enemy of the good"

Anyways, on the module loading problem:

+ I could use git worktrees. this is a bit complicated and would require
  identifying file references for scripts or maybe just changing the directory
  that =stow= operates on ... but i'd rather not, since this project is
  deployed onto several computers.
+ I can split the modules into an orphan branch and then clone this to another
  directory. This honestly doesn't help much, as it's not so different than a
  completely separate git repository.
+ I could set up a more consistent naming system to use Magit to create diffs
  from stashes.

So, unless anything changes, I'll just set up a directory within my
zettelkasten project, explicitly adding it to the =%load-path= before running
builds. I would like to keep my notes on builds within my org notes anyways.

One problem: you pretty quickly encounter overhead when tangling files. Also,
to avoid more advanced configuration of Org Babel tangling, there's a need to
have one org file for all packages that generate a Guild module.

However, here, I should just be able to discard whatever generated files I
don't want in the =./ellipsis-wip/= build directory. When I feel like I'm
"done", I can move the unit of work into a module namespace where other Guile
modules may consume it as a dependency.

* Roam
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
