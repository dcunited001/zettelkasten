:PROPERTIES:
:ID:       bd7dd6c8-7035-4e7a-b730-0d7f9c61ef9f
:END:
#+TITLE:     DC Guix
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

The main goal here is to provide a place for me to:

+ learn about build systems using Guix
+ work on packages (without commiting to a final product)
+ search my notes on build systems or previously encountered issues.

So don't expect for much information here to be correct ad infinitum.

* Guile Modules

+ For each module, there should be an org-file that accompanies it, but I may
  deviate from that eventually.
+ As I complete packages or services, they will be pulled into my
  =$dotfiles/ellipsis= project, but the notes will remain here. _And I will not
  almost never update them_.
+ If I have issues when building a tangled file, then I'll move it into a
  =dcguix/packages/$lang-build-system/package.scm=
+ If tangled files share adhoc dependencies that haven't been ported into
  =$dotfiles/ellipsis=, then I may move them into =dcguix/packages/$lang.scm=
  which would have its own org file.

* Packages

These will be found in the =./dcguix/packages= directory.

** Build Systems

*** GNU

**** Phases

 | set-SOURCE-DATE-EPOCH           | _                                                                                                                                |
 | set-paths                       | #:key target inputs native-inputs search-paths native-search-paths                                                               |
 | install-locale                  | #:key locale locale-category                                                                                                     |
 | unpack                          | #:key source                                                                                                                     |
 | bootstrap                       | #:key bootstrap-scripts                                                                                                          |
 | patch-usr-bin-file              | #:key native-inputs inputs patch-/usr/bin/file?                                                                                  |
 | patch-source-shebangs           | #:key source                                                                                                                     |
 | configure                       | #:key build target native-inputs inputs outputs configure-flags out-of-source?                                                   |
 | patch-generated-file-shebangs   | rest                                                                                                                             |
 | build                           | #:key make-flags parallel-build?                                                                                                 |
 | check                           | #:key target make-flags tests? test-target parallel-tests? test-suite-log-regexp                                                 |
 | install                         | #:key make-flags                                                                                                                 |
 | patch-shebangs                  | #:key inputs outputs patch-shebangs?                                                                                             |
 | strip                           | #:key target outputs strip-binaries? strip-command objcopy-command strip-flags strip-directories                                 |
 | validate-runpath                | #:key validate-runpath? elf-directories outputs                                                                                  |
 | validate-documentation-location | #:key outputs                                                                                                                    |
 | delete-info-dir-file            | #:key outputs                                                                                                                    |
 | patch-dot-desktop-files         | #:key outputs inputs                                                                                                             |
 | make-dynamic-linker-cache       | #:key outputs make-dynamic-linker-cache?                                                                                         |
 | install-license-files           | #:key outputs license-file-regexp out-of-source?                                                                                 |
 | reset-gzip-timestamps           | #:key outputs                                                                                                                    |
 | compress-documentation          | #:key outputs compress-documentation? documentation-compressor documentation-compressor-flags compressed-documentation-extension |

This extracts the arguments from each phase

#+begin_src scheme
(use-modules ((guix build gnu-build-system) :prefix gnu:)
             (ice-9 session) ; contains procedure-arguments
             ;; (ice-9 vlist)
             (ice-9 pretty-print))

gnu:%standard-phases

;; to list phases
;; (map (lambda (ph) (car ph)) gnu:%standard-phases)

;; this may be preferable to `program-arguments`
;; program-code -> find-program-arities -> arity-arguments-alist

(define (phase-arguments phases)
  (map (lambda (ph)
         (let* ((proc (cdr ph))
                (phname (procedure-name proc))
                (phargs (procedure-arguments proc)))
           ;; `((keyword ,(map car (assoc-ref phargs 'keyword)))
           ;;   (rest ,(assoc-ref phargs 'rest)))

           ;; the dot does crazy things here
           ;; (list phname . (map car (assoc-ref phargs 'keyword)))
           (list phname (map (lambda (ks) (car ks)) (assoc-ref phargs 'keyword)))))
       phases))

(phase-arguments gnu:%standard-phases)
#+end_src

*** RPM



*** Appimage

I though an appimage build system already existed.

*** Java

See [[https://lepiller.eu/en/supporting-java-modules-in-guix.html][Supporting Java Modules in Guix]] for a guide to building the JOSM Open Street
Maps editor

**** Ant Build System

**** Maven Build System

*** Golang

**** TODO figure out CGO_ENABLED builds

**** TODO package Open/Lens
[[https://github.com/NixOS/nixpkgs/blob/2230a20f2b5a14f2db3d7f13a2dc3c22517e790b/pkgs/applications/networking/cluster/lens/linux.nix#L34][nixpkgs]] installs from appimage

*** Rust

** Services



* Rationale

I'm not sure of a good way to separate out modules for packages/services that
I'm working on from my dotfiles project.

I have Guix packages/services in =./ellipsis= and =./dc=, but a few modules
with packages I'm working on in =./ellipsis/packages=.  Quite often, I just
want to see if I can build from source. If I don't finish, I either need to to
stash, save patches (via magit) or create branches.

+ This ends up creating a mess with many references that are hard to remember,
  if they're in Git at all.
+ If I don't remove them, there are a lot of sketchy warnings when building
  packages every time I do anything with Guix, since I don't have a proper
  channel.

I'm trying to use Guix to learn the various build systems, so I don't want
that learning to be conditionally predicated on the overhead and percarious
nature of running a channel... As they say: "don't let the perfect be the
enemy of the good"

Anyways, on the module loading problem:

+ I could use git worktrees. this is a bit complicated and would require
  identifying file references for scripts or maybe just changing the directory
  that =stow= operates on ... but i'd rather not, since this project is
  deployed onto several computers.
+ I can split the modules into an orphan branch and then clone this to another
  directory. This honestly doesn't help much, as it's not so different than a
  completely separate git repository.
+ I could set up a more consistent naming system to use Magit to create diffs
  from stashes.

So, unless anything changes, I'll just set up a directory within my
zettelkasten project, explicitly adding it to the =%load-path= before running
builds. I would like to keep my notes on builds within my org notes anyways.

One problem: you pretty quickly encounter overhead when tangling files. Also,
to avoid more advanced configuration of Org Babel tangling, there's a need to
have one org file for all packages that generate a Guild module.

However, here, I should just be able to discard whatever generated files I
don't want in the =./ellipsis-wip/= build directory. When I feel like I'm
"done", I can move the unit of work into a module namespace where other Guile
modules may consume it as a dependency.

* Roam
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
