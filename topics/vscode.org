:PROPERTIES:
:ID:       18d07822-9dda-4430-85a1-f7eb39f40429
:END:
#+TITLE: VSCode
#+DESCRIPTION:
#+TAGS:

* Docs

* Resources

* Topics

** Config

+ User config is in =./User/settings.json=. You could symlink or sync online.
+ Workspace configurations are in =./User/workspacestorage=

** Flatpak

Note the flatpak configuration instructions in [[github:flathub/com.vscodium.codium][flathub/com.vscodium.codium]]

The =vscodium= flatpak comes with a standard development environment and has a
python bundled inside.

** vscdb

+ vscode stores state as blobs in a single-table vscdb sqlite database
** secretStorage

[[https://cycode.com/blog/exposing-vscode-secrets/][VS Code’s Token Security: Keeping Your Secrets… Not So Secretly]]

#+begin_quote
TLDR:

+ be wary of 3rd party extensions and/or VSCode builds.
+ auto-expire your sessions if possible
+ it's a hell of a lot better than most electron apps (jesus christ!)
#+end_quote

IMO, it seems to take care to handle your secrets fairly well, though there be
dragons ... when are there not? Still, the article provides some good
information

+ vscode provides each extension's context with a secretStorage object
+ it mediates access to the OS keychain (potential implementation problems)
  using node.js =KeyTar=
+ It does restrict mutation/access to these objects to isolate their
  interactions with the rest of the software (in theory)

Nevermind, vscode is apparently using a combination of the =machineid= and the
VSCode executable path.

+ The blog demonstrates calling unwrap twice on [[https://dtantsur.github.io/rust-openstack/openssl/hash/struct.MessageDigest.html][openssl::hash::MessageDigest]]
  from a node process sharing the VSCode executable. It sources the extensions
  (into a single context?) and siphons the secrets out that way
+ The keychain is still isolated from other applications ... *if* your OS is
  configured properly. MacOS isolates this fairly well (AFAIK... which isn't
  much). I don't trust my keychain. So on MacOS, you'll at least get notified
  that your keychain is being accessed and it isn't granted access to all of
  your keychain.
+ On Linux, it's absolutely possible to use the keychain incorrectly. There may
  be other issues, depending on the VSCode or Codium build.

VSCode should:

+ provide a means to survey/log each's extensions access state.
+ allow for PIV and/or GPG-based layers of encryption on top. This would
  preferably use something like OpenSSL or AGE.
+ VSCode should not handle PIN requests and, optionally via extra configuration,
  should warn users if they're PIN interactions are using weak applications or
  inexclusive access (not sure if it's possible)

* Issues
** Guix

*** Shell Profile

**** Inheriting VSCodium Environment

Terminals come up with the expected =$PATH=, but tasks that are launched do
not. The processes are spawning s.t. they do not have parts of =.bashrc=. This
actually may be desirable, but is a bit confusing.

+ Install the [[https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug][Bash Debug]]
+ Create a executable bash script
+ Create a bash debug profile
+ Set a breakpoint
+ In the debug console, evaluate =$PATH=

The easy way around this is to set =terminal.integrated.inheritEnv=false=, but
this could cause issues if VSCode expects a clean environment.

*** On Guix

If =~/.pyenv= exists, VSCode will think you have =pyenv=.

**** Shell Profile

Ensure =terminal.integrated.profiles.linux= includes a profile that injects
=GUIX_AUTOLOAD_PROFILES=. The set of profiles should include one that contains
=direnv= and other tools.

On Guix System, VSCode forks from a login profile -- but from before the
=.xsession= script runs. Set up a terminal profile like the following to run
your =.profile= logic like it's a login shell, which will also load =.bashrc=.
This sources the =~/.config/sh/profile.d/guix.sh= script, which should load a
custom set of profiles.

#+begin_src json

"bash": {
  "path": "bash",
  "icon": "terminal-bash",
  "env": {
    "GUIX_AUTOLOAD_PROFILES": "(desktop fonts mon devtools academic pythondev)"
  },
  "args": ["-l"]
}
#+end_src

The value for =GUIX_AUTOLOAD_PROFILES= gets interpreted as an array.

**** Direnv in VSCode

The [[github:direnv/direnv-vscode][direnv/direnv-vscode]] plugin only works for:

+ integrated terminals
+ custom tasks of type =shell=
+ environment variable substitutions like =${env:VAR}=

This really doesn't jive with how I'm loading environments, unless I'm working
in a Docker container.

+ It's not really clear how extensions run commands -- though I just don't
  know what VSCode does. There are logs somewhere. This probably appears in
  the VSCode browser tools.
+ If =python.terminal.activateEnvironment= is on, it's available for tasks,
  but gets loaded twice for shells.

For extensions whose configuration depends on Guix manifests:

+ If I were to open =*.hcl= files for packer or terraform, then the editor
  won't be integrated. And why use Guix? Why containerize your dependencies
  and pin versions?
+ If I use a Guix profile with a link -- =guix shell -p= instead of =guix
  shell -m= then I should be able to guarantee that I at least have a
  consistent path to reference binaries for in =settings.json= for
  project-specific configurations -- but there's a chance this would differ
  from system to system and it impairs sharing project settings.

Vim users working with Nix flakes would encounter many similar issues when
they cross-over to VSCode, though maybe Nix has better tooling.

**** In Flatpak

Config will be in =$FLATPAK_USER_VAR/app/vscodium.codium/config/VSCodium=
which has the structure of the standard Chrome-based electron app.

VSCodium spawns from the environment, so when it runs the =/bin/bash= from
inside it's flatpak, it still has the parent environment that =flatpak run=
didn't override.

I would recommend avoiding Flatpak unless you know the CLI well. It adds
another layer of indirection in managing shell profiles for tasks.

* Roam
