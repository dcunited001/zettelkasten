:PROPERTIES:
:ID:       53fc747a-3f12-411a-976a-345bb1924e2d
:END:
#+TITLE: VCS Version Control
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Repo

** Docs

** Resources
+ Subcommands

** Topics
*** CLI Options

The shell/system interface options are in =main.py= and the repo-specific
options are in =repo=.

Logging

Manifest

Checkout Modes

|---------------+--------------------------------|
| `repo` option | Notes                          |
|---------------+--------------------------------|
| --mirror      | create a replica of the remote |
| --archive     | uses `git-archive`             |
| --worktree    | uses `git-worktree`            |
|---------------+--------------------------------|

Checkout Optimzations

*** Worktrees, Submodules and Project Objects

The [[https://gerrit.googlesource.com/git-repo/+/master/docs/internal-fs-layout.md][Internal FS Layout]] doc clears up some confusion about how =git-repo= handles
worktrees, submodules and apparently project objects, a more recent development
in git-repo.

+ Repo keys on the project =name= for these three means of git object
  storage/management.
+ There be some problems if you you're developing on multiple remotes, both
  where there are identical =name= fields for a project/module and where the
  field's don't match for a single project.

#+begin_quote
However, this can run into problems if different remotes use the same path on
their respective servers. Best to avoid that.
#+end_quote

+ Using =is-derived= Repo distinguishes between discovered =git submodules= and
  those explicitly defined in the manifests (as children of projects).
+ A quick glance shows there are no subprojects in =manifest.xml= files in
  Android & Chromium. Only some projects have =clone-depth= set.

**** Multiple References in a manifests meant to support builds

Looking at the code, =--recurse-submodules= is quite common, but I haven't tried
to test any use cases yet. A =manifest.xml= set up to pull =riverwm= and build
is the first time I'm actually running into this.

+ River pulls 4 submodules and one of the modules shares the other three
  dependencies.

Besides being a convenient way to pull tons of code down quickly, one of the
main benefits of repo is to support "metabranches" and allow a subset of the
dependencies' branches to be swapped out quickly to rebuild. Using =git
worktree= allows you to be agile on such a project without succumbing to the
boilerplate and shielding you from the bureaucracy of pull requests & rebase
cycles.


** Issues
*** Speed of repo sync

Use =sync-c= to limit the ref space that =repo sync= downloads for a project


*** Worktrees vs. Submodules

The git implementations of these features are maybe incompatible (and a dev
workflow doesn't really jive with using both). The repo source

*** Management

**** List all projects tagged as $group

#+begin_src shell
repo list -g $group
#+end_src

**** Stash and unstash

#+begin_src shell
repo forall -c git stash
# ... run some commands like repo sync
repo forall -c git stash pop
#+end_src

**** Create Iterate Through A Group's Project's and Link

#+begin_src shell
cd /data/ecto/emacs
repo_link_groups emacs
#+end_src

#+RESULTS:
| BonfaceKilz_emacs              |
| BonfaceKilz/emacs              |
| Brettm12345_emacs              |
| Brettm12345/emacs              |
| abo-abo_emacs                  |
| abo-abo/emacs                  |
| bamos_dotfiles                 |
| bamos/dotfiles                 |
| bbatsov_emacs                  |
| bbatsov/emacs                  |
| benmezger_dotfiles             |
| benmezger/dotfiles             |
| cjbassi_dotfiles               |
| cjbassi/dotfiles               |
| daedreth_emacs                 |
| daedreth/emacs                 |
| daviwil_emacs                  |
| daviwil/emacs                  |
| dcunited001_doom               |
| dcunited001/doom               |
| dcunited001_dotfiles           |
| dcunited001/dotfiles           |
| dfeich_emacs-course            |
| dfeich/emacs-course            |
| dfeich_emacs-course-and-config |
| dfeich/emacs-course-and-config |
| dfeich_org-babel-examples      |
| dfeich/org-babel-examples      |
| frap_emacs                     |
| frap/emacs                     |
| gtrunsec_dotfiles              |
| gtrunsec/dotfiles              |
| joseph8th_emacs                |
| joseph8th/emacs                |
| karthink_emacs                 |
| karthink/emacs                 |
| kitnil_dotfiles                |
| kitnil/dotfiles                |
| kubemacs_emacs                 |
| kubemacs/emacs                 |
| lccambiaghi_emacs              |
| lccambiaghi/emacs              |
| magnars_emacs                  |
| magnars/emacs                  |
| mwfogleman_emacs               |
| mwfogleman/emacs               |
| purcell_emacs                  |
| purcell/emacs                  |
| rasendubi_emacs                |
| rasendubi/emacs                |
| sachac_emacs                   |
| sachac/emacs                   |
| tammymakesthings_emacs         |
| tammymakesthings/emacs         |
| tuhdo_emacs                    |
| tuhdo/emacs                    |
| ubolonton_emacs                |
| ubolonton/emacs                |
| zamansky_emacs                 |
| zamansky/emacs                 |

* Gerrit

+ [[https://github.com/orgs/GerritCodeReview][Github]] (clone)

** Docs

** Resources
+ Gerrit uses a [[https://gerrit-review.googlesource.com/Documentation/note-db.html][NoteDb]] backend

** Topics

*** CI/CD

[[https://ci.chromium.org/][ci.chromium.org]]

+ Example task: verify git-repo CL
  - [[https://ci.chromium.org/ui/p/gerrit/builders/try/Verify%20git-repo%20CL/b8786603225359127473/overview][output from run]]
  - [[https://ci.chromium.org/p/gerrit/builders/try/Verify%20git-repo%20CL][builds]]

** Issues

*** Authenticate via SSH on googlesource.com

Setup account on [[gerrit.googlesource.com][gerrit.googlesource.com]] by authenticating with
=.gitcookies=. Must be capable of authenticating to clone,

+ Then check out =refs/users/self= branch by refspec. A bit tricky. Then update
  =authorized_keys= and push with cookie auth.
+ The order of the keys in your file matters. If you lose a key, comment the
  line, but the line numbers must match exactly.Add keys one at a time (you
  never know how it works on the backend)
+ Then configure your =~/.ssh/config= and include the port =29418=. Then update
  the remote URL. Then attempt to fetch/pull again.
+ Then realize that Google probably doesn't open SSH authentication and if it
  does, then ... i donno how to escape the email address, which doesn't feel
  right for an ssh username.

  I just really don't like HTTPS or file-based auth for git repos. I need a copy
  of repo in [[https://github.com/ectorepo/ectorepo][ectorepo/ectorepo]] to reuse the python code to merge XMLs, since
  =guix search= doesn't show any lightweight XML tools besides =python-genshin=.

  There's also =yq= -- barf, it's xml-to-json-to-xml and that means python pulls
  in lots of deps and shit why not node.js too (who knows). Anyways, git-repo
  doesn't work too good inside of repo, so it can't just have a manifest: it
  needs gitmodules.

  But yeh, I went down the GML rabbit hole again lol.

* Git

** Docs
** Resources

+ [[https://www.cs.cmu.edu/~15131/f15/topics/git/][Practical Ideas for Git]] (CMU)
+ [[A Hacker's Guide to Git][A Hacker's Guide to Git]]

*** Git Hooks
+ [[github:aitemr/awesome-git-hooks][aitemr/awesome-git-hooks]]
+ [[github:autohook/autohook][autohook/autohook]] (req. bash only)
+ [[github:rycus86/githooks][rycus86/githooks]] (req. bash only)

**** Guides
+ [[https://www.analysisandsolutions.com/code/git-hooks-summary-cheat-sheet.htm][Cheatsheet]]

**** Examples

[[http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook/][Deploying website with git hooks]]

** Topics

*** Config

**** Branch Config

***** autosetup

See [[https://stackoverflow.com/a/22147540][this s/o answer]]. Both should probably be set, but the latter is kinda
pointless when =pull.rebase=true=

+ branch.autoSetupMerge :: whether to default to =--track= new and checked out
  branches
+ branch.autoSetupRebase :: whether to set up new branches to =git pull= with
  rebase

*** Bare Repos

**** Push to a bare remote

+ [[https://gist.github.com/joahking/780877][joahking/780877]]

*** Scripting

**** git for-each-ref



**** [[https://www.viget.com/articles/the-new-git-option-for-rebasing-multiple-branches-at-once/][git rebase --update-refs]]

The =git rebase --update-refs= can be used interactively. This fixes downstream
branches that point back to an =upstream-to-checkout= range of commits being
rebased.


#+begin_verse
A---o---o---o---(M)  master
 \
  o---o---o---o---(B)  next
                   \
                    o---o---(C)  topic
#+end_verse

#+begin_example sh
git rebase --interactive --update-refs first~
#+end_example


*** Rebase


**** "Grammar"

Not sure why i have so much issue with the "grammar", but I never properly
learned it. I just restricted its usage to a handful of invocations. I used this
all the time, but as you can see, [[https://github.com/dcunited001/dc.files.alias/blob/master/func.sh#L51-L57][quite a bit of my usage was redundant]] ... better
options are now available like =--update-refs=

=git rebase --onto <newbase> <upstream> <checkout/branch>=

These are just coordinates for a tree:

+ The =upstream= to =checkout/branch= are a range of commits.
+ The =--onto= is a location in the tree.

=git rebase= has a kind of "VO" grammar, though the "object" is specified as a
combination of the =<upstream> <branch>= arguments, which is easier to think of
as:

+ =from <upstream> to <branch>= onto...
+ =from <upstream> out to <checkout>= onto...
+ Move =0 to N= to =@= (see below)

Rebase is just a macro, so it will literally checkout the =branch= argument,
then rewind it to upstream (equiv. to some reset invocation)

#+begin_verse
o---o---o---o---@  master
 \
  o---o---o---o---0  next
                   \
                    o---o---N  topic
#+end_verse

Anyways, this probably doesn't account for edge cases.

****

*** Refs

**** commit-ish and tree-ish

[[https://stackoverflow.com/a/18605496][commit-ish vs tree-ish]] (see also =man gitrevisions=)

From the above stack overflow answer:

|-------------------------+------------------------------------------|
| Commit-ish/Tree-ish     | Examples                                 |
|-------------------------+------------------------------------------|
| 1. <sha1>               | dae86e1950b1277e545cee180551750029cfe735 |
| 2. <describeOutput>     | v1.7.4.2-679-g3bee7fb                    |
| 3. <refname>            | master, heads/master, refs/heads/master  |
| 4. <refname>@{<date>}   | master@{yesterday}, HEAD@{5 minutes ago} |
| 5. <refname>@{<n>}      | master@{1}                               |
| 6. @{<n>}               | @{1}                                     |
| 7. @{-<n>}              | @{-1}                                    |
| 8. <refname>@{upstream} | master@{upstream}, @{u}                  |
| 9. <rev>^               | HEAD^, v1.5.1^0                          |
| 10. <rev>~<n>           | master~3                                 |
| 11. <rev>^{<type>}      | v0.99.8^{commit}                         |
| 12. <rev>^{}            | v0.99.8^{}                               |
| 13. <rev>^{/<text>}     | HEAD^{/fix nasty bug}                    |
| 14. :/<text>            | :/fix nasty bug                          |
|-------------------------+------------------------------------------|
| Tree-ish only           | Examples                                 |
|-------------------------+------------------------------------------|
| 15. <rev>:<path>        | HEAD:README, :README, master:./README    |
|-------------------------+------------------------------------------|
| Tree-ish?               | Examples                                 |
|-------------------------+------------------------------------------|
| 16. :<n>:<path>         | :0:README, :README                       |
|-------------------------+------------------------------------------|

*** Worktree

Don't use =git worktrees= if you have submodules (or so i've read)

+ [[https://stackoverflow.com/questions/31871888/what-goes-wrong-when-using-git-worktree-with-git-submodules][A brief history of time and worktree/submodule [in]compatibility]] ~2016
  - and [[https://stackoverflow.com/questions/34460811/git-submodule-update-is-slow-how-can-i-debug-why-its-slow/52452587#52452587][the epilogue]] ~2018-2020

**** Usage

Don't use the same branch names across remotes

#+begin_quote
If <commit-ish> is a branch name (call it <branch>) and is not found, and
neither -b nor -B nor --detach are used, but there does exist a tracking branch
in exactly one remote (call it <remote>) with a matching name, treat as
equivalent to:

=git worktree add --track -b <branch> <path> <remote>/<branch>=
#+end_quote




**** Initial setup

For the initial clone, you either need to chose to:

+ create git worktrees to exist in a parent of the first worktree
+ or to run =git clone --bare= (like [[https://morgan.cugerone.com/blog/how-to-use-git-worktree-and-in-a-clean-way/][this example]]), which also requires some
  extra config (see another [[https://morgan.cugerone.com/blog/workarounds-to-git-worktree-using-bare-repository-and-cannot-fetch-remote-branches/][blog with the fix]] from the same author)

I would prefer the bare clone, to make configuration simpler. I hope this will
be okay when using multiple editors on the project ... (i don't want VSCode to
stomp on whatever magit has buffered)

With one worktree configured, my =.bare/config= file looks like:

#+begin_example gitconfig
[core]
	repositoryformatversion = 0
	filemode = true
	bare = true
[remote]
	pushDefault = dc
[remote "origin"]
	url = git@github.com:the-origin/the-project
  fetch = +refs/heads/*:refs/remotes/origin/*
[remote "dc"]
  url = git@github.com:dcunited001/the-project
  fetch = +refs/heads/*:refs/remotes/dc/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
#+end_example

This is what my directory looks like with =tree -aL 2 .= in.

#+begin_quote
.
├── .bare
│   ├── branches
│   ├── config
│   ├── HEAD
│   ├── refs
│   └── worktrees
│       └── main
│           └── gitdir
├── .git
├── .bin
└── main
    ├── .git
    ├── .github
    ├── .gitignore
    ├── LICENSE
    ├── README.md
    └── site
#+end_quote

+ The =.git= file points to =gitdir: ./.bare= so all of git's local state is in
  there, somewhere.
+ The =./main/.git= file points to: =gitdir: /data/mr/www/.bare/worktrees/main=
+ The =.bare/worktrees/main/gitdir= points to: =/data/mr/www/main/.git=

So these last two are absolute references and will break when moved. I think
changing them to relative paths will work and that there is probably CLI to
avoid the need to fix ... but I usually end up editing the config files.

***** magit

When using =magit= I do end up with multiple =magit-status= buffers. Opening in
the directory that contains =.bare/= will open a =magit-status= there (and
associated process). Opening in the =main= worktree will open a =magit-status=
there.

Since I'm using the =.bare= checkout, everything points to a pretty well-defined
=gitconfig= definition, though i think one can get this with/out the =.bare=
checkout by simply designating a single =main= clone in a =$parent/main=
directory, then using =git worktree add $wtname ../$wtdir=. This would have
basically the same result.

What worries me is automation in the background for most editors (that hide
details from users). It would come down to how the tools access the index -- i
believe the =git= CLI was designed to handle cases where multiple processes
attempt to access index files. As long as everything uses the =git= CLI as a
common interface from which it extracts data ... then at least the git index
AFAIK should be ok.

... the worktrees that are checked out ... idk. I would scope one editor per worktree.

***** magit with forge.el

As for Forge, it adds remotes to a database keying on the remote URL, so I think
it will mostly work -- though there is still the need to keep the multiple
=magit-status= buffers in mind... I was worried about extra state/structure
increasing the cognitive load.

+ In neither the =./.bare= clone nor the =./main= worktree can I directly access
  the pull requests from the =magit-status= buffer for that directory. I can use
  use =Nlp= to list them, then access the contents from there.
+

***** Migrating unfinished work

To help migrate over, i moved my original =git clone= to a sibling directory
=./www2/=, then created a new directory in its place and cloned the =.bare=
inside of it.

Then I examined the unpushed local brances in the original checkout and used
=magit= to =format patch=. This saves a branch to a bunch of files in sequence
that can be applied later. If the changes are atomic/independent, then applying
the patches should not result in merge conflicts.


*** Subtree

[[https://www.atlassian.com/git/tutorials/git-subtree][git subtree]] goddammit

** Issues

*** [[https://stackoverflow.com/a/9322283][Hard links inside git]]

There be problems. it's probably not worth it

+ I lost some content ... or rather it diverged
+ this seems doubly bad if inside a Syncthing share

** [[https://git-scm.com/docs/git-send-email][git-send-email]]

*** In Guix project

The Guix manual section on [[https://guix.gnu.org/manual/en/guix.html#Submitting-Patches][Submitting Patches]] has some information

*** Configuring

**** Email

Can configure on a repo-by-repo basis with =git config --local=

+ [[https://www.geeksforgeeks.org/how-to-send-email-using-git-send-email-via-gmail/][How to send email using Git send-email via Gmail?]]
+ [[https://troglobit.com/post/2022-01-24-gmail-and-git-send-email/][Gmail and git send-email]]
+ or setup =git-send-gmail= for [[https://github.com/google/gmail-oauth2-tools/tree/master/go/sendgmail][Gmail with OAuth2]]

Setup [[https://gist.github.com/jasonkarns/4354421][Gmail app-specific passwords]]:

#+begin_quote
Account -> Security -> 2Factor -> App Passwords
#+end_quote

**** Git

=~/.gitconfig= gives you a hook for running a script

#+begin_src conf
[sendemail]
        smtpServer = /usr/local/bin/msmtp
        smtpServerOption = -v
#+end_src

See [[https://billauer.co.il/blog/2022/10/git-send-email-with-oauth2-gmail/][Using git send-email with Gmail+OAUTH2 w/o subscribing to cloud services]]

* Fossil
