:PROPERTIES:
:ID:       53fc747a-3f12-411a-976a-345bb1924e2d
:END:
#+TITLE: VCS Version Control
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Repo

** Docs

** Resources
+ Subcommands

** Topics
*** CLI Options

The shell/system interface options are in =main.py= and the repo-specific
options are in =repo=.

Logging

Manifest

Checkout Modes

|---------------+--------------------------------|
| `repo` option | Notes                          |
|---------------+--------------------------------|
| --mirror      | create a replica of the remote |
| --archive     | uses `git-archive`             |
| --worktree    | uses `git-worktree`            |
|---------------+--------------------------------|

Checkout Optimzations

*** Worktrees, Submodules and Project Objects

The [[https://gerrit.googlesource.com/git-repo/+/master/docs/internal-fs-layout.md][Internal FS Layout]] doc clears up some confusion about how =git-repo= handles
worktrees, submodules and apparently project objects, a more recent development
in git-repo.

+ Repo keys on the project =name= for these three means of git object
  storage/management.
+ There be some problems if you you're developing on multiple remotes, both
  where there are identical =name= fields for a project/module and where the
  field's don't match for a single project.

#+begin_quote
However, this can run into problems if different remotes use the same path on
their respective servers. Best to avoid that.
#+end_quote

+ Using =is-derived= Repo distinguishes between discovered =git submodules= and
  those explicitly defined in the manifests (as children of projects).
+ A quick glance shows there are no subprojects in =manifest.xml= files in
  Android & Chromium. Only some projects have =clone-depth= set.

**** Multiple References in a manifests meant to support builds

Looking at the code, =--recurse-submodules= is quite common, but I haven't tried
to test any use cases yet. A =manifest.xml= set up to pull =riverwm= and build
is the first time I'm actually running into this.

+ River pulls 4 submodules and one of the modules shares the other three
  dependencies.

Besides being a convenient way to pull tons of code down quickly, one of the
main benefits of repo is to support "metabranches" and allow a subset of the
dependencies' branches to be swapped out quickly to rebuild. Using =git
worktree= allows you to be agile on such a project without succumbing to the
boilerplate and shielding you from the bureaucracy of pull requests & rebase
cycles.


** Issues
*** Speed of repo sync

Use =sync-c= to limit the ref space that =repo sync= downloads for a project


*** Worktrees vs. Submodules

The git implementations of these features are maybe incompatible (and a dev
workflow doesn't really jive with using both). The repo source

*** Management

**** List all projects tagged as $group

#+begin_src shell
repo list -g $group
#+end_src

**** Stash and unstash

#+begin_src shell
repo forall -c git stash
# ... run some commands like repo sync
repo forall -c git stash pop
#+end_src

**** Create Iterate Through A Group's Project's and Link

#+begin_src shell
cd /data/ecto/emacs
repo_link_groups emacs
#+end_src

#+RESULTS:
| BonfaceKilz_emacs              |
| BonfaceKilz/emacs              |
| Brettm12345_emacs              |
| Brettm12345/emacs              |
| abo-abo_emacs                  |
| abo-abo/emacs                  |
| bamos_dotfiles                 |
| bamos/dotfiles                 |
| bbatsov_emacs                  |
| bbatsov/emacs                  |
| benmezger_dotfiles             |
| benmezger/dotfiles             |
| cjbassi_dotfiles               |
| cjbassi/dotfiles               |
| daedreth_emacs                 |
| daedreth/emacs                 |
| daviwil_emacs                  |
| daviwil/emacs                  |
| dcunited001_doom               |
| dcunited001/doom               |
| dcunited001_dotfiles           |
| dcunited001/dotfiles           |
| dfeich_emacs-course            |
| dfeich/emacs-course            |
| dfeich_emacs-course-and-config |
| dfeich/emacs-course-and-config |
| dfeich_org-babel-examples      |
| dfeich/org-babel-examples      |
| frap_emacs                     |
| frap/emacs                     |
| gtrunsec_dotfiles              |
| gtrunsec/dotfiles              |
| joseph8th_emacs                |
| joseph8th/emacs                |
| karthink_emacs                 |
| karthink/emacs                 |
| kitnil_dotfiles                |
| kitnil/dotfiles                |
| kubemacs_emacs                 |
| kubemacs/emacs                 |
| lccambiaghi_emacs              |
| lccambiaghi/emacs              |
| magnars_emacs                  |
| magnars/emacs                  |
| mwfogleman_emacs               |
| mwfogleman/emacs               |
| purcell_emacs                  |
| purcell/emacs                  |
| rasendubi_emacs                |
| rasendubi/emacs                |
| sachac_emacs                   |
| sachac/emacs                   |
| tammymakesthings_emacs         |
| tammymakesthings/emacs         |
| tuhdo_emacs                    |
| tuhdo/emacs                    |
| ubolonton_emacs                |
| ubolonton/emacs                |
| zamansky_emacs                 |
| zamansky/emacs                 |

* Gerrit

+ [[https://github.com/orgs/GerritCodeReview][Github]] (clone)

** Docs

** Resources
+ Gerrit uses a [[https://gerrit-review.googlesource.com/Documentation/note-db.html][NoteDb]] backend

** Topics

*** CI/CD

[[https://ci.chromium.org/][ci.chromium.org]]

+ Example task: verify git-repo CL
  - [[https://ci.chromium.org/ui/p/gerrit/builders/try/Verify%20git-repo%20CL/b8786603225359127473/overview][output from run]]
  - [[https://ci.chromium.org/p/gerrit/builders/try/Verify%20git-repo%20CL][builds]]

** Issues

*** Authenticate via SSH on googlesource.com

Setup account on [[gerrit.googlesource.com][gerrit.googlesource.com]] by authenticating with
=.gitcookies=. Must be capable of authenticating to clone,

+ Then check out =refs/users/self= branch by refspec. A bit tricky. Then update
  =authorized_keys= and push with cookie auth.
+ The order of the keys in your file matters. If you lose a key, comment the
  line, but the line numbers must match exactly.Add keys one at a time (you
  never know how it works on the backend)
+ Then configure your =~/.ssh/config= and include the port =29418=. Then update
  the remote URL. Then attempt to fetch/pull again.
+ Then realize that Google probably doesn't open SSH authentication and if it
  does, then ... i donno how to escape the email address, which doesn't feel
  right for an ssh username.

  I just really don't like HTTPS or file-based auth for git repos. I need a copy
  of repo in [[https://github.com/ectorepo/ectorepo][ectorepo/ectorepo]] to reuse the python code to merge XMLs, since
  =guix search= doesn't show any lightweight XML tools besides =python-genshin=.

  There's also =yq= -- barf, it's xml-to-json-to-xml and that means python pulls
  in lots of deps and shit why not node.js too (who knows). Anyways, git-repo
  doesn't work too good inside of repo, so it can't just have a manifest: it
  needs gitmodules.

  But yeh, I went down the GML rabbit hole again lol.

* Git

** Docs

** Resources

+ [[https://www.cs.cmu.edu/~15131/f15/topics/git/][Practical Ideas for Git]] (CMU)
+ [[A Hacker's Guide to Git][A Hacker's Guide to Git]]

*** Git Hooks
+ [[github:aitemr/awesome-git-hooks][aitemr/awesome-git-hooks]]
+ [[github:autohook/autohook][autohook/autohook]] (req. bash only)
+ [[github:rycus86/githooks][rycus86/githooks]] (req. bash only)

**** Guides
+ [[https://www.analysisandsolutions.com/code/git-hooks-summary-cheat-sheet.htm][Cheatsheet]]

**** Examples

[[http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook/][Deploying website with git hooks]]

** Topics
*** Worktree

+ [[https://stackoverflow.com/questions/31871888/what-goes-wrong-when-using-git-worktree-with-git-submodules][A brief history of time and worktree/submodule [in]compatibility]] ~2016
  - and [[https://stackoverflow.com/questions/34460811/git-submodule-update-is-slow-how-can-i-debug-why-its-slow/52452587#52452587][the epilogue]] ~2018-2020

*** Subtree

[[https://www.atlassian.com/git/tutorials/git-subtree][git subtree]] goddammit

** Issues

*** [[https://stackoverflow.com/a/9322283][Hard links inside git]]

There be problems. it's probably not worth it

+ I lost some content ... or rather it diverged
+ this seems doubly bad if inside a Syncthing share

** [[https://git-scm.com/docs/git-send-email][git-send-email]]

*** In Guix project

The Guix manual section on [[https://guix.gnu.org/manual/en/guix.html#Submitting-Patches][Submitting Patches]] has some information

*** Configuring

**** Email

Can configure on a repo-by-repo basis with =git config --local=

+ [[https://www.geeksforgeeks.org/how-to-send-email-using-git-send-email-via-gmail/][How to send email using Git send-email via Gmail?]]
+ [[https://troglobit.com/post/2022-01-24-gmail-and-git-send-email/][Gmail and git send-email]]
+ or setup =git-send-gmail= for [[https://github.com/google/gmail-oauth2-tools/tree/master/go/sendgmail][Gmail with OAuth2]]

Setup [[https://gist.github.com/jasonkarns/4354421][Gmail app-specific passwords]]:

#+begin_quote
Account -> Security -> 2Factor -> App Passwords
#+end_quote

**** Git

=~/.gitconfig= gives you a hook for running a script

#+begin_src conf
[sendemail]
        smtpServer = /usr/local/bin/msmtp
        smtpServerOption = -v
#+end_src

See [[https://billauer.co.il/blog/2022/10/git-send-email-with-oauth2-gmail/][Using git send-email with Gmail+OAUTH2 w/o subscribing to cloud services]]

* Fossil
