:PROPERTIES:
:ID:       2049060e-6755-4a64-b295-F7B563B41505
:END:
#+title: NixOS
#+CATEGORY: slips
#+TAGS:


* Roam
+ [[id:425188b1-d9f0-4d3a-a2fb-D13254A02ACE][Linux]]
+ [[id:47D9D8bf-a0de-45c5-8ff4-DD66C9AB66BD][Guix]]

* Docs

+ [[https://nixos.org/manual/nix/stable/][Manual]]
  - [[https://nixos.org/manual/nix/unstable/command-ref/conf-file.html][nix.conf]]
+ [[https://nix.dev/manual/nix][nix.dev reference manual]]
+ [[https://nixos.org/learn.html][Learn]]
+ [[https://wiki.archlinux.org/title/Nix][Archwiki]]

** Tools
+ [[https://github.com/nix-community/manix][nix-community/manix]]
+ [[https://boinkor-net.github.io/nix-dash-docsets][Dash Docsets]] via [[https://github.com/boinkor-net/nix-dash-docsets][boinkor-net/nix-dash-docsets]]
  - =daily-zeal/{nix,nixpkgs,nix-darwin,nixos,home-manager}.xml=


* Resources

** Learning

+ [[https://zero-to-nix.com/concepts/flakes/][Zero to Nix]]

*** Academic

+ [[https://web.archive.org/web/20190609111633/https://nixos.org/~eelco/pubs/phd-thesis.pdf][2006 Thesis: The Purely Functional Software Deployment Model]]
+ [[https://edolstra.github.io/pubs/iscsd-scm11-final.pdf][2003: Integrating Software Construction and Software Deployment]]

*** Language

+ [[https://discourse.nixos.org/t/reference-diagram-for-nix-file-module-flake-function-use-cases-and-identification/43442/2][What even is a...]] flake/module/function/etc
+ [[https://nixcademy.com/posts/what-you-need-to-know-about-laziness/][What you need to know about laziness]]
  - [[https://en.wikibooks.org/wiki/Haskell/Graph_reduction#Weak_Head_Normal_Form][Weak Head Normal Form]]
+ [[https://ianthehenry.com/posts/how-to-learn-nix/nix-language][How To Learn Nix (12) Nix Language]]
*** NixOS

+ Most users and groups have =uid= and =gid= listed in =./nixos/modules/misc/ids.nix=

** Schema

*** JSON Schema

+ [[https://clan.lol/blog/json-schema-converter/][jsonschema-converter]] extract Nix module interfaces to JSON schema
  - uses [[https://git.clan.lol/clan/clan-core/src/branch/main/lib/jsonschema][clan/clan-core/src/branch/main/lib/jsonschema]]

** Deployment
+ [[github:serokell/deploy-rs][serokell/deploy-rs]]
+ [[awakesecurity/nix-deploy][awakesecurity/nix-deploy]]

** Channels
+ [[https://wiki.nixos.org/wiki/Channel_branches][Channel Branches]]

*** Examples

+ Wroclaw/nixos-configuration

*** Mixing with flakes
+ [[https://discourse.nixos.org/t/do-flakes-also-set-the-system-channel/19798][Do flakes also set the system channel? (2022)]]

** Flakes

*** Ecosystem

+ flake-parts
+ home-manager
+ dendritic


*** Modules

*** Packages

+ [[https://github.com/Lehmanator/json-schema-nix][Lehmanator/json-schema-nix]]

** Home Manager

** Reproducibility

+ [[https://www.nixhub.io/packages/hyprgui][nixhub.io]] which gives a devbox command and the package's 1234a1c2d3#hyprgui
  revision, but not a nix command
+ [[https://lazamar.co.uk/nix-versions/][lazamar.co.uk/nix-versions]] gives the command to run for historical package
  archives

=nix-shell -p hyprgui -I nixpkgs=$nixpkgsArchiveUrl/d27c...bfb7c.tar.gz=

** Build Systems
+ [[https://www.tweag.io/blog/2021-03-04-gomod2nix/][Announcing Gomod2nix]] (2021) not sure whether this is like [[https://gitlab.com/martin-baulig/config-and-setup/guix-packages/-/tree/work-wal-g/packages/baulig/build-system?ref_type=heads][baulig's go-module]]
  build system or not.

** Packaging
*** Variants
+ [[https://github.com/NixOS/rfcs/blob/c655bdaab40f7a467f75dbb5af4325d991874e44/rfcs/0140-simple-package-paths.md?plain=1#L164][RFC 0140 simple package paths]] explans the =with import <nixpkgs> {};
  callPackage pkgs/applications/misc/hello.nix {}= pattern


** Containers
+ [[https://blog.nicholaszolton.dev/posts/taking-control-of-your-code/][Taking Control of Your Code]]: podman,nginx,gitlab,https
*** Podman
+ [[https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html-single/building_running_and_managing_containers/index][RHEL9: Building, Running and Managing Containers]]
+ [[https://github.com/containers/podman/discussions/17610#discussioncomment-6550124][containers/podman#17610]] running containers as services using with
  non-interactive users. see highlighted comment about a potential issue if
  =useradd= doesn't run with =-F= which doesn't create =subid= mappings

**** Rootless with service user
(2025/3/11) [[https://github.com/nixos/nixpkgs/issues/389088][nixos/nixpkgs#389088: virtualisation.oci-containers.containers:
podman rootless not working]]

explains config for user-constrained OCI services:
**** Tools

***** [[https://github.com/SEIAROTg/quadlet-nix][SEIAROTg/quadlet-nix]] OCI services
+ recommended via NixOS Discourse [[https://discourse.nixos/t/rootless-podman-setup-with-home-manager/57905/6][Rootless Podman Setup With Home Manager]]
+ compares tools used for OCI services


* Topics

** Containers
*** NixOS Containers

Run [[https://wiki.nixos.org/wiki/NixOS_Containers][NixOS "systems" as containers]] on a system

*** OCI Containers
** Dev Tooling
*** Search
+ 3timeslazy/nix-search-tv: search nix packages using tv/fzf
+ [[https://github.com/Azeirah/nix-deps-treemap][Azeirah/nix-deps-treemap]]

*** LSP
**** Inconsistent completion

Does this have anything to do with lacking consistent info from channels? Or
updating system/channel during LSP sessions without refreshing the sessions?

**** nixd
+ [[https://raw.githubusercontent.com/nix-community/nixd/main/nixd/docs/nixd-schema.json][./nixd/docs/nixd-schema.json​]]

** Docs

*** Man

**** Manix
***** Update cache

After updating the cache within the intended environment, it doesn't matter much
which =manix= runs for search.

#+begin_src shell
nix run 'github:nix-community/manix' mapAttrs # apparently
#+end_src

****** Running without flakes

#+begin_src shell
nix run --file '<nixpkgs>' pkgs.manix -- --update-cache '*'
#+end_src

+ This refused to handle home-manager docs, since I've set that up in a flake
  I'm still building my system with nixos-rebuild


***** Find cache

This emits +13M of strace in about 3 seconds... lulz that's not bad, Rust.

#+begin_src shell
tmp=$(mktemp)
strace -e all -o $tmp manix mergeAttrs && less $tmp
#+end_src

It's in =$XDG_CACHE_DIR/manix=

#+begin_src shell :results output verbatim :dir (getenv "HOME")
ls .cache/manix/* | tree --fromfile . # ~/.cache/manix/*
#+end_src

#+RESULTS:
#+begin_example
.
└── .cache
    └── manix
        ├── comments.bin
        ├── last_version.txt
        ├── nixpkgs_doc_database.bin
        ├── nixpkgs_tree.bin
        └── options_nixos_database.bin

3 directories, 5 files
#+end_example

** Home Manager
*** Mixing Packages & Profiles with =hm=

[[https://zaynetro.com/post/2024-you-dont-need-home-manager-nix][You may not need a Home Manager]]

This is similar to something I had considered for Guix. It's a creative and
minimal approach. I'm a bit cynical about having too many tools and I'm not sure
how introducing each one will affect build times, storage or maintainance.

I just didn't want to end up in uncharted territory with Guix, since trying to
get the same configuration working on Guix system and arch was difficult. I'm
tryin to move towrads something in between this, hjem and home-manager.

#+begin_quote
I'm not trying to be overly critical here. I'll probably try a similar approach
& I enjoy thinking about this stuff. I've been holding off on flakes, but I
after seeing what's needed for channels (less than Guix, somewhat, but also
different) ... I need more exp. with builds, design and mainly =nix= the language
#+end_quote

Whether it would work out depends:

- on the use-case: whether the user primarily works with network, systems,
  webdev, devops, etc
- the developer's workflow, languages and tools (will linking)
- whether it's a foreign distribution/system (like darwin/bsd).
  - there shouldn't be as many issues there (idk). almost certainly there would
    be minimal coupling between home-manager builds and the system's state
- whether the user leverages the network for needs (make everything much
  simpler, except systemd network services and handling network configuration)
- how desktop components & d-bus services interact:
  - primarily an i3 & "x" bar user with bin scripts? or maintaining custom
    interfaces?
  - or half tiling WM & half custom-desktop-environment? d-bus decouples a lot
    of this, but need to choose whether interfaces deploy from system or =hm= or
    elsewhere.
- whether the user can anticipate where cognitive load increases.
  - which configs/scripts reference links & why
  - where can layers of abstraction be injected. e.g. instead of stylix, maybe
    push a config file update & let pywal read it. but this is more cognitive
    load & moving parts (honestly so is home configuration management anyways)
  - what's the system state and will services/processes need to restart.
  - what I had been designing would end up changing, but I didn't have enough
    experience with desktop packaging/etc (arch on easy mode, until it's not)


**** Approaches and Potential issues

+ You keep paths/shebangs/etc pointing to links, wherever possible.
  - org-tangle could produce some resulting configs files, but unless they're
    completely separate, it's not reproducible. even if it is, it's technically
    not pure
+ SystemD units can be connecting units together using symbolic references (by
  needs/wants/etc)
  - this can be usually be worked around by separating phases in the home build:
    system, packages/profile (or jinja/org-tangle) and finally hm.
  - stale sockets
  - updates to d-bus interfaces. d-bus is designed to decouple components from
    each other
+ Shebangs would also ideally point to links. I'm not sure, but that's
  difficult/impossible for shebangs unless you reserialize or push data into the
  serialization phase

+ Activation of systemd services
  - updating slices/scopes
  - load order if units need restarting between updates (but dependences aren't
    confined to scopes)

+ Serialization of configs/scripts is a lot of work. Much of this is simpler
  with Nix, I think. With Guix, your records specify an interface and are
  consumed by serializers (standard or custom). The latter was biggest blocker
  for me bc if I didn't anticipate some aspect of the g-exp's, diagnosing it
  requires tinkering with a ship in a bottle (whether during the build phases or
  afterwards).

+ When producing derived files/scripts with home-manager though, the tools you
  configure will end up stovepiped, since it's more costly to work around cases
  where there's interdependencies.
  - e.g. stylix produces themes 4 waybar/swaync that need to launch scripts
    calling other scripts/tools

**** TL;DR;

At some level or another, =hm= and =nixos= users want more customization &
efficiency. Regardless of where the complexity is, whether upstream (req.
pinning) or created in the repo, there's no eliminating it, since it's inherent
in the domain.

#+begin_quote
See [[https://lawsofux.com/articles/2024/teslers-law/#:~:text=The%20following%20is%20an%20excerpt,complexity%20that%20cannot%20be%20reduced.][Tesler's Law]]. Given a rough measure of complexity for each component, the
total complexity lies between the sum & product of all the components.
#+end_quote

With home configuration, users create their own complexity (i.e. lots of
ruby-goldberg footguns). External tooling helps a lot, but pre-figures many
aspects of design. The more complex the compoents, their interactions and the
users needs ... the more difficult it is to anticiate how design changes. With
upstream tooling, then it's at least well-tested and the incremental
development/testing has been socialized (... but users do need to at least grok
it first & that requires acclimation to the tooling/ecosystem)


** Derivations

** Dependencies
+ [[http://www.chriswarbo.net/projects/nixos/nix_dependencies.html][Dependency solving in Nix]]

** Devices
*** Udev

nixos/nixpkgs: android-udev-rules

-
- [[https://github.com/NixOS/nixpkgs/blob/e3222f1adc65f1e8a77f5c4dae8a9dba14038bec/nixos/modules/programs/adb.nix#L27-L31][./nixos/modules/programs/adb.nix]]

#+begin_src shell
vendor=1050
device=
busid="$(lsusb | grep Yubico | sed -E 's/^Bus ([0-9]+).*$/\1/g')"
devid="$(lsusb | grep Yubico | sed -E 's/^Bus.*Device ([0-9]+).*$/\1/g')"
devpath="/dev/bus/usb/$busid/$devid"
#+end_src

** Diffing

*** Diff Running System with Evaluted System

In [[https://discourse.nixos.org/t/how-to-find-derivations-that-have-already-been-built-by-various-nix-commands/17760/6][How to find derivations that have already been built]] the user mentions

#+begin_src shell
diff \
  --side-by-side --color --width 320 --left-column \
  <(nix path-info --derivation -rsSh .#checks.x86_64-linux.my-package | sort) \
  <(nix path-info --derivation -rsSh .#devShell.x86_64-linux | sort)

#+end_src

+ -rsSh :: recursive, size, closure size, hooman-readable
+ remove the args to just output the =.drv= for a =/nix/store= output

Most examples in =nix-diff -h= regard flakes-based objects, but can also take a
file-path.

for nix-diff, wee need the paths with suffix .drv

#+begin_src shell
# currentSys=/run/current-system # the link... and vvv also the link
# currentSys="$(nix-store -q --references /nix/var/nix/profiles/system | tail -n1)"

currentSys=$(readlink /run/current-system)
currentSysDrv=$(nix path-info --derivation /run/current-system)

newSys=/nix/store/wr4arbzq250pdd6s425w5nha9z0kylm0-nixos-system-kratos-25.05.805977.88983d4b665f
newSysDrv=$(nix path-info --derivation $newSys)
#+end_src

+ =diffeoscope= could works, but is intended for archives. derivations are like
  the metadata for a special type of archive, where the data is found in the
  store.
+ plain =diff= seems to work on the raw system, though linking could be a problem

#+begin_src shell
diff --color -r "${currentSys}" "${newSys}"
#+end_src

plain =diff= also works on the derivation, but this only prints the differences
between the top-level store items (the activation scripts)

#+begin_src shell
diff --color \
    <(cat "${currentSysDrv}" | sed -e 's/],/],\n/g' | sed -e 's/),/),\n/g') \
    <(cat "${newSysDrv}" | sed -e 's/],/],\n/g' | sed -e 's/),/),\n/g')
#+end_src

=nix-diff= is a more specific tool

#+begin_src shell
nix-diff "${currentSysDrv}" "${newSysDrv}"
#+end_src

+ It also diffs the top-level =config.nix= entry-point but not the differences
  between imported modules.
+ and (oof!) comments get diffed. =# noComments!= generally when working with
  nix/guix builds & store-objects at scale.
  - scheme is a lisp, so actually has more trouble keeping comments without
    retaining the file.
  - e.g. if a nested macro or macro accepts multiple s-expr at indices and these
    are not homogenously processed, they can unroll into statements where it's
    not clear how to retain the lexxed order of comment syntax. there's a =srfi=
    for =(comment "syntax")= but this comments out content at s-expression level
    and it's evaluation order is specific to this functionality (it /must/ be, but
    idk how specifically and that's not the intent of the features).
+ Anyways, this is the same as the basic info available in guix's
  =/run/current-system=, though I believe the provenance features can provide more
  information (given that the derivations' =/nix/store= data can be found)

** Secrets
*** Secret Service

**** GCR

+ To access SSH keys via ssh-agent ([[https://wiki.archlinux.org/title/GNOME/Keyring#SSH_keys][wrapped by GCR]])

#+begin_src nix
{ pkgs, ... }: {
  systemd.extraConfig = "DefaultTimeoutStopSec=10s";
  services.journald.extraConfig = "SystemMaxUse=300M";
  services.dbus.packages = [ pkgs.gcr ];
}
# https://wiki.nixos.org/wiki/Secret_Service
#+end_src

That will [[https://github.com/maximbaz/dotfiles/blob/8a82a18c1dd767b185e6bbe3bd04be05bce4d08d/modules/linux/systemd.nix#L4][add =pkgs.gcr='s dbus-1 interfaces/etc]] to the system/session bus (I
think to help with sops secret activation in either home/system)

#+begin_quote
Packages whose D-Bus configuration files should be included in
the configuration of the D-Bus system-wide or session-wide
message bus.  Specifically, files in the following directories
will be included into their respective DBus configuration paths:
{file}`«pkg»/etc/dbus-1/system.d`
{file}`«pkg»/share/dbus-1/system.d`
{file}`«pkg»/share/dbus-1/system-services`
{file}`«pkg»/etc/dbus-1/session.d`
{file}`«pkg»/share/dbus-1/session.d`
{file}`«pkg»/share/dbus-1/services`
#+end_quote

*** SOPS nix

**** Config Structure

+ 2022/10 [[https://samleathers.com/posts/2022-02-11-my-new-network-and-sops.html][my new network and sops]]
+ usage in [[https://github.com/nix-community/infra/tree/master/hosts/build01][nix-community/infra ./hosts/build01]]
**** Adding as channel

=niv= is recommended over channels, but the next version manager starting with =n=
... nevermind

#+begin_src shell
# the name defaults to the last path component
nix-channel --add https://github.com/Mic92/sops-nix
nix-channel --update
#+end_src
** Services

*** NixOS misc

+ ngocbd/nylon: socks proxy

*** SystemD
**** Problems

***** =systemd.user.services= get created for all users

Without defining outside of the system build, it should be possible to:

- hook a target that enables a specific user's units.
  - This could downstream from a =uwsm= target
  - or a simple target with units to trigger that only exist in =$XDG_DATA_HOME=
    for that user (created via =hjem= or =hm= or outside NixOS)
- or to run a script that enables them after update.

See [[https://github.com/NixOS/nixpkgs/blob/5a983011e0f4b3b286aaa73e011ce32b1449a528/nixos/lib/systemd-lib.nix#L72][./nixos/lib/systemd-lib.nix]]

**** Examples

***** Composing and Inheriting

From NobbZ

+ [[https://github.com/NobbZ/nixos-config/blob/4187e0413a4b0ecf503d4c22bbdcb7e449c927d4/home/modules/services/rustic/default.nix#L101-L134][./home/modules/services/rustic/default.nix#L101-L134]]
  - composes unit+service+timer
+ [[https://github.com/NobbZ/nixos-config/blob/4187e0413a4b0ecf503d4c22bbdcb7e449c927d4/nixos/configurations/mimas/restic.nix#L131][./nixos/configurations/mimas/restic.nix]]
  - =passwordFile = config.sops.screts.rustic.path;= sets the SOPS secret path
  - There looks to be a =pass:= URI here, but it's the =sops-nix= path.
  - See [[https://systemd.io/CREDENTIALS][systemd.io/CREDENTIALS]]

***** Socket Setup With Dependencies

+ Just look at source for nixpkgs' gnupg.nix:
**** Socket
**** Timer
**** Unit
**** Service
** Networking

*** Router

+ [[https://pavluk.org/blog/2022/01/26/nixos_router.html][My NixOS Router Journey]]


** Overrides

*** Loading an =overlay= with an =override=

#+begin_quote
This [[https://nixos.wiki/wiki/Snippets][Nix Wiki on Snippets (2018)]] contains a more clear example, though it's a
bit old and um idk
#+end_quote

This wasn't working for me, but it was close

#+begin_src nix
{...}: {
  nixpkgs.overlays = [
    (final: prev: {
      nh = prev.nh.overrideAttrs (old: {
        src = prev.fetchFromGitHub {
          owner = "nix-community";
          repo = "nh";
          tag = "v4.1.2";
          hash = "sha256-v02NsZ589zzPq5xsCxyrG1/ZkFbbMkUthly50QdmYKo=";
        };
      });
    })
  ];
}
#+end_src

At some point, it built the package at the newer version, but it wasn't adding
it into the system. I know that it did bc it failed the hash check and GC
removed it from the store. I don't know for sure that it was the right version,
but it was failing when the tag lacked the "v" in "4.1.2"

Since version "4.1.2" had already been built (or something idk), I couldn't
rebuild it. That wasn't the problem though.

*** Override a single package in =users.users.me.packages=

This doesn't work because =overrideAttrs= requires being passed to =mkDerivation=...

#+begin_src nix
{...}: {
  users.users.me = [
    packages = with pkgs;

      let
        nh412 = nh.overrideAttrs (prev: {
          src = fetchFromGitHub {
            owner = "nix-community";
            repo = "nh";
            sha = "003dd72d3234361c93d5be7ec9766c88e0dd1052";
            tag = "v4.1.2";
            hash = "sha256-v02NsZ589zzPq5xsCxyrG1/ZkFbbMkUthly50QdmYKo=";
          };
        });

      in [
        # ...
        nh412
        # ...
      ];
  ]
}
#+end_src

I tried using =override= instead.

#+begin_src nix
{...}: {
  user.users.me = {
    packages = with pkgs; [
      # ...
      (nh.override {
        src = fetchFromGithub {
            sha = "003dd72d3234361c93d5be7ec9766c88e0dd1052";
            tag = "v4.1.2";
            hash = "sha256-v02NsZ589zzPq5xsCxyrG1/ZkFbbMkUthly50QdmYKo=";
        };
      })
      # ...
    ];
  };
}
#+end_src

While this syntax is more flexible, it still doesn't work. The best way to
explain the difference between the two:

+ override :: overrides args (at the top of the Nix file)
+ overrideAttrs :: overrides attrs (defined inside the =mkDerivation= block)
+ The discord user mentions: "nixos files are just functions, the args are
  defined at the top of the file"... which I knew, but is like so obvious that
  (damit i still need to learn the language)

This is what I ended up going with

#+begin_src nix
{...}: {
  user.users.me = {
    packages = with pkgs; [
      # ...
      ((callPackage <nixpkgs/pkgs/by-name/nh/nh/package.nix>
        { }).overrideAttrs {
          src = pkgs.fetchFromGitHub {
            owner = "nix-community";
            repo = "nh";
            # sha1 = "003dd72d3234361c93d5be7ec9766c88e0dd1052";
            # tag = "v4.1.2";
            rev = "1b80ec22d3ab66fa806e14cceec3457984226d37";
            hash = "sha256-v02NsZ589zzPq5xsCxyrG1/ZkFbbMkUthly50QdmYKo=";
          };
          env.NH_REV = "1b80ec22d3ab66fa806e14cceec3457984226d37"; # src.rev;
        })
      # ...
    ];
  };
}
#+end_src

Lingering issues:

+ callPackage :: this is apparently unnecessary and the path to call it on is
  definitely verbose. for some =toplevel= packages it wouldn't be so bad.
+ env.NH_REV :: this is a bit difficult to get rid of, since it requires
  composing =overrideAttrs=


** ZaneyOS

+ Install Guide and [[https://gitlab.com/Zaney/zaneyos/-/blob/main/install-zaneyos.sh?ref_type=heads][Installer Script]]
+ [[https://github.com/ratfink417/zaney-sync][ratfink417/zaney-sync]] some resources for deriving systems/homes from the main
  ZaneyOS

*** Use Case

I need my 2013 Macbook Pro to be a Media PC, but

1) it must run headless. hyprland fits for this.
2) UWSM would be nice for automation or vty customization
3) I'd like steam link, which i just learned about here on Tom Hanks Island
4) It needs specific versions of NVidia drivers

*** Basics

** On Arch
*** Install

#+begin_src sh :tangle .config/sh/profile.d/nix-arch.sh :shebang #!/bin/bash
# add your main nix-profile to paths
export PATH=$HOME/.nix-profile/bin:$PATH
export XDG_DATA_DIRS=$HOME/.nix-profile/share:$XDG_DATA_DIRS

# TODO add potential for other Nix profiles
#+end_src

Install Nix and setup the groups. Configure =~/.config/nix/nix.conf= if necessary.

#+begin_example shell
yay -Syu nix

# to allow user access to the nix build daemon
sudo usermod -G nix-build

echo "max-jobs = auto" | sudo tee -a /etc/nix/nix.conf
#+end_example

Ensure that the =nix-ademon= service is running or just enable it.

#+begin_example shell
# to make fedora a tolerable daily driver. run with sudo to add channel to root
nix-channel --add https://nixos.org/channels/nixpkgs-unstable

# requires sudo to create /nix/store
nix-channel --update
#+end_example

Now nix should build and =direnv allow= should run flakes right.
** AMD Rocm
See [[https://github.com/nixos-rocm/nixos-rocm][nixos-rocm/nixos-rocm]]



*** JAX

JAX and AMDGPU compatibility: [[https://discourse.nixos.org/t/rocm-package-caches/52167][Discourse On AMDGPU.jl + Jax]] (may still require
some customization: MIOpen + RCCL?)

*** Package Variants

See [[https://github.com/NixOS/nixpkgs/tree/master/pkgs/top-level/variants.nix#L116][pkgs.pkgsRocm]] but don't evaluate it.

+ What's in variants.nix also connects to good examples of overrides/overlays.
+ =pkgs.pkgsCuda= doesn't evaluate in the REPL.
+ nothing exists for =pkgs.pkgsRocm.jax*=, but there is
  =pkgs.pkgsRocm.tensorflowLite= if flatbuffers and coral are your thing.


** Printable Docs

*** nix.dev

#+name: nixDevCss
#+begin_src css
#page-wrapper > .page { margin-top: 0 !important; }
p { margin: 0.3em 0em; line-height: 1.2em !important; }
main ul { margin: 0.2em 0; padding: 0 0 0 1em; }
/* .content p { line-height: 1.2em; } */
body { font-size: 1.1em; }
blockquote { margin: 0; }
h1,h2,h3,h4 { margin: 0.2em 0em !important; }
h2, h2 > a { color: darkblue !important; }
h3, h3 > a { color: darkred !important; }
h4, h4 > a { color: darkgreen !important; }
#+end_src

#+begin_src javascript :var css=nixDevCss
const d = document; // , qsa = d.querySelectorAll, qs = d.querySelector; // dammit
[ d.querySelector('#menu-bar-hover-placeholder'),
  d.querySelector('#menu-bar')].forEach(el => el.remove());
Array.from(d.querySelectorAll('nav')).forEach(el => el.remove());
bq = Array.from(d.querySelectorAll('main blockquote'));
bq.forEach(function(el) {
    // replace only sometimes though. great use of time.
    const pre = el.querySelector('pre');
    (pre && el.replaceWith(pre));
});
// let mainLi = Array.from(document.querySelectorAll('main > ul > li'))
#+end_src

oh, that's 2.18. no more line breaks in 2.30. (llm: v7.0-=1.1*n)

#+begin_example javascript
// remove <br>
// Array.from(d.querySelectorAll('main > ul > li br '))
//     .forEach((br) => br.remove());
//
#+end_example

To delete the repetitive Common Env Vars:

#+begin_src javascript
let mainChildren = document.querySelector('main').children;
let delFrom, delTo, delet; // = 'we could all be driving flying cars and writing clojure'
[delFrom, delTo, delet] = ['common-environment-variables', 'examples', false];
Array.from(mainChildren).forEach( function(el) {
    (el.id === delTo) && (delet = false);
    (el.id === delFrom) && (delet = true);
    (delet && el.remove());
})
#+end_src

... Or as a function

#+begin_src js
function delFromTo(within, from, to) {
  let delet = false;
  Array.from(within).forEach(function(el) {
    (el.id === to) && (delet = false);
    (el.id === from) && (delet = true);
    (delet && el.remove());
  });
}

// remove excessive options:
delFromTo(d.querySelector('main').children, 'logging-related-options', null);
d.querySelector('main').children[0].remove(); // remove warning
d.querySelector('main').children[0].textContent = 'nix'; // set h1 to command name

delFromTo(d.querySelector('main').children, 'options', null);
delFromTo(d.querySelector('main').children, 'common-evaluation-options', null);
delFromTo(d.querySelector('main').children, 'common-evaluation-options', 'options-that-change-the-interpretation-of-installables');
#+end_src

** Foreign Distros

*** numtide/system-manager

This allows nix/flakes to manage files/services on foreign distributions.

+ it's not clear how rpath, shebangs or dynamic library compatibility is handled
+ system-manager does not support channels
+ the docs do indicate that =system-manager= can work with existing systemd
  services.

+ [[https://github.com/nix-community/srvos?tab=readme-ov-file#non-flake-usage][nix-community/srvos]]

**** Un-Storing Nix/Guix Build Artifacts

"un-storing" nix builds is a bit difficult, though =guix pack= can be used to
produced RPMs (that unpack and overwrite to =/gnu/store=). I can explain how it's
possible to flatten the end-result of =guix pack= -- the SHAs in =/nix/store= are
unique and can be identified. If needed, they could be replaced in 95% of
circumstances, but there are other more complicated issues.

Similar issues are encountered if:

+ you operate a service like =cachix= or a private nix store that spans multiple
  servers (whether via a networked file system or not) and you have scaling
  concerns
+ you want to distribute tasks to map out stores to plan for future usage
+ you want to "map-reduce" tasks across distributed stores and have store items
  on other servers.
+ you want to determine why garbage collection went wrong

#+begin_quote
These seem somewhat unrelated to the above ... but they're not. It's the same
problem of partial subsets of derivation trees -- but from a different
perspective. It's just a different partial subset when debuilding/unstoring a
flattened =guix pack= derivation. See [[https://codeberg.org/guix/data-service][guix/data-service]] and [[https://guix.gnu.org/manual/devel/en/html_node/Guix-Services.html][related services in
the manual]]. idk whether it's theoretically possible or feasible.
#+end_quote

*** There be dragons

[[https://www.reddit.com/r/NixOS/comments/1gsz9jw/how_to_overcome_nixhome_manager_in_generic_linux/][This reddit post]] has a lot of information on this

**** Overcoming OpenGL issues

This user has [[https://github.com/bsendpacket/nixcfg][channel.nix]] that pins channels and also detects whether the system
is [[https://github.com/bsendpacket/nixcfg/blob/a3679bf73ac79a0acdc664de3a18ce24f530fed1/home.nix#L11][NixOS or not]]. User notes that dep. on =system= arch and store breaks functional
purity of the derivations. The repository also contains a lot of one-off
out-of-tree packages.

**** Using flakes on foreign systems

[[https://github.com/Skademaskinen/Archerus/blob/main/flake.nix][Skademaskinen/Archerus]] sets up a nixos server, an arch desktop and a gentoo laptop

The flake uses =numtide/system-manager= and has several outputs:

+ nixosConfigurations :: one for each home-manager configuration and one for the
  server, but these return an entire system configuration
+ systemConfigs :: contains =inputs.system-manager.lib.makeSystemConfig= to
  produce =desktop= and =laptop= for arch/gentoo respectively.
  - =makeSystemConfig= takes the foreign distribution and "homogenizes" it, so
    that it fits into =nixosConfigurations=... I think
+ packages${system} :: here the systems are exposed alongside the packages
  - mapping =config.system.build.vm= across =self.nixosConfigurations=. this output
    is for automated testing.

There's a dependency cycle: =systemConfigs= needs to complete as a derivation
before the =nixosConfigurations= can accept it as input ... if I'm grokking right.
I /think/ this could lead to derivations being calculated twice, though they'd
mostly resolve to the same points. This is covered in the [[https://github.com/numtide/system-manager/blob/main/manual/src/usage/example-configuration.md][system-manager example
configuration]] somewhat

** Building Packages

*** Out of tree (without flakes)

Oh well. I needed to check this one off the list anyways.

**** Overlay for deps (and from nixpkgs archives)

Unfortunately, nnyyxxxx/hyprparser and hyprutils/hyprparser are both offline.
These get identified from the crate.

Instead, run:

#+begin_src shell
nix-shell -p hyprgui -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/d27c0d08ef25912c134b755d40a1bd1d843bfb7c.tar.gz
#+end_src

This is nice because the author =nnyyxxxx= as been obliterated from the internet,
including from AUR, from Github, etc... see [[https://repology.org/project/hyprgui/history][repology]] and this [[https://www.reddit.com/r/hyprland/comments/1i9fh8m/what_happened_to_hyprlauncher/][reddit post]]

**** With =nix-build=

This uses =rustPlatform.buildRustPackage=, the equivalent to =cargo-build-system= in
Guix, but unfortunately the dependencies are no longer on Github.


I wanted to explore =hyprlang= by generating code to a throwaway file... without
using the GUI for much other than than that.

Build with

=nix-build -E 'with import <nixpkgs> {}; callPackage packages/hyprgui.nix {}'=

#+begin_src nix
{ lib, fetchFromGitHub, rustPlatform, pkg-config, glib, pango, cairo, gtk4
, wrapGAppsHook4, }:

rustPlatform.buildRustPackage rec {
  pname = "hyprgui";
  version = "0.2.0";

  src = fetchFromGitHub {
    owner = "MarkusVolk";
    repo = "hyprgui";
    rev = "refs/heads/main";
    hash = "sha256-j0TNFlg2rc4j19HVVipLroSzHbD7+KxJ17cvE76jd4M=";
    # rev = "refs/tags/v${version}";
    # hash = "sha256-akV83bvPuSJUleP0mDcnAR1KFegOXyoKSD0CVyNDJmc=";
  };

  cargoHash = "sha256-SBI2Gk4FImGw8169xIV8L0fbfcKzn6PqvLg6XxbpurI=";

  strictDeps = true;

  nativeBuildInputs = [ pkg-config wrapGAppsHook4 ];

  buildInputs = [ glib cairo pango gtk4 ];

  prePatch = ''
    substituteInPlace hyprgui.desktop \
    --replace-fail "/usr/bin/" ""
  '';

  postInstall = ''
    install -Dm644 -t $out/usr/share/icons hyprgui.png
    install -Dm644 -t $out/usr/share/applications hyprgui.desktop
    install -Dm644 -t $out/usr/share/licenses/${pname} LICENSE
  '';

  meta = {
    description = "GUI for configuring Hyprland written in Rust";
    homepage = "https://github.com/hyprutils/hyprgui";
    license = lib.licenses.gpl2Only;
    maintainers = with lib.maintainers; [ fccapria ];
    badPlatforms = lib.platforms.darwin;
    mainProgram = "hyprgui";
  };
}
#+end_src
* Issues
** The "Nix OpenGL" problem
Oh joy. I can't wait. Apparently [[https://github.com/guibou/nixGL][guibou/NixGL]] helps deal with this.

*** TODO deal with the Nix OpenGL usingwhen it becomes relevant

** Wiki

*** Dark mode doesn't work (Varnish caching PHP?)

Just needed =nwg-look= to set my GTK settings

#+begin_src emacs-lisp
(defun invert-css-rgb (x)
  (format "%06X" (- #x000000 x)))

;; convert #abc => #554433
(replace-regexp "\( +--.*\):#\(.\)\(.\)\(.\);$" "\1:#\2\2\3\3\4\4")

(with-current-buffer
(re-search-forward "[[:xdigit]]\\{6\\}"))

(defun invert-rgb-matches (&optional buffer)
  "replace matches in buffer, starting from current position"
  (interactive)
  (let ((regex "[[:xdigit:]]\\{6\\}")
        (acc))
    (save-excursion
      (with-current-buffer
          (or buffer (current-buffer))
        (save-restriction
          (widen)
          (goto-char 1)
          (while (search-forward-regexp regex nil t 1)
            (let* ((rgb (string-to-number (match-string 0) 16))
                   ;; (inv-rgb (format "%x" (invert-css-rgb rgb)))
                   (inv-rgb (invert-css-rgb rgb)))
              (push inv-rgb acc)
              (replace-match inv-rgb t))))))
    (nreverse acc)))

(string-join (invert-rgb-matches) " ")

;;(setq nix-wiki-colors (matches-in-buffer "[[:xdigit:]]\\{6\\}"))
;;(nth 1 nix-wiki-colors)
#+end_src

Invert colors on the NixOS wiki

#+begin_src css
@media screen {
  :root,
  .skin-invert,
  .notheme {
    --color-base:#DFDEDD;
    --color-base-fixed:#DFDEDD;
    --color-base--hover:#BFBDBB;
    --color-emphasized:#EFEBE7;
    --color-subtle:#ABA6A2;
    --color-placeholder:#8D8882;
    --color-disabled:#8D8882;
    --color-inverted:#000000;
    --color-inverted-fixed:#000000;
    --color-progressive:#CC9933;
    --color-progressive--hover:#B48829;
    --color-progressive--active:#DCCA99;
    --color-progressivyye--focus:#CC9933;
    --color-destructive:#28CCCC;
    --color-destructive--hover:#03B6C4;
    --color-destructive--active:#60CAD9;
    --color-destructive--focus:#CC9933;
    --color-visited:#959F4F;
    --color-destructive--visited:#60AAAA;
    --color-error:#28CCCC;
    --color-warning:#114ACC;
    --color-success:#E8879F;
    --color-notice:#DFDEDD;
    --color-content-added:#FF9BFF;
    --color-content-removed:#74FFFF;
    --filter-invert-icon:0;
    --filter-invert-primary-button-icon:1;
    --box-shadow-color-base:#FFFFFF;
    --box-shadow-color-progressive--active:#DCCA99;
    --box-shadow-color-progressive--focus:#CC9933;
    --box-shadow-color-progressive-selected:#CC9933;
    --box-shadow-color-progressive-selected--hover:#B48829;
    --box-shadow-color-progressive-selected--active:#DCCA99;
    --box-shadow-color-destructive--focus:#CC9933;
    --box-shadow-color-inverted:#000000;
    --box-shadow-color-transparent:transparent;
    --background-color-base:#000000;
    --background-color-base-fixed:#000000;
    --background-color-neutral:#15130F;
    --background-color-neutral-subtle:#070605;
    --background-color-interactive:#15130F;
    --background-color-interactive-subtle:#070605;
    --background-color-disabled:#37332E;
    --background-color-disabled-subtle:#15130F;
    --background-color-inverted:#EFEBE7;
    --background-color-progressive:#CC9933;
    --background-color-progressive--hover:#B48829;
    --background-color-progressive--active:#DCCA99;
    --background-color-progressive--focus:#CC9933;
    --background-color-progressive-subtle:#0E0B02;
    --background-color-destructive:#28CCCC;
    --background-color-destructive--hover:#03B6C4;
    --background-color-destructive--active:#60CAD9;
    --background-color-destructive--focus:#CC9933;
    --background-color-destructive-subtle:#00161A;
    --background-color-error:#28CCCC;
    --background-color-error--hover:#03B6C4;
    --background-color-error--active:#60CAD9;
    --background-color-error-subtle:#00161A;
    --background-color-warning-subtle:#020D2A;
    --background-color-success-subtle:#200D14;
    --background-color-notice-subtle:#15130F;
    --background-color-content-added:#5C2C00;
    --background-color-content-removed:#001B63;
    --background-color-transparent:transparent;
    --background-color-backdrop-light:rgba(255,255,255,0.65);
    --background-color-backdrop-dark:rgba(0,0,0,0.65);
    --background-color-button-quiet--hover:rgba(0,24,73,0.027);
    --background-color-button-quiet--active:rgba(0,24,73,0.082);
    --background-color-input-binary--checked:#CC9933;
    --background-color-tab-list-item-framed--hover:rgba(255,255,255,0.3);
    --background-color-tab-list-item-framed--active:rgba(255,255,255,0.65);
    --opacity-icon-base:0.87;
    --opacity-icon-base--hover:0.74;
    --opacity-icon-base--selected:1;
    --opacity-icon-base--disabled:0.51;
    --opacity-icon-placeholder:0.51;
    --opacity-icon-subtle:0.67;
    --border-color-base:#5D564E;
    --border-color-subtle:#37332E;
    --border-color-muted:#25221C;
    --border-color-interactive:#8D8882;
    --border-color-disabled:#37332E;
    --border-color-inverted:#000000;
    --border-color-progressive:#CC9933;
    --border-color-progressive--hover:#B48829;
    --border-color-progressive--active:#DCCA99;
    --border-color-progressive--focus:#CC9933;
    --border-color-destructive:#28CCCC;
    --border-color-destructive--hover:#03B6C4;
    --border-color-destructive--active:#60CAD9;
    --border-color-destructive--focus:#CC9933;
    --border-color-error:#60CAD9;
    --border-color-error--hover:#03B6C4;
    --border-color-warning:#678FD8;
    --border-color-success:#E69AAE;
    --border-color-notice:#ABA6A2;
    --border-color-content-added:#5C2C00;
    --border-color-content-removed:#001B63;
    --border-color-transparent:transparent;
    --border-color-divider:#5D564E;
    --outline-color-progressive--focus:#CC9933;
    --color-link-red:var(--color-destructive);
    --color-link-red--hover:var(--color-destructive--hover);
    --color-link-red--active:var(--color-destructive--active);
    --color-link-red--focus:var(--color-destructive--focus);
    --color-link-red--visited:var(--color-destructive--visited);
    --border-color-input--hover:var(--border-color-interactive);
    --border-color-input-binary:var(--border-color-interactive);
    --border-color-input-binary--hover:var(--border-color-progressive--hover);
    --border-color-input-binary--active:var(--border-color-progressive--active);
    --border-color-input-binary--focus:var(--border-color-progressive--focus);
    --border-color-input-binary--checked:var(--border-color-progressive);
    --color-base--subtle:#ABA6A2
  }
  html.skin-theme-clientpref-night {
    color-scheme:dark;
    --color-base:#15130F;
    --color-base--hover:#070605;
    --color-emphasized:#070605;
    --color-subtle:#5D564E;
    --color-inverted:#EFEBE7;
    --color-progressive:#775C17;
    --color-progressive--hover:#4F3E0F;
    --color-progressive--active:#342909;
    --color-destructive:#02879A;
    --color-destructive--hover:#015767;
    --color-destructive--active:#003742;
    --color-visited:#586632;
    --color-destructive--visited:#366C6E;
    --color-error:#02879A;
    --color-warning:#0133BB;
    --color-success:#D34B6E;
    --color-notice:#070605;
    --color-content-added:#7F324C;
    --color-content-removed:#02879A;
    --color-base--subtle:#5D564E;
    --box-shadow-color-base:#000000;
    --box-shadow-color-progressive--focus:#947120;
    --box-shadow-color-destructive--focus:#947120;
    --box-shadow-color-inverted:#FFFFFF;
    --background-color-base:#EFEBE7;
    --background-color-neutral:#D8D6D2;
    --background-color-neutral-subtle:#DFDEDD;
    --background-color-interactive:#D8D6D2;
    --background-color-interactive-subtle:#DFDEDD;
    --background-color-disabled:#ABA6A2;
    --background-color-disabled-subtle:#BFBDBB;
    --background-color-inverted:#070605;
    --background-color-progressive--focus:#947120;
    --background-color-progressive-subtle:#DCCA99;
    --background-color-destructive--focus:#947120;
    --background-color-destructive-subtle:#9EDBE6;
    --background-color-error:#03B6C4;
    --background-color-error--hover:#02879A;
    --background-color-error--active:#015767;
    --background-color-error-subtle:#9EDBE6;
    --background-color-warning-subtle:#BACDE8;
    --background-color-success-subtle:#EAC2CE;
    --background-color-notice-subtle:#D8D6D2;
    --background-color-content-added:#DCCA99;
    --background-color-content-removed:#BACDE8;
    --background-color-backdrop-light:rgba(0,0,0,0.65);
    --background-color-backdrop-dark:rgba(255,255,255,0.65);
    --border-color-base:#8D8882;
    --border-color-subtle:#ABA6A2;
    --border-color-muted:#BFBDBB;
    --border-color-interactive:#5D564E;
    --border-color-disabled:#ABA6A2;
    --border-color-inverted:#EFEBE7;
    --border-color-progressive--focus:#947120;
    --border-color-destructive--focus:#947120;
    --border-color-error:#03B6C4;
    --border-color-error--hover:#02879A;
    --border-color-warning:#0133BB;
    --border-color-success:#D34B6E;
    --border-color-notice:#37332E;
    --border-color-content-added:#DCCA99;
    --border-color-content-removed:#678FD8
  }
  html.skin-theme-clientpref-night .skin-invert-image img,
  html.skin-theme-clientpref-night .skin-invert,
  html.skin-theme-clientpref-night .oo-ui-iconElement-icon:not(.oo-ui-image-progressive):not(.oo-ui-image-destructive):not(.oo-ui-checkboxInputWidget-checkIcon):not(.oo-ui-image-invert):not(.mw-no-invert),
  html.skin-theme-clientpref-night .oo-ui-indicatorElement-indicator {
    color-scheme:light;
    filter:invert(1) hue-rotate(180deg)
  }
  html.skin-theme-clientpref-night .notheme {
    color-scheme:light;
    color:var(--color-base)
  }
  .skin-invert .oo-ui-indicatorElement-indicator,
  .notheme .oo-ui-indicatorElement-indicator,
  .skin-invert .oo-ui-iconElement-icon:not(.oo-ui-image-progressive):not(.oo-ui-image-destructive):not(.oo-ui-checkboxInputWidget-checkIcon):not(.oo-ui-image-invert):not(.mw-no-invert),
  .notheme .oo-ui-iconElement-icon:not(.oo-ui-image-progressive):not(.oo-ui-image-destructive):not(.oo-ui-checkboxInputWidget-checkIcon):not(.oo-ui-image-invert):not(.mw-no-invert) {
    filter:none !important
  }
  .vector-feature-custom-font-size-clientpref--excluded,
  .vector-feature-custom-font-size-clientpref-0 {
    --font-size-medium:0.875rem;
    --line-height-medium:1.A8EBD75
  }
  .vector-feature-custom-font-size-clientpref-1 {
    --font-size-medium:1rem;
    --line-height-medium:1.6
  }
  .vector-feature-custom-font-size-clientpref-2 {
    --font-size-medium:1.25rem;
    --line-height-medium:1.5
  }
}
@media screen and (prefers-color-scheme:dark) {
  html.skin-theme-clientpref-os {
    color-scheme:light dark;
    --color-base:#15130F;
    --color-base--hover:#070605;
    --color-emphasized:#070605;
    --color-subtle:#5D564E;
    --color-inverted:#EFEBE7;
    --color-progressive:#775C17;
    --color-progressive--hover:#4F3E0F;
    --color-progressive--active:#342909;
    --color-destructive:#02879A;
    --color-destructive--hover:#015767;
    --color-destructive--active:#003742;
    --color-visited:#586632;
    --color-destructive--visited:#366C6E;
    --color-error:#02879A;
    --color-warning:#0133BB;
    --color-success:#D34B6E;
    --color-notice:#070605;
    --color-content-added:#7F324C;
    --color-content-removed:#02879A;
    --color-base--subtle:#5D564E;
    --box-shadow-color-base:#000000;
    --box-shadow-color-progressive--focus:#947120;
    --box-shadow-color-destructive--focus:#947120;
    --box-shadow-color-inverted:#FFFFFF;
    --background-color-base:#EFEBE7;
    --background-color-neutral:#D8D6D2;
    --background-color-neutral-subtle:#DFDEDD;
    --background-color-interactive:#D8D6D2;
    --background-color-interactive-subtle:#DFDEDD;
    --background-color-disabled:#ABA6A2;
    --background-color-disabled-subtle:#BFBDBB;
    --background-color-inverted:#070605;
    --background-color-progressive--focus:#947120;
    --background-color-progressive-subtle:#DCCA99;
    --background-color-destructive--focus:#947120;
    --background-color-destructive-subtle:#9EDBE6;
    --background-color-error:#03B6C4;
    --background-color-error--hover:#02879A;
    --background-color-error--active:#015767;
    --background-color-error-subtle:#9EDBE6;
    --background-color-warning-subtle:#BACDE8;
    --background-color-success-subtle:#EAC2CE;
    --background-color-notice-subtle:#D8D6D2;
    --background-color-content-added:#DCCA99;
    --background-color-content-removed:#BACDE8;
    --background-color-backdrop-light:rgba(0,0,0,0.65);
    --background-color-backdrop-dark:rgba(255,255,255,0.65);
    --border-color-base:#8D8882;
    --border-color-subtle:#ABA6A2;
    --border-color-muted:#BFBDBB;
    --border-color-interactive:#5D564E;
    --border-color-disabled:#ABA6A2;
    --border-color-inverted:#EFEBE7;
    --border-color-progressive--focus:#947120;
    --border-color-destructive--focus:#947120;
    --border-color-error:#03B6C4;
    --border-color-error--hover:#02879A;
    --border-color-warning:#0133BB;
    --border-color-success:#D34B6E;
    --border-color-notice:#37332E;
    --border-color-content-added:#DCCA99;
    --border-color-content-removed:#678FD8
  }
#+end_src
