:PROPERTIES:
:ID:       dfb6f90e-6755-4a64-b295-084a9c4beafa
:END:
#+title: Nix
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]

* Docs

+ [[https://nixos.org/manual/nix/stable/][Manual]]
  - [[https://nixos.org/manual/nix/unstable/command-ref/conf-file.html][nix.conf]]
+ [[https://nix.dev/manual/nix][nix.dev reference manual]]
+ [[https://nixos.org/learn.html][Learn]]
+ [[https://wiki.archlinux.org/title/Nix][Archwiki]]

* Resources

** Learning

+ [[https://zero-to-nix.com/concepts/flakes/][Zero to Nix]]

*** Language

+ [[https://discourse.nixos.org/t/reference-diagram-for-nix-file-module-flake-function-use-cases-and-identification/43442/2][What even is a...]] flake/module/function/etc
+ 

** Schema

*** JSON Schema

+ [[https://clan.lol/blog/json-schema-converter/][jsonschema-converter]] extract Nix module interfaces to JSON schema
  - uses [[https://git.clan.lol/clan/clan-core/src/branch/main/lib/jsonschema][clan/clan-core/src/branch/main/lib/jsonschema]]

** Deployment
+ [[github:serokell/deploy-rs][serokell/deploy-rs]]
+ [[awakesecurity/nix-deploy][awakesecurity/nix-deploy]]

** Flakes & Channels

*** Ecosystem

+ flake-parts
+ home-manager
+ dendritic

*** Modules



*** Packages

+ [[https://github.com/Lehmanator/json-schema-nix][Lehmanator/json-schema-nix]]

* Topics

** Services

*** NixOS misc

+ ngocbd/nylon: socks proxy

** ZaneyOS

+ Install Guide and [[https://gitlab.com/Zaney/zaneyos/-/blob/main/install-zaneyos.sh?ref_type=heads][Installer Script]]
+ [[https://github.com/ratfink417/zaney-sync][ratfink417/zaney-sync]] some resources for deriving systems/homes from the main
  ZaneyOS

*** Use Case

I need my 2013 Macbook Pro to be a Media PC, but

1) it must run headless. hyprland fits for this.
2) UWSM would be nice for automation or vty customization
3) I'd like steam link, which i just learned about here on Tom Hanks Island
4) It needs specific versions of NVidia drivers

*** Basics

** On Arch
*** Install

#+begin_src sh :tangle .config/sh/profile.d/nix-arch.sh :shebang #!/bin/bash
# add your main nix-profile to paths
export PATH=$HOME/.nix-profile/bin:$PATH
export XDG_DATA_DIRS=$HOME/.nix-profile/share:$XDG_DATA_DIRS

# TODO add potential for other Nix profiles
#+end_src

Install Nix and setup the groups. Configure =~/.config/nix/nix.conf= if necessary.

#+begin_example shell
yay -Syu nix

# to allow user access to the nix build daemon
sudo usermod -G nix-build

echo "max-jobs = auto" | sudo tee -a /etc/nix/nix.conf
#+end_example

Ensure that the =nix-ademon= service is running or just enable it.

#+begin_example shell
# to make fedora a tolerable daily driver. run with sudo to add channel to root
nix-channel --add https://nixos.org/channels/nixpkgs-unstable

# requires sudo to create /nix/store
nix-channel --update
#+end_example

Now nix should build and =direnv allow= should run flakes right.
** AMD Rocm
See [[https://github.com/nixos-rocm/nixos-rocm][nixos-rocm/nixos-rocm]]
* Issues
** The "Nix OpenGL" problem
Oh joy. I can't wait. Apparently [[https://github.com/guibou/nixGL][guibou/NixGL]] helps deal with this.

*** TODO deal with the Nix OpenGL usingwhen it becomes relevant
