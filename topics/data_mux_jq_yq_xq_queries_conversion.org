:PROPERTIES:
:ID:       cdf0de7c-cf7c-456f-a12c-b2496359064b
:END:
#+TITLE: Data Mux: JQ, YQ, XQ, Queries, Conversion
#+DESCRIPTION:
#+TAGS:


* JQ/YQ/XQ

** Docs

** Resources

*** Alternatives

+ [[https://github.com/sclevine/yj][sclevine/yj]] :: convert between json, toml, yaml, hcl

** Topics

*** Tree Traversal

**** Combining Multiple Queries

For projects/scripts that require many tree traversals and can make guarantees
on niceness/schema for tree structure, then it may be more useful:

+ tangle queries into separate files (or write them as such)
+ and use the =/bin/sh= pipe operate to pipeline modifications.

Compare these three queries

#+name: jqRemoveSVG
#+begin_example jq
walk(
  if type == "object" and has("svg") then
    .svg = {Icon: {"@type": "Icon"}}
  else .
end)
#+end_example

Slightly more complex, but less composable

#+begin_example jq
walk(if type=="object" then
  if has("svg") then {Icon: {"@type": "Icon"}} else . end
  # Additional queries here -- this is like an extra { block; } in awk
else
  .
end
#+end_example

Way more complicated.

#+name: jqWalkDom
#+begin_example jq
walk(if type == "object" then
      to_entries
        | map(. |= if .key == "svg" then {key: "Icon", value: {"@type": "Icon"}} else . end)
        | map(. += if .key == "@class" then {value: (.value | gsub("\\b\\sdark:[\\w\\-:]*\\b"; ""))} else . end)
        | from_entries
     else .
    end)
#+end_example

**** Generic

... and only then do i see =.what?= ???! GDMT (see giant any/all query)

#+name: jqHuh
#+begin_example jq
# .. | [ any(."@class"?) ]
# .. | map(any(."@class"?))

# swapping the order of $fdsa and the select breaks the query.
# - it also doesn't really retrieve what i want
.. as $fdsa | [ select(type=="object") | any(."@class"?), $fdsa ]

# this also works and is simple, but without order guarantees, it's useless

# [ paths | [ join("/") ]]
#+end_example

#+headers: :var jqHuh=jqHuh
#+begin_src sh :results output code :wrap src yaml
cat $_REPO/typescript/components/flowbite/components/accordion/accordion-always-open-example.html |\
    tidy -iq --tidy-mark no -w 0 --show-body-only auto --doctype omit -xml |\
    xq -y "${jqHuh}"
#+end_src

Trying to fanout the list of paths to apply to other functions is obnoxius
... but there is probably just the thing i don't know about ... which is the
obvious thing that handles the obvious use-case. But IDK it.

So since =paths($arg)= doesn't allow you to pipe to it, most of what i'm trying
to do does not work. it also would not be efficient ... but i wasn't going for
efficient.

***** Any/All

These can be woven (or interleaved) with the results of another method that
produces objects/paths -- like recurse, paths, etc. as it traverses the tree. As
long as the order is consistent, then you can apply the result =any= or =all=.

For example, this would help you remove all objects in a DOM tree that don't
specify class

#+name: jqWovenZip
#+begin_example jq
# .. | select(type=="object" and has("@class"))
# [.. | select(type=="object") | any(type=="object" and has("@class"))] | all

#. as $og
# | [ paths | [ join("/"), . ] ]

#paths
. as $orig
| [ $orig | paths,
# ....................
    recurse | getpath($orig) | any(type=="object" and has("@class"))]

# | map(any(type="object" and has("@class"))) ]


# getpath(paths)

# [ paths
# | map(. as $p | join("/")
# #  [ join("/")
#   #,. as $p | [ path($p)]
# #  ]
#   )]

  #| recurse | select(type=="object")
  #                 | any(type=="object" and has("@class"))] | all])]
#+end_example

#+headers: :var jqWovenZip=jqWovenZip jqRemoveSVG=jqRemoveSVG
#+begin_src sh :results output code :wrap src yaml
cat $_REPO/typescript/components/flowbite/components/accordion/accordion-always-open-example.html |\
    tidy -iq --tidy-mark no -w 0 --show-body-only auto --doctype omit -xml |\
    xq -y "${jqRemoveSVG}" |\
    yq -y "${jqWovenZip}"
#+end_src

#+RESULTS:
#+begin_src yaml
jq: error (at <stdin>:1): Cannot iterate over string ("accordion-...)
[ Babel evaluation exited with code 5 ]
#+end_src

***** Using =path(..)=

Any way to get this to work? Using =tree --json //sys= as data source?

#+begin_src sh
tree -L 2 \
     --prune --matchdirs \
     -P '[aeiou]*' /sys \
    | jq '. as $dot | path(..) as $p | map($dot[.])'
#+end_src

**** Walk

**** Recurse


*** XQ

**** Working with Attributes

Specifying =[]= after =.manifest.project[]= causes document separators to be
inserted for =xq -y= output. Annoying if you're not expecting, but useful
otherwise. The =[]= is somewhat of an implicit map.

While also relevant to =jq=, this is more helpful for =xq= to =yq= conversions.
The triple-dash document separators are actually part of the YAML standard
whereas =jq= must know to parse them while maintaining escaped strings.

This first query creates a unified stream where each XML node can be treated as
separate documents, whereas the latter splats everything together. They both
lose their identity as =<project/>= nodes.

#+begin_src sh :dir (identity dc/repo-path) :results output verbatim :wrap example yaml
xq  -y '
    .manifest.project[]
    | select(."@path" != ."@name")' typescript/astro-themes.xml
#+end_src

#+RESULTS:
#+begin_example yaml
'@name': abdllahdev/nimbus-narratives
'@path': algorizr/nimbus-narratives
'@groups': blog,preact,tailwind,typescript,mdx
---
'@name': bywhitepine/astro-minimal-starter
'@path': jaydanurwin/astro-minimal-starter
'@groups': minimal
---
'@name': bywhitepine/cannonball
'@path': littlesticks/cannonball
'@groups': landing-page
---
'@name': bywhitepine/odyssey-theme
'@path': littlesticks/odyssey-theme
'@groups': featured,landing-page
---
'@name': bywhitepine/simple-blog-astro
'@path': littlesticks/simple-blog-astro
'@groups': blog,lit,mdx
---
'@name': Johnkat-Mj/agency-landing-page-astrojs
'@path': Johnkat-Mj/agencex-astro
'@groups': landing-page,tailwind
---
'@name': LaB-CH3/astrobrew
'@path': anthonylan/astrobrew
'@groups': landing-page
#+end_example

Without separators:

#+begin_src sh :dir (identity dc/repo-path) :results output verbatim :wrap example yaml
xq  -y '
    .manifest.project
    | map(select(."@path" != ."@name"))' typescript/astro-themes.xml
#+end_src

#+RESULTS:
#+begin_example yaml
- '@name': abdllahdev/nimbus-narratives
  '@path': algorizr/nimbus-narratives
  '@groups': blog,preact,tailwind,typescript,mdx
- '@name': bywhitepine/astro-minimal-starter
  '@path': jaydanurwin/astro-minimal-starter
  '@groups': minimal
- '@name': bywhitepine/cannonball
  '@path': littlesticks/cannonball
  '@groups': landing-page
- '@name': bywhitepine/odyssey-theme
  '@path': littlesticks/odyssey-theme
  '@groups': featured,landing-page
- '@name': bywhitepine/simple-blog-astro
  '@path': littlesticks/simple-blog-astro
  '@groups': blog,lit,mdx
- '@name': Johnkat-Mj/agency-landing-page-astrojs
  '@path': Johnkat-Mj/agencex-astro
  '@groups': landing-page,tailwind
- '@name': LaB-CH3/astrobrew
  '@path': anthonylan/astrobrew
  '@groups': landing-page
#+end_example



** Issues


*** XQ not attributing

If you find your self with an =xq= that just can't meaningfully convert
documents to XML, just try converting a document from XML to YAML ... you'll
find that you need to use =@= to set attributes ... maybe idk. =xq --help= does
not mention this at all.

Like this:

#+begin_example sh
echo meooow |\
  awk -f concat-yaml.awk |\
  yq -sy . |\
  yq -sy '.[] | map(select(.repoUrl))' |\
  yq -x --xml-root WOW 'map({LIKE: .title, "@MUCH": "WTF"})'
#+end_example

Yeh wow, that would've helped quite a bit.

*** ob-jq in emacs

+ results :: use =output= to reuse strings in another babel block that doesn't
  parse json. this eliminates the quoting
+ cmd-line :: use =-r= for =--raw-output= and =-j= to eliminate the trailing
  newline.
+ stdin :: an org-babel reference
+ in-file :: a file reference

#+begin_example org
#+property: header-args:jq :stdin varname :cmd-line --raw-output

the above header args are for reference but would set defaults

#+name: ffactive
#+headers: :results output silent
#+begin_src jq :stdin ffprofilesjson :cmd-line "-rj"
. | your | query
  | here | @text

# or @tsv or @csv
#+end_src
#+end_example

** Examples


* Roam
+ [[id:c99b63b3-e18f-4b4b-8424-dbbac937b596][Serialization]]
