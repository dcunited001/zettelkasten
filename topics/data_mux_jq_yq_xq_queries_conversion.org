:PROPERTIES:
:ID:       cdf0de7c-cf7c-456f-a12c-b2496359064b
:END:
#+TITLE: Data Mux: JQ, YQ, XQ, Queries, Conversion
#+DESCRIPTION:
#+TAGS:


* JQ/YQ/XQ

** Docs

** Resources

** Topics

** Issues

*** XQ not attributing

If you find your self with an =xq= that just can't meaningfully convert
documents to XML, just try converting a document from XML to YAML ... you'll
find that you need to use =@= to set attributes ... maybe idk. =xq --help= does
not mention this at all.

Like this:

#+begin_example sh
echo meooow |\
  awk -f concat-yaml.awk |\
  yq -sy . |\
  yq -sy '.[] | map(select(.repoUrl))' |\
  yq -x --xml-root WOW 'map({LIKE: .title, "@MUCH": "WTF"})'
#+end_example

Yeh wow, that would've helped quite a bit.

*** ob-jq in emacs

+ results :: use =output= to reuse strings in another babel block that doesn't
  parse json. this eliminates the quoting
+ cmd-line :: use =-r= for =--raw-output= and =-j= to eliminate the trailing
  newline.
+ stdin :: an org-babel reference
+ in-file :: a file reference

#+begin_example org
#+property: header-args:jq :stdin varname :cmd-line --raw-output

the above header args are for reference but would set defaults

#+name: ffactive
#+headers: :results output silent
#+begin_src jq :stdin ffprofilesjson :cmd-line "-rj"
. | your | query
  | here | @text

# or @tsv or @csv
#+end_src
#+end_example

** Examples


* Roam
+ [[id:c99b63b3-e18f-4b4b-8424-dbbac937b596][Serialization]]
