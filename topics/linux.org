:PROPERTIES:
:ID:       bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531
:END:
#+title: Linux

* Roam
+ [[id:90c681e3-7748-4039-abf1-69755e14c918][selinux]]

* Docs

** [[https://www.kernel.org/doc/html/latest/kbuild/index.html][Builds]]
+ [[https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html][Kconfig]] language
+ [[https://www.kernel.org/doc/html/latest/kbuild/index.html][Kbuild]] kernel build system

** System Calls

+ [[https://linux-kernel-labs.github.io/refs/heads/master/lectures/syscalls.html][The docs]] or [[https://man7.org/linux/man-pages/man2/syscalls.2.html][man syscall]]
+ [[https://github.com/brendangregg/perf-tools][brendangregg/perf-tools]] tools/charts on performance monitoring ()
  -


** Wikipedia
+ Linux [[https://en.wikipedia.org/wiki/Category:WikiProject_Linux][WikiProject]]
+ [[https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Desktop_Linux][Desktop Linux]] page (not linux from their main page)
+ Linux [[https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Linux][WikiProject Category]]


+

* Resources

** Cat on Mat

+ [[Bash Redirections][Bash  Redirections]] (c/s)
+ [[https://catonmat.net/gnu-coreutils-cheat-sheet][GNU Coreutils]] (c/s)
+ [[https://catonmat.net/util-linux-cheat-sheet][Util-Linux]] (c/s)

** Czech Cheatsheets (Tiny Huge)

+ [[Vim Cheatsheet]]
+ Linux Networking Cheatsheet
+ [[https://bruxy.regnet.cz/web/linux/EN/bash-cheat-sheet/][Bash Cheatsheet]]

  also, article on [[https://bruxy.regnet.cz/web/linux/EN/linux-demoscene/][ASCII Art]] and a concise guide on
  [[https://bruxy.regnet.cz/web/linux/EN/ssh-bastion/][SSH Reverse Tunnel]]

** LCFS Cheatsheets
+ [[https://cheatography.com/nhatlong0605/][cheatography.com/nhatlong0605]] broad set of cheatsheets, mostly for
  Centos/RPM/SystemD, but also with documentation of:
  - traditional services (Postfix/IMAP, Squid, NFS/Samba)
  - traditional process/job management
  - syslog
  - LMV/disk management

** System Calls

+ [[https://unix.stackexchange.com/questions/421750/where-do-you-find-the-syscall-table-for-linux][Print out system calls]] using standard C/GCC predefined macros
  - [[https://lwn.net/Articles/604287/][Anatomy of a system call]] (2 parts)
+ For kernel 2.6, [[https://github.com/gregose/syscall-table][gregose/syscall-table]] can generate a reference


* Kernel

** Builds

** Testing
*** kselftest
*** kunit

** Optimizations

** Extracting Information

*** Diffing Kernel Configs
+ [[https://www.youtube.com/watch?v=d9e5rI-OCWU][Comparing configs for Linux, Linux-Zen and Linux-Hardened kernel using diff]]

** Flavors

*** Zen Kernel

* Logging

Systemd stuff elsewhere

** RAS Daemon

RAS daemon watches for RAS events reported via trace to show up in SysFS (via
some interface, this wording is likely imprecise). As it sees events, it logs
them into a SQLite database.

*** Docs
+ ftrace (contains info to help understand what rasdaemon output shows)

*** Resources

+ [[https://unix.stackexchange.com/a/751301][Interactions between SysFS (tracing) and RAS Daemon]]

**** Translate Device ID

Apparently, take the major/minor device ID from the =lsblk= output and it's
=Major * 256 + Minor=.

*** On Guix

Ensure the rasdaemon service has been running with the =-r= flag.

+ Install the =rasdaemon= package
+ SQLite db is in =/var/lib/ras-mc_event.db= ... but if the service is running
  probably don't connect to it (max clients)
+ Query the rasdaemon with =ras-mc-ctl= using =--errors= or =--summary=

However, for me, I'm just seeing some disk issues that, according to the "device
ID" are likely a USB or something. There are no other types of errors.

#+begin_example shell
ras-mc-ctl --status

# .ras-mc-ctl-real: drivers not loaded
#+end_example

Using some of the other commands indicates that not all of the functionality is
active:

+ missing DIMM labels for HP laptop)
+ May require generating a config file so RAS Daemon can understand what
  hardware components the trace events correspond to...

Maybe I can just extract the Trace events from SysFS, but I don't know.

**** Why RAS Daemon?

My computer keeps spinning its fans on suddenly with a task that escalates in
its compute load. I can still ping, but can't connect to it. If I get in quickly
and kill the process (tough I got like 15 seconds, but it's usually firefox),
then I win and it doesn't crash for awhile -- usually +24-48hrs.

+ I think it may be TLP (power mgmt), but not confident. I may just remove the
  configuration. It's not happening at a suspend or power event. It almost
  always happens when I'm not looking.
+ I've turned NMI watchdog, to stop the kernel from locking into a task.

I'm not exactly an expert at using SystemD or at "not using SystemD'" ... either
way, I just don't really know anyone to ask for help who would know either. I've
looked at the logs I'm getting and there's nothing obvious.

One of the reasons for using Guix is so I can capture kernel configurations in a
git repository. This should allow for a workflow that allows for swapping out
kernels between builds (mostly in VM's), but this requires quite a bit of
infrastructure on the network and yeh I still can't turn on the Dell R620
without risking power going out (or noise issues). Still, testing kernels on my
dev machine isn't tenable when they can't boot up. I was thinking more like IoT,
VM and Raspberry PI.

* Console

+ [[id:e2acb6f6-8279-4500-b423-659ce89ecbb0][kmscon]]

** Docs
+ [[https://man.archlinux.org/man/console_codes.4][man console_codes]]: describes control characters
** Resources

** Topics

** Issues

*** Resize terminal display

See =man resizecons= and =man stty=. Resizing the displays is carried out by the
kernel. The implementation for changing the outputs for consoles is specific to
the video card (and drivers), so there may be problems.

Use =stty -a= to print all terminal parameters and =stty -g= to make them
machine readable.

*** [[https://gist.github.com/anonymous/8f1e6c22b5213faf8170dcfc2b0f5b93][Change Cursor Shape, Color, Blinkrate of Linux Console]]

Pretty comprehensive cursor script from anonymous here.

*** Rotate display orientation

**** Grub:

[[Rotate console on startup (Debian)][Rotate console on startup (Debian)]]

**** Systemd Boot

+ [[https://community.clearlinux.org/t/how-to-rotate-the-console/1830/8][How to rotate the console]]

Set =fbcon=rotate=N= or =fbcon=rotate_all=N= in kernel parameters. for systemd
boot, this is in =/boot/efi/loader/entries/*.conf=

For a boot, edit this kernal parameter in the systemd menus

For a session:

+ rotate one vty :: sudo bash -c "echo -e '0' > /sys/class/graphics/fbcon/rotate";
+ rotate all vty's :: sudo bash -c "echo -e '0' > /sys/class/graphics/fbcon/rotate_all"

* Subsystems

+ [[https://docs.kernel.org/subsystem-apis.html][Docs]] for Linux Subsystem API

There are 5 core subsystems ([[https://eng.libretexts.org/Bookshelves/Computer_Science/Operating_Systems/Linux_-_The_Penguin_Marches_On_(McClanahan)/06%3A_Kernel_Module_Management/1.03%3A_Linux_Kernel_Subsystem][source]]), but system functions usually involve
several of them.

** Process Scheduler

** Memory Management Unit (MMU)
+ zwap/zram go here

** Virtual File System (VFS)

** Networking Unit =netdev=

*** Seccomp

+ [[github:rust-vmm/seccompiler][rust-vmm/seccompiler]] probably the best resource to single-handedly explain
  this process.
  - [[https://github.com/rust-vmm/seccompiler#seccomp-best-practices][Seccomp best practices]]
+ [[https://stackoverflow.com/questions/65153051/install-seccomp-filter-in-child][Install seccomp filter into child process]]
  - inject the seccomp filter into a child process (from Go), but not the parent
+ [[https://www3.cs.stonybrook.edu/~sghavamnia/confine/stepbystep.html][Confine can profile applications]] and generate seccomp filters
+ [[https://blog.gitguardian.com/securing-containers-with-seccomp-part-1/][Securiing Containers with Seccomp]]
  - part 2: [[https://blog.gitguardian.com/securing-containers-with-seccomp-part-2/][configuring github actions to automate]]

** Inter-Process Communication (IPC) Unit

** udev
+ what subsystem?
+ [[https://opensource.com/article/18/11/udev][Intro to scripting udev]]

* Topics
** Advice

*** Don't Learn Linux Wrong

Note that =~= shell expansion doesn't work [in xkb tools]. When something deviates from
expected behavior, figuring this out is obvious despite being ignorant of "first
principles"... but when as of yet you have no expections, it's quite a bit
harder to form any at all. This also makes it difficult to form memories with
any consistency, thus impacting the total "statistical confidence" your brain
experiences when it does "brain things" in the future. If other things are
confusing you, that will definitely add another dimension to convolute your
perpexity.

It's important to be corrected earlier on. Otherwise, you don't learn too good
and bad habits/assumptions become more deeply engrained. Being corrected doesn't
happen much in isolation. Find an expert/usergroup.

** Kernel Bisection

Today I Learned...

The Chromium project has a "[[https://chromium.googlesource.com/chromiumos/manifest/+/refs/heads/main/_kernel_upstream.xml][kernel bisection branch]]" ... What is that?
[[https://wiki.ubuntu.com/Kernel/KernelBisection][According to Ubuntu]], it's probably painful for someone who's not a kernel
developer and/or lacks build automation ...

... well nevermind. it's probably not that bad if the bisection actually returns
results and/or you don't have [[https://www.youtube.com/watch?v=HmZnhe1zvzU&t=1256s][Kernel Patch Reviewer problems]].

** LSM: Linux Security Modules

*** Yama: Becoming Mindful
See here and here: [[https://utcc.utoronto.ca/~cks/space/blog/linux/Ubuntu1204Symlinks][Ubuntu 12.04 and symbolic links in world-writeable sticky-bitted directories]]

** MAC: Mandatory Access Control
+ TOMOYO Linux ([[https://wiki.archlinux.org/title/TOMOYO_Linux][archwiki]])

** swap/zswap/zram
+ comparison of [[https://gist.github.com/TBog/9b8b8dc4d77f535c3ebf7bbdc9389cfe][configs for zswap/zram]]

** Networking


*** Virtual Ethernet Devices with VRFs and Namespaces

From [[https://linux-blog.anracom.com/2018/01/05/fun-with-veth-devices-linux-bridges-and-vlans-in-unnamed-linux-network-namespaces-viii/][Fun with VRF Devices]], a series of 8+ blogs that are /unreasonably hard/ to
find on search engines.

[[/data/org/roam/topics/img/fun-with-veth-devices.gif]]


*** Socket Stats =ss -s=

Type

|-------+-----|
| -s    | -a  |
|-------+-----|
| stats | all |
|-------+-----|

Network

|-----+-----+--------+-----+-----+-----+-----+------|
| -t  | -u  | -l     | -b  |  -4 |  -6 | -w  | -u   |
|-----+-----+--------+-----+-----+-----+-----+------|
| tcp | udp | listen | bpf | ip4 | ip6 | raw | unix |
|-----+-----+--------+-----+-----+-----+-----+------|

Context

|-------+--------------+-----------+---------+--------+----------|
| -Z    | -z           | -N        | -p      | -T     | --cgroup |
|-------+--------------+-----------+---------+--------+----------|
| secon | sock context | namespace | process | thread | cgroup   |
|-------+--------------+-----------+---------+--------+----------|

* ELF ABI

Extensible/Linkable Format

** Docs
+ FreeBSD Handbook: [[https://web.archive.org/web/20130506160632/http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/binary-formats.html][Binary Formats]]
+ [[https://www.technovelty.org/linux/shared-libraries-and-execute-permissions.html][Shared libraries and execute permissions]]

*** Fasterthanli.me
+ [[https://fasterthanli.me/series/making-our-own-executable-packer][Making our own executable packer]] (18-part series on Linux executables)
+ [[https://fasterthanli.me/series/reading-files-the-hard-way][Reading files the hard way]] (not your averge *.exe)

[[https://github.com/gco/xee/blob/4fa3a6d609dd72b8493e52a68f316f7a02903276/XeePhotoshopLoader.m#L108-L136][Some comments are gold]]

** Resources

** Topics

*** ELF Structure

See =readelf= and =hexdump= org-babel output in [[id:cda3f6b5-af52-41a6-bbf3-c3b43c485cb2][Linux: basics of elf binaries]].

**** Video: [[https://www.youtube.com/watch?v=nC1U1LJQL8o&t=17s][In-Depth ELF]]

Format for executables, shared libraries and object files

  |----------+----------------|
  |          | Relevance      |
  |----------+----------------|
  | Segments | Only runtime   |
  | Sections | Only link-time |
  |----------+----------------|

Can contain 0+ segments and sections (two completely different concepts)

+ these in turn specify: Memory address + Length
+ some segments can have zero length
+ segments and sections can overlap

A simple statically linked ELF contains 2 main segments to load into RAM:

+ Data Segment: initialized globals (and other initialized data), which leaves
  room to grow.
+ Code Segment: contains the code's instructions, followed by the entry-point
  address.

An ELF with a dynamically linked object does much of the same, but

+ The main ELF has segments pointing to the *.so ELF file, which has its own
  data/code segments.
+ At runtime, the dynamic linking needs to adjust addresses into which the *.so
  ELF's data/code is loaded. This can be adjusted with position independent
  code.

A C-struct defines the =E_IDENT= header section with the magic number
=0x7F454c46=. The next two bytes define the platform (32/64-bit) and whether the
file is encoded as little/big endian.

#+begin_example
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
#+end_example


**** [[https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/][The 101 of ELF files on Linux: Understanding and Analysis]]

*** Loading Dynamic libs in linux
+ How =mmap= command maps regions of =*.so= files
+ How this shared memory is managed

*** Reverse Engineering

*** Linking

* Unix
:PROPERTIES:
:ID:       bdae77b1-d9f0-4d3a-a2fb-2ecdab5fdcba
:END:

** Docs

** Resources


** Topics


*** Man Pages

|---+--------------------------------------------------------------------------------------------|
| 1 | Executable programs or shell commands                                                      |
| 2 | System calls (functions provided by the kernel)                                            |
| 3 | Library calls (functions within program libraries)                                         |
| 4 | Special files (usually found in /dev)                                                      |
| 5 | File formats and conventions, e.g. /etc/passwd                                             |
| 6 | Games                                                                                      |
| 7 | Miscellaneous (including  macro  packages/conventions), e.g.man(7), groff(7), man-pages(7) |
| 8 | System administration commands (usually only for root)                                     |
| 9 | Kernel routines [Non standard]                                                             |
|---+--------------------------------------------------------------------------------------------|

*** Processes

+ man daemon [3|7] :: unix definition & history of daemons
+ man unistd.h :: standard symbolic constants and types
+ man signal 7 :: Unix signals

Macros in C expanding into integers that do not map to any function

+ SIG_DFL :: default signal handling
+ SIG_IGN :: ignore signal. The =SIG_IGN= is in the null space, since it maps
  any signal to no transformation.

*** Signals

#+begin_src sh :results output raw
kill -l | rev | cut -f1,3,5,7,9 -d'' | rev
# kill -l | sed -e 's/0)/0)\n/'
# hmmmm
#+end_src

*** Services

**** Background

+ nohup :: make processes immune to =HUP= signal

***** [[https://en.cppreference.com/w/c/program/SIG_strategies][double fork technique]]

+ Fork & return PID, ensure success
+ setsid() :: Set new session ID, ensure success
+ Remap =SIGCHLD= and =SIGHUP= to =SIG_IGN= to clip signals between parent/child
+ Fork again & return pid. Exit parent with success/failure (or handle error)
+ Set =umask= and =PWD=.
+ Close file descriptors & clean up.

*** IPC/Sockets/Signals
+ [[https://opensource.com/article/19/4/interprocess-communication-linux-networking][IPC in Linux: Sockets & Signals]]
+ Linux fuser command
+ Socket Forwarding Over SSH
  - from [[https://medium.com/@dperny/forwarding-the-docker-socket-over-ssh-e6567cfab160][Forwarding Docker Socket via SSH Tunnel]]
  - also: [[https://blog.ruanbekker.com/blog/2018/04/30/forwarding-the-docker-socket-via-a-ssh-tunnel-to-execute-docker-commands-locally/][forwarding docker socket (to exec docker cmd locally)]]
  - Since [[https://lwn.net/Articles/609321/][OpenSSH 6.7]]
+ [[https://www.baeldung.com/linux/communicate-with-unix-sockets][IPC with unix sockets (baeldung)]]

**** Learning

MPV may be a good way to learn about sockets and IPC on host or over the network

***** Workflow

Run =top=, hit =o= and type =COMMAND=$command= to follow the status of
processes, so you don't have to repeatedly run =ps aux= or =pgrep=. The =o=
filters are case sensitive. =htop= includes the descendents by default.

**** Remoting
+ ZeroTier/Yggdrasil
  - or Meshnet or Tor
+ VPN over SSH
+ Proxy Server or Reverse Proxy
+ SSH-D + Bind + Socks
  - One way to avoid agent forwarding

**** Send to socket
See [[https://www.man7.org/linux/man-pages/man2/send.2.html][man send]] for info on send, sendto, sendmsg


**** Socat Tunnelling
+ [[https://www.cyberciti.biz/faq/linux-unix-tcp-port-forwarding/][SOcket CAT]]
+ Tunneling w/ =socat= is an option (to avoid SSH agent forwarding)

From [[https://blog.travismclarke.com/post/socat-tutorial/][Socat Cheatsheet]]

#+begin_example shell
# Server
socat TCP-LISTEN:54321\
,reuseaddr\
,fork \
TCP:remote.server.com:22

# Client
ssh root@localhost -p 54321
#+end_example

**** Dante/Stunnel

+ [[https://hamy.io/post/0014/setting-up-an-encrypted-socks-proxy-using-dante-and-stunnel/][Setting up an encrypted SOCKS proxy using Dante and stunnel]]
+ [[https://hamy.io/post/0011/how-to-run-stunnel-on-your-android-device/][Stunnel on android devices]]

* Misc

** Literature

*** [[https://en.wikipedia.org/wiki/Cupid_and_Psyche][Love & Psyche]] - Apuleius

+ Originially from [[https://en.wikipedia.org/wiki/Cupid_and_Psyche][The Golden Ass]]
+ [[https://www.classics.ox.ac.uk/love-and-soul-apuleius-tale-cupid-and-psyche-european-culture-1600][Cupid & Psyche's influence]] on European narrative structures (narremes)
