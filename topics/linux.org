:PROPERTIES:
:ID:       bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531
:END:
#+title: Linux

* Docs

+ [[https://makelinux.github.io/kernel/map][makelinux.github.io/kernel/map]] (with links to source analysis at
  [[https://elixir.bootlin.com/linux/latest][elixir.bootlin.com/linux/latest]])

** [[https://www.kernel.org/doc/html/latest/kbuild/index.html][Builds]]
+ [[https://www.kernel.org/doc/html/latest/kbuild/kconfig-language.html][Kconfig]] language
+ [[https://www.kernel.org/doc/html/latest/kbuild/index.html][Kbuild]] kernel build system

** Source
+ Kernel-related: [[https://git.kernel.org/pub/scm/linux/?s=idle][git.kernel.org/pub/scm/linux]] (Other hosted repos at root)

** System Calls

+ [[https://linux-kernel-labs.github.io/refs/heads/master/lectures/syscalls.html][The docs]] or [[https://man7.org/linux/man-pages/man2/syscalls.2.html][man syscall]]
+ [[https://github.com/brendangregg/perf-tools][brendangregg/perf-tools]] tools/charts on performance monitoring ()
+ [[https://github.com/google/pprof][google/pprof]] visualization and analysis of profiling data

** Wikipedia
+ Linux [[https://en.wikipedia.org/wiki/Category:WikiProject_Linux][WikiProject]]
+ [[https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Desktop_Linux][Desktop Linux]] page (not linux from their main page)
+ Linux [[https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Linux][WikiProject Category]]

* Resources

** Cat on Mat

+ [[Bash Redirections][Bash  Redirections]] (c/s)
+ [[https://catonmat.net/gnu-coreutils-cheat-sheet][GNU Coreutils]] (c/s)
+ [[https://catonmat.net/util-linux-cheat-sheet][Util-Linux]] (c/s)

** Czech Cheatsheets (Tiny Huge)

+ [[Vim Cheatsheet]]
+ Linux Networking Cheatsheet
+ [[https://bruxy.regnet.cz/web/linux/EN/bash-cheat-sheet/][Bash Cheatsheet]]

  also, article on [[https://bruxy.regnet.cz/web/linux/EN/linux-demoscene/][ASCII Art]] and a concise guide on
  [[https://bruxy.regnet.cz/web/linux/EN/ssh-bastion/][SSH Reverse Tunnel]]

** LCFS Cheatsheets
+ [[https://cheatography.com/nhatlong0605/][cheatography.com/nhatlong0605]] broad set of cheatsheets, mostly for
  Centos/RPM/SystemD, but also with documentation of:
  - traditional services (Postfix/IMAP, Squid, NFS/Samba)
  - traditional process/job management
  - syslog
  - LMV/disk management

** System Calls

+ [[https://unix.stackexchange.com/questions/421750/where-do-you-find-the-syscall-table-for-linux][Print out system calls]] using standard C/GCC predefined macros
  - [[https://lwn.net/Articles/604287/][Anatomy of a system call]] (2 parts)
+ For kernel 2.6, [[https://github.com/gregose/syscall-table][gregose/syscall-table]] can generate a reference

** Diagrams

*** Storage Stack Diagram

From [[https://www.thomas-krenn.com/en/wiki/Linux_Storage_Stack_Diagram#Diagram_for_Linux_Kernel_6.2][Werner Fischer (via Thomas Krenn)]]

#+ATTR_HTML: :style width:800px;
[[file:img/linux-storage-stack-diagram.svg]]

** Courses
*** Linux Kernel Labs

**** SO2 Course

These [[https://linux-kernel-labs.github.io/refs/heads/master/so2/index.html][SO2 notes]] are for a second OS class (thus SO2 bc Romanian). There are many
detailed diagrams/etc. The assignments have them writing kernal modules (see one
on [[https://linux-kernel-labs.github.io/refs/heads/master/so2/assign3-software-raid.html#implementation-details][Software RAID]])

Their [[https://linux-kernel-labs.github.io/refs/heads/master/info/vm.html#connecting-to-the-virtual-machine][Qemu guide]] creates two =tap= devices to manually manage networking and one
serial for controlling the VM port. Another guide details setting up =gdb= for
[[https://linux-kernel-labs.github.io/refs/heads/master/info/extra-vm.html][remote debugging of a VM kernel]]


* Kernel

** Builds

** Testing
*** kselftest
*** kunit
** Configuration
+ [[https://github.com/amaanq/tree-sitter-kconfig][amaanq/tree-sitter-kconfig]]

*** Optimizations

*** Extracting Information

**** Diffing Kernel Configs
+ [[https://www.youtube.com/watch?v=d9e5rI-OCWU][Comparing configs for Linux, Linux-Zen and Linux-Hardened kernel using diff]]

** Flavors

*** Zen Kernel

* Logging

Systemd stuff elsewhere

** RAS Daemon

RAS daemon watches for RAS events reported via trace to show up in SysFS (via
some interface, this wording is likely imprecise). As it sees events, it logs
them into a SQLite database.

*** Docs
+ ftrace (contains info to help understand what rasdaemon output shows)

*** Resources

+ [[https://unix.stackexchange.com/a/751301][Interactions between SysFS (tracing) and RAS Daemon]]

**** Translate Device ID

Apparently, take the major/minor device ID from the =lsblk= output and it's
=Major * 256 + Minor=.

*** On Guix

Ensure the rasdaemon service has been running with the =-r= flag.

+ Install the =rasdaemon= package
+ SQLite db is in =/var/lib/ras-mc_event.db= ... but if the service is running
  probably don't connect to it (max clients)
+ Query the rasdaemon with =ras-mc-ctl= using =--errors= or =--summary=

However, for me, I'm just seeing some disk issues that, according to the "device
ID" are likely a USB or something. There are no other types of errors.

#+begin_example shell
ras-mc-ctl --status

# .ras-mc-ctl-real: drivers not loaded
#+end_example

Using some of the other commands indicates that not all of the functionality is
active:

+ missing DIMM labels for HP laptop)
+ May require generating a config file so RAS Daemon can understand what
  hardware components the trace events correspond to...

Maybe I can just extract the Trace events from SysFS, but I don't know.

**** Why RAS Daemon?

My computer keeps spinning its fans on suddenly with a task that escalates in
its compute load. I can still ping, but can't connect to it. If I get in quickly
and kill the process (tough I got like 15 seconds, but it's usually firefox),
then I win and it doesn't crash for awhile -- usually +24-48hrs.

+ I think it may be TLP (power mgmt), but not confident. I may just remove the
  configuration. It's not happening at a suspend or power event. It almost
  always happens when I'm not looking.
+ I've turned NMI watchdog, to stop the kernel from locking into a task.

I'm not exactly an expert at using SystemD or at "not using SystemD'" ... either
way, I just don't really know anyone to ask for help who would know either. I've
looked at the logs I'm getting and there's nothing obvious.

One of the reasons for using Guix is so I can capture kernel configurations in a
git repository. This should allow for a workflow that allows for swapping out
kernels between builds (mostly in VM's), but this requires quite a bit of
infrastructure on the network and yeh I still can't turn on the Dell R620
without risking power going out (or noise issues). Still, testing kernels on my
dev machine isn't tenable when they can't boot up. I was thinking more like IoT,
VM and Raspberry PI.

* Console

+ [[id:e2acb6f6-8279-4500-b423-659ce89ecbb0][kmscon]]

** Docs
+ [[https://man.archlinux.org/man/console_codes.4][man console_codes]]: describes control characters
** Resources

** Topics

** Issues

*** Resize terminal display

See =man resizecons= and =man stty=. Resizing the displays is carried out by the
kernel. The implementation for changing the outputs for consoles is specific to
the video card (and drivers), so there may be problems.

Use =stty -a= to print all terminal parameters and =stty -g= to make them
machine readable.

*** [[https://gist.github.com/anonymous/8f1e6c22b5213faf8170dcfc2b0f5b93][Change Cursor Shape, Color, Blinkrate of Linux Console]]

Pretty comprehensive cursor script from anonymous here.

*** Rotate display orientation

**** Grub:

[[Rotate console on startup (Debian)][Rotate console on startup (Debian)]]

**** Systemd Boot

+ [[https://community.clearlinux.org/t/how-to-rotate-the-console/1830/8][How to rotate the console]]

Set =fbcon=rotate=N= or =fbcon=rotate_all=N= in kernel parameters. for systemd
boot, this is in =/boot/efi/loader/entries/*.conf=

For a boot, edit this kernal parameter in the systemd menus

For a session:

+ rotate one vty :: sudo bash -c "echo -e '0' > /sys/class/graphics/fbcon/rotate";
+ rotate all vty's :: sudo bash -c "echo -e '0' > /sys/class/graphics/fbcon/rotate_all"



* Subsystems

+ [[https://docs.kernel.org/subsystem-apis.html][Docs]] for Linux Subsystem API
+ [[https://developer.ibm.com/articles/l-linux-kernel/][Anatomy of Linux The Kernel (IBM 2007)]]

There are 5 core subsystems ([[https://eng.libretexts.org/Bookshelves/Computer_Science/Operating_Systems/Linux_-_The_Penguin_Marches_On_(McClanahan)/06%3A_Kernel_Module_Management/1.03%3A_Linux_Kernel_Subsystem][source]]), but system functions usually involve
several of them.

** Process Scheduler

** Memory Management Unit (MMU)
+ zwap/zram go here

** Virtual File System (VFS)
*** SysFS

Why use Linux?

Because you can turn the =sysfs= filetree into json & pipe into =jq= ... etc

#+begin_src sh :results output
tree -L 2 \
     --prune --matchdirs \
     -P '[aeiou]*' /sys \
    | head -n42

# tree --json # to get json
#+end_src

#+RESULTS:
#+begin_example
/sys
├── bus
│   ├── acpi
│   ├── auxiliary
│   ├── edac
│   ├── event_source
│   ├── i2c
│   ├── isa
│   ├── usb
│   └── usb-serial
├── class
│   ├── accel
│   ├── ata_device
│   ├── ata_link
│   ├── ata_port
│   ├── extcon
│   ├── i2c-adapter
│   ├── i2c-dev
│   ├── input
│   ├── intel_scu_ipc
│   ├── iommu
│   └── usbmisc
├── devices
│   ├── amd_iommu_0
│   ├── ibs_fetch
│   ├── ibs_op
│   ├── isa
│   └── uprobe
├── firmware
│   ├── acpi
│   └── efi
├── fs
│   └── ext4
├── kernel
│   ├── address_bits
│   ├── iommu_groups
│   ├── irq
│   ├── oops_count
│   └── uevent_seqnum
├── module
│   ├── acpi
│   ├── acpi_cpufreq
#+end_example

#+begin_src sh

tree -L 1 \
     --prune --matchdirs \
     -P '[aeiou]*' /sys \
    | head

# tree --json
#+end_src

** Networking Unit =netdev=

*** Seccomp

+ [[github:rust-vmm/seccompiler][rust-vmm/seccompiler]] probably the best resource to single-handedly explain
  this process.
  - [[https://github.com/rust-vmm/seccompiler#seccomp-best-practices][Seccomp best practices]]
+ [[https://stackoverflow.com/questions/65153051/install-seccomp-filter-in-child][Install seccomp filter into child process]]
  - inject the seccomp filter into a child process (from Go), but not the parent
+ [[https://www3.cs.stonybrook.edu/~sghavamnia/confine/stepbystep.html][Confine can profile applications]] and generate seccomp filters
+ [[https://blog.gitguardian.com/securing-containers-with-seccomp-part-1/][Securiing Containers with Seccomp]]
  - part 2: [[https://blog.gitguardian.com/securing-containers-with-seccomp-part-2/][configuring github actions to automate]]

** Inter-Process Communication (IPC) Unit

*** Socat

[[https://github.com/StudioEtrange/socat-windows][StudioEtrange/socat-windows]]: =socat= on windows with Cygwin

Ouch. I bet this guy really knows =socat=. Tons of [[https://github.com/StudioEtrange/socat-windows/blob/master/EXAMPLES][examples]] in the repo, but no
named pipes afaik.

*** Bridging Sockets with socat, nc, ssh

[[https://aweirdimagination.net/2024/04/21/streams-and-socket-and-pipes-oh-my/][Streams and Sockets and Pipes, oh my]] essentially describes using =socat= or
=ssh= as functor-generators to type-lift a socket to another type. This helps
you bridge IPC streams between programs that only support a limited set of
socket types.

e.g. (examples shamelessly copied from A Weird Imagination's blog)

#+begin_src sh
# Bridge a pair of named pipes to a Unix socket
socat UNIX-LISTEN:test.sock 'PIPE:pipe_in!!PIPE:pipe_out'

# Connect to Unix socket HTTP server via TCP
socat TCP-LISTEN:8042,fork,bind=localhost \
    UNIX-CONNECT:http.sock

# Forward a Unix socket over an SSH connection (two options)
# 1
socat EXEC:"ssh remote 'socat UNIX-CLIENT:service.sock -'" \
    UNIX-LISTEN:proxy-to-remote.sock

# 2 (in newer versions, ssh can forward Unix sockets)
ssh -N -L ./proxy-to-remote.sock:./service.sock remote
#+end_src

The author has several other good articles on sockets:

+ [[https://aweirdimagination.net/2024/04/07/http-over-unix-sockets/][HTTP over Unix Sockets]]: PoC script in python (handy in general). Also
  describes setting =umask= for socket permissions
+ [[https://aweirdimagination.net/2024/03/24/scripting-control-of-web-browser/][Scripting Control of Web Browser]]: use Firefox Marionette via python's
  =marionette_driver= for remote control of the browser (enumerate window
  placement, enumerate tabs, move windows, etc)

*** IPC Performance

Named pipes are fast at very low block sizes

Results (data From Baeldung's [[https://www.baeldung.com/linux/ipc-performance-comparison][Linux IPC Performance Comparison]]...)

|           |   Anon Pipe |  Named Pipe |  Unix Socket |   TCP Socket |
|-----------+-------------+-------------+--------------+--------------|
| 100 B     |  278.062607 |  318.413648 |   245.992742 |   269.562354 |
| 500 B     | 1270.474921 | 1475.198028 |  1184.959553 |  1284.184400 |
| 10000 B   | 8070.641040 | 8843.554059 | 15885.902502 | 14798.750616 |
| 1000000 B | 9039.146532 | 9699.212714 | 41334.862565 | 36208.454080 |





** Other Subsystems

Where to place these?

*** PTY

+ [[https://unix.stackexchange.com/questions/117981/what-are-the-responsibilities-of-each-pseudo-terminal-pty-component-software][Responsibily for PTY components (software, master side, slave side)?]]
+ [[https://wiki.st.com/stm32mpu/wiki/Serial_TTY_overview][Serial TTY Overview]] (UART devices)

*** NSS: Name Service Switch

+ See =man nss= and =man nsswitch.conf=

=/etc/nsswitch.conf= configures the databases (and priorities) used for lookup of
names by dynamic =*.so= libs linking =glibc=.

**** NSS Components

From [[https://packages.debian.org/source/sid/sssd][packages.debian.org: sssd]]

***** Binaries

#+begin_src js
Array.from(document.querySelector("#pbinaries > dl").children)
    .reduce((acc,el,i) => {
        return acc + el.innerText + ((i%2===0 ? " | " : "|\n |"))
    }, "")
#+end_src


| libipa-hbac-dev          | FreeIPA HBAC Evaluator library -- development files                           |
| libipa-hbac0t64          | FreeIPA HBAC Evaluator library                                                |
| libnss-sss               | Nss library for the System Security Services Daemon                           |
| libpam-sss               | Pam module for the System Security Services Daemon                            |
| libsss-certmap-dev       | Certificate mapping library for SSSD -- development files                     |
| libsss-certmap0          | Certificate mapping library for SSSD                                          |
| libsss-idmap-dev         | ID mapping library for SSSD -- development files                              |
| libsss-idmap0            | ID mapping library for SSSD                                                   |
| libsss-nss-idmap-dev     | SID based lookups library for SSSD -- development files                       |
| libsss-nss-idmap0        | SID based lookups library for SSSD                                            |
| libsss-sudo              | Communicator library for sudo                                                 |
| python3-libipa-hbac      | Python3 bindings for the FreeIPA HBAC Evaluator library                       |
| python3-libsss-nss-idmap | Python3 bindings for the SID lookups library                                  |
| python3-sss              | Python3 module for the System Security Services Daemon                        |
| sssd                     | System Security Services Daemon -- metapackage                                |
| sssd-ad                  | System Security Services Daemon -- Active Directory back end                  |
| sssd-ad-common           | System Security Services Daemon -- PAC responder                              |
| sssd-common              | System Security Services Daemon -- common files                               |
| sssd-dbus                | System Security Services Daemon -- D-Bus responder                            |
| sssd-idp                 | System Security Services Daemon -- Kerberos plugins for external id providers |
| sssd-ipa                 | System Security Services Daemon -- IPA back end                               |
| sssd-kcm                 | System Security Services Daemon -- Kerberos KCM server implementation         |
| sssd-krb5                | System Security Services Daemon -- Kerberos back end                          |
| sssd-krb5-common         | System Security Services Daemon -- Kerberos helpers                           |
| sssd-ldap                | System Security Services Daemon -- LDAP back end                              |
| sssd-passkey             | System Security Services Daemon -- passkey helpers and plugins                |
| sssd-proxy               | System Security Services Daemon -- proxy back end                             |
| sssd-tools               | System Security Services Daemon -- tools                                      |

***** Related Deps

I liked functional programming. I hate when everything is ONLY javascript.

#+begin_src js
Array.from(document.querySelectorAll("#pdeps > ul li dl"))
    .reduce((acc,el,i) => {return acc + el.innerText }, "")
    .split("adep: ")
    .map((str) => `| ${str.replace("\n", " | ")} |`)
    .join("\n")
#+end_src

| dpkg-dev (>= 1.22.5)                         | Debian package development tools                                                    |
| autopoint                                    | tool for setting up gettext infrastructure in a source package                      |
| bc                                           | GNU bc arbitrary precision calculator language                                      |
| check                                        | unit test framework for C                                                           |
| cifs-utils                                   | Common Internet File System utilities                                               |
| debhelper-compat (= 13)                      | Package not available                                                               |
| dh-apparmor                                  | AppArmor debhelper routines                                                         |
| dh-python                                    | Debian helper tools for packaging Python libraries and applications                 |
| dh-sequence-installnss                       | virtual package provided by dh-nss                                                  |
| bind9-dnsutils                               | Clients provided with BIND 9                                                        |
| docbook-xml                                  | standard XML documentation system for software and systems                          |
| docbook-xsl                                  | stylesheets for processing DocBook XML to various output formats                    |
| faketime                                     | Report faked system time to programs (command-line tool)                            |
| gnutls-bin                                   | GNU TLS library - commandline utilities                                             |
| krb5-config                                  | Configuration files for Kerberos Version 5                                          |
| ldap-utils                                   | OpenLDAP utilities                                                                  |
| libaugeas-dev                                | Development files for writing applications based on libaugeas0                      |
| libc-ares-dev                                | asynchronous name resolver - development files                                      |
| libcap-dev                                   | POSIX 1003.1e capabilities (development)                                            |
| libcmocka-dev                                | development files for the CMocka unit testing framework                             |
| libcollection-dev                            | Development files for libcollection                                                 |
| libcurl4-openssl-dev                         | development files and documentation for libcurl (OpenSSL flavour)                   |
| libdbus-1-dev                                | simple interprocess messaging system (development headers)                          |
| libdhash-dev                                 | Development files for libdhash                                                      |
| libfido2-dev                                 | library for generating and verifying FIDO 2.0 objects -- headers                    |
| libgdm-dev [not hurd-any kfreebsd-any s390x] | GNOME Display Manager (development files)                                           |
| libglib2.0-dev                               | Development metapackage for the GLib family of libraries                            |
| libini-config-dev                            | Development files for libini_config                                                 |
| libjansson-dev                               | C library for encoding, decoding and manipulating JSON data (dev)                   |
| libjose-dev                                  | Javascript Object Signing and Encryption (José) - development files                 |
| libkeyutils-dev [linux-any]                  | Linux Key Management Utilities (development)                                        |
| libkrad-dev                                  | MIT Kerberos RADIUS Library Development                                             |
| libkrb5-dev (>= 1.12)                        | headers and development libraries for MIT Kerberos                                  |
| libldap2-dev                                 | transitional package for libldap-dev also a virtual package provided by libldap-dev |
| libldb-dev                                   | LDAP-like embedded database - development files                                     |
| libltdl-dev                                  | System independent dlopen wrapper for GNU libtool (headers)                         |
| libnfsidmap-dev                              | header files and docs for libnfsidmap                                               |
| libnl-3-dev [linux-any]                      | development library and headers for libnl-3                                         |
| libnl-route-3-dev [linux-any]                | development library and headers for libnl-route-3                                   |
| libnss-wrapper                               | NSS wrapper library                                                                 |
| libp11-kit-dev                               | library for loading and coordinating access to PKCS#11 modules - development        |
| libpam-wrapper                               | Tool to test PAM applications                                                       |
| libpam0g-dev                                 | Development files for PAM or libpam-dev virtual package provided by libpam0g-dev    |
| libpcre2-dev                                 | New Perl Compatible Regular Expression Library - development files                  |
| libpopt-dev                                  | lib for parsing cmdline parameters - development files                              |
| libsasl2-dev                                 | Cyrus SASL - development files for authentication abstraction library               |
| libselinux1-dev [linux-any]                  | SELinux development headers                                                         |
| libsemanage-dev [linux-any]                  | Header files and libraries for SELinux policy manipulation                          |
| libsmbclient-dev                             | development files for libsmbclient                                                  |
| libssl-dev                                   | Secure Sockets Layer toolkit - development files                                    |
| libsubid-dev                                 | subordinate id handling library -- shared library                                   |
| libsystemd-dev [linux-any]                   | systemd utility library - development files                                         |
| libtalloc-dev                                | hierarchical pool based memory allocator - development files                        |
| libtdb-dev                                   | Trivial Database - development files                                                |
| libtevent-dev                                | talloc-based event loop library - development files                                 |
| libuid-wrapper                               | UID wrapper library                                                                 |
| libunistring-dev                             | Unicode string library for C - development files                                    |
| libxml2-utils                                | GNOME XML library - utilities                                                       |
| lsb-release                                  | Linux Standard Base version reporting utility (minimal implementation)              |
| openssh-client                               | secure shell (SSH) client, for secure access to remote machines                     |
| openssl                                      | Secure Sockets Layer toolkit - cryptographic utility                                |
| pkgconf                                      | manage compile and link flags for libraries                                         |
| python3-dev                                  | header files and a static library for Python (default)                              |
| python3-setuptools                           | Python3 Distutils Enhancements                                                      |
| samba-dev (>= 2:4.1.13)                      | tools for extending Samba                                                           |
| softhsm2                                     | cryptographic store accessible through a PKCS #11                                   |
| systemd                                      | system and service manager                                                          |
| systemd-dev                                  | systemd development files                                                           |
| systemtap-sdt-dev                            | statically defined probes development files                                         |
| uuid-dev                                     | Universally Unique ID library - headers and static libraries                        |
| xml-core                                     | XML infrastructure and XML catalog file support                                     |
| xsltproc                                     | XSLT 1.0 command line processor                                                     |

**** NSS Examples

+ retreival of data from =/etc/passwd= or from LDAP (see [[https://cleveruptime.com/docs/terms/nss][NSS: Explanation &
  Insights]])
+ synchronization of =uid/gid= across many systems for Samba/NFS file share with
  traditional Linux-based file access control. (nsscache tests include a
  [[https://github.com/google/nsscache/tree/main/tests/samba.sh][samba.sh]] example)

***** Redhat

+ The [[https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html-single/configuring_and_using_network_file_services/index#con_scenarios-when-samba-services-and-samba-client-utilities-load-and-reload-their-configuration_assembly_understanding-the-different-samba-services-and-modes][Redhat approach]] for network synchronization of authorization & =passwd= data
  for Network File Services data
+ [[https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html-single/configuring_authentication_and_authorization_in_rhel/index][RHEL 9: Configuring Authentication and Authorization in RHEL]]
  - [[https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/configuring_authentication_and_authorization_in_rhel/understanding-sssd-and-its-benefits_configuring-authentication-and-authorization-in-rhel][Ch 3 Understanding SSSD and its benefits]] (just this chapter from the above)
**** Sync Local NSS with Network Services

Probably not the only solutions here

+ [[https://github.com/google/libnss-cache][google/libnss-cache]]: read =libnss_*.so= data from a cached database source
+ [[https://github.com/google/nsscache][google/nsscache]]: synchronize that cached database with network services (e.g.
  from a =gcs= bucket)

i.e. config your silly =subuid/subgid= ranges to be shared, so containers starting
on some computers will create files that could (in theory) be used to run the
containers on other computers... and probably similar things that i'm too dumb
to extrapolate.

***** Why so stupid?

I reallllly, really hate society.

#+begin_quote
I never had an "operating systems" class in college. It appears that everyone
lied to me about their knowledge level in Linux ... or at least acted basically
as _anti-mentors_ during brief periods of regular-ish interactions. For some of
these people, I just did not ask questions or I was working diligently on some
idiot bullshit.

e.g. I DIDN'T UNDERSTAND THAT YOU SHOULD AUTOMATE CONFIGURATION BY WRITING
PACKAGES. (Archlinux is the ultimate sidetrek into oblivion, since it doesn't
really encourage you to set up network-based services)

_Isolation is disorienting_, but holy shit, no one was giving me a trail of
cookie crumbs leading generally towards deep answers (or shortcuts or workflow
tips). The idea that someone cannot learn this stuff without college is
ludicrous ... but !@#$ there is so much misleading information downstream of
actual concrete information.

On the other hand, there were people who gave me small pieces of incredibly
valuable advice: dozens/hundreds of blurbs pointing me in a direction that would
lead to growth... but later, there was no one to supervise the growth & provide
feedback.

For the most part, it was lack of prolonged contact where a mentor with more
experience would see/care what I was actually working on. This is why I'm so
angry about the basically never programming alongside another person for about
12 years. Websites don't count, sorry. I had way more ideas than =<div>where
does this<shit/>go? oh i'm alone again... forever</div>=
#+end_quote

* Topics

** Advice

*** Don't Learn Linux Wrong

Note that =~= shell expansion doesn't work [in xkb tools]. When something deviates from
expected behavior, figuring this out is obvious despite being ignorant of "first
principles"... but when as of yet you have no expections, it's quite a bit
harder to form any at all. This also makes it difficult to form memories with
any consistency, thus impacting the total "statistical confidence" your brain
experiences when it does "brain things" in the future. If other things are
confusing you, that will definitely add another dimension to convolute your
perpexity.

It's important to be corrected earlier on. Otherwise, you don't learn too good
and bad habits/assumptions become more deeply engrained. Being corrected doesn't
happen much in isolation. Find an expert/usergroup.

** Kernel Bisection

Today I Learned...

The Chromium project has a "[[https://chromium.googlesource.com/chromiumos/manifest/+/refs/heads/main/_kernel_upstream.xml][kernel bisection branch]]" ... What is that?
[[https://wiki.ubuntu.com/Kernel/KernelBisection][According to Ubuntu]], it's probably painful for someone who's not a kernel
developer and/or lacks build automation ...

... well nevermind. it's probably not that bad if the bisection actually returns
results and/or you don't have [[https://www.youtube.com/watch?v=HmZnhe1zvzU&t=1256s][Kernel Patch Reviewer problems]].
** Security

*** PAM: Pluggable Auth Modules

+ [[https://gitlab.com/cwrap/pam_wrapper][pam_wrapper]] test PAM modules during development
+ [[https://xeiaso.net/talks/rustconf-2022-sheer-terror-pam/][The Sheer Terror of PAM]]

*** LSM: Linux Security Modules

**** Yama: Becoming Mindful
See here and here: [[https://utcc.utoronto.ca/~cks/space/blog/linux/Ubuntu1204Symlinks][Ubuntu 12.04 and symbolic links in world-writeable sticky-bitted directories]]

*** MAC: Mandatory Access Control
+ TOMOYO Linux ([[https://wiki.archlinux.org/title/TOMOYO_Linux][archwiki]])

** swap/zswap/zram
+ comparison of [[https://gist.github.com/TBog/9b8b8dc4d77f535c3ebf7bbdc9389cfe][configs for zswap/zram]]

** Networking

*** VRFs and Namespaces

#+begin_quote
no default gateway for you
#+end_quote

+ [[https://www.cloudnull.io/2019/04/running-services-in-network-name-spaces-with-systemd/][Running local services in network namespaces with systemd]]
+ [[https://medium.com/techlog/diving-into-linux-networking-and-docker-bridge-veth-and-iptables-a05eb27b1e72][Deep dive into Linux Networking and Docker — Bridge, vETH and IPTables]]

**** Configurations for =veth= with =VRF=

From [[https://linux-blog.anracom.com/2018/01/05/fun-with-veth-devices-linux-bridges-and-vlans-in-unnamed-linux-network-namespaces-viii/][Fun with VRF Devices]], a series of 8+ blogs that are /unreasonably hard/ to
find on search engines.

[[/data/org/roam/topics/img/fun-with-veth-devices.gif]]

**** In Guix

Guix would define this in =network-link= in the =static-networking= record.

See [[https://guix.gnu.org/en/manual/devel/en/guix.html#Networking-Setup][Networking Setup]] and the Guile-Netlink library. The latter references
=veth=, =netns= and =vrf= in the API.

According to my insufficient understanding, for this to work with shepherd would
probably require a similar patthern as with systemd and firewalld. The services
need to be launched inside the =netns= and you may likely encounter similar Unix
domain socket limitations as with firewalld/dbus (maybe not, since Guix doesn't
use firewalld and thus there's no need to control the firewall through the dbus
socket). As for Shepherd, it could start processes running in another netns, but
if you hit a wall where you need a separate Shepherd instance (with it's own
socket), bridging that gap would require that communication occur as "one shot"
services from the =netns= shepherd to system's =pid 1= shepherd /and vice versa
if bidirectional/. One shepherd would need to write to the other's socket.

I don't really know though. There may be better ways to do this. Shepherd, being
written in scheme, would make multiple service managers /a bit/ easier to work
with ... This is an interesting possibility i've thought a little about, but as
for using it for netns, there are probably simpler ways (messaging to a second
dbus)

... not even sure if i've got the fundamentals correct here.

**** Apps in netns routing out a VPN

[[WireGuard in a separate Linux network namespace][Wiregard in a separate Linux Network Namespace]] covers

+ Applications connected directly to VPN
+ Launching apps with user priviledges

Doesn't cover [[https://github.com/firewalld/firewalld/issues/884][firewalld]] which apparently uses a dbus socket, not netns
aware. See [[https://github.com/firewalld/firewalld/issues/884][firewalld/firewalld #884]] and [[https://github.com/firewalld/firewalld/issues/904][#904]]

#+begin_quote
If you want firewalld to function inside a namespace you need to use both the
daemon firewalld and the CLI firewall-cmd inside that namespace. You could run a
firewalld daemon per a namespace. This is what the firewalld testsuite does to
allow parallel test execution.

The testsuite uses an abstract unix domain socket (which IS namespace aware) in
order to run multiple firewalld and dbus-daemon instances. You could use a
similar strategy to run the daemon inside your namespace.
#+end_quote

And [[https://github.com/firewalld/firewalld/blob/11f997f04fd62c1852f6c381241c089d59ab72bd/src/tests/functions.at#L151-L154][this snippet]] describes that

#+begin_src sh
dnl create a namespace and dbus-daemon
m4_ifdef([TESTING_INTEGRATION], [], [
             m4_define([CURRENT_DBUS_ADDRESS], [unix:abstract=firewalld-testsuite-dbus-system-socket-${at_group_normalized}])
         ])
#+end_src


*** Socket Stats =ss -s=

=man -Tpdf ss > /tmp/ss.pdf= ....... MY LIFE IS A LIE


Filter

|-----+-----------|
| -a  | -l        |
|-----+-----------|
| all | listening |
|-----+-----------|

Network

|---------------+-----+-----+--------+-----+-----+-----+-----+------+--------+------|
| opt           | -t  | -u  | -l     | -b  |  -4 |  -6 | -w  | -u   | -0     | -d   |
|---------------+-----+-----+--------+-----+-----+-----+-----+------+--------+------|
| category      | TCP | UDP | listen | bpf | ip4 | ip6 | raw | unix | packet | DDCP |
| alias with =-f= |     |     |        |     |     |     |     |      | link   |      |
|---------------+-----+-----+--------+-----+-----+-----+-----+------+--------+------|

Context

|-------+--------------+-----------+---------+--------+----------|
| -Z    | -z           | -N        | -p      | -T     | --cgroup |
|-------+--------------+-----------+---------+--------+----------|
| secon | sock context | namespace | process | thread | cgroup   |
|-------+--------------+-----------+---------+--------+----------|


Output

|-------|
| -s    |
|-------|
| stats |
|-------|




** Init Systems

*** Runit

+ [[http://smarden.org/runit/][Runit]]

* ELF ABI

Extensible/Linkable Format

** Docs
+ FreeBSD Handbook: [[https://web.archive.org/web/20130506160632/http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/binary-formats.html][Binary Formats]]
+ [[https://www.technovelty.org/linux/shared-libraries-and-execute-permissions.html][Shared libraries and execute permissions]]

*** Fasterthanli.me
+ [[https://fasterthanli.me/series/making-our-own-executable-packer][Making our own executable packer]] (18-part series on Linux executables)
+ [[https://fasterthanli.me/series/reading-files-the-hard-way][Reading files the hard way]] (not your averge *.exe)

[[https://github.com/gco/xee/blob/4fa3a6d609dd72b8493e52a68f316f7a02903276/XeePhotoshopLoader.m#L108-L136][Some comments are gold]]

** Resources

** Topics
*** PIE and RELRO

+ [[https://www.redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro][Hardening ELF Binaries using Relocation Read-Only]]

*** ELF Structure

See =readelf= and =hexdump= org-babel output in [[id:cda3f6b5-af52-41a6-bbf3-c3b43c485cb2][Linux: basics of elf binaries]].

**** Video: [[https://www.youtube.com/watch?v=nC1U1LJQL8o&t=17s][In-Depth ELF]]

Format for executables, shared libraries and object files

  |----------+----------------|
  |          | Relevance      |
  |----------+----------------|
  | Segments | Only runtime   |
  | Sections | Only link-time |
  |----------+----------------|

Can contain 0+ segments and sections (two completely different concepts)

+ these in turn specify: Memory address + Length
+ some segments can have zero length
+ segments and sections can overlap

A simple statically linked ELF contains 2 main segments to load into RAM:

+ Data Segment: initialized globals (and other initialized data), which leaves
  room to grow.
+ Code Segment: contains the code's instructions, followed by the entry-point
  address.

An ELF with a dynamically linked object does much of the same, but

+ The main ELF has segments pointing to the *.so ELF file, which has its own
  data/code segments.
+ At runtime, the dynamic linking needs to adjust addresses into which the *.so
  ELF's data/code is loaded. This can be adjusted with position independent
  code.

A C-struct defines the =E_IDENT= header section with the magic number
=0x7F454c46=. The next two bytes define the platform (32/64-bit) and whether the
file is encoded as little/big endian.

#+begin_example
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
#+end_example


**** [[https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/][The 101 of ELF files on Linux: Understanding and Analysis]]

*** Loading Dynamic libs in linux
+ How =mmap= command maps regions of =*.so= files
+ How this shared memory is managed

**** PLT, GOT and Loading linked subroutines

[[https://newrustacean.com/show_notes/e031/][NewRustacean (31) FFI Deep Dive]]: the FFI issues in this podcast are
Rust-specific, but illuminate the translation layers quite a bit.

+ I had assumed that FFI was magic. The podcast cleared that up.
+ It turns out that your binding programs and libraries communicate by throwing
  data structures over the fence, but representations must exist on both ends,
  at least until GC (again... idk what i'm talking about really)

One problem that is (i think?) usually avoided, is technically possible and
can't be solved cleverly (at least not AFAIK): a stack frame that alternates or
interleaves calls to the FFI with the calling program's routines (really the
scripting language's VM).

+ The C/C++ code shouldn't be calling back to the scripting language, but may
  have objects with pointers which it doesn't provide an interface to serialize
  to the calling program. 
+ Dynamic libraries in scripting languages +can't be easily linked at the
  process start time+ are expected to load lazily. An ELF file will +describe+
  name the interfaces it expects to link to ... but the caller can't know about
  the dynamic lib structure it hasn't linked in yet. See [[https://blog.k3170makan.com/2018/11/introduction-to-elf-format-part-vii.html][Intro to ELF Format
  (part 7)]]
+ If you build native, the performance gains are more than you would
  expect. Streamlining how the CPU/kernel divvy up work suffers when you can't
  know the result/structure/timing of program data/instructions. In the above
  article (and in general), it's still not clear to me how dynamic linking
  arranges is linked instructions in program memory (or whether it matters if
  related subroutines are chunked... probably not).


*** Reverse Engineering

*** Linking

* Roam
+ [[id:90c681e3-7748-4039-abf1-69755e14c918][selinux]]



* Unix
:PROPERTIES:
:ID:       bdae77b1-d9f0-4d3a-a2fb-2ecdab5fdcba
:END:

** Docs

** Resources

** Resources
*** Services

+ [[https://cr.yp.to/daemontools.html][daemontools]]
+ [[http://smarden.org/runit/][runit]]
+ systemd

** Topics


*** Man Pages

|---+--------------------------------------------------------------------------------------------|
| 1 | Executable programs or shell commands                                                      |
| 2 | System calls (functions provided by the kernel)                                            |
| 3 | Library calls (functions within program libraries)                                         |
| 4 | Special files (usually found in /dev)                                                      |
| 5 | File formats and conventions, e.g. /etc/passwd                                             |
| 6 | Games                                                                                      |
| 7 | Miscellaneous (including  macro  packages/conventions), e.g.man(7), groff(7), man-pages(7) |
| 8 | System administration commands (usually only for root)                                     |
| 9 | Kernel routines [Non standard]                                                             |
|---+--------------------------------------------------------------------------------------------|

*** Processes

+ man daemon [3|7] :: unix definition & history of daemons
+ man unistd.h :: standard symbolic constants and types
+ man signal 7 :: Unix signals

Macros in C expanding into integers that do not map to any function

+ SIG_DFL :: default signal handling
+ SIG_IGN :: ignore signal. The =SIG_IGN= is in the null space, since it maps
  any signal to no transformation.

*** Signals

#+begin_src sh :results output raw
kill -l | rev | cut -f1,3,5,7,9 -d'' | rev
# kill -l | sed -e 's/0)/0)\n/'
# hmmmm
#+end_src

**** Background

+ nohup :: make processes immune to =HUP= signal

***** [[https://en.cppreference.com/w/c/program/SIG_strategies][double fork technique]]

+ Fork & return PID, ensure success
+ setsid() :: Set new session ID, ensure success
+ Remap =SIGCHLD= and =SIGHUP= to =SIG_IGN= to clip signals between parent/child
+ Fork again & return pid. Exit parent with success/failure (or handle error)
+ Set =umask= and =PWD=.
+ Close file descriptors & clean up.

*** IPC

+ [[https://opensource.com/article/19/4/interprocess-communication-linux-networking][IPC in Linux: Sockets & Signals]]
+ Linux fuser command
+ Socket Forwarding Over SSH
  - from [[https://medium.com/@dperny/forwarding-the-docker-socket-over-ssh-e6567cfab160][Forwarding Docker Socket via SSH Tunnel]]
  - also: [[https://blog.ruanbekker.com/blog/2018/04/30/forwarding-the-docker-socket-via-a-ssh-tunnel-to-execute-docker-commands-locally/][forwarding docker socket (to exec docker cmd locally)]]
  - Since [[https://lwn.net/Articles/609321/][OpenSSH 6.7]]
+ [[https://www.baeldung.com/linux/communicate-with-unix-sockets][IPC with unix sockets (baeldung)]]

**** Comparison

+ [[https://news.ycombinator.com/item?id=6739374][ØMQ vs Sockets]] (hacker news)

**** Learning

MPV may be a good way to learn about sockets and IPC on host or over the network

***** Workflow

Run =top=, hit =o= and type =COMMAND=$command= to follow the status of
processes, so you don't have to repeatedly run =ps aux= or =pgrep=. The =o=
filters are case sensitive. =htop= includes the descendents by default.

*** Sockets

**** Remoting
+ ZeroTier/Yggdrasil
  - or Meshnet or Tor
+ VPN over SSH
+ Proxy Server or Reverse Proxy
+ SSH-D + Bind + Socks
  - One way to avoid agent forwarding

**** Send to socket
See [[https://www.man7.org/linux/man-pages/man2/send.2.html][man send]] for info on send, sendto, sendmsg

**** Socat Tunnelling
+ [[https://www.cyberciti.biz/faq/linux-unix-tcp-port-forwarding/][SOcket CAT]]
+ Tunneling w/ =socat= is an option (to avoid SSH agent forwarding)

From [[https://blog.travismclarke.com/post/socat-tutorial/][Socat Cheatsheet]]

#+begin_example shell
# Server
socat TCP-LISTEN:54321\
,reuseaddr\
,fork \
TCP:remote.server.com:22

# Client
ssh root@localhost -p 54321
#+end_example

**** Dante/Stunnel

+ [[https://hamy.io/post/0014/setting-up-an-encrypted-socks-proxy-using-dante-and-stunnel/][Setting up an encrypted SOCKS proxy using Dante and stunnel]]
+ [[https://hamy.io/post/0011/how-to-run-stunnel-on-your-android-device/][Stunnel on android devices]]

* Misc

** Literature

*** [[https://en.wikipedia.org/wiki/Cupid_and_Psyche][Love & Psyche]] - Apuleius

+ Originially from [[https://en.wikipedia.org/wiki/Cupid_and_Psyche][The Golden Ass]]
+ [[https://www.classics.ox.ac.uk/love-and-soul-apuleius-tale-cupid-and-psyche-european-culture-1600][Cupid & Psyche's influence]] on European narrative structures (narremes)
