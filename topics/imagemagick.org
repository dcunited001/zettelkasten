:PROPERTIES:
:ID:       d00a4510-df21-4137-9e46-e3e713f65133
:END:
#+TITLE: ImageMagick
#+DESCRIPTION:
#+TAGS:

Image Magick is occasionally extremely useful. In 2010, where do you think all
those memes came from? And the online meme editors in the same time period?
Those were all running ImageMagick, which was pretty difficult on most platforms
at the time. This program completely changed the face of online communication at
the time.

* Docs

** Official
+ [[https://www.imagemagick.org/Usage/][ImageMagick site]]

Meme Magick 2000 docs

+ [[https://imagemagick.org/script/command-line-options.php][Annotated list of CLI options]]
+ [[https://imagemagick.org/script/command-line-processing.php][Anatomy of the Command-line]]

*** Usage
+ [[https://imagemagick.org/Usage/morphology/#kernel_compose][Multiple Kernel Result Merging: Re-iterate or Compose]] visually demonstrates
  the linearity of the convolution


** digiater.nl

[[https://www.digiater.nl/openvms/freeware/v80/imagemagick-6_2_8/www/command-line-tools.html][CLI Tools]] (and [[https://www.digiater.nl/openvms/freeware/v80/imagemagick-6_2_8/www/command-line-options.html#white-threshold][CLI Options]])

+ [[https://www.digiater.nl/openvms/freeware/v80/imagemagick-6_2_8/www/mogrify.html][mogrify CLI]]
+ convert
+ compare

* Resources

+ [[https://github.com/yangboz/imagemagick-cheatsheet][yangboz/imagemagick-cheatsheet]] examples of short scripts
+ [[https://github.com/ImageMagick/ImageMagick/discussions/6755][Dilate Image According to Alpha?]] examples of using dilate, one of the
  morphological operator used in [[https://docs.opencv.org/4.x/d3/db4/tutorial_py_watershed.html][the watershed algorithm]]


* Topics

** noexport                                                       :noexport:

#+begin_src emacs-lisp :results silent
(setq-local org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
  'org-babel-load-languages
  '((gnuplot . t)))
#+end_src


** GDal

Some image magick tools could fit into a =gdal= workflow (when operations are
truly linear) .. though [[https://imagemagick.org/Usage/formats/#tiff][it is warned]] that TIFF's extensions like  GeoTIFF may not
load.

+ [[https://gist.github.com/marcellobenigno/9290207][marcellobenigno/mosaic.sh]]


** CLI


For operator value input, [[https://www.digiater.nl/openvms/freeware/v80/imagemagick-6_2_8/www/command-line-options.html#white-threshold][the official CLI option docs]] was a much better
reference than most.

Image operators like =-negate= or =-threshold= will chain

*** CLI Options

+ Use [[https://imagemagick.org/script/command-line-options.php#list][-list $type]] or & etc to get information about arguments

Types of =mogrify= CLI options (from the [[https://imagemagick.org/script/command-line-processing.php#option][imagemagick docs]])

**** Image Setting

Options like =-channel RGB= or =-path $path= will affect subsequent
operations for =mogrify=

**** Image Operator

-black-threshold
-color-threshold
-white-threshold
-random-threshold

**** Image Channel Operator
**** Image Sequence Operator
**** Image Geometry
**** Image Stack


*** Filters

+ Use [[https://imagemagick.org/script/command-line-options.php#filter][-filter $type]] to specify type for

**** Resize Filters


**** Filters with Windows

| Lanczos  | Hamming  | Parzen |
| Blackman | Kaiser   | Welsh  |
| Hanning  | Bartlett | Bohman |

There's also =bessel= and =sinc= ... but i'm not sure what these are used for.

The filters can be introspected like so

#+begin_src sh
magick null: -filter lanczos \
     -define filter:verbose=1 \
     -resize 2 null: \
    | grep -e "^#"
#+end_src

#+RESULTS:
| Resampling        | Filter |     (for | graphing) |
|                   |        |          |           |
| filter            | =      | SincFast |           |
| window            | =      | SincFast |           |
| support           | =      |        1 |           |
| window-support    | =      |        1 |           |
| scale-blur        | =      |        1 |           |
| practical-support | =      |        1 |           |

This also outputs their window data

#+begin_src sh :results output file :file img/imagemagick.dat
magick null: -filter lanczos \
       -define filter:verbose=1 \
       -resize 2 null:
#+end_src

#+RESULTS:
[[file:img/imagemagick.dat]]

So you can =gnuplot= the positive half of the lanczos window function.

#+headers: :var datfile="img/imagemagick.dat"
#+begin_src gnuplot :file img/lanczos.png
set grid
plot datfile with lines
#+end_src

#+RESULTS:
[[file:img/lanczos.png]]


** Using Image Magick
*** Use =-white-threshold= to convert light grey background to white

#+begin_example shell
orig=/tmp/orig.png
out=/tmp/out.png
magick $orig -channel RGB -white-threshold 90%,90%,90% $out
#+end_example

*** Filter Colors in PDF to render printable

After failures on nix, I tried this =guix shell ghostscript imagemagick texlive=

I'm having issues with =imagemagick@7.1.1= where =ghostscript= seems to lack the
=png16alpha= virtual print device.

#+begin_src shell
pkgurl=https://github.com/imagemagick/imagemagick
guix build --keep-failed --fallback \
    --with-version=imagemagick=7.1.2 \
    --with-git-url=imagemagick=$pkgurl \
    imagemagick
#+end_src

+ For some reason, specifying the version in `guix shell` wouldn't build. I
  think there's a different upstream.
+ =--fallback= builds from sources.
+ --with-git-url :: this overrides =--with-version= so this is the only parameter
  required for =guix shell=.
- --with-version :: When using only the git url, guix doesn't realize this is
  =v7.1.2-4 (beta)=. Using a scheme expression would fix this.

#+begin_src shell
# guix had cached a source artifact (likely bc i specified the hash with guix
# shell before guix build).
pkgsrc=/gnu/store/llr5hpjsrbyy9g6863gina4nz8k6szda-imagemagick-fad6bec/
guix gc --requisites --referrers --derivers $pkgsrc # check to see its scope in the store
guix gc -D $pkgsrc # nothing else is there, so delete
#+end_src

Anyways...

#+begin_src shell
# ghostscript is built-in afaik, texlive was precautionary, in case of:
# laxeteluadvipng.idk
guix shell --with-git-url=imagemagick=$url imagemagick
f=cheatsheet.pdf
f2=$(dirname $f)/$(basename -s .pdf $f)2.pdf
magick $f -density 300 -brightness-contrast 5x25 -white-threshold 85%,85%,85% $f2
#+end_src

... As it turns out, this method is cursed in many ways. I just wanted to see
what would happen. I was hoping it wouldn't raster or that quality would be
alright. Even so, the doc I'm trying to clean up doesn't make it simple

*** Invert and threshold the =nixos-anywhere= diagrams from EmergentMind

ya one laina comin right up mon

#+begin_src shell
# git clone https://github.com/EmergentMind/dotfiles
# cd dotfiles; cd ./docs/diagrams
for i in anatomy_*; do
    magick $i \
        -channel RGB -negate \
        -white-threshold 85%,85%,85% \
        -level 20%,100%,0.5 \
        $i.inv.png
done
#+end_src

Well technically it was one line.

+ -level $a,$b,$c :: for each =-channel=, map =x -> y=, according to intensity =a=
  - With =+level=, this is inversed (or reversed or contraposed ... ah fuck idk)
  - See [[https://usage.imagemagick.org/color_mods/#level][Direct Level Adjustments]] for examples
  - for =a=0%= and =b=100%=, the entire channel domain maps to its entire range
    - input from =a<=x<=b= and output =0<=y<=1= (i think)
    - =f(x<=a) = 0=, =f(x>=b) = 1=
  - for =a=0%,b=100$= the center point will be =(cx)^2= (i.e. =f(x)=0.25=), so if
    =c=0.5=, the equation is basically a parabola. if =c=2=, it's the
    function-inverse of a parabola.
  - it seems it's just parametric scaling with translations, where no points are
    ever outside the "half-unit" square translated by half a unit in both (x,y):
    i.e. =0<=x<=1= and =0<=y<=1=
+ -level-colors :: similar, but more important to specify channels
  - the colors do not need to be =RGB= primatives, so the domain to range mappings
    are a bit more complicated
+ -sigmoidal-contrast $c,$b :: uses a sigmoidal contrast-based method.
  - =c= should probably be between =2<=c<=5=
  - This mentions the paper [[https://farid.berkeley.edu/downloads/tutorials/fip.pdf][Fundamentals of Image Processing]] which covers the
    parametric domain mapping in depth.

**** Sigmoidal Contrast Equations

#+begin_src python
# some simplifications...
v=(1/(1+exp(β(α-u))) - 1/(1+exp(βα))
    / (1/(1+exp(β(α-1))) - 1/(1+exp(βα))) ) #...& final paren added by me

a=1/(1+exp(β(α-u)))
b=1/(1+exp(βα))
c=1/(1+exp(β(α-1)))
d=1/(1+exp(βα))
v=(a-b)/(c-d)

v=((1+exp(β(α-u)))^-1 - (1+exp(βα))^-1
    / ((1+exp(β(α-1)))^-1 - (1+exp(βα)))^-1 )

# giving up now

# split into two equations
x=exp(β*(α-u));
y=exp(β+1 result (x / y + 1) * (1 / (x + 1) - 1 / y)
#+end_src

... trying to figure out how to tanh the cosh out of these equations, but
they're just =f(x)=(e^x)/(1 + e^x)= or =f(x')=f(x)=1/(1 + e^-x)= ... same thing

i.e. the logistic function https://en.wikipedia.org/wiki/Logistic_function

either way, =(e^nx/e^nx)= can be used to transform, but here it's used in a
program, which usually means it's in the simplest possible form (if in one file;
esp. for one-liners)

but sinh/cosh/tanh? =f(x)= is a special case of =tanh(x)= after scale/translate. i
couldn't get the =e^2x= to disappear (at least not without betas/alphas).

anyways... according to this video [[https://www.youtube.com/watch?v=HnHnEnkZpJA&t=562s][Why hyperbolic functions are actually really
nice...]]

#+begin_example python
e^ix = cos(x) + i*sin(x)
#      real   + imag.
e^ix = cosh(ix) + sinh(ix)
#+end_example

There's another youtube video that explains the geometric interpretation more
fully (and connects to quaternions iirc).

That's pretty mindblowing. See Relationship to [[https://en.wikipedia.org/wiki/Hyperbolic_functions][exponential function (& the next
section)]]

*** Clean up blocky downsampled text

For thin fonts, the downsampling here was worse along the horizontal axis. This
produced the best results, but didn't help much.

#+begin_src sh
# after a negate
img=tenstorrent-risc-v
magick $img.2.png \
       -morphology Convolve "Blur:0.1x0.1" \
       -auto-level $img.3.png
#+end_src

*** Invert & Clean Up Freecad Keyboard Reference:
**** Invert Colors

KDE has a lot of quick shortcuts for operating on files in a right-click menu,
including images. It doesn't have image inversion and most applications are just
too cumbersome to open sets of files for a simple operation.

#+attr_html: :style: width:400px;
[[file:img/freecad-keys.png]]

Prepend -path some/path to avoid overwriting the images. Here I'm overwriting them anyways.

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys"
#+begin_src sh :results file link :file img/freecad-keys-2.png :export both
cp img/$image.png img/$image-2.png
mogrify -path img -channel RGB -negate img/$image-2.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-2.png]]

I had actually wanted to keep the original colors of keys, while making the
colors lighter. On text, the =+negate= operator results in font aliasing
artifacts, when aliasing involves color channels.

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys"
#+begin_src sh :results file link :file img/freecad-keys-3.png :export both
cp img/$image.png img/$image-3.png
mogrify -path img -channel RGB +negate img/$image-3.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-3.png]]

I tried removing this with thresholding, but it didn't work well. This really
needs to be done before =-negating=, but it's hard to remove the aliasing
artifacts.

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys" level=(- (expt 2 16) 51250)
#+begin_src sh :results file link :file img/freecad-keys-4.png :export both
cp img/$image-3.png img/$image-4.png
mogrify -channel B -white-threshold 0,0,$level img/$image-4.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-4.png]]

A blur might work, but apparently a [[https://en.wikipedia.org/wiki/Lanczos_resampling][lanczos filter]] does this better. The
Gaussian blur below has a radias of 1 and it's very blurry. Using a
=-selective-blur= is a possibility. This uses a contrast threshold when applying
the blur, but but I'm not quite sure how to use it.

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys" level=(- (expt 2 16) 51250)
#+begin_src sh :results file link :file img/freecad-keys-5.png :export both
cp img/$image-3.png img/$image-5.png
mogrify -channel RGB -gaussian-blur 1 img/$image-5.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-5.png]]

Of course this is faster in an Image editor, but you can't really batch process
things and you don't necessarily develop a feel for the how the parameter values
influence the filters.

**** Morphology Operators

Dilation also didn't work well. I wasn't sure how to set the arguments on the
kernel. I had only set the type. I could probably refer to the links above. Some
parameters may require using python/ruby/etc to interface with imagemagick.

Setting the channels to =B= looks like this

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys" level=(- (expt 2 16) 51250)
#+begin_src sh :results file link :file img/freecad-keys-dilate-B.png :export both
cp img/$image-3.png img/$image-dilate-B.png
mogrify -channel B -morphology dilate disk img/$image-dilate-B.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-dilate-B.png]]

And to =GB=

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys" level=(- (expt 2 16) 51250)
#+begin_src sh :results file link :file img/freecad-keys-dilate-GB.png :export both
cp img/$image-3.png img/$image-dilate-GB.png
mogrify -channel GB -morphology dilate disk img/$image-dilate-GB.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-dilate-GB.png]]

And to =RGB=. So it looks like the dilate operator either iterates on the
channels separately or increases its effect based on how the kernel matches that
pixel's neighborhood.

... but on second thought, the colors and the soft/hard edges make for a bit of
an optical illusion. It's processing with the same intensity (it does iterate
the channels separately)

#+attr_html: :style: width:400px;
#+headers: :var image="freecad-keys" level=(- (expt 2 16) 51250)
#+begin_src sh :results file link :file img/freecad-keys-dilate-RGB.png :export both
cp img/$image-3.png img/$image-dilate-RGB.png
mogrify -channel RGB -morphology dilate disk img/$image-dilate-RGB.png
#+end_src

#+RESULTS:
[[file:img/freecad-keys-dilate-RGB.png]]


* Issues

* Roam
+ [[id:beafc05d-75b4-4013-8b43-9c0483a30328][Art]]
