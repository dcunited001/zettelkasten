:PROPERTIES:
:ID:       f913598b-a449-48bc-a010-f2c01e2c28ef
:END:
#+TITLE: Static Site Generators
#+DESCRIPTION:
#+TAGS:


* Front Matter
** Docs
+ [[https://frontmatter.codes/docs/getting-started][Getting Started]]


* Astro

** Deployment

*** GH Pages
+ [[https://docs.astro.build/en/guides/deploy/github/][Astro on GH Pages]]


** Themes

+ [[https://github.com/markteekman/accessible-astro-starter][markteekman/accessible-astro-starter]]
+ [[https://github.com/ixartz/Astro-boilerplate][ixartz/Astro-boilerplate]]

* Jekyll

** Docs

** Resources

** Topics
*** Plugins
**** Logging

***** jekyll_plugin_logger

[[https://github.com/mslinn/jekyll_plugin_logger][mslinn/jekyll_plugin_logger]]

**** Plugins

***** iCal

[[https://github.com/Rakefire/jekyll-ical-tag][Rakefire/jekyll-ical-tag]]

#+begin_src liquid
{% ical url: https://space.floern.com/launch.ics reverse: true only_future: true %}
{{ event.summary }}
{{ event.description }}
{{ event.simple_html_description }}
{{ event.start_time }}
{{ event.end_time }}
{{ event.url }}
{{ event.attendees }}
{% endical %}
#+end_src

** Issues
*** Does Jekyll Use Threading

**** [[https://github.com/jekyll/jekyll/issues/9485][jekyll/jekyll#9485]]

someone attempts to replace liquid with pandoc for process-based (?)
threading. good info on internals. Author also has an issue open for
[[https://github.com/Shopify/liquid/issues/1754][shopify/liquid#1754]].

#+begin_quote
So it turns out it is `Liquid::Template#render` that is not thread safe.
#+end_quote

That sounds like good news to me. There is a
=lib/jekyll/utils/thread_event.rb= though, but it's related to =jekyll
serve=.

#+begin_example
test/helper.rb244:      :ServerType => Thread,
test/test_commands_serve.rb18:    @thread = Thread.new do
lib/jekyll/utils.rb10:    autoload :ThreadEvent, "jekyll/utils/thread_event"
lib/jekyll/utils/thread_event.rb7:    class ThreadEvent
lib/jekyll/commands/serve/live_reload_reactor.rb16:          @started_event = Utils::ThreadEvent.new
lib/jekyll/commands/serve/live_reload_reactor.rb17:          @stopped_event = Utils::ThreadEvent.new
lib/jekyll/commands/serve/live_reload_reactor.rb39:          @thread = Thread.new do
lib/jekyll/commands/serve.rb6:      # Similar to the pattern in Utils::ThreadEvent except we are maintaining the
lib/jekyll/commands/serve.rb291:            t = Thread.new { server.start }
#+end_example

+ =Jekyll::Renderer= dispatches to =LiquidRenderer= which itself as
two internal classes: =File= and =Table=. The former corresponds to
a render task for a file (?); the latter, a table for cache (?)
which can be queried for stats.
- Renderer#place_in_layouts gives an entrypoint for layouts. It
doesn't mention includes.
- It seems like layout delegates most of the rest of rendering to
Liquid itself with Jekyll retaining some "concern"
+ =Jekyll::Site= seems to be a top-level class, but doesn't work with
=Renderer= directly. Instead it instantiates a LiquidRenderer and
one of Reader/Profiler/Regenerator

#+begin_example grep
./lib/jekyll/site.rb31:      @liquid_renderer = LiquidRenderer.new(self)
./lib/jekyll/renderer.rb127:                           LiquidRenderer.format_error(e, path || document.relative_path)
./lib/jekyll/renderer.rb133:                          LiquidRenderer.format_error(e, path || document.relative_path)
#+end_example

***** Implications for extracting Theme layout structure via logging

One problem with assuming logging will be sequential is the
utilization of cache... The correct hook would need to be tapped, but
it would likely result in performance hits.

* Roam
+ [[id:38638b3e-e023-460e-9670-84776e61468e][Browser]]
+ [[id:1fd23f33-ec84-47e2-b326-dce568f1ae83][Web Design]]
