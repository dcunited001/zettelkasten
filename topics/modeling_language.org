:PROPERTIES:
:ID:       38f43c0c-52ee-42d7-9660-af2511d19711
:END:
#+TITLE: Modeling Language
#+DESCRIPTION: Graphviz, Dot, PlantUML, Mermaid, and Less "Graphical" DSLs
#+TAGS:

* Docs
+ [[https://text-to-diagram.com/][text-to-diagram.com]] comparison of mermaid, d2, plantuml & graphviz

** Kroki

[[https://kroki.io/#examples][kroki.io]] provides an environment for generating diagrams using many languages.
This is a good entrypoint for finding a decent tool

+ Diagram Types

* Resources

** Archetectural Diagrams

+ [[https://holori.com/saas-pricing/][Holori]] cloud diagramming, free plan with imports from terraform (50 CI
  imports, 3 on-demand imports)
+ [[https://github.com/beveradb/logo-diagram-generator][beveradb/logo-diagram-generator]] generate radial diagrams for tech stacks to
  help connect a central tech's roles to the tools that fulfill them

** UML

+ [[https://github.com/skanaar/nomnoml?tab=readme-ov-file][skanaar/nomnoml]] editor with language

** Syntax

*** [[https://github.com/kevinpt/syntrax][kevinpt/syntrax]]

[[https://kevinpt.github.io/syntrax/][Syntrax]] generates railroad diagrams. Doesn't use EBNF though, but looks more
visually appealing than most of what I've seen.

** Hardware

*** [[https://github.com/Deep-Symmetry/bytefield-svg][Deep-Symmetry/bytefield-svg]]

Based on the LaTeX bytefield package. Generates bit/byte diagrams for
frames/packets or disk/memory.

*** [[https://github.com/kevinpt/symbolator][kevinpt/symbolator]]

+ models VHDL/Verilog

Other Projects from the same author

+ [[https://kevinpt.github.io/guidoc/][Guidoc]] python lib for TKinter GUIs in text. nice
+ [[https://kevinpt.github.io/opbasm/][opbasm]] an assembler for PicoBlaze (chip to control [[https://www.amd.com/en/products/adaptive-socs-and-fpgas/intellectual-property/picoblaze.html#tabs-0ab3ca386e-item-7acb565f99-tab][xilinx]] 8-bit FGPAs). it
  can use =m4= macros.
+ [[https://kevinpt.github.io/vertcl/][VerTCL]] drives TCL (as an extension from VHDL, which is interesting...)
+ [[https://kevinpt.github.io/evfs/][evfs]] simple filesystem for embedded devices (based on SQLite VFS)
* Graphviz/PlantUML
See [[id:e77048aa-d626-44c1-8bbb-037a1173d01d][Graphviz]]

* diagrams.net

diagrams.net: the app formerly known as draw.io

** Source

implementations in Java, Javascript, C# ... also, there's no XSD or schema

+ [[https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxUtils-js.html#mxUtils.parseXml][util/mxUtils.js#mxUtils.parseXml]] This parses the XML, which is usually
  Base64 encoded or something.
+ [[https://jgraph.github.io/mxgraph/docs/js-api/files/io/mxCodec-js.html][io/mxCodec.js]] this decodes the XML

* D2

See [[https://text-to-diagram.com/?example=basic&b=graphviz&a=d2&layout_a=tala][text-to-diagram.com]] ... this modeling language has:

+ good syntax highlighting
+ is decently transmutable
+ has org-babel support

#+begin_src d2 :file img/d2-test.svg
Start: "" {
  shape: circle
  width: 10
}

End: "" {
  shape: circle
  width: 10
}

Start -> Still
Still -> End

Still -> Moving
Moving -> Still
Moving -> Crash
Crash -> End
#+end_src

#+RESULTS:
[[file:img/d2-test.svg]]

* Mingrammer

[[github:mingrammer/diagrams][mingrammer/diagrams]]: graphviz-based python lib for generating cloud architecture
diagrams.

Categories

| onprem       | generic  | c4          |
| aws          | k8s      | programming |
| azure        | oci      | custom      |
| gcp          | elastic  |             |
| ibm          | saas     |             |
| alibabacloud | outscale |             |
| openstack    |          |             |
| digitalocean |          |             |

** Docs
+ [[https://diagrams.mingrammer.com/docs/getting-started/examples][Cloud Infrastructure examples]]

** Resources
+ [[github:dmytrostriletskyi/diagrams-as-code][dmytrostriletskyi/diagrams-as-code]] write Diagrams in YAML (see [[https://github.com/dmytrostriletskyi/diagrams-as-code/blob/main/json-schemas/0.0.1.json][JSON schema]])
+ [[https://github.com/tabatkins/railroad-diagrams][tabatkins/railroad-diagrams]] generate diagrams for a real language like haskell

*** Dependent Packages

[[berylliumsec/nebula_watcher][berylliumsec/nebula_watcher]] visualizes pentesting progress.

+ parses initial NMAP scan results
+ generates diagram that depicts the network/machines
+ runs a webserver that displays the diagram.
+ then when network activity is detected on each path/port, it updates
  =state.json= and changes arrows from red to green

[[https://github.com/SecuraBV/RedWizard][securabv/redwizard]] sets up OPSEC-safe infrastructure for pentesting

+ uses diagrams for ummm diagrams ... here in [[https://github.com/SecuraBV/RedWizard/blob/main/tools/diagram.py][diagrams.py]] it more
  programmatically generates a diagram that reflects your pentesting
  infrastructure
+ It's also a good example of an Ansible project.

[[https://github.com/dora-metrics/pelorus/blob/778192ff8d72d2f05c3fbb2318036e7c68522f45/docs/img/diagrams/generate_diagrams.py#L4][dora-metrics/pelorus]] measure IT's contribution to code delivery

+ example of =Custom= icon usage in [[https://github.com/dora-metrics/pelorus/blob/master/docs/img/diagrams/generate_diagrams.py][docs/img/diagrams/generate_diagrams.py]]

** Topics

*** CLI

This was briefly added, but it's gone. A python wrapper script is needed.

*** Usage

**** Classes

Diagram

| param      | type  | default | desc                                             |
|------------+-------+---------+--------------------------------------------------|
| name       | str   | ""      | Diagram name.                                    |
| filename   | str   | ""      | The output filename, without extension           |
| direction  | str   | "LR"    | Data flow direction.                             |
| curvestyle | str   | "ortho" | Curve bending style. One of "ortho" or "curved". |
| outformat  | str   | "png"   | Output file format. Default is 'png'.            |
| show       | bool  | True    | Open generated image after save                  |
| graph_attr | Dict? | None    | Provide graph_attr dot config attributes.        |
| node_attr  | Dict? | None    | Provide node_attr dot config attributes.         |
| edge_attr  | Dict? | None    | Provide edge_attr dot config attributes.         |
| strict     | bool  | False   | Rendering should merge multi-edges.              |

Cluster. Group is defined as an alias to Cluster, at least initially

| param      | type  | default   | desc |
|------------+-------+-----------+------|
| label      | str   | "cluster" |      |
| direction  | str   | "LR"      |      |
| graph_attr | Dict? |           |      |

Node

| param | type | default | desc |
|-------+------+---------+------|
| label | str  | ""      |      |

Edge


| param   | type   | default | desc |
|---------+--------+---------+------|
| node    | "Node" | None    |      |
| forward | bool   | False   |      |
| reverse | bool   | False   |      |
| label   | str    | ""      |      |
| color   | str    | ""      |      |
| style   | str    | ""      |      |
| attrs   | Dict   |         |      |

**** Example

From the example [[https://diagrams.mingrammer.com/docs/getting-started/examples#advanced-web-service-with-on-premise-with-colors-and-labels][Advanced Web Service with On-Premise (with colors/labels)]]

#+headers: :var fname="img/mingrammer_test" fext="png"
#+begin_src python :results output file link
from diagrams import Cluster, Diagram, Edge
from diagrams.onprem.analytics import Spark
from diagrams.onprem.compute import Server
from diagrams.onprem.database import PostgreSQL
from diagrams.onprem.inmemory import Redis
from diagrams.onprem.aggregator import Fluentd
from diagrams.onprem.monitoring import Grafana, Prometheus
from diagrams.onprem.network import Nginx
from diagrams.onprem.queue import Kafka

with Diagram(name="Advanced Web Service with On-Premise (colored)",
             filename=fname,
             outformat=fext,
             show=False):
    ingress = Nginx("ingress")

    metrics = Prometheus("metric")
    metrics << Edge(color="firebrick", style="dashed") << Grafana("monitoring")

    with Cluster("Service Cluster"):
        grpcsvc = [
            Server("grpc1"),
            Server("grpc2"),
            Server("grpc3")]

    with Cluster("Sessions HA"):
        primary = Redis("session")
        primary - Edge(color="brown", style="dashed") - Redis("replica") << Edge(label="collect") << metrics
        grpcsvc >> Edge(color="brown") >> primary

    with Cluster("Database HA"):
        primary = PostgreSQL("users")
        primary - Edge(color="brown", style="dotted") - PostgreSQL("replica") << Edge(label="collect") << metrics
        grpcsvc >> Edge(color="black") >> primary

    aggregator = Fluentd("logging")
    aggregator >> Edge(label="parse") >> Kafka("stream") >> Edge(color="black", style="bold") >> Spark("analytics")

    ingress >> Edge(color="darkgreen") << grpcsvc >> Edge(color="darkorange") >> aggregator

print(f'{fname}.{fext}', end='')
#+end_src

#+RESULTS:
[[file:img/mingrammer_test.png]]


* Mermaid

** Docs

+ [[https://mermaid.js.org/intro/][Intro]]
+ [[https://mermaid.js.org/syntax/flowchart.html][Flowchart]]
+ [[https://mermaid.js.org/syntax/examples.html][Examples]]

*** Tech/Systems

+ [[https://mermaid.js.org/syntax/sequenceDiagram.html][Sequence Diagram]] depiction of state transformations (in state machines)
+ [[https://mermaid.js.org/syntax/classDiagram.html][Class Diagrams]] UML
+ [[https://mermaid.js.org/syntax/stateDiagram.html][State Diagrams]] state machines
+ [[https://mermaid.js.org/syntax/entityRelationshipDiagram.html][Entity Relationship]] for ORM and SQL

*** Model-specific Extensions

+ [[https://mermaid.js.org/syntax/sankey.html][Sankey]] "model flows from one set of values to another"
+ [[https://mermaid.js.org/syntax/gantt.html][Gantt Chart]] project/time management
+ [[https://mermaid.js.org/syntax/gitgraph.html][Gitgraph]] for git commits/actions

** Resources

** Topics

*** Emacs

**** Usage

***** Basic

This is much simpler than =dot= (requires a command hook) and somewhat simpler
than PlantUML. Whatever you choose depends on:

+ whether it's simple to transform output into the DSL language (from an
  arbitrary script/language)
+ whether it's easy to style

#+begin_src mermaid :file img/test.svg
sequenceDiagram
 A-->B: Works!
#+end_src

#+RESULTS:
[[file:img/test.svg]]

**** Config

#+begin_src emacs-lisp
;; run from docker/podman, nice
;; https://github.com/mermaid-js/mermaid-cli#alternative-installations
(setup (:pkg mermaid-mode :straight t :type git :flavor melpa
             :host github :repo "abrochard/mermaid-mode")
  (require 'mermaid-mode)
  ;; also mermaid-mmdc-location, mermaid-flags
  (:option mermaid-output-format ".svg"))

;; both pkgs define org-babel-execute:mermaid.  ensure ob-mermaid loads after.
;; depending on how straight builds load-path, different functions could run.
;; https://github.com/abrochard/mermaid-mode/blob/master/mermaid-mode.el#L102-L121
(with-eval-after-load 'mermaid-mode
  ;; ob-mermaid basically only provides org-babel-execute:mermaid and formatting
  (setup (:pkg ob-mermaid :straight t :type git :flavor melpa
               :host github :repo "arnm/ob-mermaid")))

;; only necessary if (executable-find ...) returns nil
;; (:option ob-mermaid-cli-path "mmdc")
#+end_src

**** Emacs-Specific Issues

There is one issue where the =mermaid-mode= doesn't quite solve the
yaml-headers. This is new ([[https://github.com/mermaid-js/mermaid/pull/3706][mermaid-js/mermaid#3706]]) and a bit confusing to
implement support: inside the =---=

** Issues


* Modeling Subjects
** Sqlite schema

***** TODO How to convert to postgres or mysql?

*** [[https://gitlab.com/Screwtapello/sqlite-schema-diagram][Screwtapello/sqlite-schema-diagram]]

** Protobuf

*** GoogleCloudPlatform/proto-gen-ui-diagrams

This generates markdown docs with mermaid diagrams, but it takes some munging to
produce balanced mermaid output.

+ You can recursively traverse the files and (assuming the file system comports
  with the protobuf module namespaces) quickly determine how isolated the
  namespaces are. More precisely are they isolated subgraphs or are there import
  references between protobuf namespaces.
+ Converting to =org-mode= via =pandoc= opens up more options (for me), but this
  assumes fairly error-free input (not consistent for metastable projects &
  branches). However ... this requires using =org-element= and/or =org-ql=, as
  well as tweaking the =pandoc= params a bit (i've never done that)

**** Markdown Methods

***** For a project with isolated namespaces and few files

When a project or proto namespace sets up isolated subgraphs and there are few
files, then concat the output markdown files together and process with =awk= to
leave only content within =```mermaid= code blocks.

#+begin_quote
For =awk=, use a simple =state-machine= since you're either in a block or you're
not ... this fits into a case statement (basically the same can parse =jq=
streams which are concat)
#+end_quote

***** For a complicated project where....

+ Namespaces contain many files
+ Each file contains many proto models
+ Or the graph is messy. (more precisely, *the minimum edge cut* is relatively
  high for /most/ parts of the proto dependency graph (as it is in the mermaid
  output)

When the project or proto branch has many interdependent files, the challenge
becomes determining how much detail is too much and what detail is germaine to
each output markdown file.

Assuming that =proto-gen-ui-diagrams= reads input and does not repeat mermaid
diagrams -- viz. the models contained in =*.proto= are only defined in one file
to be imported in other files -- then one could extract the mermaid blocks and,
with AST (maybe CST) then reorder the list of blocks to construct a graph.

From here either =(1)= take the Doxygen approach of limiting diagrams to n˚ or
=(2)= identify clusters through various methods (cutting all inbound/outbound
edges matching some spec; or... hmmm), then rebuild one graph per "idea-cluster"
which is then expanded by one-degree of connections. The latter method produces
M number of diagrams where each has the either the level of detail you'd like or
only deletions are required.


* Roam
+ [[id:bb8bbe7c-6d49-4088-9161-2ae2edb4abd6][Ontology]]
