:PROPERTIES:
:ID:       da888d96-a444-49f7-865f-7b122c15b14e
:END:
#+TITLE: Desktop
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: Desktop Tools/Utilities

* Freedesktop

The [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]] Formerly Known As "Free"


** Docs


** Resources

* Wayland

**** IDEA (nix/guix) Private namespace for Wayland Protocol XML specs specific to application & integrations

In some galactic san francisco farfar away longlong ago, there seems to be quite
a bit of discussion regarding how/what to support.

Counterpoint from [[https://labwc.github.io/][labwc]]:

#+begin_quote
Labwc only understands wayland-protocols & wlr-protocols, and it cannot be
controlled with dbus, sway/i3-IPC or other technology. The reason for this is
that we believe that custom IPCs and protocols create a fragmentation that
hinders general Wayland adoption.
#+end_quote


** Topics

*** Protocol

*** Portal

*** Desktop Applications

This is already a bit complex

+ notifications: dunst, mako
  - sway nc looked nice
  -
+ taskbars
  - polybar -> waybar (almost 1:1)
  - eww + yucc: pretty cool, but difficult to package on guix
+ window managers: i3 -> sway (almost 1:1)


**** Launcher

+ [[https://hg.sr.ht/~schoopta/wofi][wofi]]
+ [[https://github.com/nwg-piotr/nwg-launchers][nwg-launchers]]

**** Panels

+ Swaybar

**** Notifications

* Xorg Desktops

** Launcher

+ Rofi
+ DMenu

** Panels

+ Polybar

** Notifications

+ Dunst


* Misc Tools

** Usability

+ [[github:fennerm/flashfocus][Flash Focus]]

* Flatpak

This is a platform for distributing apps, but is technically containerized.
[[https://docs.flatpak.org/en/latest/tips-and-tricks.html?highlight=%22%2Fetc%2Fflatpak%22#adding-a-custom-installation][Custom installations allow you to install to flatpak-specific disk-image]]. This
can be shared to multiple VM's via proxmox to make desktop apps like
Krita/Blender/Steam more portable.

#+begin_quote
... So, if i want to distro-hop ... but I don't want to lose my app
configurations.
#+end_quote

[[https://docs.flatpak.org/en/latest/flatpak-command-reference.html#flatpak-metadata][Environment Var Reference]]

Path Vars

|--------------------------+-----------------------+-----------------------------------------|
| Name                     | Default               | Desc                                    |
|--------------------------+-----------------------+-----------------------------------------|
| FLATPAK_USER_DIR         | XDG_DATA_PATH/flatpak | location of per-user installation       |
| FLATPAK_SYSTEM_DIR       | /var/lib/flatpak      | location of system-wide installation    |
| FLATPAK_SYSTEM_CACHE_DIR | /var/tmp/               | place for temp child repos during pulls |
| FLATPAK_CONFIG_DIR       | /etc/flatpak          | flatpak site config                     |
| FLATPAK_RUN_DIR          | /run/flatpak          | runtime global files                    |
|--------------------------+-----------------------+-----------------------------------------|

Misc vars

|----------------------+----------------------------------------------|
| Name                 | Desc                                         |
|----------------------+----------------------------------------------|
| FLATPAK_FANCY_OUTPUT | set to =0= to avoid fancy formatting           |
| FLATPAK_TTY_PROGRESS | set to =1= to enable machine readable progress |
|----------------------+----------------------------------------------|

Modified XDG Vars

|-----------------+------------------------------|
| Base Dir        | Default                      |
|-----------------+------------------------------|
| XDG_CONFIG_HOME | ~/.var/app/$app/config       |
| XDG_DATA_HOME   | ~/.var/app/$app/data         |
| XDG_CACHE_HOME  | ~/.var/app/$app/cache        |
| XDG_STATE_HOME  | ~/.var/app/$app/.local/state |
|-----------------+------------------------------|

** Docs
+ [[https://docs.flatpak.org/en/latest][Main Docs]]
+ [[https://docs.flatpak.org/en/latest/conventions.html][Flatpak Conventions]]

*** AppStream

This is a standard for application-centric metadata about components in the
linux system (as opposed to of package-centric metadata)

+ AppStream [[https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html][metainfo XML]]
+ [[https://www.freedesktop.org/software/appstream/docs/api/index.html][dev docs]]
+ Github: [[github:ximion/appstream][ximion/appstream]]

** Resources
+ [[https://docs.flatpak.org/en/latest/desktop-integration.html#portals][Portals]] interface for securely permitting app to access host resources from sandbox
** Topics

*** Multiple Installations

Install =flatseal=

Here, flatpak will be configured to use a custom installation on another
partition at =/flatpak/$USER=. To keep the flatpak app state on the same
partition, link =$HOME/.var= to =$FLATPAK_USER_VAR=.

#+begin_src sh :tangle .config/sh/profile.d/flatpak.sh :shebang #!/bin/sh
alias flatagenda="flatpak --installation=agenda"
alias flatsteam="flatpak --installation=steam"

export XDG_DATA_DIRS="/flatpak/dc/.local/share/flatpak/exports/share:${XDG_DATA_DIRS}"
# TODO move this to the guix package?
export XDG_DATA_DIRS="/flatpak/steam/.local/flatpak/exports/share:${XDG_DATA_DIRS}"
export XDG_DATA_DIRS="/flatpak/agenda/.local/flatpak/exports/share:${XDG_DATA_DIRS}"

export FLATPAK_USER_DIR=/flatpak/$(id -un)/.local/share/flatpak

# this is another variable for convenience (this var isn't used by flatpak)
export FLATPAK_USER_VAR=/flatpak/$(id -un)/.var

# Custom installations need to be configured here
# - /flatpak/steam :: $FLATPAK_CONFIG_DIR/installations.d/steam.conf
# export FLATPAK_CONFIG_DIR=/flatpak/.config/flatpak
export FLATPAK_CONFIG_DIR=/etc/flatpak

#+end_src

**** The Goal

After creating & mounting a =/flatpak= disk, syncthing can push centrally
updates to new flatpak installations to =/flatpak/syncpak123=:

+ Here they can be managed via =flatpak --installation /flatpak/syncpak123= on
  the server where flatpak is hosted
  - or, more carefully, managed from some of the local servers, assuming a consistent flatpak environment on the syncthing clients.
  - these clients (or the client disk permissions) should set some of the
    syncthing permissions to read only.
  - on the client, =XDG_CONFIG_DIR= is always read after =XDG_CONFIG_HOME=, so
    for any app, its configs can be transparently overridden, without affecting the synced flatpak installations.
+ Then the custom flatpak installations can be linked into the local system via
  =stow=, where a few modifications to =XDG= vars will pick them up.

This method has not been tested yet. However, since they are plain binaries, then they should be syncable.

**** Steam & Proton

+ [[See ][PC Gaming Wiki]] describes Steam Library & Game Data locations

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh
export STEAM_DIR=$_STEAM/.var/app/com.valvesoftware.Steam/.steam
export FLATPAK_STEAM_VAR=/flatpak/steam/.var

# log with PROTON_LOG=1
export PROTON_LOG_DIR=$_STEAM/log/proton
export PROTON_CRASH_REPORT_DIR=$_STEAM/log/proton-crash

alias run_steam="flatpak --installation=steam run com.valvesoftware.Steam"
#+end_src

Run with =FLATPAK_CONFIG_DIR=/etc/flatpak flatpak --installation=steam run com.valvesoftware.Steam=

Or simply =flatpak --installation=steam run com.valvesoftware.Steam=

***** Setup

+ Add =steam.sh= to =~/.config/sh/_load_profile.d.sh=

#+begin_src sh :tangle no :eval no
mkdir -p $_STEAM $FLATPAK_STEAM_VAR/com.valvesoftware.Steam

# because flatpak steam will try to symlink /flatpak/dc/.var/com.valvesoftware.Steam/.var to ~/.var (which is very confusing)
ln -s /flatpak/steam/.var/app/com.valvesoftware.Steam /flatpak/dc/.var/com.valvesoftware.Steam

# ensure that FLATPAK_CONFIG_DIR is defined and that the steam flatpak install exists
flatpak --installations

flatpak --installation=steam remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak --installation=steam remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo

flatpak --installation=steam install flathub com.valvesoftware.Steam
flatpak --installation=steam install flathub com.valvesoftware.Steam.CompatibilityTool.Proton
#+end_src

****** Issues

+ After invoking for the first time, if this link shows up, remove it
  - =rm /flatpak/steam/.var/app/com.valvesoftware.Steam/.var=
+ Flatpak steam will ignore =STEAM_DIR= anyways...
  - it will put the steam library within the steam install under
    =/flatpak/steam/.var/app/com.valvesoftware.Steam/.var=


******* TODO consider creating ./flatpak/installations.d/steam.conf

**** Caveats

When running apps from a portable flatpak custom installation, the ABIs for a
flatpak ELF must be compatible with those your system expects binaries to adhere
to.

+ [[https://stackoverflow.com/questions/2171177/what-is-an-application-binary-interface-abi][The TLDR S/O post on ABIs I shouldve finished reading]]
+ [[https://kernelnewbies.org/ABI][Linux ABI]]
+ [[https://www.systutorials.com/docs/linux/man/1-abidiff/][abidiff]] cmdline tool


** Issues

*** Fixing Zoom Signon in flatpak

Can be fixed in =$XDG_CONFIG_HOME/zoomus.conf= with
=embeddedBrowserForSSOLogin=false= according to this [[https://github.com/flathub/us.zoom.Zoom/issues/169][github issue]].

See [[https://support.zoom.us/hc/en-us/articles/115001799006-Mass-deploying-preconfigured-settings-for-Mac][documentation of zoomus.conf]] for keys/values


* XDG Free Desktop


** Docs

*** Gitlab

+ [[https://gitlab.freedesktop.org/explore/groups][Groups]] (hmmm maybe a good place to start)

*** [[https://freedesktop.org/wiki/Specifications/][Specifications]]

All the specifications are readable as XML files ... [[https://gitlab.freedesktop.org/xdg/xdg-specs][xdg/xdg-specs]]

+ [[https://freedesktop.org/wiki/Specifications/icon-theme-spec/][icon-theme-spec]]

*** Ontologies

+ [[https://gitlab.freedesktop.org/archived-projects/shared-desktop-ontologies][shared-desktop-ontologies]], an archived project, but contains RDF
  specifications for objects on the desktop

** Resources

** Topics

*** Menu

**** Desktop Files
**** Telepathy

+ Developer's Manual
+ [[https://telepathy.freedesktop.org/spec/][D-Bus Interface Spec]]
+ [[https://telepathy.freedesktop.org/doc/telepathy-glib-1/][glib api reference]]
  - [[https://telepathy.freedesktop.org/doc/telepathy-glib-1/telepathy-glib-dtmf.html][DTMF dialstring interpreter]] (so you can dial out of the matrix)
+ [[https://telepathy.freedesktop.org/resources/][Telepathy resources]]

Useful mainly to see how other devs thought they'd solve the "many-to-many
Notifications from Social Media Hellscape" problem. Enough metadata in the glib
docs & source to construct UML/diagrams. That's nice.

#+begin_quote
meet David. David learns about Design Patterns book in 2011. David cannot afford
Design Patterns Book until 2022. David has no time to read it. David is failing
Statics/Physics bc ... well nevermind.
#+end_quote

This looks like kinda a lot of well-done work (by two developers? idk) that was
basically usurped by corporate america to eventually settle into the Git Forge
of Forgotten Dreams.

Looking at the d-bus specifications and glib types, it seems that Telepathy
probably would've solved a lot of problems that I have.

+ Several devices run d-bus service(s)
+ The d-bus service(s) provide an interface to "channels"
+ Devices specify which channels/events/etc they'd like to receive updates for
+ The devices display current information ... without depending on remote
  services to synchronize state/cache (which is "the hard part" or "a hard
  part")

**** Autostart

*** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.

#+begin_src sh :result none :eval no
dirsfile=$XDG_CONFIG_HOME/user-dirs.dirs

# overwrite (requires stow .)
echo > $dirsfile
echo "XDG_DOCUMENTS_DIR=\"$_DATA/xdg/Documents\"" >> $dirsfile
echo "XDG_MUSIC_DIR=\"$_DATA/xdg/Music\"" >> $dirsfile
echo "XDG_PICTURES_DIR=\"$_DATA/xdg/Pictures\"" >> $dirsfile
echo "XDG_VIDEOS_DIR=\"$_DATA/xdg/Videos\"" >> $dirsfile
echo "XDG_TEMPLATES_DIR=\"$_DATA/xdg/Templates\"" >> $dirsfile

# and ignore these
#XDG_DESKTOP_DIR="$_DATA/xdg/Desktop"
#XDG_DOWNLOADS_DIR="$_DATA/xdg/Downloads"
#XDG_PUBLICSHARE_DIR="$_DATA/xdg/Public"
#+end_src

**** Note

=xdg-user-dirs-update= will replace everything if anything is invalid (only
=$HOME/yyy= or =/path/to/yyy= is valid) .it will autoupdate everything if any
dirs don't exist
** Issues
+ [[https://bbs.archlinux.org/viewtopic.php?id=227166][Expanding =XDG_DATA_DIRS= in =.pam_environment=:]]

*** Desktop Entries

**** Hidden

I've run into some other confusing issues but not this one. According to the
[[https://specifications.freedesktop.org/desktop-entry-spec/latest/recognized-keys.html][Desktop Entry Spec]]

#+begin_quote
Hidden should have been called Deleted. It means the user deleted (at their
level) something that was present (at an upper level, e.g. in the system dirs).
It's strictly equivalent to the .desktop file not existing at all, as far as
that user is concerned. This can also be used to "uninstall" existing files
(e.g. due to a renaming) - by letting make install install a file with
Hidden=true in it.
#+end_quote


* Applications


** Media

*** MPD

+ beets (library management)
  - see ./Scrumplex/dotfiles/beets/.config/systemd/user/beets-mpdstats.service
+ MPRIS :: protocol to remotely control a music player (is this necessary?)
  - see ./phundrak/
+ mpd.conf :: is this necessary for the player or the clients?
+ [[https://github.com/metabrainz][metabrainz/picard]] automated tagging of music
  - github org has other projects for data analysis on music

#+begin_quote
what is MPRIS? MPD? MPV? idk.... this is kind of a huge hangup for me. i have
something of a network, but I don't use wifi (and mDNS isn't set up), so
basically no streaming works from Linux devices to your general media
players. It maybe would on WiFi, but usually requires a few extra steps

(on EVERY installation, hence why i value deterministically recreating my linux
installation!)

I can set this MPD stuff up, but every time I go to do it, I have no idea where
to get started. It doesn't seem like a priority. There are other blockers: hey,
i'll just .. use. this computer... that only has DisplayPort ... fuck.

Learning about this stuff is easy, as long as you have a mentor, Linux User
Group or group of friends who are all doing it at the same time. For whatever
reasons (mostly circumstantial), I've missed out on a lot of that.
#+end_quote

*** MPV

* Design

** Resourcse

+ [[https://blog.buddiesofbudgie.org/state-of-the-budgie-may-2022/][State of the Budgie: May 2022]] long post about organizing work for a desktop
  environment.

* Footnotes
[fn:WHINE]: Confusing for someone who -- until very recently thought MISO was a
[[https://gitlab.manjaro.org/search?search=miso&nav_source=navbar&project_id=35&group_id=9&search_code=true&repository_ref=master][tasty soup]]. I used Manjaro on/off from 2013? through 2019?. I originally
installed Archlinux in beginning 2012 before the easy script installer -- by
running the iso, setting up filesystems and using the tooling to pick & place
pacman db, vmlinuz & initramfs.
- I never knew about [[https://gitlab.manjaro.org/tools/development-tools/manjaro-tools/-/blob/master/Makefile][manjaro-tools]] or Arch ISO tooling (or deb/rpm equivalents)
- I once experimented with a secondary package root for pacman using =aurutils=,
  but only got this working once really. I didn't quite understand what my
  =/opt/ions= were.
- I've only ever used =pacman=, =yay= and one or two GUI apps.
- I loved customization (keybindings, functional stuff for automation & scripts)
  and the idea that there were far fewer constraints than on Windows/Mac ... but
  I had _zero_ idea that the proper tool to use was packages
I stumbled upon [[https://gitlab.com/garuda-linux?filter=iso][Garuda's Gitlab]] in response to a bout of desperate googling for
something or another.
