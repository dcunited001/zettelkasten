:PROPERTIES:
:ID:       da888d96-a444-49f7-865f-7b122c15b14e
:END:
#+TITLE: Desktop
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: Desktop Tools/Utilities

* Freedesktop

The [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]] Formerly Known As "Free"

** Docs

** Resources

* Wayland

**** IDEA (nix/guix) Private namespace for Wayland Protocol XML specs specific to application & integrations

In some galactic san francisco farfar away longlong ago, there seems to be quite
a bit of discussion regarding how/what to support.

Counterpoint from [[https://labwc.github.io/][labwc]]:

#+begin_quote
Labwc only understands wayland-protocols & wlr-protocols, and it cannot be
controlled with dbus, sway/i3-IPC or other technology. The reason for this is
that we believe that custom IPCs and protocols create a fragmentation that
hinders general Wayland adoption.
#+end_quote

** Topics

*** Protocol

*** Portal

*** Desktop Applications

This is already a bit complex

+ notifications: dunst, mako
  - sway nc looked nice
  -
+ taskbars
  - polybar -> waybar (almost 1:1)
  - eww + yucc: pretty cool, but difficult to package on guix
+ window managers: i3 -> sway (almost 1:1)


**** Launcher

+ [[https://hg.sr.ht/~schoopta/wofi][wofi]]
+ [[https://github.com/nwg-piotr/nwg-launchers][nwg-launchers]]

**** Panels

+ Swaybar

**** Notifications

*** Dmenu Scripts
* Service Management
*** Systemd

**** NixOS Env

NixOS settings

+ config.environment.sessionVariables ::
  + merged into =environment.variables= (not pamified)
    - the =sessionVariables= are particularly "initialized by =pam_env=, (that is,
      not only in shells)"
  + apparently this is only in =nixos-unstable= ... (no wonder I got so confused)
+ config.profileRelativeSessionVariables :: PAM
  - these pamified vars are merged into =environment.profileRelativeEnvVars= (the
    non-pamified vars).
  - the =profileRelative.*= vars are relative to nix profiles on the system.
+ /etc/pam/environment :: the pamified vars end up here
  - set by display managers [[https://github.com/NixOS/nixpkgs/blob/85fe7380cc14e96a569f53fc07133b2db55049d9/nixos/modules/services/display-managers/sddm.nix#L367-L402][SDDM]], GDM, Cage, LightDM
    - for SDDM, several configs are created as =security.pam.services.<name>=
    - but =pam_env.so= is not "sourced last" ([[https://www.reddit.com/r/archlinux/comments/l0ascx/pam_env_is_being_deprecated_any_alternatives/][apparently important]] idfk)

There are several files for configuring vars in the profile (potentially outside
of =nixos-rebuild=)

+ $HOME/.profile ::
  - should be at least sourced by your =.bash_profile=
+ $XDG_CONFIG_HOME/environment.d ::
  - I was under the impression that this wasn't sourced as a typical shell file.
+ $XDG_CONFIG_HOME/uwsm/env{-hyprland} ::
  - Same deal, "not a typical shell source" ... that's wrong? The hyde project
    uses this to load environment for UWSM
  - =HYPRLAND_CONFIG= is set here

***** Probing

#+begin_src shell
t=$(mktemp -d)
# may run this in a vty to understand what's not run by uwsm
env | sort | uniq > $t/alacritty.hypr.uwsm.env

# changes introduced when uwsm sources this
grep -e 'export' ~/.config/uwsm/env-hyprland \
    | sed -E 's/export (.*)=(.*)\b( *#.*)?/\1=\2/g' \
    | tr -d '"' | sort | uniq > $t/config.uwsm.env

# what systemd thinks is happening...
systemctl --user show-environment | sort | uniq > $t/systemd.user.env

# if you really must... (this should be the same as the other uwsm-based apps)
hyprctl dispatch exec "uwsm app -- /bin/sh -c \"env | sort > $t/uwsm.hypr.env\""

# only differs from uwsm.hypr.env by HL_INITIAL_WORKSPACE_TOKEN and INVOCATION_ID
hyprctl dispatch exec "env | sort > $t/hypr.env"
#+end_src
***** SystemD

God I hate the singular =systemctl= man page with the fury of 1,000 suns.

YTF can i not _simply_ get a list of unit files to enumerate?

#+begin_src shell
systemctl --user list-units --no-pager # fucking _____ lines
systemctl --user list-units --no-pager --property=name # same output?
systemctl --user cat --no-pager '*' | grep -e '^PATH=' # only error output
systemctl --user cat --no-pager '*' 2>/dev/null | grep -e '^PATH=' # no output

# ... oh

systemctl --user cat --no-pager '*' 2>/dev/null | grep -e '^Environment='

# finally. shouldn't require 30 minutes & shouldn't block 2 days of productivity

# I'm sorry i never showed up to Red Hat "boot camp" excuse me
#+end_src

****** Linking unit files

******* After source

[[https://github.com/feel-co/hjem/blob/3c01274451544d3f5ebceec382447c46cb9ca83c/modules/nixos/systemd.nix#L60][feel-co/hjem modules/nixos/systemd.nix#L60]] handles SystemD units conversion

+ I have =hjem.users.dc.systemd.enable=true=, which I guess I forgot about.
+ This takes ownership of systemd unit management.
+ It also seems to expose some of the more core NixOS [[https://github.com/NixOS/nixpkgs/blob/85fe7380cc14e96a569f53fc07133b2db55049d9/nixos/lib/utils.nix#L422-L436][attrset-to-systemd
  functionality]] which is broken down by type here for
  [[https://github.com/NixOS/nixpkgs/blob/85fe7380cc14e96a569f53fc07133b2db55049d9/nixos/lib/systemd-lib.nix#L744][target,service,socket,timer,mount,timer,path]]

... so now i feel dumb

#+begin_src nix
  hjem.users.dc.systemd.services.fumon = {
    unitConfig = {
      Description = "Failed unit monitor";
      Documentation = "man:fumon(1) man:busctl(1)";
      Requisite = "graphical-session.target";
    };
    serviceConfig = {
      Type = "exec";
      ExecCondition = "/bin/sh -c \"command -v notify-send > /dev/null\"";
      ExecStart = "${lib.getExe' pkgs.uwsm "fumon"}";
      Restart = "on-failure";
      Slice = [ "background-graphical.slice" ];
    };

    environment.PATH = lib.mkForce null;
    after = [ "graphical-session.target" ];
    wantedBy = [ "graphical-session.target" ];
  };
#+end_src

******* Before source

I'm still having one last problem where I can't enable user services. =hjem=
creates an empty =~/.config/systemd/user= directory to backup user services.

+ I could create systemd services from raw files via =hjem=
+ Or I could just create the links via =hjem=.
+ Or there may be some mechanism to enable services via =systemd.users.services=

It depends on how many types of SystemD "things" need links. I will also use it
to manage sockets. And I'm wondering whether it can manage sockets for processes
that aren't managed by systemd... obviously not if i'm expecting socket
activation.
****** Finding current unit files

This seems to work. i'm not sure how else to get the current active unit file.

#+begin_src shell
systemctl --user cat '*.service' | grep -e '^# /' | tree --fromfile .
#+end_src

I guess my problem is that systemd does _not_ use path to lookup a command...
maybe it helps avoid mistakes.

#+begin_src nix
  # users.users.${dc}.packages = [ pkgs.fumon ];
  systemd.user.services.fumon2 = {
    unitConfig = {
      Description = "Failed unit monitor";
      Documentation = "man:fumon(1) man:busctl(1)";
      Requisite = "graphical-session.target";
    };
    serviceConfig = {
      Type = "exec";

      # if systemd.user.services.<name> inserts Environment=PATH, this will fail
      ExecCondition = "/bin/sh -c \"command -v notify-send > /dev/null\"";

      # this does NOT work
      ExecStart = "fumon";
      # this would work
      ExecStart = "${lib.getExe' pkgs.uwsm "fumon"}";

      # this fails to find `printf`
      ExecStart = "printf \"$PATH\"";

      # this finds printf and dumps path (whats set in DefaultEnvironment below, unless ...)
      ExecStart = "/run/current-system/sw/bin/printf \"$PATH\"";

      Restart = "on-failure";
      Slice = [ "background-graphical.slice" ];
    };
    after = [ "graphical-session.target" ];
    wantedBy = [ "graphical-session.target" ];

    # if this isn't set, systemd, the service gets a stripped down PATH
    # because Environment=PATH gets overridden by when systemd.user.services creates files
    environment.PATH = lib.mkForce null;

    # Hyprland sets this for systemd.user.extraConfig, but specifies its
    # systemd.user.services so that the environment is NOT overidden. And I
    # guess it's uwsm that instantiates a template service.
    #
    # DefaultEnvironment="PATH=/run/wrappers/bin:/etc/profiles/per-user/%u/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:$PATH"
  };
  #+end_src

****** setting =PATH=

This =config.systemd.user.sessionVariables= is =home-manager=-only

[[https://stackoverflow.com/questions/68330711/nixos-service-systemd-units-path-does-not-contain-expected-dependency#comment121189034_68339169][By what mechanism did you expect your finderapp script to find ffmpeg without
setting PATH?]] by the same mechanism it settles on a reasonable default for
system services. I guess I don't know SystemD, but i'm surprised there's no
clear answer for this.

+ I checked =systemctl --user show-environment=, but that was correct. I didn't
  realize SystemD refuses =PATH= lookups (or something? still not 100% sure)
+ I didn't quite understand the default properties were being injected to
  override =Environment=PATH=. That was simple enough to grok with =systemctl cat=

TL;DR: use this if the command needs to spawn additional environments with your
full SystemD User Service Manager's environment.

#+begin_example nix
# this DOES change the path (by preventing it from being overridden)
environment.PATH = lib.mkForce null;
#+end_example

A more specific =PATH= is probably a better idea.

Otherwise, it will set something like below (the =printf= and =systemctl cat= do
show the same thing)

#+begin_example
/nix/store/00bc157nm93q5fjz551fwk60ihlbilvj-coreutils-9.7/bin
:/nix/store/wq1cxh4s8rz8vs4ssp2z49v96m0nhxhj-findutils-4.10.0/bin
:/nix/store/6q57mnfak3q8ss656qgp245qzqvnniyr-gnugrep-3.12/bin
:/nix/store/7zy6jnnpqh16b18j6ar289vhwp17msh0-gnused-4.9/bin
:/nix/store/cwyd97h7wf5sprgvpg44j6rjws1bbjkm-systemd-257.9/bin
:/nix/store/00bc157nm93q5fjz551fwk60ihlbilvj-coreutils-9.7/sbin
:/nix/store/wq1cxh4s8rz8vs4ssp2z49v96m0nhxhj-findutils-4.10.0/sbin
:/nix/store/6q57mnfak3q8ss656qgp245qzqvnniyr-gnugrep-3.12/sbin
:/nix/store/7zy6jnnpqh16b18j6ar289vhwp17msh0-gnused-4.9/sbin
:/nix/store/cwyd97h7wf5sprgvpg44j6rjws1bbjkm-systemd-257.9/sbin
#+end_example

On some systems, =ExecStart=/bin/sh -l -c "$cmd"= will re-source the profile,
giving it a full environment. I think =-l= is required, idk. But =/etc/profile= on
nixos suppresses this when =__ETC_PROFILE_DONE=1= is inherited from the parent
environment.

***** UWSM

You want =fumon= and =uuctl= support built-in to =uwsm=... they are by default, but
they're not configured

+ systemctl --user fumon --enable --now fumon.service :: it basically just gives
  you notifications about failed =uwsm app= units. this isn't super-valuable until
  you have zero broken =uwsm app= units.
  - you need to enable it to link the target... which you can't simply do when
   using =hjem=, since it owns =~/.config/systemd/user=
+ uuctl menu walker :: shows a menu to help you start/stop =uwsm-app= services
  created from systemd templates.

****** Slices

configure as unit files by either =hjem= files, =home-manager= or =nixos=. See [[https://www.reddit.com/r/hyprland/comments/1ij420c/trying_ro_figure_out_uwsm/][Trying
to figure out UWSM]]. Mostly for resource contstraints, but I think also for
environment configuration.

****** Fumon

**** Env

#+begin_quote
it would be extremely helpful if there were tools like =fcitx5-diagnose= that
could diff environments spawned from systemd. One way to do this would be with a
NixOS module that:

- takes some specification of systemd service unit/target hierarchies to dump
- associates some dummy unit that gets spawned at the same level
- on system startup each unit then dumps a =.env= file to some log directory
- once you login, you just diff each file (or a terminating service does this
  after they're all guaranteed to complete)

When you're done with it, just remove the module from your system and rebuild.
It requires a restart, but is otherwise fairly automatic.

Getting visibility on this is otherwise a PITA. There are commands to do so, but
they sometimes require creating =--runtime= services to be sure.
#+end_quote

***** UWSM Env

This extends from the Systemd =DefaultEnvironment= set in

- the user's session service manager
- and changes in startup (& reactivation?) in units/targets before UWSM launches
  - I'm still unclear on on the extent of process/environment that
    restarts/cycles at this point.
- potentially any =environment.d= files in =~/.config/environment.d=, I think
- any =*.env= files in =~/.config/uwsm= implemented [[https://github.com/abenz1267/elephant/blob/master/pkg/common/config.go#L37][here]]
  - See [[https://github.com/joho/godotenv?tab=readme-ov-file#precedence--conventions][godotenv precendence]]
- any =.env= files that =elephant= picks up in it's environment (if
  =overload_local_env= is set)

One of UWSM's final tasks is to adjust the D-Bus session environment before
"finalizing" it, so there's another potential issue. I also have a somewhat
unrelated problem of duplicate D-Bus service registratiions that show up in the
journal, which causes a few issues later on.

Diffing these environments is a PITA.

Elephant and Walker can test this to some extent, but I'm unsure of how =elephant=
resets the environment.

+ When I use =walker --dmenu= via this script
+ which gets launched via =hyprctl dispatch exec ...=
+ Then I get an alacritty without colorized =man= pages

#+begin_example shell
#!/usr/bin/env bash
manquery="$(walker --dmenu --keepopen -p "Query for man -k ...")"
manpage="$(man -k "$manquery" | cut -d' ' -f1,2 | walker --dmenu -p "Open ..." | cut -f1 -d' ')"
setsid uwsm app -- alacritty --class 'Alacritty:org.dc.tuitray' -T 'tuitray:man' -e man "$manpage"
#+end_example

This terminal launches under the original =hyprland= environment. I was writing
this up bc I thought that =walker= was triggering elephant to spawn a process, but
digging deeper, it's a combination of =hyprland= and =alacritty=.

The first two commands here give me colorized man pages.

#+begin_src shell
alacritty --class 'Alacritty:org.dc.tuitray' -T 'tuitray:man' -e man lvs
uwsm app -- \
    alacritty --class 'Alacritty:org.dc.tuitray' -T 'tuitray:man' -e man lvs
hyprctl dispatch exec \
    "uwsm app -- \
          alacritty --class 'Alacritty:org.dc.tuitray' -T 'tuitray:man' -e man lvs"
#+end_src

They ran from an =uwsm app -- alacritty= process, so I think alacritty doesn't
=source ~/.bashrc= when started in this way.... ugh so nevermind

#+begin_src shell
# Running as `bash -c 'man lvs'` works... but makes me a bit nervous
#
# - a better way is using `alacritty --config-file $config man lvs`
# - the interpolated command via dmenu is the last arg (alacritty) of the last
#   arg (uwsm) ... which is one less degree of quoting
hyprctl dispatch exec \
    "uwsm app -- \
          alacritty --class 'Alacritty:org.dc.tuitray' -T 'tuitray:man' \
               -e /usr/bin/env bash -ic 'man lvs'"
#+end_src

***** Systemd Env

+ Elephant can load =.env= files in the configuration directories it searches, so
  that processes it spawns will have a consistent =uwsm= environment.
+ Another option: fix this in =sysstemd.user.extraConfig= by overriding what
  =programs.hyprland.systemd.setPath.enable= would otherwise set, which is
  probably not where you want to set it

#+begin_src shell
DefaultEnvironment="PATH=/run/wrappers/bin:/etc/profiles/per-user/%u/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin:\$PATH"
echo $DefaultEnvironment | tr ':' '\n'
#+end_src

#+RESULTS:
| PATH=/run/wrappers/bin            |
| /etc/profiles/per-user/%u/bin     |
| /nix/var/nix/profiles/default/bin |
| /run/current-system/sw/bin        |
| $PATH                             |
* Xorg Desktops

** Launcher

+ Rofi
+ DMenu

** Panels

+ Polybar

** Notifications

+ Dunst


* Misc Tools

** Usability

+ [[github:fennerm/flashfocus][Flash Focus]]


* XDG Free Desktop


** Docs

*** Gitlab

+ [[https://gitlab.freedesktop.org/explore/groups][Groups]] (hmmm maybe a good place to start)

*** [[https://freedesktop.org/wiki/Specifications/][Specifications]]

All the specifications are readable as XML files ... [[https://gitlab.freedesktop.org/xdg/xdg-specs][xdg/xdg-specs]]

+ [[https://freedesktop.org/wiki/Specifications/icon-theme-spec/][icon-theme-spec]]

*** Ontologies

+ [[https://gitlab.freedesktop.org/archived-projects/shared-desktop-ontologies][shared-desktop-ontologies]], an archived project, but contains RDF
  specifications for objects on the desktop

** Resources

** Topics

*** Menu

**** Desktop Files
**** Telepathy

+ Developer's Manual
+ [[https://telepathy.freedesktop.org/spec/][D-Bus Interface Spec]]
+ [[https://telepathy.freedesktop.org/doc/telepathy-glib-1/][glib api reference]]
  - [[https://telepathy.freedesktop.org/doc/telepathy-glib-1/telepathy-glib-dtmf.html][DTMF dialstring interpreter]] (so you can dial out of the matrix)
+ [[https://telepathy.freedesktop.org/resources/][Telepathy resources]]

Useful mainly to see how other devs thought they'd solve the "many-to-many
Notifications from Social Media Hellscape" problem. Enough metadata in the glib
docs & source to construct UML/diagrams. That's nice.

#+begin_quote
meet David. David learns about Design Patterns book in 2011. David cannot afford
Design Patterns Book until 2022. David has no time to read it. David is failing
Statics/Physics bc ... well nevermind.
#+end_quote

This looks like kinda a lot of well-done work (by two developers? idk) that was
basically usurped by corporate america to eventually settle into the Git Forge
of Forgotten Dreams.

Looking at the d-bus specifications and glib types, it seems that Telepathy
probably would've solved a lot of problems that I have.

+ Several devices run d-bus service(s)
+ The d-bus service(s) provide an interface to "channels"
+ Devices specify which channels/events/etc they'd like to receive updates for
+ The devices display current information ... without depending on remote
  services to synchronize state/cache (which is "the hard part" or "a hard
  part")

**** Autostart

*** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.

#+begin_src sh :result none :eval no
dirsfile=$XDG_CONFIG_HOME/user-dirs.dirs

# overwrite (requires stow .)
echo > $dirsfile
echo "XDG_DOCUMENTS_DIR=\"$_DATA/xdg/Documents\"" >> $dirsfile
echo "XDG_MUSIC_DIR=\"$_DATA/xdg/Music\"" >> $dirsfile
echo "XDG_PICTURES_DIR=\"$_DATA/xdg/Pictures\"" >> $dirsfile
echo "XDG_VIDEOS_DIR=\"$_DATA/xdg/Videos\"" >> $dirsfile
echo "XDG_TEMPLATES_DIR=\"$_DATA/xdg/Templates\"" >> $dirsfile

# and ignore these
#XDG_DESKTOP_DIR="$_DATA/xdg/Desktop"
#XDG_DOWNLOADS_DIR="$_DATA/xdg/Downloads"
#XDG_PUBLICSHARE_DIR="$_DATA/xdg/Public"
#+end_src

**** Note

=xdg-user-dirs-update= will replace everything if anything is invalid (only
=$HOME/yyy= or =/path/to/yyy= is valid) .it will autoupdate everything if any
dirs don't exist
** Issues
+ [[https://bbs.archlinux.org/viewtopic.php?id=227166][Expanding =XDG_DATA_DIRS= in =.pam_environment=:]]

*** Desktop Entries

**** Hidden

I've run into some other confusing issues but not this one. According to the
[[https://specifications.freedesktop.org/desktop-entry-spec/latest/recognized-keys.html][Desktop Entry Spec]]

#+begin_quote
Hidden should have been called Deleted. It means the user deleted (at their
level) something that was present (at an upper level, e.g. in the system dirs).
It's strictly equivalent to the .desktop file not existing at all, as far as
that user is concerned. This can also be used to "uninstall" existing files
(e.g. due to a renaming) - by letting make install install a file with
Hidden=true in it.
#+end_quote


* Applications


** Media

*** MPD

+ beets (library management)
  - see ./Scrumplex/dotfiles/beets/.config/systemd/user/beets-mpdstats.service
+ MPRIS :: protocol to remotely control a music player (is this necessary?)
  - see ./phundrak/
+ mpd.conf :: is this necessary for the player or the clients?
+ [[https://github.com/metabrainz][metabrainz/picard]] automated tagging of music
  - github org has other projects for data analysis on music

#+begin_quote
what is MPRIS? MPD? MPV? idk.... this is kind of a huge hangup for me. i have
something of a network, but I don't use wifi (and mDNS isn't set up), so
basically no streaming works from Linux devices to your general media
players. It maybe would on WiFi, but usually requires a few extra steps

(on EVERY installation, hence why i value deterministically recreating my linux
installation!)

I can set this MPD stuff up, but every time I go to do it, I have no idea where
to get started. It doesn't seem like a priority. There are other blockers: hey,
i'll just .. use. this computer... that only has DisplayPort ... fuck.

Learning about this stuff is easy, as long as you have a mentor, Linux User
Group or group of friends who are all doing it at the same time. For whatever
reasons (mostly circumstantial), I've missed out on a lot of that.
#+end_quote

*** MPV

* Design

** Resourcse

+ [[https://blog.buddiesofbudgie.org/state-of-the-budgie-may-2022/][State of the Budgie: May 2022]] long post about organizing work for a desktop
  environment.

* Footnotes
[fn:WHINE]: Confusing for someone who -- until very recently thought MISO was a
[[https://gitlab.manjaro.org/search?search=miso&nav_source=navbar&project_id=35&group_id=9&search_code=true&repository_ref=master][tasty soup]]. I used Manjaro on/off from 2013? through 2019?. I originally
installed Archlinux in beginning 2012 before the easy script installer -- by
running the iso, setting up filesystems and using the tooling to pick & place
pacman db, vmlinuz & initramfs.
- I never knew about [[https://gitlab.manjaro.org/tools/development-tools/manjaro-tools/-/blob/master/Makefile][manjaro-tools]] or Arch ISO tooling (or deb/rpm equivalents)
- I once experimented with a secondary package root for pacman using =aurutils=,
  but only got this working once really. I didn't quite understand what my
  =/opt/ions= were.
- I've only ever used =pacman=, =yay= and one or two GUI apps.
- I loved customization (keybindings, functional stuff for automation & scripts)
  and the idea that there were far fewer constraints than on Windows/Mac ... but
  I had _zero_ idea that the proper tool to use was packages
I stumbled upon [[https://gitlab.com/garuda-linux?filter=iso][Garuda's Gitlab]] in response to a bout of desperate googling for
something or another.
