:PROPERTIES:
:ID:       da888d96-a444-49f7-865f-7b122c15b14e
:END:
#+TITLE: Desktop
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: Desktop Tools/Utilities

* Freedesktop

The [[id:da888d96-a444-49f7-865f-7b122c15b14e][Desktop]] Formerly Known As "Free"


** Docs


** Resources

* Wayland

**** IDEA (nix/guix) Private namespace for Wayland Protocol XML specs specific to application & integrations

In some galactic san francisco farfar away longlong ago, there seems to be quite
a bit of discussion regarding how/what to support.

Counterpoint from [[https://labwc.github.io/][labwc]]:

#+begin_quote
Labwc only understands wayland-protocols & wlr-protocols, and it cannot be
controlled with dbus, sway/i3-IPC or other technology. The reason for this is
that we believe that custom IPCs and protocols create a fragmentation that
hinders general Wayland adoption.
#+end_quote


** Topics

*** Protocol

*** Portal

*** Desktop Applications

This is already a bit complex

+ notifications: dunst, mako
  - sway nc looked nice
  -
+ taskbars
  - polybar -> waybar (almost 1:1)
  - eww + yucc: pretty cool, but difficult to package on guix
+ window managers: i3 -> sway (almost 1:1)


**** Launcher

+ [[https://hg.sr.ht/~schoopta/wofi][wofi]]
+ [[https://github.com/nwg-piotr/nwg-launchers][nwg-launchers]]

**** Panels

+ Swaybar

**** Notifications

* Xorg Desktops

** Launcher

+ Rofi
+ DMenu

** Panels

+ Polybar

** Notifications

+ Dunst


* Misc Tools

** Usability

+ [[github:fennerm/flashfocus][Flash Focus]]

* Flatpak

This is a platform for distributing apps, but is technically containerized.
[[https://docs.flatpak.org/en/latest/tips-and-tricks.html?highlight=%22%2Fetc%2Fflatpak%22#adding-a-custom-installation][Custom installations allow you to install to flatpak-specific disk-image]]. This
can be shared to multiple VM's via proxmox to make desktop apps like
Krita/Blender/Steam more portable.

#+begin_quote
... So, if i want to distro-hop ... but I don't want to lose my app
configurations.
#+end_quote


Environment Vars

|--------------------------+-----------------------+-----------------------------------------|
| Name                     | Default               | Desc                                    |
|--------------------------+-----------------------+-----------------------------------------|
| FLATPAK_USER_DIR         | XDG_DATA_PATH/flatpak | location of per-user installation       |
| FLATPAK_SYSTEM_DIR       | /var/lib/flatpak      | location of system-wide installation    |
| FLATPAK_SYSTEM_CACHE_DIR | /var/tmp/               | place for temp child repos during pulls |
| FLATPAK_CONFIG_DIR       | /etc/flatpak          | flatpak site config                     |
| FLATPAK_RUN_DIR          | /run/flatpak          | runtime global files                    |
|--------------------------+-----------------------+-----------------------------------------|

Modified XDG Vars

|-----------------+------------------------------|
| Base Dir        | Default                      |
|-----------------+------------------------------|
| XDG_CONFIG_HOME | ~/.var/app/$app/config       |
| XDG_DATA_HOME   | ~/.var/app/$app/data         |
| XDG_CACHE_HOME  | ~/.var/app/$app/cache        |
| XDG_STATE_HOME  | ~/.var/app/$app/.local/state |
|-----------------+------------------------------|

** Docs
+ [[https://docs.flatpak.org/en/latest][Main Docs]]
+ [[https://docs.flatpak.org/en/latest/conventions.html][Flatpak Conventions]]

*** AppStream

This is a standard for application-centric metadata about components in the
linux system (as opposed to of package-centric metadata)

+ AppStream [[https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html][metainfo XML]]
+ [[https://www.freedesktop.org/software/appstream/docs/api/index.html][dev docs]]
+ Github: [[github:ximion/appstream][ximion/appstream]]

** Resources
+ [[https://docs.flatpak.org/en/latest/desktop-integration.html#portals][Portals]] interface for securely permitting app to access host resources from sandbox

** Caveats

When running apps from a portable flatpak custom installation, the ABIs for a
flatpak ELF must be compatible with those your system expects binaries to adhere
to.

+ [[https://stackoverflow.com/questions/2171177/what-is-an-application-binary-interface-abi][The TLDR S/O post on ABIs I shouldve finished reading]]
+ [[https://kernelnewbies.org/ABI][Linux ABI]]
+ [[https://www.systutorials.com/docs/linux/man/1-abidiff/][abidiff]] cmdline tool


** Issues

*** Fixing Zoom Signon in flatpak

Can be fixed in =$XDG_CONFIG_HOME/zoomus.conf= with
=embeddedBrowserForSSOLogin=false= according to this [[https://github.com/flathub/us.zoom.Zoom/issues/169][github issue]].

See [[https://support.zoom.us/hc/en-us/articles/115001799006-Mass-deploying-preconfigured-settings-for-Mac][documentation of zoomus.conf]] for keys/values


* XDG Free Desktop

** Docs

** Resources

** Topics

*** XDG User Dirs

This requires the =xdg-user-dirs= tool

See [[https://wiki.archlinux.org/title/XDG_user_directories][XDG User Directories]] for more info. This file allows directories like
=$HOME/Documents= to survive reinstallation of systems & home directories in a
sane way.

#+begin_src sh :result none :eval no
dirsfile=$XDG_CONFIG_HOME/user-dirs.dirs

# overwrite (requires stow .)
echo > $dirsfile
echo "XDG_DOCUMENTS_DIR=\"$_DATA/xdg/Documents\"" >> $dirsfile
echo "XDG_MUSIC_DIR=\"$_DATA/xdg/Music\"" >> $dirsfile
echo "XDG_PICTURES_DIR=\"$_DATA/xdg/Pictures\"" >> $dirsfile
echo "XDG_VIDEOS_DIR=\"$_DATA/xdg/Videos\"" >> $dirsfile
echo "XDG_TEMPLATES_DIR=\"$_DATA/xdg/Templates\"" >> $dirsfile

# and ignore these
#XDG_DESKTOP_DIR="$_DATA/xdg/Desktop"
#XDG_DOWNLOADS_DIR="$_DATA/xdg/Downloads"
#XDG_PUBLICSHARE_DIR="$_DATA/xdg/Public"
#+end_src

**** Note

=xdg-user-dirs-update= will replace everything if anything is invalid (only
=$HOME/yyy= or =/path/to/yyy= is valid) .it will autoupdate everything if any
dirs don't exist
** Issues
+ [[https://bbs.archlinux.org/viewtopic.php?id=227166][Expanding =XDG_DATA_DIRS= in =.pam_environment=:]]

* Applications


** Media

*** MPD

+ beets (library management)
  - see ./Scrumplex/dotfiles/beets/.config/systemd/user/beets-mpdstats.service
+ MPRIS :: protocol to remotely control a music player (is this necessary?)
  - see ./phundrak/
+ mpd.conf :: is this necessary for the player or the clients?
+ [[https://github.com/metabrainz][metabrainz/picard]] automated tagging of music
  - github org has other projects for data analysis on music

#+begin_quote
what is MPRIS? MPD? MPV? idk.... this is kind of a huge hangup for me. i have
something of a network, but I don't use wifi (and mDNS isn't set up), so
basically no streaming works from Linux devices to your general media
players. It maybe would on WiFi, but usually requires a few extra steps

(on EVERY installation, hence why i value deterministically recreating my linux
installation!)

I can set this MPD stuff up, but every time I go to do it, I have no idea where
to get started. It doesn't seem like a priority. There are other blockers: hey,
i'll just .. use. this computer... that only has DisplayPort ... fuck.

Learning about this stuff is easy, as long as you have a mentor, Linux User
Group or group of friends who are all doing it at the same time. For whatever
reasons (mostly circumstantial), I've missed out on a lot of that.
#+end_quote

*** MPV

* Design

** Resourcse

+ [[https://blog.buddiesofbudgie.org/state-of-the-budgie-may-2022/][State of the Budgie: May 2022]] long post about organizing work for a desktop
  environment.

* Footnotes
[fn:WHINE]: Confusing for someone who -- until very recently thought MISO was a
[[https://gitlab.manjaro.org/search?search=miso&nav_source=navbar&project_id=35&group_id=9&search_code=true&repository_ref=master][tasty soup]]. I used Manjaro on/off from 2013? through 2019?. I originally
installed Archlinux in beginning 2012 before the easy script installer -- by
running the iso, setting up filesystems and using the tooling to pick & place
pacman db, vmlinuz & initramfs.
- I never knew about [[https://gitlab.manjaro.org/tools/development-tools/manjaro-tools/-/blob/master/Makefile][manjaro-tools]] or Arch ISO tooling (or deb/rpm equivalents)
- I once experimented with a secondary package root for pacman using =aurutils=,
  but only got this working once really. I didn't quite understand what my
  =/opt/ions= were.
- I've only ever used =pacman=, =yay= and one or two GUI apps.
- I loved customization (keybindings, functional stuff for automation & scripts)
  and the idea that there were far fewer constraints than on Windows/Mac ... but
  I had _zero_ idea that the proper tool to use was packages
I stumbled upon [[https://gitlab.com/garuda-linux?filter=iso][Garuda's Gitlab]] in response to a bout of desperate googling for
something or another.
