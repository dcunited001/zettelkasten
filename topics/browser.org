:PROPERTIES:
:ID:       38638b3e-e023-460e-9670-84776e61468e
:END:
#+title: Browser
#+CATEGORY: topics
#+TAGS:

* Chromium

* Firefox

** Topics

*** Profile Data

I would like my keyboard shortcuts to sync or to be exportable.

**** Finding active profile path

Set a default firefox root directory

#+name: ffdata
#+begin_src emacs-lisp :results silent :export none
;; echo "$HOME/.mozilla/firefox"
(expand-file-name ".mozilla/firefox" (getenv "HOME"))
#+end_src

Probably don't leave your =~/.mozilla/firefox= directory results here.

#+begin_example org
#+headers: :var ffdata="/some/tmp/directory/"
#+end_example

Convert data in =profiles.ini= to JSON

#+name: ffprofilesjson
#+headers: :var ffdata=ffdata
#+begin_src sh :results output silent code :wrap src yaml
# ffdata="$HOME/.mozilla/firefox"
ffprofiles=$ffdata/profiles.ini

# ffdata=/tmp/ffdata
# ffprofiles=$ffdata/profiles.fake.ini

cat $ffprofiles  \
    | sed -E 's/=(.*[^"])$/ = "\1"/' \
    | tomlq
#+end_src

Extract ID of active profile

#+name: ffactiveid
#+headers: :results output silent
#+begin_src jq :stdin ffprofilesjson :cmd-line "-rj"
# with_entries(select(.value.Default == "1"))
. | to_entries | map(select(.value.Default == "1"))
  | first | .value.Path

# with_entries(.value += {Id: "0"})
#+end_src

Now it can be listed

#+name: ffactivepath
#+headers: :var ffprof=ffactiveid ffdata=ffdata
#+begin_src emacs-lisp :results silent
;; setq-local is kind of a hack
(setq-local ffactivepath (expand-file-name ffprof ffdata))
#+end_src

And the databases queried

#+name: ffplacesschema
#+headers: :dir (identity ffactivepath) :db places.sqlite
#+headers: :file (expand-file-name "img/sql/ffplaces.schema.sql" (file-name-directory (buffer-file-name)))
#+headers: :results output file
#+begin_src sqlite :results output
.fullschema --indent
#+end_src

#+RESULTS: ffplacesschema
[[file:img/sql/ffplaces.schema.sql]]

#+name: ffplacesschema
#+headers: :dir (identity ffactivepath) :db places.sqlite
#+headers: :file (expand-file-name "img/sql/ffplaces.schema.sql" (file-name-directory (buffer-file-name)))
#+headers: :results output file
#+begin_src sqlite :results output
.fullschema --indent
#+end_src

**** Every time i install a new browser/profile

I would love to enter these shortcuts in one at a time, which for an extension
which itself should've probably just been a feature in 2010. All browsers have
these problems and actually finding what files contain info like this doesn't
show up on Google.

#+name: ffshortcuts-for-extension
#+headers: :results output
#+headers: :var extension="treestyletab@piro.sakura.ne.jp"
#+headers: :in-file (expand-file-name "extension-settings.json" ffactivepath)
#+begin_src jq :cmd-line "-rj"
# with_entries(select(.value.Default == "1"))
.commands # | to_entries
  | map_values(.precedenceList | first)
  | map_values(select(.id == $extension and (.value.shortcut | length) > 0))
  | with_entries({"key": .key, "value": .value.value.shortcut})

#+end_src

#+RESULTS: ffshortcuts-for-extension
#+begin_example
{
  "treeMoveUp": "Ctrl+Alt+K",
  "treeMoveDown": "Ctrl+Alt+J",
  "focusPreviousSilently": "Ctrl+Alt+W",
  "focusNextSilently": "Ctrl+Alt+S",
  "focusParent": "Ctrl+Alt+H",
  "newChildTab": "Ctrl+Alt+T",
  "focusFirstChild": "Ctrl+Alt+L",
  "closeDescendants": "Ctrl+Alt+Q",
  "newContainerTab": "Ctrl+F1"
}
#+end_example

All browsers have neutered functionality. It's not Firefox or Chrome or
whatever. These are applications designed for corporations, not you the user.

*** Sqlite

Hmmmm.... wow. i can haz that?

[[id:0c386ed6-5a9d-4fc0-8444-550fce2c39a4][Org-babel with more detail here]]. It's honestly more of a feature than a bug, but
the data maybe ummm should be encrypted. [[https://jhoneill.github.io/powershell/2020/11/23/Chrome-Passwords.html][Same thing]] in [[https://developer.chrome.com/blog/deprecating-web-sql/][Chromium]].
Surprise. You're naked if anyone gets a shell to your environment ... with read
access to =$HOME=. Big deal. No passwords, but yeh... does it matter? It's being
phased out... but until then, have a fig leaf.

#+begin_src shell :results output list
ffdata="$HOME/.mozilla/firefox"
ffprofile=$(grep -e "^Default=.*" $ffdata/profiles.ini | head -n1 | cut -f2 -d'=')

cd $ffdata/$ffprofile
ls *.sqlite
#+end_src

#+RESULTS:
#+begin_example
- content-prefs.sqlite
- cookies.sqlite
- credentialstate.sqlite
- favicons.sqlite
- formhistory.sqlite
- permissions.sqlite
- places.sqlite
- protections.sqlite
- storage.sqlite
- storage-sync-v2.sqlite
- webappsstore.sqlite
#+end_example

*** Extensions

**** Tree Style Tabs

+ Impressive project, given how modular/interoperable it is.
+ A lot of config options.

***** User Stylesheet Fix To Hide Tab Bar

The TST extensions can basically replace the tab bar. I kept looking for this
option (for TST to manage the horizontal tab bar visibility), but apparently you
[[https://www.reddit.com/r/firefox/comments/nwrtdv/comment/h1b6c62/?utm_source=share&utm_medium=web2x&context=3][just hide the tab bar]] altogether. This needs to be done on a per-installation,
per-profile basis, hence ... the notes.

+ [[https://github.com/MrOtherGuy/firefox-csshacks][MrOtherGuy/firefox-csshacks]] (with examples)
+ [[https://github.com/FirefoxCSS-Store/FirefoxCSS-Store.github.io/blob/main/README.md#generic-installation][Firefox-CSS-Store/Firefox-CSS-Store.github.io]]

****** Using userChrome.css

On Linux for me, the only =about:config= necessary to enable was
=toolkit.legacyUserProfileCustomizations.stylesheets=, despite what's documented
in some of these CSS repos. The other options /may/ eat all your Video RAM, but
may be necessary for those themes. I'm not sure how X11/etc framebuffers work
with multiple desktops and window previews...

If the above value is set, then
=~/.mozilla/firefox/$profile/chrome/userChrome.css= must exist.

#+begin_src css

#TabsToolbar {
    visibility: collapse;
}

/* remove headers from sidebars */
#sidebar-header {
  display: none;
}

/* reduce minimum width of sidebar */
#sidebar-box {
  min-width: 100px !important;
}

#+end_src

Or [[https://mrotherguy.github.io/firefox-csshacks/?file=autohide_tabstoolbar.css][autohide the tab bar]], though the more =userChrome.css= you use, the more
problems you may encounter... and you have to restart on every change.

****** Using treestyletabs



****** TODO port to dotfiles after finding a decent way to parse =~/.mozilla/firefox/profiles.ini=

If I don't end up using Nyxt first.

**** Debugging

The devtools are nice, but missing 5+ years of development has not been kind to
me (esp. knowing how useful the tools were then). Luckily, you can just enable
the logging in TST (and also debug, which took me a second).

Determining TST entry points was a bit complicated, but es6 modules can be
imported to eval (?) ... I would have just used breakpoints, but the issue
seemed to be in the initialization.

Not really a bug, just needed customization (to avoid unnecessary permissions: a
good thing).

***** Profiles

Isolated browser contexts can be created by using =about:profiles=

***** [[https://firefox-source-docs.mozilla.org/devtools-user/browser_console/index.html][Browser Console]]

Requires enabling the [[https://firefox-source-docs.mozilla.org/devtools-user/browser_toolbox/index.html][Browser Toolbox]].

***** Extension Console

Found in [[about:debugging][about:debugging]].

The extensions may include files built which are not in the Github.

=C-M-f/b= for =forward/backward-sexp= are about as useful as you'd think they
are, so it sucks not having that kinda most of the time. You can, of course,
connect remotely to the debugger and ... well [[https://www.reddit.com/r/xkcd/comments/46w1zc/til_that_emacs_has_a_reference_to_xkcd_378_mx/][XKCD has a comic about this]].

*** Custom Stylesheets

For GNU Manuals

#+begin_src css

@-moz-document domain(www.gnu.org) {

    /* scheme docs */
    code.code var {
        color: orange;
    }

    strong.def-name {
        color: indianred;
    }

    var.def-var-arguments {
        color: turquoise;
    }

    /* gnus docs */
    code {
        color: orange;
    }

    samp {
        color: indianred;
    }

}

@-moz-document domain(nongnu.org) {
    tt.key, kbd {
        color: turquoise;
    }

    p code, td code, li code {
        color: orange;
    }

    td code {
        color: orange;
    }
}

@-moz-document domain(guix.gnu.org) {

    /* guix docs */
    dl.def span.category code {
        color: indianred;
    }

    dl.def dt span > code:first {
        color: indianred;
    }

    dl.def dt span > code {
        color: orange;
    }

    dl.def span em {
        color: turquoise;
    }

    dl.def span strong {
        color: orange;
    }

    dl.def p code {
        color: orange;
    }

}

#+end_src


* Nyxt

** Docs

+ [[https://nyxt.atlas.engineer/documentation][Manual]]
+ [[https://github.com/atlas-engineer/nyxt/tree/25bf3a481b07b43c24eb1dcd76fd4c0d56699c5a/documents][Developer's Manual]]

** Resources

** Topics
*** Buffers

*** Panels

[[https://nyxt.atlas.engineer/article/panel-buffers.org][Panel buffers: useful data and widgets pinned to windows or buffers]]

+ There are two of these: a =:left= slot and a =:right= slot.
+ Source is in [[https://github.com/atlas-engineer/nyxt/blob/master/source/panel.lisp][panel.lisp]], but the feature isn't in v2.2.4

*** Windows

** Issues
