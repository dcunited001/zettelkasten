:PROPERTIES:
:ID:       38638b3e-e023-460e-9670-84776e61468e
:END:
#+title: Browser
#+CATEGORY: topics
#+TAGS:


* Chromium
** Docs

+ [[https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/linux/build_instructions.md#install-depot_tools][Linux Build Instructions]]

Per-Feature

+ SQL

*** Tooling
+ [[https://www.chromium.org/developers/how-tos/install-depot-tools/][Depot Tools]]

** Resources

** Topics

*** Tab Group

Combines nicely with =Name Window...= which i just found out about =(¬､¬)= which is
better than never.

**** Source References:

+ ./src/components/saved_tab_groups (saved as protobufs)
+ ./src/components/tab_groups


**** Possible?
+ lock tab groups, so they don't change or can be re-instantiated later. would
  require similar UI/UX constraints as pinned tabs


*** DevTools
**** Mocking
Tools to help mock requests/data, design changes and modify content
***** Workspaces

+ [[https://developer.chrome.com/docs/devtools/workspaces#manual-connection][Set up workspaces to save changes to source files]]
  - [[https://developer.chrome.com/docs/devtools/ai-assistance/styling#auto-workspace][AI can save changes back to files]] ... あれ？
+ [[https://chromium.googlesource.com/devtools/devtools-frontend/+/main/docs/ecosystem/automatic_workspace_folders.md][Automatic Workspace Folders]]: req. sufficiently localhost:4321 connection

***** Overrides
+ [[https://developer.chrome.com/docs/devtools/overrides][Override web content and HTTP response headers locally]]
  - can work on remote sites
*** IWAs: Isolated Web Apps
+ [[https://chromeos.dev/en/web/isolated-web-apps][Main article]]
+ Now supports debugging websockets in devtools
  - see Chrome Exp. telnet client below
  - [[https://github.com/WICG/isolated-web-apps][WICG/isolated-web-apps]] the propoal

*** Guix

**** Master Preferences

Guix distributes these preferences in
=.gnu/packages/aux-files/chromium/master-preferences.json= which i guess ends up
in the directory below, via =fd -H -t d 'chromium'  ~=

=$HOME/.cache/guix/checkouts/$checkoutId/gnu/packages/aux-files/chromium/master-preferences.json=

#+begin_example json
{
    "distribution": {
        "import_bookmarks": false,
        "make_chrome_default": false,
        "make_chrome_default_for_user": false,
        "verbose_logging": true,
        "skip_first_run_ui": true
    },
    "browser": {
        "has_seen_welcome_page" : true,
        "default_browser_setting_enabled" : false
    },
    "dns_prefetching": {
        "enabled": false
    },
    "alternate_error_pages": {
        "enabled": false
    },
    "settings": {
        "first_run_tutorial_shown": true
    },
    "default_apps": "noinstall",
    "hide_web_store_icon": true,
    "homepage": "https://www.gnu.org/software/guix/"
}
#+end_example
*** Browser
**** Broker

***** SingletonLock

These files are used to determine state so only one governing process can
write to a profile's data at any time.

See [[https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/process_singleton_posix.cc][./src/chrome/browser/process_singleton_posix.cc]]

#+begin_src shell :results output verbatim
ls -al $(fd 'Singleton' ~/.config/chromium)
#+end_src

#+RESULTS:
: lrwxrwxrwx 1 dc dc 19 Oct 21 19:01 /home/me/.config/chromium/SingletonCookie -> 0891672785766630363
: lrwxrwxrwx 1 dc dc 13 Oct 21 19:01 /home/me/.config/chromium/SingletonLock -> muhhost-111996
: lrwxrwxrwx 1 dc dc 50 Oct 21 19:01 /home/me/.config/chromium/SingletonSocket -> /tmp/.org.chromium.Chromium.akBre/SingletonSocket

*** Profiles
:PROPERTIES:
:header-args+: :dir (concat (getenv "XDG_CONFIG_HOME") "/chromium/")
:END:

**** Basics

Active profile at =chrome://version=

Launch with specific profile:

#+begin_src shell
chromium --profile-directory="Profile 1"
#+end_src

User Data Directory: [[https://chromium.googlesource.com/chromium/src/+/main/docs/user_data_dir.md][docs]]

+ calculated by =GetDefaultUserDataDirectory= which says it caluclates this path
  regardless of whether it was overridden [[https://source.chromium.org/chromium/chromium/src/+/main:chrome/common/chrome_paths_internal.h;l=27?q=GetDefaultUserDataDirectory&ss=chromium][./src/common/chrome_paths_internal.h]]
+ override with =CHROME_USER_DATA_DIR= or =--user-data-dir=

**** Enumeration

Anyways, they're in =.org.chromium.Chromium.*=
#+name: qProfiles
#+begin_example jq
[..
  | paths(type == "string" and test("^(profile |default).*"; "i"))]
  | map(join("/")) | join("\n")
#+end_example

lol dammit =paste= (trying to get this to line up horizontally, but calculating
column width and correcting tabs requires extracting the max column of each
result)

#+begin_src shell :var q=qProfiles :results output code :wrap example
# find ~/.config/chromium -maxdepth 1 -type f -name '.org.chromium.Chromium.*' -printf '%p\n'
declare -a profs
profs=() # dammit bash
for p in $(find ~/.config/chromium -maxdepth 1 -type f -name '.org.chromium.Chromium.*' -printf '%p\n'); do
    profs+=($p)
done

paste -d"\t" <(jq -r "$q" ${profs[0]} | tree --noreport --fromfile .) \
    <(jq -r "$q" ${profs[1]} | tree --noreport --fromfile .) \
    <(jq -r "$q" ${profs[2]} | tree --noreport --fromfile .) \
    <(jq -r "$q" ${profs[3]} | tree --noreport --fromfile .) \
    | sed -e 's/\t/\t\t/g'

# fd -Ht f '.org.chromium.Chromium..*' ~/.config/chromium | tr ' ' '\n'
#+end_src

#+RESULTS:
#+begin_example
.		.		.		.
├── 0		├── 0		├── 0		├── 0
├── 1		├── 1		├── 1		├── 1
├── last_used		├── last_used		├── 2		├── 2
├── profile		├── profile		├── last_active_profiles		├── 3
│   ├── last_used		│   ├── last_used		│   └── 0		├── last_active_profiles
│   └── profiles_order		│   └── profiles_order		├── last_used		│   └── 0
│       ├── 0		│       ├── 0		├── profile		├── last_used
│       └── 1		│       └── 1		│   ├── last_active_profiles		├── profile
└── profiles_order		└── profiles_order		│   │   └── 0		│   ├── last_active_profiles
    ├── 0		    ├── 0		│   ├── last_used		│   │   └── 0
    └── 1		    └── 1		│   └── profiles_order		│   ├── last_used
                                │       ├── 0		│   └── profiles_order
                                │       ├── 1		│       ├── 0
                                │       └── 2		│       ├── 1
                                └── profiles_order		│       ├── 2
                                    ├── 0		│       └── 3
                                    ├── 1		└── profiles_order
                                    └── 2		    ├── 0
                                                    ├── 1
                                                    ├── 2
                                                    └── 3
#+end_example

=paste= is about as useful as it looks above, unless maybe using =paste -s= instead
of many =tee -a >(*・_・)ノ⌒᠁💻|= Anyways

#+begin_src shell :var q=qProfiles :results output code :wrap example
jq -r "$q" $(find ~/.config/chromium -maxdepth 1 -type f -name '.org.chromium.Chromium.*' -printf '%p\n' | head -n1) \
    | tree --noreport --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
├── 0
├── 1
├── last_used
├── profile
│   ├── last_used
│   └── profiles_order
│       ├── 0
│       └── 1
└── profiles_order
    ├── 0
    └── 1
#+end_example

Well damn. is that right? [[https://stackoverflow.com/questions/20458406/what-is-the-format-of-chromes-timestamps][Format of chrome timestamps]]

#+begin_example jq
[.. | objects | paths(type == "object" and  has("enabled_time"))]
#+end_example

Well everyone else has deleted all their accounts & data... not much is left.
Censored today? Maybe. Censored in the future? lol
*** PWAs
:PROPERTIES:
:header-args+: :dir (concat (getenv "XDG_CONFIG_HOME") "/chromium/" (getenv "CHROMEPROFILE"))
:END:

+ Must run in a [[https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts][secure context]]. Use =window.isSecureContext= to test
+ [[https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Guides/Making_PWAs_installable#:~:text=For%20a%20PWA%20to%20be%20installable%20it%20must%20be%20served,://%20URLs%20to%20be%20secure.][MDN: Making PWAs Installable]] These will run with extra features enabled
+ [[https://chromeos.dev/en/publish/pwa-in-play][Publish PWA to Google Play]] to make available on android. (uses =bubblewrap=?)

**** Configuration
***** Fuzzable

lol ... almost.

The =paste <(yes '"') - <(yes '"') | tr -d '\t'= handles the spaces, but doesn't
know when to stop unless a later process signals back. The =grep -lI= ignores the
binarie matches though

#+begin_src shell
u=translate.google.com
nlines=10
grep -lI -re "$u" ~/.config/chromium \
    | paste <(yes '"') - <(yes '"') | tr -d '\t' \
    | head -n10
#+end_src

***** Icons

These are distributed in:

+ =$XDG_DATA_HOME/icons/hicolor/$Px$P/chrome-$crxAppId-$profileName.png=
+ And =$XDG_CONFIG_HOME/chromium/$profile/Web\ Applications=
  - under =./Manifest\ Resources/$crxAppId/icons/$P.png=

**** App IDs

***** Generating

According to Gemini, the CRX App Id is derived from the public key assoc. to the
extension.

+ [[https://translate.google.com/_/TranslateWebserverUi/manifest.json][manifest.json]] for Google Translate

****** PWA Builder
The docs/source for [[https://docs.pwabuilder.com/#/builder/manifest][PWA Builder: Manifest]] would have more information

+ This could basically be converted to an XDG desktop file, which Chromium will
  do for you... but only from within the interface. (It should probably just
  replace XDG)
+ This would include the =shortcuts=, =file_handers=, =protocol_handlers=
+ Maybe [[https://docs.pwabuilder.com/#/builder/manifest?id=share_target-object][share_target]] (see [[https://docs.pwabuilder.com/#/home/native-features?id=web-share-api][Web Share API]])... but idk about that. The OS/Desktop
  needs a means of intercepting a "share" (I'm late to this party).

***** Locating
Some fake App IDs, the second one generated from the first with =C-u M-| rev=

#+name: crxAppIds2
#+begin_example
cefklejpffnngppfdbepnoghkbihdpji
ijpdhibkhgonpebdfppgnnffpjelkfec
#+end_example

The app ids result from a truncated hex SHA256, shifted from =[0-9a-f]= to =[a-p]=

#+name: noncedCrxAppIds
#+begin_src shell :var appIds=crxAppIds2
for id in $appIds; do
    echo $id | sha256sum | tr '01234567890abcdef' 'abcdefghijklmnop' | head -c32
    echo
done
#+end_src

#+RESULTS: noncedCrxAppIds
| ecjcmfmhnjicjhckhnkinbpppgbebjjp |
| obfcmpcgoboicbpbhehppkociimjmipd |



****** From ="$profile/Web\ Applications/Manifest\ Resources"=

#+name: pwaAppIds
#+begin_src shell :results output silent
ls "Web Applications/Manifest Resources"
#+end_src

#+call: noncedCrxAppIds(appIds=pwaAppIds)

#+RESULTS:
: cefklejpffnngppfdbepnoghkbihdpji

****** From =$profile/Preferences=

In =$XDG_CONFIG_HOME/chromium/$profile/Preferences= which is a JSON file

#+name: crxAppIds
#+headers: :results output silent
#+begin_src jq :cmd-line -rj :in-file "Preferences"
[(.browser.app_window_placement | keys
   | map(capture("_crx_(?<id>(.*))"; "s") | .id)),
 (.web_app_install_metrics | keys)]
  | flatten | unique | join("\n")

#. | your | query
#  | here | @text
# 1: (if yas-modified-p "#+NAME:") 1
#+end_src

Testing

#+call: noncedCrxAppIds(appIds=crxAppIds)

#+RESULTS:
: cefklejpffnngppfdbepnoghkbihdpji
*** Management & Policy

See [[chrome://management][chrome://management]] and [[chrome://policy][chrome://policy]]

**** Apps

+ [[https://chromeenterprise.google.com/policies/#WebAppInstallForceList][WebAppInstallForceList]]
+ [[https://chromeenterprise.google.com/policies/#WebAppSettings][WebAppSettings]]
+ [[https://chromeenterprise.google.com/policies/#IsolatedWebAppInstallForceList][IsolatedWebAppInstallForceList]] this is only available on ChromeOS (managed
  guest sessions only)

**** DNS

| AdditionalDnsQueryTypesEnabled | BuiltInDnsClientEnabled              | DnsInterceptionChecksEnabled | DnsOverHttpsMode            |
| DnsOverHttpsTemplates          | DnsPrefetchingEnabled                | DnsOverHttpsExcludedDomains  | DnsOverHttpsIncludedDomains |
| DnsOverHttpsSalt               | DnsOverHttpsTemplatesWithIdentifiers |                              |                             |

And =OutOfProcessSystemDnsResolutionEnabled=

**** Defaults

=Default.*(Setting)?=

| Clipboard                 | ControlledFrame  | Cookies             | DeviceAttributes     | DirectSockets                 |
| DownloadDirectory         | FileHandling     | FileSystemReadGuard | FileSystemWriteGuard | Geolocation                   |
| HandlersForFileExtensions | Image            | InsecureContent     | JavascriptOptimizer  | Javascript                    |
| Keygen                    | LocalFonts       | MediaStream         | Notifications        | Plugins                       |
| Popups                    | PrinterSelection | Sensors             | SerialGuard          | ThirdPartyStoragePartitioning |
| WebBluetoothGuard         | WebHid           | WebUsb              | WindowManagement     | WindowPlacement               |

+ =DefaultSearchProvider.*Setting=
+ =DefaultBrowserSettingEnabled=
**** AI
+ =BuiltInAIAPIsEnabled=
+ =GenAiDefaultSettings=

**** Security

+ =AutoFillEnabled=
+ =AbusiveExperienceInterventionEnforce= lol
+ =HttpsOnlyMode=
+ =BrowsingDataLifetime=
+ =CertificateTransparencyEnforcementDisabled.*=

=ApplicationBoundEncryptionEnabled= ...

+ says it matters when application runs from non-standard locations. idk
  whether it applies to binaries running from =/.+ix/store=
+ [[https://www.cyberark.com/resources/threat-research-blog/c4-bomb-blowing-up-chromes-appbound-cookie-encryption][C4 Bomb Blowing Up Chromes Appbound Cookie Encryption]]
  - um yeh. AES be AES. you need block-level access to the device/files
    though. probably easier for files. the kernel part sounds hard. kinda
    pointless if it's "app-bound"
+ [[https://blog.chromium.org/2024/04/fighting-cookie-theft-using-device.html][Fighting Cookie Theft Using Device Bound Sessions]]
  - [[https://security.googleblog.com/2024/04/detecting-browser-data-theft-using.html][Detecting Browser Data Theft Using Windows Event Logs]]
  - really just looking for the =chrome://= url that tells me it's on, but TPM
    does't function so easily in Linux.
+ [[https://www.chromium.org/chromium-os/chromiumos-design-docs/protecting-cached-user-data/#:~:text=Adding%20cryptography%20to%20a%20filesystem,Operating%20System%20files%20and%20programs.][Protecting Cached User Data]]
  - [[https://www.chromium.org/developers/design-documents/tpm-usage/][TPM Usage]]
  - [[https://www.chromium.org/developers/design-documents/chaps-technical-design/][Chaps Technical Design]] PKCS#11 implementation. Pretty illuminating for a
    TPM/Sops-nix integration (the one using SSH key on TPM or something idk)

*** Building
*** Repo

**** Chromium Checkout

***** Minilayout repos

The checkout used by AUR is pretty large and needs submodules. For chromiumos,
the instructions are in [[https://www.chromium.org/chromium-os/developer-library/guides/development/work-on-branch/#check-out-the-whole-tree-with-repo][ChromiumOS Guide to Working on Branches]] but it mentions
a =minilayout= group. This includes =depot_tools= which sounds familiar... but it's
definitely just =chromiumos=

:PROPERTIES:
:header-args+: :dir /tmp/tmp.gCH5ekm9XQ
:END:

After git =clone https://chromium.googlesource.com/chromiumos/manifest.git=

Without =repo init=, these are the gruops. it doesn't require the full sync

#+begin_src shell :results output table
grep -re groups= manifest/full.xml | sed -E 's/ +groups="(.*)".*/\1/g' | tr ',' '\n' | sort | uniq #| tr '\n' ','
#+end_src

#+RESULTS:
| bazel                |
| bluetooth            |
| buildtools           |
| chromeos-admin       |
| config               |
| crostini             |
| crosvm               |
| devserver            |
| firmware             |
| fwsdk                |
| kcam                 |
| labtools             |
| minilayout           |
| moblab               |
| notdefault           |
| partner-config       |
| paygen               |
| satlab               |
| sysmon               |
| ti50                 |
| touch-firmware-tests |
| xolabs               |
| zephyr               |

#+name: jqProjByGroup
#+begin_example jq
.manifest.project[]
| select((."@groups" // "")
  | test($group))

# | map({.project: .})
#+end_example

it's PITA to rewrap .project with manifest. =xq= doesn't jive with =DTD= anyways.

#+name: crProjByGroup
#+begin_src shell :results output code :wrap example xml :var q=jqProjByGroup group="minilayout"
echo '<manifest>'
xq -x --xml-root=project --arg 'group' "$group" "$q" manifest/full.xml \
  | tidy -iq --tidy-mark no -w 0 --show-body-only auto --doctype omit -xml
# meh, it's in the notes. same output.
echo '</manifest>'
#+end_src

#+RESULTS:
#+begin_example xml
<manifest>
<project path="src/repohooks" name="chromiumos/repohooks" groups="minilayout,paygen,firmware,buildtools,labtools,crosvm,fwsdk,ti50"></project>
<project path="chromite" name="chromiumos/chromite" groups="minilayout,paygen,firmware,buildtools,chromeos-admin,labtools,sysmon,devserver,crosvm,fwsdk,ti50">
  <copyfile src="AUTHORS" dest="AUTHORS"></copyfile>
  <copyfile src="LICENSE" dest="LICENSE"></copyfile>
</project>
<project path="src/overlays" name="chromiumos/overlays/board-overlays" groups="minilayout,paygen,firmware"></project>
<project path="src/platform/empty-project" name="chromiumos/infra/build/empty-project" revision="d2d95e8af89939f893b1443135497c1f5572aebc" groups="minilayout,paygen,firmware">
  <annotation name="branch-mode" value="pin"></annotation>
</project>
<project path="src/scripts" name="chromiumos/platform/crosutils" groups="minilayout,paygen,firmware,buildtools,labtools,ti50"></project>
<project path="src/third_party/pyelftools" name="chromiumos/third_party/pyelftools" revision="refs/heads/chromeos-0.22" groups="minilayout,paygen,firmware,buildtools"></project>
<project path="bazel_deps/bazel-central-registry" name="external/github.com/bazelbuild/bazel-central-registry" revision="refs/heads/upstream/main" groups="minilayout,bazel,fwsdk,firmware,ti50"></project>
<project path="bazel_deps/rules_cc" name="chromiumos/third_party/rules_cc" groups="minilayout,bazel,fwsdk,firmware,ti50"></project>
<project path="bazel_deps/rules_pkg" name="chromiumos/third_party/rules_pkg" groups="minilayout,bazel,fwsdk,firmware,ti50"></project>
<project path="bazel_deps/rules_rust" name="chromiumos/third_party/rules_rust" groups="minilayout,bazel,fwsdk,firmware,ti50"></project>
<project path="src/bazel" name="chromiumos/bazel" groups="minilayout,bazel,fwsdk,firmware,ti50">
  <linkfile src="workspace_root/general/WORKSPACE" dest="src/WORKSPACE"></linkfile>
</project>
<project path="src/platform2" name="chromiumos/platform2" groups="minilayout,paygen,crosvm,config,partner-config"></project>
<project path="src/platform/crostestutils" name="chromiumos/platform/crostestutils" groups="minilayout,paygen,firmware,buildtools"></project>
<project path="src/platform/dev" name="chromiumos/platform/dev-util" groups="minilayout,paygen,firmware,buildtools,devserver"></project>
<project path="src/platform/tast" name="chromiumos/platform/tast" groups="minilayout,paygen,ti50"></project>
<project path="src/platform/tast-tests" name="chromiumos/platform/tast-tests" groups="minilayout,paygen,ti50"></project>
<project path="src/third_party/chromiumos-overlay" name="chromiumos/overlays/chromiumos-overlay" groups="minilayout,paygen,firmware,labtools,ti50" sync-c="true"></project>
<project path="src/third_party/eclass-overlay" name="chromiumos/overlays/eclass-overlay" groups="minilayout,paygen,firmware,labtools"></project>
<project path="src/third_party/gtest-parallel" name="external/github.com/google/gtest-parallel" revision="cd488bdedc1d2cffb98201a17afc1b298b0b90f1" groups="minilayout"></project>
<project path="src/third_party/portage-stable" name="chromiumos/overlays/portage-stable" groups="minilayout,paygen,firmware,labtools"></project>
<project path="src/third_party/toolchain-utils" name="chromiumos/third_party/toolchain-utils" groups="minilayout,paygen,firmware"></project>
<project path="src/third_party/toolchains-overlay" name="chromiumos/overlays/toolchains" groups="minilayout,paygen,firmware,labtools"></project>
<project path="src/chromium/depot_tools" remote="chromium" name="chromium/tools/depot_tools" revision="9e30d926fd13430266b3c0141b45790874e2fab3" groups="minilayout,paygen,firmware,buildtools,labtools,ti50"></project>
</manifest>
#+end_example


****** config layout

#+call: crProjByGroup(jqProjByGroup, "config")

#+RESULTS:
#+begin_example xml
<manifest>
<project path="src/config" name="chromiumos/config" groups="paygen,config,partner-config"></project>
<project path="src/project_public" name="chromiumos/project" groups="partner-config"></project>
<project path="src/platform2" name="chromiumos/platform2" groups="minilayout,paygen,crosvm,config,partner-config"></project>
</manifest>
#+end_example

****** buildtools layout

#+call: crProjByGroup(jqProjByGroup, "buildtools")

#+RESULTS:
#+begin_example xml
<manifest>
<project path="src/repohooks" name="chromiumos/repohooks" groups="minilayout,paygen,firmware,buildtools,labtools,crosvm,fwsdk,ti50"></project>
<project path="chromite" name="chromiumos/chromite" groups="minilayout,paygen,firmware,buildtools,chromeos-admin,labtools,sysmon,devserver,crosvm,fwsdk,ti50">
  <copyfile src="AUTHORS" dest="AUTHORS"></copyfile>
  <copyfile src="LICENSE" dest="LICENSE"></copyfile>
</project>
<project path="src/scripts" name="chromiumos/platform/crosutils" groups="minilayout,paygen,firmware,buildtools,labtools,ti50"></project>
<project path="src/third_party/pyelftools" name="chromiumos/third_party/pyelftools" revision="refs/heads/chromeos-0.22" groups="minilayout,paygen,firmware,buildtools"></project>
<project path="src/platform/crostestutils" name="chromiumos/platform/crostestutils" groups="minilayout,paygen,firmware,buildtools"></project>
<project path="src/platform/dev" name="chromiumos/platform/dev-util" groups="minilayout,paygen,firmware,buildtools,devserver"></project>
<project path="src/platform/fw-testing-configs" name="chromiumos/platform/fw-testing-configs" groups="paygen,buildtools,labtools,devserver,firmware"></project>
<project path="src/platform/vboot_reference" name="chromiumos/platform/vboot_reference" groups="paygen,firmware,buildtools,fwsdk"></project>
<project path="src/third_party/autotest/files" name="chromiumos/third_party/autotest" groups="buildtools,labtools,devserver"></project>
<project path="src/chromium/depot_tools" remote="chromium" name="chromium/tools/depot_tools" revision="9e30d926fd13430266b3c0141b45790874e2fab3" groups="minilayout,paygen,firmware,buildtools,labtools,ti50"></project>
<project path="infra/chromite-HEAD" name="chromiumos/chromite" groups="buildtools,paygen">
  <annotation name="branch-mode" value="tot"></annotation>
</project>
<project path="infra_virtualenv" name="chromiumos/infra_virtualenv" groups="buildtools,chromeos-admin,labtools,sysmon,devserver"></project>
</manifest>
#+end_example
** Issues

* Electron
** Docs
** Resources
** Topics

*** Debug
**** Tracing
+ [[https://www.electronjs.org/docs/latest/tutorial/performance][Electron Performance Tutorial]]
+ [[https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/][about:tracing]]
*** Process Model

Two main types and a few others

+ main :: the top-level process =BrowserWindow=
+ utility :: the app can spawn child procs using the =UtilityProcess= API (runs
  Node.js project). This can be disabled (in the application build) unless needed
+ renderer :: renders a web view

**** IPC

+ Renderers can use =ipcRenderer=
  - To receive events: =ipcRenderer.on(chan, listener)=
  - To send events: =ipcRenderer.send(chan, ...args)=

***** Structured Clone

+ Communicates using interfaces similar to webWorkers.
+ Objects must be serializable or more drastic measures are needed (... but
  actually, most IPC methods just don't work). They're sent as full clones using
  the =structuredClone()= algorithm. This evicts cache, introduces jitter/latency
  and can complicate observability/tracing/etc


Standard interfaces are defined for Web APIs in Web IDL format ([[https://webidl.spec.whatwg.org/#js-environment][spec]])
+ [[are][Javascript Types]]
+ [[https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#webapi_types][Web/API Types]]


* API
** Standards
*** Direct Sockets
+ [[https://wicg.github.io/direct-sockets/][wicg.github.io/direct-sockets]]
+ Communicate (directly?) over TCP/UDP Sockets
+ [[https://github.com/guest271314/direct-sockets-http-ws-server][guest271314/direct-sockets-http-ws-server]]
+ and [[https://github.com/GoogleChromeLabs/telnet-client][GoogleChromeLabs/telnet-client]]

*** IDL
IDL specs are in repo: [[https://github.com/w3c/webref/tree/main/ed/idl][w3c/webref]] and collected by crawling with [[https://github.com/w3c/reffy][w3c/reffy]],
which produces the provenance for all the Web APIs is documented in the parent
folder at [[https://github.com/w3c/webref/blob/main/ed/index.json][./ed/index.json]]. There's also [[https://w3c.github.io/webref/ed/idlnames.json][.tr/idlnames.json]], but this hasn't been
updated in a few years (afaik...).

This gist gives an idea of how the data may be used

#+begin_src shell :results output verbatim code :wrap example javascript
curl -s https://gist.githubusercontent.com/dontcallmedom/4ce7183bd1ac9d6bf79ae11da12f1898/raw/35dd381295e1b22b90c50a338020b6d84b626d2c/update-interface-data.js
#+end_src

#+RESULTS:
#+begin_example javascript
const fs = require("fs").promises;

// @@@ download latest tagged version of @webref/idl repo
const webrefPath = "../../webref/ed/";
(async function () {
  const interfaceData = {};
  const index = JSON.parse(await fs.readFile(webrefPath + "idlnames.json", "utf-8"));
  (await Promise.all(
    Object.entries(index)
      .sort(([k1, v1], [k2, v2]) => k1.localeCompare(k2))
      .map(async ([,{parsed: jsonIdlPath}]) => await fs.readFile(webrefPath + jsonIdlPath, "utf-8"))
  )).forEach(jsonData => {
    const jsonIdl = JSON.parse(jsonData);
    if (jsonIdl.type === "interface" || jsonIdl.type === "interface mixin") {
      interfaceData[jsonIdl.name] = {
        inh: jsonIdl.inheritance?.name || "",
        impl: jsonIdl.includes.map(i => i.name)
      };
    }
  });
  console.log(JSON.stringify(interfaceData, null, 2));
})();
#+end_example


** Notifications

*** Manually enable notifications for a site using console

It seems a site needs to ask you for Notifications permissions.

The call to =requestPermission= needs to run from a user-initiated event.

Open inspector, find a =DOM=, add =id=fdsa=.

Right click the node, use in console (that's helpful) and then run:

#+begin_src javascript
temp0.onclick = function() {
  Notification.requestPermission().then(
    (result) => console.log(result))
}
#+end_src

*** Inversion of Control For Notifications

So it's frustrating that this data is about users and for users ... but
configured on an app and client-specific basis.

It would be nice if a user had a singular interface for subscribing to
notification feeds from any app ... like RSS but more abstract. This should
represent an inversion of control that makes it easier for a person to stay in
tune with information and control its presentation.

+ Given a set of parameters that specify a notification stream, an app's
  potential notification streams would be remotely defined and browseable
  through an interface. Or configurable by plain text.
+ To receive notifications from a stream, you update configuration for a
  Notification client (window manager or iOS).
+ The client merges/flattens their config into a list (or bundle) of
  notification-stream parameters. Each notification-stream's parameters can be
  deterministically generate a hash, but also the bundle can be hashed so on the
  back end it is efficient.
+ The bundle's hash uniquely identifies a single connection over which all
  notifications are multiplexed. Multiple clients could subscribe to the same
  bundle hash.
+ When the client's notification service comes online, it registers a single
  connection to a multiplexed stream. Notifications for the bundle's event types
  are pushed to the client.

The bundles & hashes allow client configurations to be propagated to the user's
devices more easily. This reduces the configuration overhead for the less savvy
users, but the plain text allows power users to get more of what they want to
see /where they want to see it/.

So if I want a specific monitor or window or laptop to present specific streams
of notifications then I can set up a raspberri pi with a monitor or
whatever. Then, I tell it which bundles to fetch from specific apps and from
there your OS notification UI/UX helps you sort them out or see history.

Maybe it would still be configuration overload for the average user and maybe
it's not that useful given that other people don't seem to be annoyed with
configuring software/devices to display notifications or realtime events. AI can
help with configuration overload and with figuring out what's relevant to you at
the moment, given some limited information about your desktop interactions.

Maybe sockets aren't appropriate for push-based notifications, but you at least
need something like /multicast/ and /renegotiatable/ TLS connection -- TLS can't
connect multiple clients regardless of IPv6 multicast AFAIK.

i'm not sure about the details of how web/sockets scale, but I've heard it
limits websockets' applicability.  If there are scaling limits for the number of
open sockets ... this is actually a feature not a bug (for monetization that
is).

**** How Diverse are Social Media UI/UX Habits?

This could also represent an inversion of control for accessing information from
social media. Many downstream problems from social media (feedback loops,
missing updates from friends/family) stem from users simply defaulting to their
main newsfeed or stream. At least that's how it was for me. Each platform has
many features for search, but in the end I don't think that casual users end up
navigating to content in this way. These search features are a UI/UX on top of
API features which are more useful for social media marketing or
analysis.

Facebook formerly had a feature where you could create lists of friends and you
were presented a newsfeed limited to just those people. This was likely demoted
in UI/UX around the time that Facebook Pages became big. I set up a dozen lists
and planned to use this, but ultimately browsed these newsfeeds like 4
times.

Currently, the value that Social Media delivers to advertisers is in influencing
users in some consequential way. So encouraging users to forget about telling
the app about what they want to see shifts things in Facebook's favor: their
infrastructure maybe a bit easier to maintain; it's easier to nudge or structure
the UX. This funnels user habits towards a more limited set of behaviors which
ultimately increases ROI more than

But this is /exactly/ the problem. Your data /is/ our interactions, our words,
our lives. This belongs to us. It should be person-centric and I believe
changing user habits would change the social media's cultural impact. I don't
know whether there's a ideal mean between the user-centric UX and
monetization/revenue. Social media promised a lot in the beginning, but it's
just not healthy. Social media usage should encourage becoming more
active/engaged in the world, but users' attention is grounded to simple clusters
of user habits. People then become passive and their UI/UX habits are
repetitive.

The feedback loops also tend to skew the data that UXs create. This misleads by
supporting erroneous insights for those who have access to the data, whether
internal to Facebook or external for Social Media Marketing. Given that
Facebook/etc deliver value in the form of "influenced users to the highest
bidder", then /what trends on social media is quite often irrelevant at best if
not the opposite of reality./ This is because the highest bidder /had a
sufficiently large budget/ _and_ /the need to influence/. The effectiveness of
Social Media marketing campaigns is judged by what? DATA. Where does this data
come from?  Facebook. Any junior marketing management major will (probably)
agree:

+ their work is centered around creating change
+ their department's budgets are determined by need, past success and the need
  to accomplish/ensure the business strategy needs of executives/clients.
+ to demonstrate that /your work/ _determined_ the outcome (see Macchiavelli),
  then you need to measure response.

So it's important to compare data sources when analyzing or differentiating the
success of campaigns or the need to increase spending.

A new product launch for a new brand from Dell or HP could turn the company into
the next Apple for that line of products ... but if 5-year business strategy
/depends on early success/, you need to know how hard to press the gas pedal to
make sure it does. The faster you spend, the faster your competitors may spend
because /the one or two companies/ competing to retain dominant market share
must fending off attacks from /many competitors/. Those competitors could maybe
collaborate to influence consumers ... though I'm not sure of the specifics.

But when feedback loops skew data/analytics ... then how do you know you're not
measuring the ruler? Even if you have multiple data sources in addition to the
Facebook ad analytics, if your data analysis primarily structured /on top of/
Facebook's data then your foundation may be unsound. This is a completely
separate issue entirely from how feedback loops may skew data analysis. These
effects skew the UI/UX interactions for short-time periods ... which is the
/action/ you're spending money on. It's not a sound basis for determining
whether your spend resulted in change, since good social media
analytics/engagement isn't what your paying for. How clearly you can dilineate
the effect of feedback loops depends on the specifics of the campaigns, product
type, customer segments or business needs.

These affect the signal-to-noise ratio that conversion analytics would give you,
for example. The value of data about conversion types depends on your
assumptions about UI/UX: what is the customer thinking and how does this change
over 1s to 5s to 1 minute; what type of customer is this; do they explore the
site; where do they go; etc.

I get the feeling people place too much trust in the crowd. For metrics such as
likes & impressions: these are shallow. Did the customer actually spend money?
That money is scarce implies that customer spending is a useful signal. Time
investment is also useful. Some metrics are more grounded than others. But if
there's too much cross-correlation in some dimensions of the metrics, how can
you separate cause/effect? Determining whether social media marketing is
successful should primarily be measured using data based on outcomes and
particularly those . Social Media analytics is more useful in targeting or to
aid understanding your customer. The data may be useful in determining marketing
failure ... but maybe not.

I don't really know what I'm talking about ... but i read a book on marketing
once. It was on the "self-taught MBA" book list. It covered the difference
between advertising and publicity quite a lot. The latter is much more
useful. Particularly, if you identify current interest in topics/events related
to your brand, you can plug the attention/salience into strategies to grow new
customer relationships. The interest may otherwise be passive. This may help
your business/org to understand itself as much as it does your customer. The
publicity shouldn't be staged, but doesn't need to be be. If your product or
business or non-profit has compelling value or mission, then finding ways to
connect to new customers gives you many more options. After all, /what is it
that people are really buying?/

Anyways, social media should feel collaborative. You should have control over
your experience. Facebook effectively modulates your experience anyways ... for
A/B testing. But see: this is Facebook-centric. It's not person-centric. They
have the feature. You don't. You simply do not have the time in days to actually
measure/demonstrate why you're seeing the content you're seeing. This is
particularly confusing if Facebook's A/B testing or content selection is biased
by the sparsity of the data.

Previous ideas for addressing the lack of control over newsfeed include:

+ The ability to subscribe to curated newsfeeds (which isn't too different than
  some of the notification ideas above). This is antequated, since AI can help
  with this quite a bit.
+ A "mix it up" button to randomize the newsfeed. Or the ability to jump tracks
  and toggle between 3+ newsfeeds. The parameters may either be shown to the
  user or not, but they want a new experience and know that pushing the damn
  button does something different.

This is a signal you could use if you weren"t so obsessed with extracting as
much attention as possible -- I kind of hate social media sometimes, but it's a
necessary evil. Maybe it doesn't have to be like that, but it looks like online
culture and habits are kind of locking into place. Maybe it's just a plateau and
something disrupts the existing paradigm. But I'd like to push that button.

I don't mean to single out Facebook, but that's the brand. Facebook IS social
media. But really these problems are generally endemic to all social
platforms. Oh, is it Meta now? Find and replace facebook => tiktok then. or
whatever platform. They all share common problems. Sorry, but I wasted quite a
bit of time chasing the Tik Tok dragon.

*** Don't Look, Listen

Yeh, it turns out that the reason that I can't stand webapps is because as soon
as the Notifications API became integrated into chrome/firefox, I decided I
didn't want any notifications from any notification apps. I never tried it. The
wording also seemed to imply that both Chrome /and/ MacOS would be redundantly
displaying notifications. Also, knee-jerk reaction to webapps that /should not/
ask for notifications reinforce my rejection of this.

I recently explored email filters and had assumed that most successful people
must be like some kind of email savants. I had never developed good email
habits, but only realized how serious of a problem this was in 2020? My old
email account had 160,000 messsages and the initial IMAP sync will flatline most
email clients. It at least hogs machine resources for hours if not days.... I
worked this down to 130K with Gmail filters, but I don't realllly want to delete
everything. For some reason, it's not so simple as to limit IMAP label
subscriptions, I think because the labelling doesn't exist for most things. I
thought this would be easier to manage in a desktop client.

So I started over with a clean email. I like Thunderbird, but I couldn't stand
accessing Gmail through a browser since I can't ever find the goddamn tab and
the thing doesn't want you to open multiple tabs to simultaneously work on
multiple communication tasks at the same time.

However, now that I've switched to Linux for some time and I actually understand
how notifications are presented to the window manager's client ... I magically
understand how it works. But almost zero apps on most browser installations are
permitted notifications. So it's not like they showed up and I was very stubborn
about "Browser Notifications? NOPE! .. WHY?".

Without other people to model my communication habits on, it's very difficult to
miraculously connect the dots. There's an absence of notifications and an
absence of time spent seeing other people /working/. I haven't spent much time
around developers or had many conversations about web development in the past
decade. So what the Notifications API did for webapps didn't really come up.

There are many youtube videos on configuring i3/sway/etc ... but if the videos
are live-streamed, they're using a VM. Or at least, it's never the monitor with
personal or work-related information on the screen.  I can't actually remember
seeing notifications in almost any video ... weird that I really can't recall a
single incidence besides maybe dunst configuration videos ... but it makes
sense. Youtubers and most tech-savvy people with a public presence maintain
multiple personas ... but all seem to understand what goes on the screen and
what doesn't. I've dabbled in this and thought about many of the same things.

But yeh, when almost everything that's not a mobile app or an electron app ends
up being a web application, then what this does is makes you digitally deaf.



* Headless
** Docs
** Resources
*** Security
+ [[https://medium.com/@woff/setting-up-playwright-vscode-for-hacking-headless-browsers-cc8e6298e9b4][Setting up Playwright & VSCode for Hacking Headless Browsers]]

* Firefox

** Docs

** Resources
*** Tools
+ [[https://profiler.firefox.com/docs/#/][Firefox Profiler]]

*** [[https://codeberg.org/mk-fg/waterfox][mk-fg/waterfox]]

This guy's projects is crazy yo

+ extension & configuration of Firefox browser (technically Waterfox)
+ basically a project to help in the setup of user.js, specific custom
  extensions

** Topics

*** Misc
**** View Partial Source For Fragment

=<mouse-2> e=

*** Profile Data

I would like my keyboard shortcuts to sync or to be exportable.

**** Finding active profile path

Set a default firefox root directory

#+name: ffdata
#+begin_src emacs-lisp :results silent :export none
;; echo "$HOME/.mozilla/firefox"
(expand-file-name ".mozilla/firefox" (getenv "HOME"))
#+end_src

Probably don't leave your =~/.mozilla/firefox= directory results here.

#+begin_example org
#+headers: :var ffdata="/some/tmp/directory/"
#+end_example

Convert data in =profiles.ini= to JSON

#+name: ffprofilesjson
#+headers: :var ffdata=ffdata
#+begin_src sh :results output silent code :wrap src yaml
# ffdata="$HOME/.mozilla/firefox"
ffprofiles=$ffdata/profiles.ini

# ffdata=/tmp/ffdata
# ffprofiles=$ffdata/profiles.fake.ini

cat $ffprofiles  \
    | sed -E 's/=(.*[^"])$/ = "\1"/' \
    | tomlq
#+end_src

Extract ID of active profile

#+name: ffactiveid
#+headers: :results output silent
#+begin_src jq :stdin ffprofilesjson :cmd-line "-rj"
# with_entries(select(.value.Default == "1"))
. | to_entries | map(select(.value.Default == "1"))
  | first | .value.Path

# with_entries(.value += {Id: "0"})
#+end_src

Now it can be listed

#+name: ffactivepath
#+headers: :var ffprof=ffactiveid ffdata=ffdata
#+begin_src emacs-lisp :results silent
;; setq-local is kind of a hack
(setq-local ffactivepath (expand-file-name ffprof ffdata))
#+end_src

And the databases queried

#+name: ffplacesschema
#+headers: :dir (identity ffactivepath) :db places.sqlite
#+headers: :file (expand-file-name "img/sql/ffplaces.schema.sql" (file-name-directory (buffer-file-name)))
#+headers: :results output file
#+begin_src sqlite :results output
.fullschema --indent
#+end_src

#+RESULTS: ffplacesschema
[[file:img/sql/ffplaces.schema.sql]]

#+name: ffplacesschema
#+headers: :dir (identity ffactivepath) :db places.sqlite
#+headers: :file (expand-file-name "img/sql/ffplaces.schema.sql" (file-name-directory (buffer-file-name)))
#+headers: :results output file
#+begin_src sqlite :results output
.fullschema --indent
#+end_src

**** Every time i install a new browser/profile

I would love to enter these shortcuts in one at a time, which for an extension
which itself should've probably just been a feature in 2010. All browsers have
these problems and actually finding what files contain info like this doesn't
show up on Google.

#+name: ffshortcuts-for-extension
#+headers: :results output
#+headers: :var extension="treestyletab@piro.sakura.ne.jp"
#+headers: :in-file (expand-file-name "extension-settings.json" ffactivepath)
#+begin_src jq :cmd-line "-rj"
# with_entries(select(.value.Default == "1"))
.commands # | to_entries
  | map_values(.precedenceList | first)
  | map_values(select(.id == $extension and (.value.shortcut | length) > 0))
  | with_entries({"key": .key, "value": .value.value.shortcut})

#+end_src

#+RESULTS: ffshortcuts-for-extension
#+begin_example
{
  "treeMoveUp": "Ctrl+Alt+K",
  "treeMoveDown": "Ctrl+Alt+J",
  "focusPreviousSilently": "Ctrl+Alt+W",
  "focusNextSilently": "Ctrl+Alt+S",
  "focusParent": "Ctrl+Alt+H",
  "newChildTab": "Ctrl+Alt+T",
  "focusFirstChild": "Ctrl+Alt+L",
  "closeDescendants": "Ctrl+Alt+Q",
  "newContainerTab": "Ctrl+F1"
}
#+end_example

All browsers have neutered functionality. It's not Firefox or Chrome or
whatever. These are applications designed for corporations, not you the user.

*** Sqlite

Hmmmm.... wow. i can haz that?

[[id:0c386ed6-5a9d-4fc0-8444-550fce2c39a4][Org-babel with more detail here]]. It's honestly more of a feature than a bug, but
the data maybe ummm should be encrypted. [[https://jhoneill.github.io/powershell/2020/11/23/Chrome-Passwords.html][Same thing]] in [[https://developer.chrome.com/blog/deprecating-web-sql/][Chromium]].
Surprise. You're naked if anyone gets a shell to your environment ... with read
access to =$HOME=. Big deal. No passwords, but yeh... does it matter? It's being
phased out... but until then, have a fig leaf.

#+begin_src shell :results output list
ffdata="$HOME/.mozilla/firefox"
ffprofile=$(grep -e "^Default=.*" $ffdata/profiles.ini | head -n1 | cut -f2 -d'=')

cd $ffdata/$ffprofile
ls *.sqlite
#+end_src

#+RESULTS:
#+begin_example
- content-prefs.sqlite
- cookies.sqlite
- credentialstate.sqlite
- favicons.sqlite
- formhistory.sqlite
- permissions.sqlite
- places.sqlite
- protections.sqlite
- storage.sqlite
- storage-sync-v2.sqlite
- webappsstore.sqlite
#+end_example

*** Extensions

**** Tree Style Tabs

+ Impressive project, given how modular/interoperable it is.
+ A lot of config options.

***** User Stylesheet Fix To Hide Tab Bar

The TST extensions can basically replace the tab bar. I kept looking for this
option (for TST to manage the horizontal tab bar visibility), but apparently you
[[https://www.reddit.com/r/firefox/comments/nwrtdv/comment/h1b6c62/?utm_source=share&utm_medium=web2x&context=3][just hide the tab bar]] altogether. This needs to be done on a per-installation,
per-profile basis, hence ... the notes.

+ [[https://github.com/MrOtherGuy/firefox-csshacks][MrOtherGuy/firefox-csshacks]] (with examples)
+ [[https://github.com/FirefoxCSS-Store/FirefoxCSS-Store.github.io/blob/main/README.md#generic-installation][Firefox-CSS-Store/Firefox-CSS-Store.github.io]]

****** Using userChrome.css

On Linux for me, the only =about:config= necessary to enable was
=toolkit.legacyUserProfileCustomizations.stylesheets=, despite what's documented
in some of these CSS repos. The other options /may/ eat all your Video RAM, but
may be necessary for those themes. I'm not sure how X11/etc framebuffers work
with multiple desktops and window previews...

If the above value is set, then
=~/.mozilla/firefox/$profile/chrome/userChrome.css= must exist.

#+begin_src css

#TabsToolbar {
    visibility: collapse;
}

/* remove headers from sidebars */
#sidebar-header {
  display: none;
}

/* reduce minimum width of sidebar */
#sidebar-box {
  min-width: 100px !important;
}

#+end_src

Or [[https://mrotherguy.github.io/firefox-csshacks/?file=autohide_tabstoolbar.css][autohide the tab bar]], though the more =userChrome.css= you use, the more
problems you may encounter... and you have to restart on every change.

****** Using treestyletabs



****** TODO port to dotfiles after finding a decent way to parse =~/.mozilla/firefox/profiles.ini=

If I don't end up using Nyxt first.

**** Debugging

The devtools are nice, but missing 5+ years of development has not been kind to
me (esp. knowing how useful the tools were then). Luckily, you can just enable
the logging in TST (and also debug, which took me a second).

Determining TST entry points was a bit complicated, but es6 modules can be
imported to eval (?) ... I would have just used breakpoints, but the issue
seemed to be in the initialization.

Not really a bug, just needed customization (to avoid unnecessary permissions: a
good thing).

***** Profiles

Isolated browser contexts can be created by using =about:profiles=

***** [[https://firefox-source-docs.mozilla.org/devtools-user/browser_console/index.html][Browser Console]]

Requires enabling the [[https://firefox-source-docs.mozilla.org/devtools-user/browser_toolbox/index.html][Browser Toolbox]].

***** Extension Console

Found in [[about:debugging][about:debugging]].

The extensions may include files built which are not in the Github.

=C-M-f/b= for =forward/backward-sexp= are about as useful as you'd think they
are, so it sucks not having that kinda most of the time. You can, of course,
connect remotely to the debugger and ... well [[https://www.reddit.com/r/xkcd/comments/46w1zc/til_that_emacs_has_a_reference_to_xkcd_378_mx/][XKCD has a comic about this]].

*** Custom Stylesheets

**** For GNU Manuals

#+begin_src css

@-moz-document domain(www.gnu.org) {

    /* scheme docs */
    code.code var {
        color: orange;
    }

    strong.def-name {
        color: indianred;
    }

    var.def-var-arguments {
        color: turquoise;
    }

    /* gnus docs */
    code {
        color: orange;
    }

    samp {
        color: indianred;
    }

}

@-moz-document domain(nongnu.org) {
    tt.key, kbd {
        color: turquoise;
    }

    p code, td code, li code {
        color: orange;
    }

    td code {
        color: orange;
    }
}

@-moz-document domain(guix.gnu.org) {

    /* guix docs */
    dl.def span.category code {
        color: indianred;
    }

    dl.def dt span > code:first {
        color: indianred;
    }

    dl.def dt span > code {
        color: orange;
    }

    dl.def span em {
        color: turquoise;
    }

    dl.def span strong {
        color: orange;
    }

    dl.def p code {
        color: orange;
    }

}

#+end_src
**** Reader View

For condensed prints

#+begin_src css
.moz-reader-block-img {
  max-height: 15em;
  width: auto;
}

td p {
  margin\ 0: ;
  margin: 0;
}

.header > h1 {
  /* margin: 30px 0; */
}

.header > .credits {
  /* margin: 0 0 10px; */
}

.moz-reader-content p, .moz-reader-content p, .moz-reader-content code, .moz-reader-content pre, .moz-reader-content blockquote, .moz-reader-content ul, .moz-reader-content ol, .moz-reader-content li, .moz-reader-content figure, .moz-reader-content .wp-caption {
  /* margin: -10px -10px calc(8px + var(--line-height) * 0.4); */
  /* padding: 10px; */
}

table, th, td {
  /* border: 1px solid currentColor; */
  /* padding: 6px; */
  border: 2px solid grey;
  padding: 0.1rem;
}

.container {
  /* --line-height: 1em; */
  --line-height: 1.2em;
}
#+end_src

* Nyxt

** Docs

+ [[https://nyxt.atlas.engineer/documentation][Manual]]
+ [[https://github.com/atlas-engineer/nyxt/tree/25bf3a481b07b43c24eb1dcd76fd4c0d56699c5a/documents][Developer's Manual]]

** Resources

** Topics
*** Buffers

*** Panels

[[https://nyxt.atlas.engineer/article/panel-buffers.org][Panel buffers: useful data and widgets pinned to windows or buffers]]

+ There are two of these: a =:left= slot and a =:right= slot.
+ Source is in [[https://github.com/atlas-engineer/nyxt/blob/master/source/panel.lisp][panel.lisp]], but the feature isn't in v2.2.4

*** Windows

** Issues
