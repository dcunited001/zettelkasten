:PROPERTIES:
:ID:       786edde6-2a08-4ec5-8076-45bbd4a34243
:END:
#+TITLE: Tramp

* Docs
+ [[https://www.emacswiki.org/emacs/TrampMode][EmacsWiki]]
+ GNU [[https://www.gnu.org/software/tramp/][Docs]]

* Resources


* Topics

** Tramp + Eglot

See [[https://www.reddit.com/r/emacs/comments/m2g3ae/eglot_tramp_support_just_merged/][this post from r/emacs]]

* Issues

** Limitations of Tramp

Many emacs commands will =type-lift= their behavior, depending on whether the
buffer is remote. Tramp resolves remote buffers kinda the way you want, so that
it is *the best of most worlds*. However, it seems that you really want/need to
understand some of the internals of emacs. This means that, you need to be
capable of:

+ working with an elisp backtrace and xref
+ navigating an elisp backtrace (though you probably won't need edebug)
+ understanding the assumptions that comint-mode makes of shells & repls
  ... i.e. if the feature is not intended by the elisp package maintainer, then
  it may still work, but you may encounter prompt/output parsing issues, timing
  issues, etc.

These are not limitations, per se, but may need to put in some work to get what
you're looking for. If you have "read the manual" then you know enough about
Emacs to find a solution, but you need some practice/advice when putting these
tools to work.

** File Locking

From Tramp Manual: [[https://www.gnu.org/software/tramp/#Auto_002dsave-File-Lock-and-Backup][Auto-save, File Lock and Backup Configuration]]

*** Configuration

I think as long as =(eq create-lockfiles t)= and =(eq
remote-file-name-inhibit-locks t)= then Emacs is going to do what you want.
These are the defaults, but I think they changed since version 28. I guess I've
been too cautious.

+ lock-file-name-transforms :: emacs will write file locks to the same directory
  as the original file, similar to auto-save.
+ remote-file-name-inhibit-locks :: to =t= if you know two emacs won't be
  editing the same file simultaneously (for performance)

**** Relevant variables

|--------------------------------------------+-------+----------------------------------------------------------------------------|
| variable                                   | def.  | desc.                                                                      |
|--------------------------------------------+-------+----------------------------------------------------------------------------|
| backup-directory-alist                     | nil   | Alist of file name patterns and backup directory names.                    |
| tramp-backup-directory-alist               | nil   | Alist of file name patterns and backup directory names.                    |
| tramp-auto-save-directory                  | nil   | Put auto-save files in this directory, if set.                             |
|--------------------------------------------+-------+----------------------------------------------------------------------------|
| auto-save-file-name-transforms             | regex | Transforms to apply to buffer file name before making auto-save file name. |
| lock-file-name-transforms                  | nil   | Transforms to apply to buffer file name before making a lock file name.    |
|--------------------------------------------+-------+----------------------------------------------------------------------------|
| tramp-allow-unsafe-temporary-files         | nil   | Write root-owned auto-save/backup/lockfiles to local "/tmp"?               |
| tramp-remote-file-name-spec-regexp         | regex | Matches tramp filename between prefix & postfix                            |
|--------------------------------------------+-------+----------------------------------------------------------------------------|
| create-lockfiles                           | t     | Non-nil means use lockfiles to avoid editing collisions.                   |
| remote-file-name-inhibit-locks             | nil   | Whether to use file locks for remote files.                                |
| remote-file-name-inhibit-auto-save-visited | nil   | When nil, ‘auto-save-visited-mode’ will auto-save remote files.            |
| remote-file-name-inhibit-cache             | 10    | Remote file-name cache for read access. =n= seconds. =t= to never cache    |
|--------------------------------------------+-------+----------------------------------------------------------------------------|

*** Testing File Locks

Some notes on file locking using pretty vanilla tramp setup

+ should be replicable on something like [[https://github.com/dcunited001/.emacs.guix/commit/3c25311bb20aad4b0a15cbab6d3f76c2d7cf657f][dcunited001/.emacs.guix@7cf657f]]

#+begin_quote
testing writing to bobPC copy from alicePC.

when alicePC has all changes from bobPC:

- bobPC's in memory buffer instantly gets the new file contents.

when alicePC is working with a copy, but bobPC has made local changes:

- handles several different cases and consistently notifies the user

when myuser@alicePC steals the local file lock, then you can try to save a different
  copy, but this didn't appear on the alicePC copy, even when killing/reopening
  the myuser@bobPC buffer. (not sure what's happened here)
#+end_quote

** [[https://stackoverflow.com/a/16408592][Getting sudo under a specific user on a remote host]]

Use =sudoedit= generally. It's far more secure.

#+begin_example
/ssh:you@remotehost|sudo:remotehost:/path/to/file
#+end_example

+ explains =multi:= syntax which specifies multiple hops using SSH uri's
  separated by pipes
  - tramp breaks these up and constructs =tramp-default-proxies-alist=
    - e.g. =("remotehost" "root" "/ssh:you@remotehost:")=
+ also explains sudo for a specific user on a local host
+ Pay attention to the pipe =|= character: it is not a slash... this was lost on
  me at the time.

** Grokking tramp-default-proxies-alist

+ tramp-default-proxies-alist :: a list of triples =(host user proxy)=

#+begin_src emacs-lisp
(defcustom tramp-default-proxies-alist "..."
  :type
  '(repeat
    (list
     (choice :tag "Host regexp" regexp sexp)
     (choice :tag "User regexp" regexp sexp)
     (choice :tag " Proxy name" string (const nil)))))
#+end_src

** TODO determine whether it is useful to set =tramp-default-proxies-alist= from =.dir-locals.el=

+ enable-remote-dir-locals :: remote buffers will have tramp-expand-args
  - see =hack-dir-local--get-variables=

** TODO what are these files? :lisp-data-mode:

#+begin_src emacs-lisp
     ("\\.dir-locals\\(?:-2\\)?\\.el\\'" . lisp-data-mode)
     ("eww-bookmarks\\'" . lisp-data-mode)
     ("tramp\\'" . lisp-data-mode)
     ("/archive-contents\\'" . lisp-data-mode)
     ("places\\'" . lisp-data-mode)
     ("\\.emacs-places\\'" . lisp-data-mode)
     ("\\.el\\'" . emacs-lisp-mode)
     ("Project\\.ede\\'" . emacs-lisp-mode)
#+end_src


** Setting up LSP Mode over Tramp

[[https://www.gnu.org/software/emacs/manual/html_node/tramp/Remote-programs.html][How tramp finds/uses programs on the remote host]]

*** Using Docker

*** Using SSH

+ [[https://www.reddit.com/r/emacs/comments/qbrp0t/emacs_lsp_tramp/][Emacs LSP + TRAMP]]

* Roam

+ [[id:6f769bd4-6f54-4da7-a329-8cf5226128c9][Emacs]]
+ [[id:c2afa949-0d1c-4703-b69c-02ffa854d4f4][Cryptography]]
+ [[id:d7cc15ac-db8c-4eff-9a1e-f6de0eefe638][File Systems]]
