:PROPERTIES:
:ID:       3daa7903-2e07-4664-8a20-04df51b715de
:END:
#+TITLE: C/C++ (cpp)
#+DESCRIPTION: C++
#+TAGS:

* Roam

+ [[id:711d6a41-5425-4853-97ed-f7698a4a3605][LSP]]

* Docs
** Books
+ [[https://www.agner.org/optimize/][Software Optimization Resources]] (Agner Fog)

* [[https://www.doxygen.nl/manual/diagrams.html][Doxygen]]

** Docs
+ [[https://doxygen.nl/manual/doxywizard_usage.html][doxywizard]] the GUI configuration tool to build =Doxyfile=
+ [[https://www.doxygen.nl/manual/diagrams.html][graphs/diagrams]]

** Installation

Arch packages are:

+ doxygen +doxygen-docs+
+ python-breathe :: integrate with readthedocs/sphinx
+ moxygen :: convert to markdown files (not building for me though)

** Integration

Doxygen produces pretty good diagramming from classes. It may be useful when
extending from C++ via FFI.

I'm not sure how to configure that or whether it's supported in some of
doxygen's extensions ... but on the off chance it's easy, then it might be worth
looking into.

*** Python [[github:breathe-doc/breathe][breathe-doc/breathe]]

See [[https://github.com/breathe-doc/breathe#projects-using-breathe][Projects Using Breathe]]

For a scripting language like python, I imagine that you'd end up mired in a
configuration sand trap though -- since you may need to:

+ Set up Sphinx to generate ReadTheDocs stuff.
+ If it's an FFI project, ensure C++ code implements doxygen and generate the
  FFI content for Python
+ Ensure the your python code is formatted according to what Doxygen expects in
  ="""docstrings"""=
+ Ensure sphinx/doxygen are working individually before you integrate them
+ Determine what configuration you need for the doxygen/sphinx integration --
  you don't actually want everything doxygen normally gives you. It's more
  useful when you limit the complexity of the diagrams it generates.

*** QML

Apparently doxygen doesn't work out of the boxy with QT's QML.

On arch there is the =python-doxyqml= package. This converts from =.qml= to, I
assume, C++ headers -- the desc says "pseudo-C++". The package is orphaned
though.

*** PlantUML

Doxygen can be used to generate PlantUML diagrams. I used =hpp2plantuml= for
[[id:c6796b35-883f-4607-8ee3-00aea6215579][diagrams on Krita's classes]].  These ended up being pretty critical.

* Issues
** UML Generation
+ [[https://stackoverflow.com/questions/4755913/how-to-use-doxygen-to-create-uml-class-diagrams-from-c-source][Using doxygen to create UML diagrams]] (doxyfile options)


* Compilation

** Topics

*** Linking



*** Compiler Flags

Variables

|----------+----------------|
| Env      | Function       |
|----------+----------------|
| CPPFLAGS | C Preprocessor |
| CFLAGS   | C              |
| CXXFLAGS | C++            |
|----------+----------------|

Flags




* IDE

** Clangd

*** Docs
+ [[https://clangd.llvm.org/faq][FAQ]]
+ [[https://clangd.llvm.org/guides][Guides]]
+ [[https://clangd.llvm.org/config][Config]]
+ [[https://clangd.llvm.org/extensions][LSP Extensions]]

*** Resources

*** Topics

**** [[https://clangd.llvm.org/design/compile-commands][Compile Commands]]

These can built out to =json= files and imported into other projects.

*** Issues
**** Initial Setup

A good /first/ test project for clangd lsp/eglot: [[github:xdbob/xss-lock][xdbob/xss-lock]]. It's a
super-light cmake project with two implementations and one header, almost no
dependencies.

** [[https://github.com/MaskRay/ccls][CCLS]]

See [[https://github.com/emacs-lsp/lsp-docker][emacs-lsp/lsp-docker]]

*** Docs

*** Resources

** Bear

Construct a clangd-compatible compilation/artifact database which can be
updated.

+ Listens for calls to the dynamic linker. Doesn't work when binaries are
  statically linked.

Compiler wrappers: distcc, ccache, MPI (OpenMPI, MPICH), CUDA

If compiling with =make -j4=, then invoke like =bear -- make -j4=.

*** Docs
+ Repo: [[https://github.com/rizsotto/Bear][rizsotto/Bear]]
+ [[https://github.com/rizsotto/Bear/wiki][Wiki]]. See [[https://github.com/rizsotto/Bear/wiki/Features][Features]] for an overview on functionality.

*** Resources
+ [[https://github.com/rizsotto/Bear/wiki/Usage#multilib-issues][Multilib issues]] (customization needed when linking against =preload=
  libraries)

*** Topics
**** Using with =cmake=

**** Using with =clang=


* GNU Make

** Docs
+ [[https://www.gnu.org/software/make/manual/][GNU Manual]]

** Resources

+ Makefile [[https://www.gnu.org/software/make/manual/html_node/Force-Targets.html][FORCE]] and [[https://stackoverflow.com/questions/2145590/what-is-the-purpose-of-phony-in-a-makefile][.PHONY]] ... ahh the phony joke
+ [[https://earthly.dev/blog/makefile-variables/][Understanding and using makefile variables]]
+ [[https://www.gnu.org/prep/standards/html_node/Directory-Variables.html][Vars for Installation Directories]]


*** Tutorials

+ [[https://github.com/berkeley-scf/tutorial-make-workflows][berkeley-scf/tutorial-make-workflows]]
** Topics
*** Task Dependency Graph

**** [[https://github.com/dnaeon/makefile-graph][dnaeon/makefile-graph]]

This is a Go CLI option. 

**** [[https://github.com/lindenb/makefile2graph][lindenb/makefile2graph]]

This seems to work, but Makefile can require evaluation & deps, I think, even if
=make -Bnd= for dry run. This is skipping =release=, =uptalk=, =upload= which aren't
part of a default target.

#+begin_src shell :results output file link
# sorry, babel block is messy
out=$(pwd)/img/regpg.svg
repo=/data/ecto/ansible/regpg
cd $repo
guix shell makefile2graph -E out -E repo -- \
  make -Bnd | makefile2graph  | dot -Tsvg  -o $out
echo -n $out
#+end_src

#+RESULTS:
[[file:/data/org/roam/topics/img/regpg.svg]]

*** Manual

**** §7.2 Makefile Conventions

+ [[https://www.gnu.org/prep/standards/html_node/Makefile-Basics.html][Makefile Basics]]

Don't assume PATH

[[https://www.gnu.org/prep/standards/html_node/Standard-Targets.html][Standard Targets]]

| ./         | program is built as part of the make          |
| $(srcdir)/ | file is an unchanging part of the source code |

|-------+------------------+---------------+------+--------------|
| dev   | clean            | install       | doc  | install doc  |
|-------+------------------+---------------+------+--------------|
| all   | clean            | install       | html | install-html |
| check | distclean        | install-strip | ps   | install-ps   |
| dist  | mostlyclean      | installcheck  | dvi  | install-dvi  |
| TAGS  | maintainer-clean | installdirs   | pdf  | install-pdf  |
|       |                  | uninstall     | info |              |
|-------+------------------+---------------+------+--------------|




***** Portable Scripts

+ [[https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.72/html_node/Portable-Shell.html#Portable-Shell][Portable Shell Programming]]

only these commands should be used directly

awk cat cmp cp diff echo expr false grep install-info ln ls
mkdir mv printf pwd rm rmdir sed sleep sort tar test touch tr true

use these tools after locating them:

$(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)
$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)

$(CHGRP) $(CHMOD) $(CHOWN) $(MKNOD)

only use compression programs like gzip in the dist rule
*** Examples

**** Dotfiles

... meh. i tried cut/paste. too hard. got the oneliner to work once. idk how.

#+begin_src shell
RESTORE=$(echo -en '\001\033[0m\002')
EROTSER=$(echo -en '\001\033[0m\002' | rev)
GREEN=$(echo -en '\001\033[00;32m\002')
DER=$(echo -en '\001\033[00;31m\002' | rev)

locate '/data/ecto/x.files/*/Makefile' \
    | xargs -n1 grep -Hne '.*: ' \
    | sed -E 's/^(.*\/.*):([0-9]+):/\1 § \2 ¶ /g' \
    | tree --fromfile .
#+end_src

#+begin_src shell
locate '/data/ecto/x.files/*/Makefile' \
    | xargs -n1 grep -Hne '.*: ' \
    | sed -E 's/^(.*\/.*):([0-9]+):/\1 § \2 ¶ /g' \
    | rev | sed -E 's/(.*) :(.*) ¶ /\1 :¹\2² ¶ /g' \
    | rev \

#    | notree --fromfile .
# ... i give up :ノ\ノ(；￣Д￣)ノ\ノ-
#
# | tr '¹' "${GREEN}" | tr '²' "${RESTORE}"
# sed -E "s/¹/${GREEN/\\\\/\\\\/}//"
#+end_src


** Issues

* GNU M4

** Docs

+ [[https://www.gnu.org/software/m4/manual/m4.html][M4 Manual]]

** Resources
** Topics

* CMake

** Docs

** Resources

** Topics

** LSP

*** Generate =compile_commands.json=

Add =-DCMAKE_EXPORT_COMPILE_COMMANDS=1= to =cmake= invocation

* Bazel

** Docs
[[https://bazel.build][bazel.build]]

+ [[https://bazel.build/start/cpp][C++ Tutorial]]

** Resources

+ [[github:bazelbuild/buildtools][bazelbuild/buildtools]]
  - buildifier
  - buildozer
  - unused_deps (for unneeded =java_library= rules)

*** LSP

+ [[https://github.com/hedronvision/bazel-compile-commands-extractor][hedronvision/bazel-compile-commands-extractor]]

*** Topics

**** .bazelrc

***** Extending the .bazelrc for user's custom configs

#+begin_quote
If project was frequent, I'd isolate this behavior to a specific file and inject
it with =bazel= command flags, but the argument structure in
=build_desktop_examples.sh= implies this isn't possible.
#+end_quote

... that's what =.user.bazelrc= is for.

Look for lines like these at the end of a project's =.bazelrc= file:

#+begin_src bazel
# This bazelrc file is meant to be written by a setup script.
try-import %workspace%/.configure.bazelrc

# This bazelrc file can be used for user-specific custom build settings.
try-import %workspace%/.user.bazelrc
#+end_src


** Issues



*** Generate metadata for clangd-based completion

Follow the guide for hedronvison mentioned above. The example here is for the
Bazel-based project [[https://github.com/google/mediapipe][google/mediapipe]] and while that's not exactly "hello world"
difficulty, I'd rather know more about extending the behavior for complex
builds.

So this focuses on use cases =#2= and =#3= in the hedronvision guide. The
mediapipe builds require lots of flags, which are managed by the
buildscripts. The important stuff in there needs to be summarized. And for
usecase =#3=, these flags should be modified based on the context.

The generated =compile_commands.json= file is intended to be found at the root
of the workspace. However, mediapipe contains a lot of subprojects.

**** Setup the Bazel workspace
To tangle, eval this to set the path

#+begin_src emacs-lisp
(setq e-g-hedron-path ".")
#+end_src

Add this to =WORKSPACE= or =.bazelrc=, which can be branched off and then applied as a cherry
pick. Replace the commit hash with:

#+name: hedronvision-hash
#+begin_src shell :var workdir=(or e-g-hedron-path ".")
cd $workdir
git log -n1 --shortstat --reverse --pretty=oneline | cut -f1 -d' '
#+end_src

#+RESULTS: hedronvision-hash
: 806522057f385acb400af1749211b85c93834b43

The "package or plugin or module or magical widget" needs to be loaded. I'm not
sure what bazel has named these things.

The =(read-directory-name "prompt")= is nice, but there's no =ob-bazel= to do
variable interpolation.

#+begin_src bazel :tangle (read-file-name "Tangle .user.bazelrc to:")) :noweb yes
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

hedron_hash = "<<hedronvision-hash()>>"

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
http_archive(
    name = "hedron_compile_commands",

    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/" + hedron_hash + "tar.gz"
    strip_prefix = "bazel-compile-commands-extractor-" + hedron_hash
)
load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
hedron_compile_commands_setup()
#+end_src

***** Original content without =:noweb= references

#+begin_src bazel
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
http_archive(
    name = "hedron_compile_commands",

    # Replace the commit hash in both places (below) with the latest, rather than using the stale one here.
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/26cf0a8a2d117ec2f92e01ed1b7ece4dd8940fcd.tar.gz",
    strip_prefix = "bazel-compile-commands-extractor-26cf0a8a2d117ec2f92e01ed1b7ece4dd8940fcd",
 # When you first run this tool, it'll recommend a sha256 hash to put here with a message like: "DEBUG: Rule 'hedron_compile_commands' indicated that a canonical reproducible form can be obtained by modifying arguments sha256 = ..."
)
load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")
hedron_compile_commands_setup()
#+end_src


***** When using CCLS instead of Clangd

The directions differ when using =ccls= instead of =clangd=: instead of setting
=targets= set =exclude_headers=true=.

**** Building Mediapipe

+ [[https://developers.google.com/mediapipe/framework/getting_started/install][Docker build guide]]

With the project cloned, build a docker image there with:

#+begin_src shell
docker build --tag=mediapipe
#+end_src

Try running the hello world with:

#+begin_src shell
docker run -it --name mediapipe mediapipe:latest
GLOG_logtostderr=1 bazel run --define MEDIAPIPE_DISABLE_GPU=1 mediapipe/examples/desktop/hello_world
#+end_src

***** Extracting =compile_commands.json=

**** Bulding Mediapipe Examples (for desktop)

After =docker run -it --name mediapipe mediapipe:latest=, these examples are run with:

#+begin_src shell
GLOG_logtostderr=1 bazel run --define MEDIAPIPE_DISABLE_GPU=1 mediapipe/examples/desktop/hello_world
#+end_src

***** Extracting =compile_commands.json=



**** Building Mediapipe Mobile Examples

***** Extracting =compile_commands.json=

I'm not sure about the Android/iOS examples, since the former are java-based and
the latter typically require XCode, especially for various APIs (the binaries
still must be signed in some cases. However, the hedronvision Bazel project does
mention it works for Objective C++.
