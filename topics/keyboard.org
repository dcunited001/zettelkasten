:PROPERTIES:
:ID:       3d2330da-5a95-408a-b940-7d2b3b0c7fb2
:END:
#+TITLE: Keyboard
#+DESCRIPTION: Info on keyboards, whether x11/wayland or software/hardware or just docs
#+TAGS:

* Roam
+ [[id:8c6d7cdd-74af-4307-b1df-8641752a1c9f][Xorg]]
+ [[id:f496d767-b54e-4086-bed4-e3d95fdaed4a][Wayland]]

* Docs
+ [[https://deskthority.net/wiki/][Deskthority]]: all about keyboards
+ [[https://github.com/tmux/tmux/wiki/Modifier-Keys#what-terminal-keys-look-like][How keys are encoded & relayed to terminals]] (tmux)

* Resources

* Layouts

** Hardware
+ [[https://configure.zsa.io/ergodox-ez/layouts/default/latest/0][Ergodox EZ Default Layout]]
+ manabu
+ [[https://github.com/system76/launch/blob/master/pcb-lite-iso/launch-lite-iso.kicad_prl][System76/launch]]

** Software
+ [[https://www.keyboard-layout-editor.com][Keyboard Layout Editor]]
+ [[github:manabu/keyboard-layout-image-generator][manabu/keyboard-layout-image-generator]]

*** Shortcut Doc

+ [[https://github.com/waldobronchart/ShortcutMapper][Waldobronchart/ShortcutMapper]]
  - Exactly what I'm looking for, except printable.
  - It should be fairly trivial to get [[https://github.com/noctuid/general.el][noctoid/general.el]] to output the last
    =X-*= modifier-key pair, for a mode/context.
  - From here, ShortcutMapper's python lib can interpret the bindings and
    generate the keyboard description metadata.

*** Parsers

+ [[github:divvun/xkb-parser][divvun/xkb-parser]] (rust) XKB format parser
  - and it parses the geometry files ... well kinda (FIXME)

*** Desktop Tools

+ [[https://github.com/xkbmon/xkbmon][xkbmon/xkbmon]] display keyboard layout in taskbar (dwm, i3, tmux, etc)

*** Layout Mgmt/Conversion

+ [[https://github.com/divvun/kbdgen][divvun/kbdgen]] (rust) generate keyboards for many platforms from one spec
  - example project: [[github:giellalt/keyboard-sme][giellalt/keyboard-sme]]
+ [[github:alexriss/keyboard-layout-converter][alexriss/keyboard-layout-converter]]
  - convert windows layout to xkb symbols using python

**** KLFC

+ [[https://github.com/39aldo39/klfc][39aldo39/klfc]] Keyboard Layout Files Creator is a tool to create advanced
  keyboard layouts in various formats. Currently, exporting to XKB, PKL, KLC,
  keylayout, TMK and AHK is supported.
+ [[https://git.42l.fr/neil/klf2tux][git.42l.fr/neil/klf2tux]] Converts Keyboard Layout Files to TUXEDO Computers SVG
  keyboard layout.
+ [[https://github.com/tuxedocomputers/keyboard-layouts][tuxedocomputers/keyboard-layouts]] layout SVG's for various models

**** ijprest/keyboard-layout-editor

+ [[https://github.com/ijprest/keyboard-layout-editor][ijprest/keyboard-layout-editor]] editor, generates SVG output given a JSON spec
  - [[https://github.com/ijprest/keyboard-layout-editor/tree/master/samples][JSON for example keyboards]]
  - [[https://github.com/ijprest/kle-serial][ijprest/kle-serial]] automates de/serialization
+ [[https://github.com/Albert-S-Briscoe/xkbprint-kle][Albert-S-Briscoe/xkbprint-kle]] can generate JSON for keyboard descriptions

** Guides
+ [[https://emacsnotes.wordpress.com/2022/10/30/use-xkb-to-setup-full-spectrum-of-modifiers-meta-alt-super-and-hyper-for-use-with-emacs/][Use XKB to setup a full spectrum of modifiers (meta, alt, super, hyper)]]
+ [[How to modify a keyboard layout in Linux][How to modify a keyboard layout in linux]]
+ [[https://emacsnotes.wordpress.com/2022/10/30/use-xkb-to-setup-full-spectrum-of-modifiers-meta-alt-super-and-hyper-for-use-with-emacs/][mw8/white_keyboard_layout]] crazy analysis of keyboard layouts
  - both the analysis and diagrams are in rust
+ [[https://github.com/pfaion/x1carbon-xkb-geometry][pfaion/x1carbon-xkb-geometry]]

** Docs
+ [[github:freedesktop/xkbprint][freedesktop/xkbprint]]: print a keyboard layout

*** TODO produce freedesktop/xkbprint pdf's for emacs mode
+ go from list of bindings/modes in a context (along with configuration for how
  to split up modkeys in final render)
  - to org with tables (chance to customize what's displayed)
  - to largeformat xkbprint output
  - to PDF via ps2pdf
+ if it's big enough to display keycodes, it's large enough to print, especially
  if you interleave pages sent to =ps2pdf= with pages that further describe
  keycodes
+ however, getting emacs and org-exports latex to produce tables is simple
  enough for now

** Firmware
*** Embedded
+ [[https://docs.qmk.fm/#/newbs][QMK]] (quatum mechanical keyboards)
  - [[github:qmk/qmk_firmware][qmk/qmk_firmware]]
  - [[github:mihaiolteanu/mugur][mihaiolteanu/mugur]]
  - [[https://github.com/qmk/qmk_firmware/tree/master/data/schemas][QMK JSON Schemas]]
    
* Hardware

* Keycaps

#+begin_example text

I've never actually worked alongside someone who uses the cool "half & half" two
handed keyboards. Maybe in passing. I AM ISOLATED ... do I sound repititive? I
can explain how I end up in the extreme margins of 5,000 distributions.

I spent quite a lot of time customizing my macbook keyboards but somehow had no
idea that you can buy a keyboard that allows loading custom firmware.

I was able to engage/connect with like-minded people at VWCC about technology, including
keyboards/etc. but the DEA manipulated the supply of Amphetamine precursors. I
can deal without having Adderal, but I can't deal with 2-3 hours of phone calls
and pharmacy/doctor drop-ins ... on and off for days _and_ weeks.

Those might just be the FAFSA funds I would receive, if I didn't drop out.

#+end_example

** 3D Printable
+ (Riskable) [[https://3dprintingindustry.com/news/these-open-source-levitating-keyboard-switches-can-be-3d-printed-at-home-202645/][These open-source, levitating keyboard switches can be 3D printed at home]]
  - requires a hall-effect sensor per key. this could be expensive.
** Keycap Design Types/Ideas

Why springs/buttons? Or the butterfly switch thingies with the conductive
traces?

What else could be used?

*** Compliant Mechanism

This won't hold up to the mechanical forces, but it's the first thing that
popped into my head.

*** Ferrofluid-based pressure sensor
By itself, it's terrible for a keyboard. it would feel very wierd and your
keyboard might leak toxic chemicals. But with the right tweaks ... who knows?
If designed with the proper materials, a fluid-based mechanism would hold up to
mechanical wear.


* Drivers

* MacOS

**  [[https://karabiner-elements.pqrs.org/][Karabiner]]

The main problem i wanted to solve: add a modifier key that I knew had zero
existing mappings, so I could be sure there were no conflicts. i mostly used OSX
at the time, where solving the hyper problem didn't result in a satisfactory
solution: =ctrl+alt+shift+mac= isn't a true hyper, but emacs and the wm could
recognize it.

*** [[https://karabiner-elements.pqrs.org/docs/][Docs]]
*** Resources
**** [[https://github.com/dcunited001/dc.files.kbd][dc.files.kbd]]

i added an uber key using the to defunct capslock mapped from escape.

[[https://karabiner-elements.pqrs.org/][karabiner]] is slightly more extensible than XKB -- or better documented. The
linux window managers mask a lot of the complexity which can complicate
resolving ambiguity the libs/projects actually providing some functionality

Karabiner allows mappings where key-release events on modifiers/capslock can
become a modkey map. XKB has the same functionality ... but I don't think anyone
knows how to use it. One feature XKB lacks is the ability to map simultaneous
keypresses. So "up+right" can be "home" and "down+right" can be "end." Not all
that usefuland hard to configure with modifiers.

*** Issues

* Loadkeys
:PROPERTIES:
:ID:       f5ab9438-334c-4e39-a26e-7200a5ee30a0
:END:

** Docs

+ man loadkeys :: loads the kernel keymap for the console(s)
+ man dumpkeys :: dumps the kernel keymap
+ man keymaps :: actually explains wtf to do

as usual, the answer to pretty much everything for hackers: just use startx or
don't use a window manager. start your apps from the console like a real
man. compile patched libsixel ... it'll put some hair on your chest. X11 is
where all your problems start ... until wayland. i'm not a hacker, but no person
serious about securing their setup would use a window manager on their main,
regardless of whether its windows/macos/linux. way too much exposure.

either i didn't find loadkeys or when it did, i lacked sufficient understanding
of the abstractions in linux to remember it ... probably didn't know it was
console-specific.

** Resources
+ [[https://www.emacswiki.org/emacs/LoadKeys][EmacsWiki]]
+ [[https://wiki.archlinux.org/title/Linux_console/Keyboard_configuration][Linux Console Keyboard Config]]
+ [[https://boxmatrix.info/wiki/Property:setkeycodes][https://boxmatrix.info/wiki/Property:setkeycodes]]
** Topics

*** Kharis (basically an HP Dev One)

The output from =dumpkeys [options]= varies between keyboards.

** Includes

There are includes and they're necessary. If you simply remap keycodes, strange
things may happen. For example, using the following without the include may
cause your control key to "lock" and never unlock. Then alphanumeric keys will
start causing their "control" action.

** Caps to Control

Just link to the appropriate include

#+begin_src conf :tangle .local/share/kbd/caps-as-control.inc
include "linux-with-alt-and-altgr.inc"

keycode 58 = Control
#+end_src

On my HP laptop, remapping caps to control in console will occasionally get
stuck in emacs & maybe elsewhere. This doesn't reset until you switch vty's. It
may be a key combination that causes the kernel interpretation of keybindings to
get stuck with bad modkey bits. It is limited to the caps key. If the control
key glitched, then it would be difficult to switch terminals.

There's probably something I'm not configuring, but ascertaining the state is
cumbersome without scripts. Hopefully =kmscon= becomes more accessible.

*** vconsole.conf

Apparently, you can configure this with =vconsole.conf=

I found in this commit from [[https://github.com/jsoo1/dotfiles/commit/fd686ea1874451987c3b0ae30749a2e48007c27f][jsoo1/dotfiles]].

#+begin_quote
Note: you really don't want to get this wrong or you may need to chroot your
guix system. (see notes below...)
#+end_quote

This is needed in =/etc/vconsole.conf= very early on in system init.

#+begin_src scheme
;; not sure the file-union approach works here, since that would require
;; directly targeting /etc
(define-public %kharis-loadkeys-vconsole
  (extra-special-file "/etc/vconsole.conf" (plain-file "KEYMAP=/etc/vconsole.Caps2Ctrl.map\n")))
(define-public %kharis-loadkeys-caps2ctrl
  ;; don't want to add to /usr/share/keymaps/
  (extra-special-file "/etc/vconsole.Caps2Ctrl.map" (plain-file "keymaps 0-255\nkeycode 58 = Control\n"))
#+end_src

vconsole.conf

#+begin_src conf
# KEYMAP=/usr/share/keymaps/Caps2Ctrl.map
KEYMAP=/etc/vconsole.Caps2Ctrl.map
#+end_src

vconsole.Caps2Ctrl.map

#+begin_src conf
keymaps 0-255
keycode 58 = Control
#+end_src

I'm not even sure it will work ... the [[https://man.archlinux.org/man/vconsole.conf.5.en][vconsole.conf manpage]] says

#+begin_quote
=/etc/vconsole.conf= is usually created and updated using
=systemd-localed.service(8)=.

=localectl(1)= may be used to instruct =systemd-localed.service= to query or update
configuration.
#+end_quote

Hmmm... There must be a service that causes =localectl= to pick up the keymaps

Actually, Guix =operating-system= specifies a console keyboard, but I'm
unsure of how to customize =KEYMAP= rather than simply specify a keyboard.
Bundling the file into =/usr/share/keymaps/Caps2Ctrl.map= as a package may be
a better way.

** Issues
*** Finding includes/configs/keymaps

Do a =find $keymaps -name includes -type d= to find the includes, which are
analogous to the X11 includes like =caps:hyper= or =ctrl:hyper_capscontrol=

+ on traditional systems :: /usr/share/kbd/keymaps
+ on guix systems :: /run/current-system/profile/share/keymaps

*** Updates


*** Getting key codes

the command needs to be run like =setkeycodes $scancode $keycode=.

+ showkey -s :: get the scan code
+ showkey -k :: get the key code



*** Generating Configs

* GNU Readline
:PROPERTIES:
:ID:       584a7cd2-8a2d-4d5f-b8e5-f012e21562ea
:END:

** Docs
+ [[https://readline.kablamo.org/emacs.html][Readline Cheat Sheet]]
+ [[https://tiswww.cwru.edu/php/chet/readline/readline.html][Readline Manuals]]. Info also in the Bash Manual

** Resources
+ [[https://zwischenzugs.com/2019/04/23/the-missing-readline-primer/][The Missing Readline Primer]]
** Topics

*** Keybindings.

Run =bind -f $file= to emit your current bindings to a script.

Other useful Bash bindings:

+ C-x C-e :: open $EDITOR and evaluate the buffer as command when it closes.

**** Testing Configs

[[https://community.hpe.com/t5/operating-system-hp-ux/stty-erase-stty-werase/td-p/5283019][HPE Community: setting keybindings using stty and testing with =exec bash=]]
*** Clipboard
**** Send to clipboard without =xclip=

#+begin_quote
This did seem to work, now it's not. One computer on wayland; another on X11.
#+end_quote

+ Use =C-@= or =M-<space>= to set mark.
+ Use =C-x C-x= to show mark -- by exchanging point's current position with
  marked. This can be confusing because it changes the current mark
  position. And the text must be highlighted to kill/copy.
+ =M-w= will always copy text highlighted text to clipboard (like Emacs). This
  works using mark & move commands or with mouse.
+ =C-w= will always kill the text, but it won't copy it

#+begin_src sh :tangle .bashrc :shebang #!/bin/sh
# enable set-mark (overrides control sequences like unix-word-rubout)
# set bind-tty-special-chars off

# for some reason, i still need to undef C-w (so i don't need the above
# ... removing, since my changes did not fix the problem)
#
# stty werase undef

# enable copy/paste
bind '"\C-@":set-mark'
bind '"\e ":set-mark'
bind '"\C-w":kill-region'
bind '"\ew":copy-region-as-kill'

# now i know this is more common

# also M-tab for `dynamic-complete-history`
#+end_src

Find =rl_tty_set_default_bindings= in the readline source to see exactly what
it does (no time). This [[https://stackoverflow.com/a/23558325][s/o answer]] explains ... and i guess =stty -a= will
tell you what's mapped by default.

| erase | =^?=      | kill  | =^U=      | eof     | =^D=      | werase | =^W= |      |    |
| eol   | =<undef>= | eol2  | =<undef>= | swtch   | =<undef>= |        |    |      |    |
| rprnt | =^R=      | lnext | =^V=      | discard | =^O=      |        |    |      |    |
| intr  | =^C=      | quit  | =^\=      | start   | =^Q=      | stop   | =^S= | susp | =^Z= |


*** Garuda

Garuda Readline:

- Guix System seems to draw it's inputrc bindings from readline defaults
- Garuda patches readline defaults with this:

- both consistently use the \e escape syntax, but home-inputrc-service-type
  replaces this with "M-" meta syntax

#+begin_example
;; # do not bell on tab-completion
;; # set bell-style none

set meta-flag on
set input-meta on
set convert-meta off
set output-meta on

$if mode=emacs

;; # for linux console and RH/Debian xterm
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[7~": beginning-of-line
"\e[3~": delete-char
"\e[2~": quoted-insert
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word
"\e[1;5C": forward-word
"\e[1;5D": backward-word

;; # for rxvt
"\e[8~": end-of-line

;; # for non RH/Debian xterm, can't hurt for RH/DEbian xterm
"\eOH": beginning-of-line
"\eOF": end-of-line

;; # for freebsd console
"\e[H": beginning-of-line
"\e[F": end-of-line
$endif
#+end_example


* Window Managers
** [[id:39e14ffe-75c9-49e6-b852-6c492c4ee3e0][KDE]]

** [[id:7bb87626-77c3-4577-ace4-40b791202f4e][Gnome]]

+ [[https://help.gnome.org/users/gnome-help/stable/keyboard-layouts.html.en][Use alternative keyboard layouts]]

* [[id:f92bb944-0269-47d4-b07c-2bd683e936f2][Wayland]]

* Issues

** Tracking Down XKB Issues in Arch/KWin Wayland

#+begin_quote
It turns out that the main issue is, when using the =custom:types= option in the
KDE configuration, KWin will fail if this file isn't defined by the user. The
rest of the section contains misc information that's mostly incidental to KWin.
#+end_quote

 =kwin= is issuing these logs when I change keyboard configs.

#+begin_example
Unrecognized RMLVO variant "ctrl:hyper_capscontrol" was ignored
Unrecognized RMLVO variant "lvl3:menu_switch" was ignored
Unrecognized RMLVO variant "lvl3:ralt_alt" was ignored
Couldn't find file "types/custom" in include paths
2 include paths searched:
        /home/dc/.config/xkb
        /usr/share/X11/xkb
2 include paths could not be added:
        /home/dc/.xkb
        /etc/xkb
Abandoning keytypes file "(unnamed)"
Failed to compile xkb_types
Failed to compile keymap
#+end_example

*** Ensure =kwin 5.27.8= package is built with =libxkbcommon 1.5.0-1=7

+ For now I've disabled FCITX. KWin definitely needs stable keybindings before
  that. The delays in input handling may be causing other issues.
+ If I enable the =custom:types= option, it needs to exist.
+ For some reason, sway recognizes these =lvl3:.*= and =ctrl:.*= with colons
  only and other systems seem to require =level3(ralt_alt)= or similar. I think
  i've seen patches in XKB that rename these symbols. This may be the build,
  even though Arch has =kwin 5.27.8=

**** Determining what XKB version Kwin is built with

I don't have control over how Arch has built KWin, so even though it accepts
=libxkbcommon= as a dependency, I think many of the wayland libraries are a
static dependency, esp. the closer you get to the compositor. The dependencies
are between four and eight levels deep, but =libxkbcommon= is a direct
dependency of =qt5-base= ... which you need to rebuild your whole system:
[[https://aur.archlinux.org/packages/qt5-base-git][Required by (2934)]]. So basically, I'm not sure I want to do that, being on a
custom flavor of arch.

#+begin_src sh :results output pp
pactree  -r libxkbcommon | grep kwin
#+end_src

#+RESULTS:
: │ │ │     ├─kwin-bismuth-git
: │ │ │   │   └─kwin
: │ │ │   │     ├─kwin-effects-sliding-notifications
: │ │ │   │     ├─kwin-scripts-forceblur
: │ │ │ │ │ │ │ │ └─kwin
: │ │ │ │ │ │ │ │ └─kwin
: │ │ │ │ │ │ │ │ ├─kwin
: │ │ │ └─kwin
: │ │ │ ├─kwindowsystem

Nevermind, these are all dynamic.

#+begin_example asm
lines from buffer: kwin_wayland
Symbol table '.dynsym' contains 2100 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
    225:   221: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN4KWin6Effect20grabbedKeyboardEventEP9QKeyEvent
    412:   408: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNK20QPlatformIntegration22queryKeyboardModifiersEv@Qt_5_PRIVATE_API (4)
    653:   649: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNK14KWaylandServer13SeatInterface8keyboardEv
    856:   852: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN14KWaylandServer13SeatInterface35focusedKeyboardSurfaceAboutToChangeEPNS_16SurfaceInterfaceE
   1000:   996: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNK4KWin24KeyboardInputRedirection3xkbEv
   1167:  1163: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN14KWaylandServer17KeyboardInterface7sendKeyEjNS_16KeyboardKeyStateEPNS_16ClientConnectionE
   1209:  1205: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN4KWin14EffectsHandler12mouseChangedERK6QPointS3_6QFlagsIN2Qt11MouseButtonEES7_S4_INS5_16KeyboardModifierEES9_
   1305:  1301: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNK14KWaylandServer17KeyboardInterface14focusedSurfaceEv
   1316:  1312: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN14KWaylandServer17KeyboardInterface13sendModifiersEjjjj
   1869:  1865: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN4KWin16QuickSceneEffect20grabbedKeyboardEventEP9QKeyEvent
   1875:  1871: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZN15QPlatformWindow22setKeyboardGrabEnabledEb@Qt_5_PRIVATE_API (4)
   1980:  1976: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZNK14QPlatformTheme11keyBindingsEN12QKeySequence11StandardKeyE@Qt_5_PRIVATE_API (4)
#+end_example



*** Check the typical logs

The =journalctl= ... why did i not check really this? I kept checking it for
emacs and for other things.......

It says right here: "it broke"

#+begin_example journalctl
Sep 25 07:35:40 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event6  - Dell KB216 Wired Keyboard: client bug: event processing lagging behind by 2>
Sep 25 07:42:38 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event6  - Dell KB216 Wired Keyboard: client bug: event processing lagging behind by 2>
Sep 25 07:46:15 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: client bug: timer event2 debounce short: scheduled expiry is in the past (-21ms), you>
Sep 25 07:46:30 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event6  - Dell KB216 Wired Keyboard: client bug: event processing lagging behind by 2>
#+end_example

And here:

#+begin_example journalctl
Sep 25 04:50:24 kratos systemd-coredump[1617573]: [🡕] Process 390188 (kded5) of user 1000 dumped core.

Stack trace of thread 390188:
#0  0x00007f58714ac83c n/a (libc.so.6 + 0x8e83c)
#1  0x00007f587145c668 raise (libc.so.6 + 0x3e668)
#2  0x00007f58730e088f _ZN6KCrash19defaultCrashHandlerEi (libKF5Crash.so.5 + 0x788f)
#3  0x00007f587145c710 n/a (libc.so.6 + 0x3e710)
#4  0x00007f5871901c88 _XGetRequest (libX11.so.6 + 0x44c88)
#5  0x00007f58718f77a9 XQueryExtension (libX11.so.6 + 0x3a7a9)
#6  0x00007f5870494b2f n/a (libXtst.so.6 + 0x2b2f)
#7  0x00007f5870495d06 XTestQueryExtension (libXtst.so.6 + 0x3d06)
#8  0x00007f584dab429a n/a (libkhotkeysprivate.so.5 + 0x3129a)
#9  0x00007f584daa5f84 _ZN8KHotKeys19KeyboardInputAction7executeEv (libkhotkeysprivate.so.5 + 0x22f84)
#10 0x00007f584da9e45d _ZN8KHotKeys10ActionData7executeEv (libkhotkeysprivate.so.5 + 0x1b45d)
#11 0x00007f5871cd0cf3 n/a (libQt5Core.so.5 + 0x2d0cf3)
#12 0x00007f5872b6bbb7 _ZN7QAction9triggeredEb (libQt5Widgets.so.5 + 0x16bbb7)
#13 0x00007f5872b7160b _ZN7QAction8activateENS_11ActionEventE (libQt5Widgets.so.5 + 0x17160b)
#14 0x00007f5871cd0b37 n/a (libQt5Core.so.5 + 0x2d0b37)
#15 0x00007f586c6291ad n/a (libKF5GlobalAccel.so.5 + 0x161ad)
#16 0x00007f586c6295e3 n/a (libKF5GlobalAccel.so.5 + 0x165e3)
#17 0x00007f587280276e n/a (libQt5DBus.so.5 + 0x2176e)
#+end_example

And especially here:

#+begin_src journalctl
Sep 25 07:28:46 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event2  - Razer Razer Basilisk: client bug: event processing lagging behind by 41ms, >
Sep 25 07:30:41 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event2  - Razer Razer Basilisk: client bug: event processing lagging behind by 21ms, >
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "ctrl:hyper_capscontrol" was ignored
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "lvl3:menu_switch" was ignored
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "lvl3:ralt_alt" was ignored
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Couldn't find file "types/custom" in include paths
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: 2 include paths searched:
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB:         /home/dc/.config/xkb
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB:         /usr/share/X11/xkb
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: 2 include paths could not be added:
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB:         /home/dc/.xkb
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB:         /etc/xkb
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Abandoning keytypes file "(unnamed)"
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Failed to compile xkb_types
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Failed to compile keymap
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "ctrl:hyper_capscontrol" was ignored
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "lvl3:menu_switch" was ignored
Sep 25 07:31:15 kratos kwin_wayland[3613065]: kwin_xkbcommon: XKB: Unrecognized RMLVO variant "lvl3:ralt_alt" was ignored
Sep 25 07:31:21 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event2  - Razer Razer Basilisk: client bug: event processing lagging behind by 37ms, >
Sep 25 07:31:21 kratos kwin_wayland[3613065]: kwin_libinput: Libinput: event2  - Razer Razer Basilisk: WARNING: log rate limit exceeded (5 msgs per 60min). >
#+end_src
