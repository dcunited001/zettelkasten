:PROPERTIES:
:ID:       3d2330da-5a95-408a-b940-7d2b3b0c7fb2
:END:
#+TITLE: Keyboard
#+DESCRIPTION: Info on keyboards, whether x11/wayland or software/hardware or just docs
#+TAGS:

* Roam
+ [[id:8c6d7cdd-74af-4307-b1df-8641752a1c9f][Xorg]]

* Docs
+ [[https://deskthority.net/wiki/][Deskthority]]: all about keyboards

* Resources

* Layouts

** Hardware
+ [[https://configure.zsa.io/ergodox-ez/layouts/default/latest/0][Ergodox EZ Default Layout]]
+ manabu
+ [[https://github.com/system76/launch/blob/master/pcb-lite-iso/launch-lite-iso.kicad_prl][System76/launch]]

** Software
+ [[www.keyboard-layout-editor.com][Keyboard Layout Editor]]
+ [[github:manabu/keyboard-layout-image-generator][manabu/keyboard-layout-image-generator]]
+ [[github:alexriss/keyboard-layout-converter][alexriss/keyboard-layout-converter]]
  - convert windows layout to xkb symbols using python
+ [[https://github.com/xkbmon/xkbmon][xkbmon/xkbmon]] display keyboard layout in taskbar (dwm, i3, tmux, etc)
+ [[https://github.com/divvun/kbdgen][divvun/kbdgen]] (rust) generate keyboards for many platforms from one spec
  - example project: [[github:giellalt/keyboard-sme][giellalt/keyboard-sme]]
+ [[github:divvun/xkb-parser][divvun/xkb-parser]] (rust) XKB format parser
  - and it parses the geometry files ... well kinda (FIXME)
+ [[https://github.com/waldobronchart/ShortcutMapper][Waldobronchart/ShortcutMapper]]
  - Exactly what I'm looking for, except printable.
  - It should be fairly trivial to get [[https://github.com/noctuid/general.el][noctoid/general.el]] to output the last
    =X-*= modifier-key pair, for a mode/context.
  - From here, ShortcutMapper's python lib can interpret the bindings and
    generate the keyboard description metadata.

** Guides
+ [[https://emacsnotes.wordpress.com/2022/10/30/use-xkb-to-setup-full-spectrum-of-modifiers-meta-alt-super-and-hyper-for-use-with-emacs/][Use XKB to setup a full spectrum of modifiers (meta, alt, super, hyper)]]
+ [[How to modify a keyboard layout in Linux][How to modify a keyboard layout in linux]]
+ [[https://emacsnotes.wordpress.com/2022/10/30/use-xkb-to-setup-full-spectrum-of-modifiers-meta-alt-super-and-hyper-for-use-with-emacs/][mw8/white_keyboard_layout]] crazy analysis of keyboard layouts
  - both the analysis and diagrams are in rust
+ [[https://github.com/pfaion/x1carbon-xkb-geometry][pfaion/x1carbon-xkb-geometry]]

** Docs
+ [[github:freedesktop/xkbprint][freedesktop/xkbprint]]: print a keyboard layout

*** TODO produce freedesktop/xkbprint pdf's for emacs mode
+ go from list of bindings/modes in a context (along with configuration for how
  to split up modkeys in final render)
  - to org with tables (chance to customize what's displayed)
  - to largeformat xkbprint output
  - to PDF via ps2pdf
+ if it's big enough to display keycodes, it's large enough to print, especially
  if you interleave pages sent to =ps2pdf= with pages that further describe
  keycodes
+ however, getting emacs and org-exports latex to produce tables is simple
  enough for now

** Firmware
*** Embedded
+ [[https://docs.qmk.fm/#/newbs][QMK]] (quatum mechanical keyboards)
  - [[github:qmk/qmk_firmware][qmk/qmk_firmware]]
  - [[github:mihaiolteanu/mugur][mihaiolteanu/mugur]]
    
* Hardware

* Keycaps

#+begin_example text

I've never actually worked alongside someone who uses the cool "half & half" two
handed keyboards. Maybe in passing. I AM ISOLATED ... do I sound repititive? I
can explain how I end up in the extreme margins of 5,000 distributions.

I spent quite a lot of time customizing my macbook keyboards but somehow had no
idea that you can buy a keyboard that allows loading custom firmware.

I was able to engage/connect with like-minded people at VWCC about technology, including
keyboards/etc. but the DEA manipulated the supply of Amphetamine precursors. I
can deal without having Adderal, but I can't deal with 2-3 hours of phone calls
and pharmacy/doctor drop-ins ... on and off for days _and_ weeks.

Those might just be the FAFSA funds I would receive, if I didn't drop out.

#+end_example

** 3D Printable
+ (Riskable) [[https://3dprintingindustry.com/news/these-open-source-levitating-keyboard-switches-can-be-3d-printed-at-home-202645/][These open-source, levitating keyboard switches can be 3D printed at home]]
  - requires a hall-effect sensor per key. this could be expensive.
** Keycap Design Types/Ideas

Why springs/buttons? Or the butterfly switch thingies with the conductive
traces?

What else could be used?

*** Compliant Mechanism

This won't hold up to the mechanical forces, but it's the first thing that
popped into my head.

*** Ferrofluid-based pressure sensor
By itself, it's terrible for a keyboard. it would feel very wierd and your
keyboard might leak toxic chemicals. But with the right tweaks ... who knows?
If designed with the proper materials, a fluid-based mechanism would hold up to
mechanical wear.


* Drivers

* MacOS

**  [[https://karabiner-elements.pqrs.org/][Karabiner]]

The main problem i wanted to solve: add a modifier key that I knew had zero
existing mappings, so I could be sure there were no conflicts. i mostly used OSX
at the time, where solving the hyper problem didn't result in a satisfactory
solution: =ctrl+alt+shift+mac= isn't a true hyper, but emacs and the wm could
recognize it.

*** [[https://karabiner-elements.pqrs.org/docs/][Docs]]
*** Resources
**** [[https://github.com/dcunited001/dc.files.kbd][dc.files.kbd]]

i added an uber key using the to defunct capslock mapped from escape.

[[https://karabiner-elements.pqrs.org/][karabiner]] is slightly more extensible than XKB -- or better documented. The
linux window managers mask a lot of the complexity which can complicate
resolving ambiguity the libs/projects actually providing some functionality

Karabiner allows mappings where key-release events on modifiers/capslock can
become a modkey map. XKB has the same functionality ... but I don't think anyone
knows how to use it. One feature XKB lacks is the ability to map simultaneous
keypresses. So "up+right" can be "home" and "down+right" can be "end." Not all
that usefuland hard to configure with modifiers.

*** Issues

* XKB (X11)
:PROPERTIES:
:ID:       ee958185-81f4-42bd-abd0-5ad1801deeca
:END:

** Docs
+ [[https://github.com/xkbcommon/libxkbcommon][libxkbcommon/libxkbcommon]]
+ [[https://people.freedesktop.org/~alanc/input/XKB-Config.html][The XKB Configuration Guide]] (Ivan U. Pascal)
  - one of those things that probably should've shown up on Google earlier
    ... but didn't
+ [[https://github.com/haata/KeyboardLayouts/tree/master][haata/KeyboardLayouts]]
+ [[https://www.x.org/docs/XKB/XKBproto.pdf][The X Keyboard Extension: Protocol Spec]] (nineteen ninety six... and it's official)
  - another one of those "little things" that should've shown up in Google
    search results, i donno, maybe the first time i seriously looked into xkb.
    probably 2011/2012 i think? it never did. the best thing i found was Ivan's
    guide in like 2016.
+[[https://gitlab.freedesktop.org/xkeyboard-config/xkeyboard-config][xkeyboard-config]] (freedesktop gitlab)
   - [[https://github.com/JuliaBinaryWrappers/Xorg_xkeyboard_config_jll.jl][Generated Julia binary wrapper for xkeyboard-config]] (and [[https://github.com/JuliaBinaryWrappers/Xorg_xkbcomp_jll.jl][xkbcomp]] and so on)

** Resources
+ [[https://www.reddit.com/r/linux/comments/1ydiu7/howto_different_xkb_config_for_only_certain/][Howto: Different xkb config for only certain attached evdev keyboards]]
+ [[https://www.reddit.com/r/linux/comments/ttj6yo/comment/i2y7xhi/?utm_source=share&utm_medium=web2x&context=3][r/linux comment(s) describing what's wrong with X11 input handling]]
+ XKB layout template generator: [[https://gitlab.freedesktop.org/whot/xkblayout][gitlab.freedesktop.org/whot/xkblayout]]
  - [[https://who-t.blogspot.com/2020/09/user-specific-xkb-configuration-putting.html][User-specific XKB configuration generation]]

** Issues
*** identifier for =ctrl:swapcaps_hyper= renamed to =ctrl:hyper_capscontrl=

+ [[https://gitlab.freedesktop.org/xkeyboard-config/xkeyboard-config/-/issues/344]['Hyper' symbol options behave inconsistently]] (it references: [[https://gitlab.freedesktop.org/xkeyboard-config/xkeyboard-config/-/issues/344][#344]])
  - the old =swapcaps_hyper= name still works, since it's defined in
    =rules/compat/variantsMapping.lst=

#+begin_src c
// Swap the functions of the CapsLock key and the left Ctrl key,.
// but make the Ctrl key a 'Hyper' modifier.
partial modifier_keys.xkb_symbols "swapcaps_hyper" {
    replace key <CAPS> { [ Control_L ] };
    replace key <LCTL> { [ Hyper_L ] };
    modifier_map Control { <CAPS> };
    modifier_map Mod3 { <LCTL> };
}
#+end_src

*** Dependencies for guix show =libxkbcommon=
+ it looks like both Arch and Guix use libxkbcommon (1.5.0, 1.3.0 respectively)
  - =xkeyboard-config= provides the configs
+ libxkbcommon depends on =xkeyboard-config= for keymap data




* XKB Common
** Docs
+ [[https://github.com/xkbcommon/libxkbcommon][xkbcommon/libxkbcommon]] see the [[https://github.com/xkbcommon/libxkbcommon/blob/master/doc/][doc]] directory

** Resources

+ [[https://wayland-book.com/seat/xkb.html][A wayland-book section on XKB Common]]

*** X11/Wayland Integration

+ This [[https://unix.stackexchange.com/a/355428][s/o answer]] describes how different compositors handle keymaps in wayland.

*** Python

+ [[github:sde1000/python-xkbcommon][sde1000/python-xkbcommon]]
+ [[github:sde1000/python-xkbregistry][sde1000/python-xkbregistry]]
+ [[https://github.com/abo-abo/xkb-indicator][abo-abo/xkb-indicator]] a utility to provide xkb status for a GTK panel

*** Registry and evdev

+ Debian [[https://packages.debian.org/sid/main/libxkbregistry-dev][libxkbregistry-dev]]
+ [[https://github.com/xkbcommon/libxkbcommon/issues/123][xkbcommon/libxkbcommon#123]] this discusses adding an API for the evdev.xml
  registry
+ See [[https://github.com/xkbcommon/libxkbcommon/blob/eafd3aceca97d4984070115ec67f639b045b0d65/doc/user-configuration.md#discoverable-layouts][discoverable layouts]] in user-configuration.md

** Config

*** General

The bad news is that each program that handles keyboard input in a different way
needs to be configured in its own way.

+ So.... KDE, xwayland, etc must necessarily handle input differently. KDE may
  propagate changes to XWayland.
+ This makes keyboard config changes kinda delicate: when updating the keyboard,
  you need to ensure that all consumers of the keyboard configuration are
  updated. This further complicates configuration of programs like =fcitx= and
  =moz=.


*** XWayland

Use =setxkbmap=

*** evdev.xml

The =evdev.lst= and =evdev.xml= files historically provided a registry for
X11. They are a PITA to deal with:

+ Most X11 GUI tools hide much of the details from you -- like providing the
  =evdev.xml= descriptions instead of the actual X11/XKB =option= ID's, which
  makes it a nuissance to figure out what keyboard options you need when you
  invoke =setxkbmap=.
+ They also don't expect to find anything in =XDG= paths, nor do they give you
  any options for adding to paths they search. As issue #123 mentions,
  =evdev.xml= is hardcoded.
+ Editing =evdev.xml= requires =sudo=, is prone to typos and quite often your
  changes get erased by package updates.
+ From what I infer from years of using XKB, there just haven't been many tools
  available for generating the XML. It's always been something I did by hand.

*** XDG

See [[https://github.com/xkbcommon/libxkbcommon/blob/master/doc/user-configuration.md][user_configuration.md]] for main overview. The main configuration location is
=~/.config/xkb=, but other paths are fine.


**** Include Paths

*** KDE (Garuda)

*** Sway


** xkbcli

The main bin shipped with packages is =xkbcli=

*** Search the xkbregistry =xkbcli list=

List user customizations. It tells you if it can't parse your config.

#+begin_src sh
xkbcli list --skip-default-paths $XKB
#+end_src

Use =yq= to process the output.


*** Compiling a keymap

Specify the XKB-specific options until you get output that looks right. With
=--rvmlo= it won't check the keymap.

#+begin_src sh
xkbcli compile-keymap \
       --model=$xmodel \
       --rules=$xrules \
       --layout=$xlayout \
       --variant=$xvariant \
       --options=$xoptions \
       --rvmlo --verbose
#+end_src

**** Where to place the keymap

 it might be that xkbcommon doesn't make any assumptions about where you put the
 compiled output. In wayland, the client applications deal with far more
 keyboard handling ... (which means i'm not looking forward to getting moz/fcitx
 to work on 7 different window managers)

Some of the tests provide more information, but they don't indicate what
consumes the =xkbcli= output.

+ filecomp.c this references a bunch of test data to catch parse errors, etc.
+ there are a few python tests that act as higher level integration tests


*** Determining whether changes are effective

Options that aren't recognized will result in errors (warnings basically)
telling you which ones are ignored.

If the keymap is compiling, then you can diff it. Remove the variants in one
invocation and diff the files.

#+begin_src sh

files=(novariants variants)
xoptions=("''" "lv3:menu_switch,ctrl:hyper_capscontrol,lv3:ralt_alt")
xmodel="pc(pc105)"
xrules=evdev
xlayout=us

indices=(0 1)
# imax=$((${#xoptions[@]} - 1)) ... jesus christ
iseq=$(seq 0 $((${#xoptions[@]} - 1))) # godamit
for i in  $indices ; do
    xkbcli compile-keymap \
           --model=$xmodel \
           --rules=$xrules \
           --layout=$xlayout \
           --variant=$xvariant \
           --options=${xoptions[$i]} \
        | grep -i mod > "/tmp/xkb/${files[$i]}"
done
#+end_src

Then =diff /tmp/xkb/*variants=

*** xkbcommon config explainer

#+begin_src sh :results output file :file img/xkb-configuration.svg
dot -Tsvg /data/ecto/sway/keyboard/libxkbcommon/doc/diagrams/xkb-configuration.dot
#+end_src

#+RESULTS:
[[file:img/xkb-configuration.svg]]


** Issues

*** Include Paths

**** Load Order

I misinterpreted a thing.

#+begin_quote
This one has the highest priority for user config, so if you distro-hop
and this path is used, no keyboards for you. Assume =$XKB= is this directory.
#+end_quote

... nevermind this is totally not correct. The =--include=~/.xkb= is redundant
And it also doesn't expand tildas.

#+begin_src sh
xkbcli compile-keymap --include-defaults --include="~/.xkb" \
       --model="pc(pc105fdsa)" \
       --rmlvo --verbose
#+end_src

Testing with the above script gives this output:

#+begin_quote
xkbcommon: DEBUG: Include path added: /home/dc/.config/xkb
xkbcommon: DEBUG: Include path added: /home/dc/.xkb
xkbcommon: DEBUG: Include path failed: /etc/xkb (No such file or directory)
xkbcommon: DEBUG: Include path added: /usr/share/X11/xkb
xkbcommon: DEBUG: Include path failed: ~/.xkb (No such file or directory)
rules: "evdev"
model: "pc(pc105fdsa)"
layout: "us"
variant: ""
options: ""
#+end_quote


*** Changes to variant names

Prefer colons instead of parens. The parens are deprecated.

+ =level3(ralt_alt)= should be =lv3:ralt_alt=
+ =ctrl:swapcaps_hyper= should be =ctrl:hyper_capscontrl=

** Development

The repo docs are setup around building/developing xkb.

You'll need tools like:

+ meson
+ doxygen
+ afl afl-utils :: this is built on top of other compilers like clang/gcc and
  instruments a built program with debugging symbols that facilitate fuzzing
+ clang14 llvm14 :: these are required by the =fuzz= meson build for
  =afl-clang-fast=. On arch, the package for AFL tool is built to require
  clang14 and llvm14

*** Fuzzing keyboard format

=libxkbcommon= includes utilitize to fuzz the imput format.

#+begin_quote
The xkb geometry files aren't supported in wayland by xkbcommon,
but they do still ship with X11. I would like to take those definitions and
include metadata to build SVG's for keymaps ... eventually.

Thus, I'm interested in finally cracking the XKB code... so I guess i'll be
taking this detour.
#+end_quote

To run the fuzzer, you need to setup the project build. When you run it for the
first time, it generates =fuzz/build= which is a Meson build dependent on the
root project's build definitions. You'll have to blow =fuzz/build= away and
restart after running =meson setup build=.

The first failure is at =Checking core_pattern...=

The tool may fail if =/proc/sys/kernel/core_pattern= is set to dump to an
external tool. Save the current value of the file, then follow AFL's
instructions to set it to =core=.

The next failure is at =Validating target binary...= and =afl-fuzz= reports the
binary is not instrumented. I looked at the symbols in =fuzz/build/fuzz-keymap=
using =elf-mode=, but didn't see anything obvious. For this task, the
dynamically linked libraries should need to be instrumented for fuzzing. The
fuzzing target only includes =config.h= or =xkbcommon/xkbcommon.h=.

I probably need to rebuild the =fuzz/build= target, but there could still be a
few issues:

+ =clang14= and =llvm14= weren't installed when the =afl= package was built. the
  absence may change the build for =afl= ... maybe
+ Cleaning out the build artifacts and restarting from scratch may do the
  trick. its not clear how meson/ninja would invalidate older build artifacts
  for differential builds, esp if it's clang14 that's changed and some build
  config artifacts were dynamically generated with the wrong values.
+ I don't know anything about meson/ninja, so if it's only generating /some/ of
  the req. references to llvm14 in places, then it would be hard for me to
  tell. There doesn't seem to be a =meson clean= task, so ... I donno.

xkbcommon's fuzzer isn't intended to be widely used, so it may be intended to
build on a system where only llvm14 is present. I checked and the yay package
doesn't relink =clang= to =clang14=, but it's hard to know ... so this is where
I stop lol.

... ahhh and meson includes =.gitignore= in the =build= directory it generates,
which is why I couldn't determine the projects' file delta. my
=project-find-file= must take these into account.

* Loadkeys
:PROPERTIES:
:ID:       f5ab9438-334c-4e39-a26e-7200a5ee30a0
:END:

** Docs

+ man loadkeys :: loads the kernel keymap for the console(s)
+ man dumpkeys :: dumps the kernel keymap
+ man keymaps :: actually explains wtf to do

as usual, the answer to pretty much everything for hackers: just use startx or
don't use a window manager. start your apps from the console like a real
man. compile patched libsixel ... it'll put some hair on your chest. X11 is
where all your problems start ... until wayland. i'm not a hacker, but no person
serious about securing their setup would use a window manager on their main,
regardless of whether its windows/macos/linux. way too much exposure.

either i didn't find loadkeys or when it did, i lacked sufficient understanding
of the abstractions in linux to remember it ... probably didn't know it was
console-specific.

** Resources
+ [[https://www.emacswiki.org/emacs/LoadKeys][EmacsWiki]]
+ [[https://wiki.archlinux.org/title/Linux_console/Keyboard_configuration][Linux Console Keyboard Config]]
+ [[https://boxmatrix.info/wiki/Property:setkeycodes][https://boxmatrix.info/wiki/Property:setkeycodes]]
** Issues
*** Finding includes/configs/keymaps

Do a =find $keymaps -name includes -type d= to find the includes, which are
analogous to the X11 includes like =caps:hyper= or =ctrl:hyper_capscontrol=

+ on traditional systems :: /usr/share/kbd/keymaps
+ on guix systems :: /run/current-system/profile/share/keymaps

*** Updates


*** Getting key codes

the command needs to be run like =setkeycodes $scancode $keycode=.

+ showkey -s :: get the scan code
+ showkey -k :: get the key code



*** Generating Configs

* Window Managers
** [[id:39e14ffe-75c9-49e6-b852-6c492c4ee3e0][KDE]]

** [[id:7bb87626-77c3-4577-ace4-40b791202f4e][Gnome]]
+ [[https://help.gnome.org/users/gnome-help/stable/keyboard-layouts.html.en][Use alternative keyboard layouts]]

* [[id:f92bb944-0269-47d4-b07c-2bd683e936f2][Wayland]]

* Issues
