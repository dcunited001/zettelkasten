:PROPERTIES:
:ID:       a0ef7bfe-1587-4fec-ac87-f7dda5dc0d22
:END:
#+TITLE: Maths: Category Theory
#+DESCRIPTION: The Shapes of Clouds and Stuff
#+TAGS:

* Roam
+ [[id:a24b12f8-b3e3-4f66-9a5c-f29b715e1506][Math]]


* Docs
+ [[wikipedia:Category_theory][wikipedia:Category_theory]]
+ [[https://ncatlab.org/nlab/show/category+theory][nCatLab: Category Theory]]

* References

** Category Theory for Programmers

After setup, happily build the free [[https://github.com/hmemcpy/milewski-ctfp-pdf][Category Theory For Programmers PDF]]. This
requires adding the following.

#+begin_src nix :tangle .config/nix/nix.conf :mkdirp yes :comments none
extra-experimental-features = nix-command flakes
#+end_src


* Oidification (ncatlab)

** Categories (ncatlab)

*** Differential/Integral

Differential algebra/[[https://ncatlab.org/nlab/show/differential+algebroid][algebroid]]

+ Examples:
  + Treesitter :: syntax highlighting by connecting (δ-text -> δ-AST) to restructure
    +

** Algebras (ncatlab)

* Applications of Monoids and Monads

** Enumeration of Coxeter Groups (via string rewriting)

I can't ever find this video when I need it

+ [[https://www.youtube.com/watch?v=BV5mYjh8m4E][The Coxetor Classification: Combinatorics Is Hard (Part 1)]]
+ [[https://www.youtube.com/watch?v=NrtN-l9ZDtU][The Coxetor Classification: Who Cares About Representation Theory (Part 2)]]

All programs are strings operating on strings with rules. This is the bridge
from the Turing to Church. This method to enumerate all the finite & specific
infinite coxeter groups is a set of restrictions on a monoid with an alphabet.
Apply the rules (algorithm) and you can provably reduce the domain into a set of
irreducible Coxeter Groups. In other words, it's a combinator method, since the
solution (the correct logic) always reaches a fixpoint, even if that fixpoint is
an infinit string.
