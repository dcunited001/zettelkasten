:PROPERTIES:
:ID:       36a06198-0746-4533-be8b-0fe50a52967f
:END:
#+TITLE: Clojure
#+DESCRIPTION: The Clojure language
#+TAGS:

* Docs

* Resources

* Topics
** GUI

*** HumbleUI

*** Skija/Skia

** Editors

*** Emacs

+ [[github:jpe90/emacs-clj-deps-new][jpe90/emacs-clj-deps-new]]

** [[https://leiningen.org/tutorial.html][Leiningen]]
Lein installs to =~/.m2/repository=, which is Maven's [[https://maven.apache.org/settings.html#settings-details][local user repository]]

** CLI

*** tools.deps

+ [[https://github.com/clojure/tools.gitlibs][clojure/tools.gitlibs]] for working with deps referring to git repos
  (local/remote)

*** Starters


** Clojars

A [[https://www.deps.co/guides/public-maven-repositories/#clojars][public maven repository]] to distribute clojure deps/jars

*** API

There is an [[https://github.com/clojars/clojars-web/wiki/Data][API]] for [[https://github.com/clojars/clojars-web][clojars/clojars-web]], which combines well with
[[https://github.com/clojure/tools.deps.graph][tools.deps.graph]].

+ [[https://github.com/clojars/clojars-web/wiki/Data#lucene-index-of-maven-artifacts][Clojars Lucene Index]]
+ [[https://github.com/clojars/clojars-web/wiki/Data#download-stats][Clojars Stats]]

*** Maven

**** [[https://ask.clojure.org/index.php/13446/tools-deps-get-the-source-dependencies-without-downloading][Get the source of dependencies without downloading JARs]]

+ use [[https://github.com/clojure/tools.deps/blob/0a0a78c08eb7e794ea7d7cc51cd210ed5a5e291e/src/main/clojure/clojure/tools/deps.clj#L195][tools.deps/lib-location]]
+ mentioned in relation to caching deps for [[https://github.com/griffinbank/rules_clojure][griffinbank/rules_clojure]] when
  automating clojure builds with bazel



* Issues


* Clojure



* Clojurescript

** Docs

+ [[https://github.com/thheller/shadow-cljs][shadow-cljs]]

** Resources
*** Jupyter

See [[github:noteablemind/jupyter-nodejs][noteablemind/jupyter-nodejs]] and [[https://nbviewer.org/gist/jaredly/404a36306fdee6a1737a][example on nbviewer]]. Can probably load the
cljs extension from a shadowcljs build

** Topics
*** CLI
*** Figwheel
**** Examples
[[https://gitlab.com/ozzloy/b1ng0][= ozzloy/b1ng0]]
*** UIx
**** Apps

[[github.com:samcf/ogres][samcf/ogres]] a virtual DnD tabletop (start [[https://github.com/samcf/ogres/blob/623b14d6c1a7b8e814e86770c6e8518aa2883e31/src/main/ogres/app/core.cljs#L32][here in core.cljs]] and trace from there to the scene graph via provider.image)

*** CLJS Builds

**** Foreign Libs

See [[https://cljs.github.io/api/compiler-options/foreign-libs][:foreign-libs]] docs

#+begin_quote
Allows you to include and convert JavaScript libraries that are not proper
Google Closure namespacesâ€”if they are, use =:libs= instead. For an easier way to
include libraries from npm use =:npm-deps:=.
#+end_quote

This and ES6 module support may require some use of =:preprocess=

**** JS Module Support

+ [[https://clojurescript.org/reference/javascript-module-support][JavaScript Module Support]]

*** Cherry & Squint

[[github:squint-js/squint][squint-cljs]] compiles *.cljs directly to javascript *.mjs, but with mutable data
structures. [[github:squint-js/cherry][cherry]] has "closer Clojurescript semantics"

**** Playground
the keys are a bit tough, but it does compile this:
#+begin_src clojure
(require '["https://esm.sh/@luma.gl/core@9.1.9" :as lumaCore])
(require '["https://esm.sh/@luma.gl/engine@9.1.9" :as lumaEngine])
(require '["https://esm.sh/@luma.gl/shadertools@9.1.9" :as lumaSt])
(require '["https://esm.sh/@luma.gl/webgpu@9.1.9" :as lumaWebgpu])
(require '["https://esm.sh/@math.gl/core@4.1.0" :as mc])

(ns quicktest)

(defn my-cool-fn [x]
  (str
    "This is cool! "
    (+ 1 2 3 x)))

(my-cool-fn 3)

mc
#+end_src

It outputs this, but I'm unsure of whether it runs. It does /compile/ though. No
time.

#+begin_src javascript

var cherry_core = await import('cherry-cljs/cljs.core.js');
globalThis.quicktest = globalThis.quicktest || {};
var lumaCore = await import('https://esm.sh/@luma.gl/core@9.1.9');
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.lumaCore = lumaCore;
var lumaEngine = await import('https://esm.sh/@luma.gl/engine@9.1.9');
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.lumaEngine = lumaEngine;
var lumaSt = await import('https://esm.sh/@luma.gl/shadertools@9.1.9');
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.lumaSt = lumaSt;
var lumaWebgpu = await import('https://esm.sh/@luma.gl/webgpu@9.1.9');
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.lumaWebgpu = lumaWebgpu;
var mc = await import('https://esm.sh/@math.gl/core@4.1.0');
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.mc = mc;
globalThis.quicktest = globalThis.quicktest || {};
globalThis.quicktest.my_cool_fn = (function (x) {
  return cherry_core.str.call(null, "This is cool! ", (1) + (2) + (3) + (x));
});
return globalThis.quicktest.my_cool_fn.call(null, 3);;
return globalThis.quicktest.mc;;
#+end_src

*** ClojureDart

+ [[https://github.com/Tensegritics/ClojureDart][Tensegritics/ClojureDart]]



*** [[https://github.com/thheller/shadow-cljs][shadow-cljs]]
**** Setup (arch)

+ project types: [[https://ask.clojure.org/index.php/11901/calva-project-type-shadow-cljs-vs-deps-edn-shadow-cljs][shadow-cljs vs shadow-cljs + deps.edn]])
**** Builds
+ [[https://www.lzeitlin.xyz/cljs-openlayers.html][Making a geo PWA with CLJS and Openlayers]]. goes through a very simple build
  with clojurescript.

***** ESM

+  [[https://widdindustries.com/blog/clojurescript-importmap.html][Clojurescript using JS libraries via importmap]] as the cherry example above

**** Example Projects

***** ovistoica

+ [[https://www.ovistoica.com/blog/20241022T064828--uix-shadowcljs-revolutionizing-clojure-ssr-for-interactive-landing-pages__clojure_clojurescript_react_shadowcljs_uix][UIx + ShadowCLJS: Revolutionizing Clojure SSR for Interactive Landing Pages]]
+ ovistoica/clojure-saas-boilerplate
  
***** metosin
+ [[github:metosin/shadow-cljs-esbuild][metosin/shadow-cljs-esbuild]]

***** pitch-io
[[github:pitch-io/uix-starter][pitch-io/uix-starter]]

*** Browser Extensions

**** Chrome ext v3

[[https://github.com/thheller/shadow-cljs/issues/902][thheller/chrome-ext-v3]] loading clojurescript repl in pages that don't have it

+ [[https://github.com/thheller/shadow-cljs/issues/902][theller/shadow-cljs#902]] discussion about getting cljs to run as extension with v3
+ unsafe-eval :: required for hot-reloading (only? does it require [[https://gist.github.com/blake-ctrl/778db8715556d1bc1af00338a8d755b9][this patch]]?) 
+ [[https://github.com/binaryage/cljs-devtools/blob/master/docs/installation.md][Enable custom formatters in devtools console]] for =[devtools.preload]=

[[https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/api-samples/userScripts][chrome.userScripts API]]

***** Closure

=goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;=

=goog.provide= i think requires module names to satisfy [[https://github.com/google/closure-library/blob/master/closure/goog/base.js#L387-L395][this regex]] (no hyphens)
but other =chromex= apps do not follow these conventions.

*** Projects

**** thing.geom

+ [[https://github.com/thi-ng/geom/blob/feature/no-org/org/examples/svg/demos.org][svg demos (org)]]
+ [[https://github.com/thi-ng/geom/blob/feature/no-org/org/examples/gl/webgl.org][webgl demos]] the links still point to running demos ... 

**** [[https://github.com/adam-james-v/solenoid][adam-james-v/solenoid]]

*** Org Babel



* Roam
+ Java
+ [[id:4cdfd5a2-08db-4816-ab24-c044f2ff1dd9][Programming]]



*** links
+ [[https://github.com/Quantisan/docker-clojure?tab=readme-ov-file][docker-clojure]]

+ [[https://github.com/seancorfield/deps-new][seancorfield/deps-new]]

+ [[https://github.com/pitch-io][pitch-io]] (uix)
