:PROPERTIES:
:ID:       1fd23f33-ec84-47e2-b326-dce568f1ae83
:END:
#+TITLE: Web Design
#+DESCRIPTION:
#+TAGS:

* Docs

* Resources

* Topics
** PWA: Progressive Web Apps

*** Docs
+ PWA [[https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/web-manifest.json][web_manifest.json]] schema

*** Ideas

**** Connect PWA to XDG Desktop Files

Suppose you want to integrate a webapp into a Linux WM or Desktop Env

So you make a PWA, but now you want to make many versions of it -- since
the URL/Domain become fairly straightforward parameters.

+ This would be a bit difficult do with packages (you're building something
  designed for & adapted to your own systems & your own personal use)
+ You'd prefer WASM, something native or something besides Node/Electron
+ TODO: finish disambiguating this

#+begin_quote
You don't mind a javascript or browser runtime, but you would rather have an
opaque-yet-singular binary than to have 200 dependencies loaded by Electron,
which I know next to nothing about.... though I guess it's straightforward to
make PWA's for it.
#+end_quote

***** From the webapp's PWA

You create...

+ a set of startup scripts: to preprocess/permute CLI calls when passing to the
  application to initialize (were it not a web app...)
+ at least one desktop file: to enumerate the composition of CLI tasks into
  high-level XDG Desktop Actions (that are sensible to hoomans)
+ DEFINITELY: a prefix for the window title (in Nyxt, =titler= or
  ='window-default-title=)
+ maybe some simple specification of events the user should receive notifications for
+ maybe some DBus service calls (... idk)

***** XDG/PWA Overlap

Okay, so the PWA and XDG Desktop specs overlap quite a bit.

+ What fields connects the PWA schema to the XDG =*.desktop= specification?
+ What are the most core components? The idea here is to make a system for
  templating/managing app & automation integrations where these are mostly bound
  to the system (or at least the LAN)

If the application is deployed to several places -- _maybe_ via private packages
or Guix/Nix -- then how do you make this simple enough for noobs to benefit?
... While avoiding objects/secrets getting lodged in the =/gnu/store=

#+begin_quote
I'm assuming that my own needs govern how I should structure the solution here

How do you decide which concepts to lock into which data structures?
#+end_quote

***** Nyxt Profiles via XDG =.desktop= Files

For me, it would make sense to run ad-hoc and saved Nyxt profiles:

+ the Nyxt init may result from somewhat dynamic scripts (XDG Desktop allowing
  args to create ad-hoc profiles) or the user creates a =.desktop= file with
  static values
+ Each instance requires socket (and maybe PID file management)
+ It would be nice if themes from emacs could be "partially type-lifted" to
  simple Nyxt themes (but probably not published online). Given distinct color
  and distinct Window Title, it's easy to move around the Desktop Env. This
  would then combine well with KDE Window Rules.
+ One instance must be the "main" instance, with stable registration on D-Bus
  and designated to be the only handler for =nyxt:= protocol. Similarly, the
  other SSB apps need to have adhoc logging into their own =/tmp= or whatever.
+ The main instance would use it's own Nyxt configruation entry point and the
  PWA's would share a different =Site-specific-browser= config entry point

This allows you to create fairly locked down browsers with something like
"dependency injection" of common modules into the Nyxt SSB for things like:
Domain policy, privacy, security, history, etc.

If security is an issue, then [[https://help.ubuntu.com/community/AppArmor][AppArmor]] may be a good fit (see [[https://wiki.ubuntu.com/Security/Features#apparmor][features]]), so long
as it's easy to manage the instances of these applications.

#+begin_quote
And I just realized...

.......... Jesus christ I'm reinventing Flatsnaps aren't I.  Dammit.  "Simpsons
did it!" ... but they didn't do it with CommonLisp
#+end_quote

***** Nyxt's advantages are pretty clear

There are similar benefits to other browsers and even Chrome/Firefox/etc could
be used like this

+ PWA to run Javascript or bundled WASM where it's integrated onto the desktop
+ Javascript (and maybe greasemonkey...) for interacting close a web server or
  browser runtime.
+ Commonlisp (and many features of Nyxt) for gluing together solutions or
  automation. It seems like its featureset hasn't been fully tapped yet -- there
  are a ton of creative features (it's like a framework for writing customized
  browser micro-extensions and it's fairly easy to work with if familiar with
  Emacs/Lisp)
+ Fairly simple compartmentalization with some complexity... Honestly besides
  the package ecosystems for 3-4 prog langs, it doesn't get much simpler than
  this.

TODO: any other advantages here?

* CSS3

** Resources
*** Flexbox & Grid
+ yoksel [[https://yoksel.github.io/flex-cheatsheet/][flex-cheatsheet]] and [[https://yoksel.github.io/grid-cheatsheet/][grid-cheatsheet]]


** Topics

*** New Features

+ [[https://developer.chrome.com/blog/whats-new-css-ui-2023#color-mix][color-mix()]] See the gradient widget
+ [[https://developer.chrome.com/blog/whats-new-css-ui-2023#individual_transform_properties][individual transform properties]]

*** Transformations and Animations

[[https://web.dev/articles/css-individual-transform-properties][Fine-grained control over CSS transforms]]


 
* TailwindCSS
**  Docs
** Resources
** Component Frameworks



* Issues

* Roam
