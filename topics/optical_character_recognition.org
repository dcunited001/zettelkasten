:PROPERTIES:
:ID:       092144e0-651b-4cfe-93e4-ac3e6eedf290
:END:
#+TITLE: OCR: Optical Character Recognition
#+DESCRIPTION:
#+TAGS:

* Roam
+ [[id:4ab045b9-ea4b-489d-b49e-8431b70dd0a5][Data Science]]

* Docs

* Resources
** Apps


* Topics
** PDF Extraction
Archwiki: [[https://wiki.archlinux.org/title/PDF,_PS_and_DjVu][PDF,_PS_and_DjVu]]

Not really OCR, technically
*** Python
+ [[https://github.com/py-pdf/pypdf][py-pdf/pypdf]] seems alright, does table extraction

**** Camelot

+ [[https://github.com/camelot-dev/camelot/wiki/Comparison-with-other-PDF-Table-Extraction-libraries-and-tools][Comparison with other PDF Table Extraction libraries and tools]]

**** Tabula

Java with a python wrapper. Includes a Dockerfile

**** PyMuPDF-Utilities

Projects

+ [[https://github.com/pymupdf/PyMuPDF][pymupdf/PyMuPDF]]
+ [[https://github.com/pymupdf/PyMuPDF-Utilities][pymupdf/PyMuPDF-Utilities]]

Examples

+ [[https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/extract-table][Extract Table]] older example
+ [[https://pymupdf.readthedocs.io/en/latest/recipes-text.html#how-to-extract-table-content-from-documents][Text Recipes: Page.find_table()]]

This can fix PDF format issues, print to device (save PDF file) or convert to
postscript. I was hoping for something faster.

***** Usage/API

It's super easy to work with. Not sure how to:

+ get the colab Jupyter to completion on command.
+ get =pymupdf= to work with a URL or buffer instead of a file. meh.

  So, a few links/


| [[https://pymupdf.readthedocs.io/en/latest/page.html#Page.find_tables][page.find_table(...)]] | specing the parameters is worth it

** Document Formats
*** PDF

**** XRef Table

[[https://pymupdf.readthedocs.io/en/latest/recipes-low-level-interfaces.html][PyMuPDF shows how to reflect on a PDF's =xref= table]]. It also shows (in depth)

| Page Contents | PDF Catalog (names of other objects) | PDF File Trailer

*** Ghostscript

This can fix PDF format issues, print to device (save PDF file) or convert to
postscript. I was hoping for something faster.

* Tesseract
** Docs
** Resources
** Topics

*** Configuration

**** Service Integration

*** Data

**** Streaming Integration



* Dockerfile (remove)

........


#+begin_src Dockerfile
ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
/bin/sh -c set -eux; apt-get
/bin/sh -c set -eux; apt-get
/bin/sh -c set -ex; apt-get
ENV LANG=C.UTF-8
RUN /bin/sh -c set -eux;
ENV GPG_KEY=A035C8C19219BA821ECEA86B64E628F8D684696D
ENV PYTHON_VERSION=3.10.13
RUN /bin/sh -c set -eux;
RUN /bin/sh -c set -eux;
ENV PYTHON_PIP_VERSION=23.0.1
ENV PYTHON_SETUPTOOLS_VERSION=65.5.1
ENV PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/dbf0c85f76fb6e1ab42aa672ffca6f0a675d9ee4/public/get-pip.py
ENV PYTHON_GET_PIP_SHA256=dfe9fd5c28dc98b5ac17979a953ea550cec37ae1b47a5116007395bfacff2ab9
RUN /bin/sh -c set -eux;
CMD ["python3"]
RUN /bin/sh -c apt-get update
RUN /bin/sh -c apt-get install
RUN /bin/sh -c curl -fsSL
RUN /bin/sh -c code-server --install-extension
USER 1000
ENV HOME=/tmp
RUN /bin/sh -c /usr/local/bin/python -m
RUN /bin/sh -c pip3 --no-cache-dir
USER root
WORKDIR /app
RUN /bin/sh -c apt-get updateShell command on region:
RUN /bin/sh -c pdfinfo -v
COPY /install /usr/local # buildkit
COPY . /app # buildkit
RUN /bin/sh -c chmod -R
ENTRYPOINT ["python" "main.py"]
#+end_src
