:PROPERTIES:
:ID:       bb8bbe7c-6d49-4088-9161-2ae2edb4abd6
:END:
#+TITLE:     Ontology
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes


* Resources

* Semantic Web

The semantic web project from W3C developes several [mostly] XML-based standards
defining meta-schema that form the basis for data/information classification.
With OWL, RFC, SKOL, etc, any data can be classified to fit into an ontological
schema. SPARQL is used to query data structured according to OWL/RFC/SKOL schema
docs.

** Docs

+ [[https://www.w3.org/2001/sw/SW-FAQ][W3C Semantic Web FAQ]]
+ [[https://www.w3.org/TR/?filter-tr-name=&status%5B%5D=standard][All The Standards]]

*** RDF

+ [[https://www.w3.org/TR/rdf11-mt/][Semantics]]
+ [[https://www.w3.org/TR/rdf11-concepts/][Concepts and Abstract Syntax]]

**** That's not canon

Also, there's [[RDF Dataset Canonicalization][RDF Dataset Canonicalization]], so that Blue Sky admins can make
"That's not canon" jokes while tweaking their SPARQL clusters to censor you. The
hashing provides performance enhancements, so that processing doesn't require
inflating large graphs in order to reason about previously ingested data. That's
not really what RDF was intended for, but it is actually an application. "Over
there are the parts of the ontologies /that we don't platform./"

See the sections on hashing and especially the one on [[https://www.w3.org/TR/rdf-canon/#dataset-poisoning][Dataset Poisoning]], which
really confirms for me quite a bit of what I was seeing occasionally on socia
media -- it seemed that I would be warped to a "shit stream-processing shard"
and that quite a bit of my newsfeed was manipulated. This section doesn't
describe that, per se, but it is apropos to some of the "grey hat or black hat"
social media marketing techniques that would enable such.

* Schemata

Considering there are so many of these, a few factors should prioritize your
discovery of OWL/RDF documents:

+ Dependencies :: The fewer dependencies that a fairly central schema has, the
  more useful it is. This inflates the memory (& thereby compute) required to
  represent ontological structures. You'd like less, not more.
+ Age :: Humans living in the USA during the dotcom boom were the very first to
  discover ontologies, so we should consider their oldest endeavors to probably
  be more critical.
+ References :: Given a database of RDF documents, reference counting may help.

The xmlns attributes from the top-level =<rdf/>= tag should be enough to start
spidering the RDF docs. They are themselves examples of RDF data -- i.e. the XML
documents that describe ontologies are themselves artifacts of data in the same
format. They are composed of "[[Semantic triple][semantic triples]]" framed with context, which
itselfs forms a basis for [[https://www.w3.org/TR/2014/REC-n-quads-20140225/][quads]], though I can't quite find info to confirm
that..

See this [[https://github.com/w3c/sdw/blob/gh-pages/time/rdf/abraham-lincoln.ttl][abraham-lincoln.ttl]] for an example. These just don't open/close =owl:=
tags to define new OWL things (afaik...)



** Topics

*** Overview

Quite a few of these one-off RDF's can be found in the w3c github. There are
overviews on the main page.

|----------------+----------|
| Concept        | Repo     |
|----------------+----------|
| Space and Time | [[https://github.com/w3c/sdw][w3c/sdw]]  |
| Data and Stuff | [[https://github.com/w3c/dxwg][w3c/dxwg]] |
|                |          |
|----------------+----------|

**** Space and Time

The main ontologies defined here are those prefixed with =time= and =ssn=, though
the latter Sensor Sensor Network continues in another repository

Quite a few "Turtle" files here in [[github:w3c/sdw][w3c/sdw]]. Most of these are just examples.
[[https://github.com/w3c/sdw/blob/gh-pages/time/rdf/time.rdf][time.rdf]] is the main artifact, which itself contains these xlmns tags ... on
second thought, better use [[https://github.com/w3c/sdw/blob/gh-pages/time/rdf/time.ttl][time.ttl]] -- the =.ttl= format is superior in every way,
mainly because you can grep the top lines without worrying about running it
through =tide=.

Time is fairly fundamental, so we can assume that these =@prefix= schemata are
fairly good next leads.

#+begin_src shell :results output table
curl -s "https://raw.githubusercontent.com/w3c/sdw/refs/heads/gh-pages/time/rdf/time.ttl" |\
    head -n10 | grep '@prefix'  | sed -E 's/^.*@prefix ([a-zA-Z0-9]*): <(.*)>.*$/\1, \2/g'
#+end_src

#+RESULTS:
|      | http://www.w3.org/2006/time#                |
| dct  | http://purl.org/dc/terms/                   |
| owl  | http://www.w3.org/2002/07/owl#              |
| rdf  | http://www.w3.org/1999/02/22-rdf-syntax-ns# |
| rdfs | http://www.w3.org/2000/01/rdf-schema#       |
| skos | http://www.w3.org/2004/02/skos/core#        |
| xsd  | http://www.w3.org/2001/XMLSchema#           |

**** Data and Stuff

From the DCAT3 schema. See [[https://www.w3.org/TR/vocab-dcat/][vocab-dcat]]

#+begin_src shell :results output table
curl -s "https://raw.githubusercontent.com/w3c/dxwg/refs/heads/gh-pages/dcat/rdf/dcat.ttl" |\
    head -n20 | grep '@prefix'  | sed -E 's/^.*@prefix ([a-zA-Z0-9]*): <(.*)>.*$/\1, \2/g'
#+end_src

#+RESULTS:
| adms    | http://www.w3.org/ns/adms#                  |
| bibo    | http://purl.org/ontology/bibo/              |
| dcat    | http://www.w3.org/ns/dcat#                  |
| dcterms | http://purl.org/dc/terms/                   |
| dctype  | http://purl.org/dc/dcmitype/                |
| foaf    | http://xmlns.com/foaf/0.1/                  |
| org     | http://www.w3.org/ns/org#                   |
| owl     | http://www.w3.org/2002/07/owl#              |
| prov    | http://www.w3.org/ns/prov#                  |
| pav     | http://purl.org/pav/                        |
| rdf     | http://www.w3.org/1999/02/22-rdf-syntax-ns# |
| rdfs    | http://www.w3.org/2000/01/rdf-schema#       |
| sdo     | http://schema.org/                          |
| skos    | http://www.w3.org/2004/02/skos/core#        |
| vann    | http://purl.org/vocab/vann/                 |
| vcard   | http://www.w3.org/2006/vcard/ns#            |
| xhv     | http://www.w3.org/1999/xhtml/vocab#         |
| xsd     | http://www.w3.org/2001/XMLSchema#           |

This schema is composed of seven main classes (see [[https://w3c.github.io/dxwg/dcat/#dcat-scope][DCAT scope]])

[[file:img/dcat-rdf.svg]]

*** Academic

**** Datacite

Metadata schema for citation, so academics can cite a park bench.

The main page for [[https://schema.datacite.org/meta/kernel-4.6/index.html][Version 4.6]] is the same page that comes up as you click every
other link ... this is very helpful for any academics who may get lost.
Everything is well-cited, no doubt, but it wouldn't hurt to double check.

The docs here are pretty good. One could hope for more diagrams. Though there
are some, we know that you can't wait for that [[https://datacite-metadata-schema.readthedocs.io/_/downloads/en/4.6/pdf/][200 page PDF]] on an XSD to print
out, so you have something to read while you get coffee. It is XSD though, so
there are at least 100s of tools one may use to create diagrams, but let's not
nitpick when there are tax dollars at stake. The PDF is comprehensive though,
but it's going to occupy at least a monitor.

#+begin_quote
Your search - =site:https://schema.datacite.org/ ext:svg= - did not match any
documents.
#+end_quote

To be fair, generating additional docs like that increase the maintenance
burden, but holy shit why create something that's any more difficult to learn to
use than necessary?

* JSON
** Open API

+ [[https://mathematica.stackexchange.com/questions/310671/how-can-i-visualize-openapi-json-schemas-in-mathematica][How to visualize OpenAPI JSON schemas in Mathematica?]] answers illustrate how
  to approach vis. design/layout.

visualization

+ [[https://github.com/OAIE/oaie-sketch?tab=readme-ov-file][OAIE Sketch]] alright, simple, available on the web. no obvious exports.

** JSON-LD
** JSON Schema

[[https://json-schema.org/][JSON Schema]]:

+ [[https://json-schema.org/implementations#documentation-generators][documentation generators]]
+ [[https://json-schema.org/implementations#code-generation][code generation]]

parsers

+ [[https://github.com/APIDevTools/json-schema-ref-parser][APIDevTools/json-schema-ref-parser]] (non-cyclic)
+ [[https://github.com/sagold/json-schema-library][APIDevTools/json-schema-library]]

visualization

+ [[https://github.com/AykutSarac/jsoncrack.com][AykutSarac/jsoncrack.com]] ... why wasn't this showing up in google?
+ [[https://github.com/schlothauer-wauer/jsoncodegen][schlothauer-wauer/jsoncodegen]] (groovy; generates plantuml)
+ [[https://github.com/OkieOth/yacg][OkieOth/yacg]] (python; generates plantuml/protobuf) and [[github:OkieOth/nibelheim_ts][OkieOth/nibelheim_ts]],
  which demonstrates generation using yacg
+ [[https://github.com/chrusty/protoc-gen-jsonschema][chrusty/protoc-gen-jsonschema]]: Convert protobuf messages to JSON Schema.
  written in =go= and built with =bazel=. contains a directory of [[https://github.com/chrusty/protoc-gen-jsonschema/tree/main/jsonschemas][jsonschemas]] with
  the wellknown google types.
+ example of [[https://jsitor.com/BBMYqTkZ3][jsonschema -> mermaid]]
+ [[https://github.com/atlassian-labs/json-schema-viewer][atlassian-labs/json-schema-viewer]] doesn't seem to work
+ [[https://github.com/shamilnabiyev/schema-visualizer][shamilnabiyev/schema-visualizer]]

Plantuml will actually [[https://plantuml.com/json][visualize JSON]] (just JSON). For simple stuff, it works
pretty well. Chokes on JSON Schema though.

*** Framework

**** [[https://github.com/bufbuild][bufbuild]]

+ [[https://github.com/bufbuild][Github]]
+ [[https://buf.build/docs/bsr/][Buf Schema Registry]]: store/retrieve schema modules, versioned. Like schema
  registries for kafka
+ [[https://buf.build/docs/bufstream/#as-a-pure-kafka-replacement][Bufstream]]: a revision of Kafka with more modern tools (write directly to
  iceberg, avoiding ETL to persist kafka records/data and also maybe avoiding
  cluster issues). Paid product though.
+ code generation and protobuf dep graph visualization

Buf is a framework for gRPC and Kafka servics.
*** Code Generation

**** YACG

I've checked in on this project several times over the past few years. I thought
I had used it before, but idk.

+ You definitely need to read through the code to use this project... meh,
  nothing gained for free. See notes on CLI options for templates
+ Checking through the =./bin= scripts helps, esp for cli syntax
  - =stdout= is handled as a keyword for templates.
  - single/multi file templates don't require parameters
+ It can error on JSON schema 07, but the yacg logging shows where these are
  - not many tools handle much beyond that anyways, so 04 and 07 are the
    standards.
  - but you likely just need to filter out parts of the schema. Unless there are
    cycles or a =$ref= used widely this should be easy.
  - Atlassian [[https://json-schema.app/view/%23?url=https%3A%2F%2Fraw.githubusercontent.com%2Fsrl-labs%2Fvscode-containerlab%2Frefs%2Fheads%2Fmain%2Fschema%2Fclab.schema.json][JSON Schema Viewer]] has validation/conversion tools which spotted
    errors for me.

***** Validation with =ajv=

#+begin_quote
=certificate-config.issue= was missing ={type: boolean}=
#+end_quote

Setup =ajv=

#+begin_example shell
tt=$(mktemp -d)
cd $tt && cp $clab/schema/clab.schema.json .

node install ajv

node <<EOF
const Ajv = require('ajv');
//const ajv = new Ajv();
const ajv = new Ajv({strict: "log"});       // ahh
const clab = require('./clab.schema.json');
validate = ajv.compile(clab);
// shits bed on missing key
EOF
#+end_example

Remove keys

#+begin_src shell
schema=clab.schema.json
nsch() { echo $(basename -s $schema).$1.json; } # probably dont()
cp $schema $(nsch 0)
grep '"markdownDescription"' |  wc -l
jq 'del(..|.markdownDescription?)' $(nsch 0) > $(nsch 1)
echo $(nsch 0) $(nsch 1) | xargs -n1 wc -l
# comm -3 $(nsch 0) $(nsch 1) | wc -l # ... you know what? xargs -$#B@!$#@! sha | sort |uniq |wc
# `tide` would do it better
#+end_src

Or just set:

+ =const ajv = new Ajv({strict: "log"});=
+ =ajv.addKeyword(markdownDescription);=

***** Runthrough

check code

#+begin_example shell
t=$(mktemp -d)
yacg=$t/yacg
clab=$t/clab
git clone https://github.com/okieoth/yacg $yacg
git clone https://github.com/srl-labs/containerlab

cd $yacg
cat bin/buildDockerImage.sh Dockerfile  | less
#+end_example

Build image. a few things, not a big deal

+ some of the examples reference the wrong image tag
+ the image builds with the =ghcr.io= in the image name

#+begin_example shell
./bin/buildDockerImage.sh
#+end_example

copy in the schema. it's JSON Schema '07, note relevant sections

#+begin_example shell
cp /data/ecto/clab/srl-labs/containerlab/schemas/clab.schema.json resources/
mkdir resources/puml
#+end_example

Check the difference between =--singleFileTemplates= and =--multiFileTemplates=

+ The example =--{single,multi}FileTemplates plantuml=stdout= isn't going to work. See
  =.mako= below. The lib expects you to mess around with its configs & templates.

#+begin_example shell
img=ghcr.io/okieoth/yacg:6.10.0
puml=/yacg/yacg/generators/templates/plantUml.mako
out=/resources/clab.schema.puml # /resources/puml # for multiFileTemplates
docker run -u $(id -u ${USER}):$(id -g ${USER}) \
  -v `pwd`/resources:/resources --rm -t $img \
  --models /resources/clab.schema.json \
  --singleFileTemplates $puml=$out \
  --templateParameters title="containerlab model" destFileExt="puml"
#  --multiFileTemplates $puml=$out \
#+end_example

The =--multiFileTemplates= for JSON Schema end up with mostly the same content,
probably because of the dependencies between models.

I don't fully understand the codebase, but many property names are in =kebab-case=
which still need to be converted to =CamelCase=. This fixes many of them, but some
are recursively constructed (like for maps/lists). There's codegen for protobuf,
golang and several other languages, so idk. No time. Regexp fixes it.

#+begin_example diff
diff --git a/yacg/model/modelFuncs.py b/yacg/model/modelFuncs.py
index 371c6e6..d048d7f 100644
--- a/yacg/model/modelFuncs.py
+++ b/yacg/model/modelFuncs.py
@@ -225,9 +225,12 @@ def isComplexType(typeObj):

     return isinstance(typeObj, model.ComplexType)

+def ensureCamelCase(name):
+    return "".join([w.capitalize() for w in name.split("-")])

 def getTypeName(type):
-    return type.name if hasattr(type, 'name') else type.__class__.__name__
+    name = type.name if hasattr(type, "name") else type.__class__.__name__
+    return ensureCamelCase(name)


 def separateOpenApiPathTypes(types):
#+end_example

Starting from output from the above patch

#+begin_src shell :results output verbatim
sed -E "s/^note .*$//g" img/clab/clab.schema.puml \
    > img/clab/clab.fixed.schema.puml
#  | sed -E 's/class (.*) as ([a-zA-Z0-9-]+) /class \1 as "\2" /g'
#+end_src

#+RESULTS:


#+begin_src shell :results output verbatim
#file link
d=$(pwd)/img/clab
plantuml -v -o $d -tsvg img/clab/clab.fixed.schema.puml
plantuml -v -o $d -tsvg img/clab/clab.links.schema.puml
#echo -n $f
#+end_src

#+RESULTS:




***** JQ? wtf

To get property names for top-level =ContainerlabTopologyDefinitionFile

#+begin_src jq :in-file img/clab/clab.schema.json :cmd-line "-j"
.definitions."node-config".properties | to_entries
  | map(.value |= {type: (."$ref" // .type // "string")}) # extra // bc user is null
  | map(.value |= {type: .type | split("/")[-1] })
  | map("\(.value.type) \(.key)") | join("\n")
       #  | add | (. // empty) | flatten
       #  | flatten(23.5) # not a problem
#+end_src

#+RESULTS:
#+begin_example
string image
string image-pull-policy
string restart-policy
string kind
string license
string type
string group
string startup-config
integer startup-delay
boolean enforce-startup-config
boolean auto-remove
array exec
array binds
array ports
object env
string user
string entrypoint
string cmd
labels labels
string runtime
ipv4-addr mgmt-ipv4
ipv6-addr mgmt-ipv6
string network-mode
number cpu
string memory
string cpu-set
string sandbox
string kernel
extras-config extras
config-config config
stages-config stages
dns-config dns
certificate-config certificate
healthcheck-config healthcheck
array aliases
#+end_example


well it was nice to think trivial =jq= would be somewhere between trivial and
[[https://www.youtube.com/watch?v=MvI6Z85EgVo][non-trivial jq]]. this wasn't going to handle references in constraints (but a
regexp would...)

#+begin_src jq :in-file img/clab/clab.schema.json
.. | [(select(type=="object" and has("definitions")) | .definitions | keys),
      (select(type=="object" and has("properties")) | .properties | keys)]
| flatten | select(length > 0) | join(",")
       #  | add | (. // empty) | flatten
       #  | flatten(23.5) # not a problem
#+end_src

#+RESULTS:
#+begin_example
"certificate-authority-config,certificate-config,config-config,dns-config,extras-config,healthcheck-config,ipv4-addr,ipv6-addr,labels,link-config-short,link-endpoint,link-host-interface,link-type-dummy,link-type-host,link-type-macvlan,link-type-mgmt-net,link-type-veth,link-type-vxlan,link-type-vxlan-stitched,link-vars,link-vxlan-remote,link-vxlan-udpport,link-vxlan-vni,mtu,node-config,stage-exec,stage-exec-list,stages-config,stages-enum,wait-for-config,mgmt,name,prefix,settings,topology"
"aliases,auto-remove,binds,certificate,cmd,config,cpu,cpu-set,dns,enforce-startup-config,entrypoint,env,exec,extras,group,healthcheck,image,image-pull-policy,kernel,kind,labels,license,memory,mgmt-ipv4,mgmt-ipv6,network-mode,ports,restart-policy,runtime,sandbox,stages,startup-config,startup-delay,type,user"
"type"
"kind"
"type"
"kind"
"type"
"endpoints,mtu,vars"
"endpoints,labels,mtu,type,vars"
"endpoint,host-interface,labels,mtu,type,vars"
"endpoint,host-interface,labels,mtu,type,vars"
"endpoint,host-interface,labels,mtu,type,vars"
"endpoint,labels,mtu,remote,type,udp-port,vars,vni"
"endpoint,labels,mtu,remote,type,udp-port,vars,vni"
"endpoint,labels,mtu,type,vars"
"interface,mac,node"
"mysocket-proxy,srl-agents"
"vars"
"issue,key-size,sans,validity-duration"
"interval,retries,start-period,test,timeout"
"options,search,servers"
"cert,key,key-size,validity-duration"
"configure,create,create-links,exit,healthy"
"exec,wait-for"
"exec,wait-for"
"exec,wait-for"
"exec,wait-for"
"exec,wait-for"
"node,stage"
"on-enter,on-exit"
"command,phase,target"
"bridge,ipv4-gw,ipv4-range,ipv4-subnet,ipv6-gw,ipv6-range,ipv6-subnet,mtu,network"
"defaults,kinds,links,nodes"
"arista_ceos,aruba_aoscx,bridge,checkpoint_cloudguard,cisco_8000,cisco_c8000v,cisco_cat9kv,cisco_csr,cisco_ftdv,cisco_iol,cisco_nxos,cisco_xrd,cisco_xrv,cisco_xrv9k,cumulus_cvx,dell_ftosv,dell_sonic,ext-container,fdio_vpp,freebsd,generic_vm,host,huawei_vrp,ipinfusion_ocnos,juniper_crpd,juniper_vjunosevolved,juniper_vjunosrouter,juniper_vjunosswitch,juniper_vmx,juniper_vsrx,keysight_ixia-c-one,linux,nokia_srlinux,nokia_sros,openbsd,ovs-bridge,rare,sonic-vm,sonic-vs"
"certificate-authority"
#+end_example


*** Editors

+ [[https://hackolade.com/][Hackolade]]
+ [[https://hackolade.com/help/JSONSchema2.html][JSONSchema2]]
+ [[https://hackolade.com/schemas/bpostAddressFormattingWebservice_-_External_documentation.html][example documentation]]

**** [[https://github.com/AykutSarac/jsoncrack.com][AykutSarac/jsoncrack.com]]

Free for small schema. Pay for big schema...

+ or run with =docker compose up --build= +for free+ for the low, low price of
  searching "Time to upgrade" in the repo.
+ "time to upgrade" -> NotSupported.tsx -> NotSupported -> [[https://github.com/AykutSarac/jsoncrack.com/blob/main/src/features/editor/views/GraphView/stores/useGraph.ts#L25][useGraph]] ->
  Graph.aboveSupportedLimit -> [[https://github.com/AykutSarac/jsoncrack.com/blob/main/src/constants/graph.ts#L6][SUPPORTED_LIMIT]] ->
  process.env.NEXT_PUBLIC_NODE_LIMIT

So modify the docker compose file to inject that value into the environment.

+ Very useful (e.g. codegen from the interface), but I need something to
  visualize an example object.

*** Schemas
**** Source Meta

The [[https://schemas.sourcemeta.com/][Source Meta schema repository]] is, no doubt, funded by a shitton of taxpayer money ...
they forgot to ensure that you'd be able to visualize the schemas, to make it
much easier to connect them together.

+ [[https://schemas.sourcemeta.com/nasa/gcn/v4.2.0/notices/swift/bat/guano.schema.json][Swift/BAT-GUANO Alert]]: The guano schema is to report candidate gamma-ray
  transient from the =BAT-GUANO= targeted search. It's not a euphemism at all.
  It's a real thing, see?
+ [[https://schemas.sourcemeta.com/dats/v1.0.0][DATS]]: a data model to describe datasets. This one describes [[https://schemas.sourcemeta.com/dats/v1.0.0/consent_info_schema.json][consent]], which is
  what you give to researchers if their research is ethical.
+ [[https://schemas.sourcemeta.com/nasa/gcn/v4.2.0/circulars.schema.json][Circulars]]: here's another one from NASA that's a real great spend on the
  behalf of the US Taxpayers. Circulars is basically RSS, but with a punny name.
  That'll be $100,000 please.

Now VS Code may be able to rectify the erroneous JSON Schema version metadata,
but ... you can't do that. Why would you want to? Keep in mind that Github
Actions are basically Microsoft's way to backdoor it's Registry onto Github.

Calm down. That's a joke -- but it is ={"pretty": {"fucking" {"funny": 'null'}}}=
though

*** Hmmm

**** =$id= and =$ref=

The =$id= property and =$ref= meta-property-thingy both seem to be a hard constraint
on inter-dependent schemata.

+ These can't easily change and client libraries that process the JSON Schema
  must simultaneously handle (& functionally translate) multiple versions of the
  schema. So, if there's a schema with =$ref(...)= to external schemata specified
  according to another version of JSON Schema, then your client needs to know
  what to do with that.
+ Your VS Code extensions will only survive as long as their schemas can update
  when either =$id= or =$ref(...)= change. If the content of those URLs changes,
  then the functionality of your application will change (after its cache
  clears).
+ It is safer to stovepipe the JSON Schemata that you create, reducing external
  dependencies, potentially outside your control.

Questions

+ Is there a mechanism for hashing the =$id= and =$ref= of a schema? It's nice to
  just infer =$ref= as =$id=, but this doesn't easily permit versioning. No pressure.
+ Otherwise, you would need either: (1) query parameter parsing and now you
  can't simply serve static files. (2) URI conventions, like the =/doi/= in
  =doi.org/doi/10.123/muhdoi456=

So, hashing would help enforce guarantees about consistency of versions... idc
really, but it really seems like "they" only wanted people with aphantasia to
work on JSON Schema, so i have no idea wut 2 do with all this. I'm here for the
"schemas"

*** Root Schemata

The Draft-07 is by far the most commonly used.

**** In Yaml

After saving, diff to check interpretation with

#+begin_src sh
diff <(cat $ORG_DIRECTORY/roam/topics/data/draft-07.schema.yaml | yq -y) \
    <(cat $ORG_DIRECTORY/roam/topics/data/draft-07.schema.yaml | sed -e "s/\"/'/g" | yq -y)
#+end_src

***** draft-07

Started with the wrong version (pulled URL from the =ansible-rulebook= schema),
but later versions of schema need to establish compatibility. Most of the
ansible schemata seem to be referring to the =draft-07= JSON Schema spec.

#+begin_example yaml
$schema: http://json-schema.org/draft-07/schema#
$id: http://json-schema.org/draft-07/schema#
title: Core schema meta-schema
# description: "none"
default: true
type: ["object", "boolean"]

definitions:
  simpleTypes: {enum: [array, boolean, integer, 'null', number, object, string]}
  schemaArray: {type: array, items: {$ref: '#'},      minItems: 1}
  stringArray: {type: array, items: {type: string}, uniqueItems: true, default: []}
  nonNegativeInteger: {type: integer, minimum: 0}
  nonNegativeIntegerDefault0: {allOf: [{$ref: '#/definitions/nonNegativeInteger'}, {default: 0}]}

properties:
  $id:      {type: string, format: uri-reference}
  $schema:  {type: string, format: uri}
  $ref:     {type: string, format: uri-reference}
  $comment: {type: string}

  title:       {type: string}
  description: {type: string}
  examples:    {type: array, items: true}

  default:   true
  const:     true
  readOnly:  {type: boolean, default: false}
  writeOnly: {type: boolean, default: false}

  contains: {$ref: '#'}
  required: {$ref: '#/definitions/stringArray'}
  format:   {type: string}
  pattern:  {type: string, format: regex}
  enum:     {type: array, items: true, minItems: 1,  uniqueItems: true}

  # content properties
  contentMediaType: {type: string}
  contentEncoding: {type: string}

  # integer property validation
  minimum: {type: number}
  maximum: {type: number}
  exclusiveMinimum: {type: number}
  exclusiveMaximum: {type: number}
  multipleOf: {type: number, exclusiveMinimum: 0}

  minLength: {$ref: '#/definitions/nonNegativeIntegerDefault0'}
  maxLength: {$ref: '#/definitions/nonNegativeInteger'}

  items:   {default: true, anyOf: [{$ref: '#'}, {$ref: '#/definitions/schemaArray'}]}
  additionalItems: {$ref: '#'}
  uniqueItems:  {type: boolean, default: false}

  minItems: {$ref: '#/definitions/nonNegativeIntegerDefault0'}
  maxItems: {$ref: '#/definitions/nonNegativeInteger'}

  definitions:  {type: object, default: {}, additionalProperties: {$ref: '#'}}
  dependencies: {type: object, anyOf: [{$ref: '#'}, {$ref: '#/definitions/stringArray'}]}

  properties: {type: object, default: {}, additionalProperties: {$ref: '#'}}
  propertyNames: {$ref: '#'}
  additionalProperties: {$ref: '#'}
  patternProperties: {type: object, default: {}, additionalProperties: {$ref: '#'}, propertyNames: {format: regex}}
  minProperties:    {$ref: '#/definitions/nonNegativeIntegerDefault0'}
  maxProperties:    {$ref: '#/definitions/nonNegativeInteger'}

  type:
    anyOf:
      - $ref: '#/definitions/simpleTypes'
      - {type: array, items: {$ref: '#/definitions/simpleTypes',  minItems: 1, uniqueItems: true}}

# boolean
  if:     {$ref: '#'}
  then:   {$ref: '#'}
  else:   {$ref: '#'}
  allOf:  {$ref: '#/definitions/schemaArray'}
  anyOf:  {$ref: '#/definitions/schemaArray'}
  oneOf:  {$ref: '#/definitions/schemaArray'}
  not:    {$ref: '#'}
#+end_example

***** 2019-09

#+begin_example yaml
$schema: https://json-schema.org/draft/2019-09/schema
$id: https://json-schema.org/draft/2019-09/schema
$recursiveAnchor: true
title: Core and Validation specifications meta-schema
type: [object, boolean]

$vocabulary:
  https://json-schema.org/draft/2019-09/vocab/core: true
  https://json-schema.org/draft/2019-09/vocab/applicator: true
  https://json-schema.org/draft/2019-09/vocab/validation: true
  https://json-schema.org/draft/2019-09/vocab/meta-data: true
  https://json-schema.org/draft/2019-09/vocab/format: false
  https://json-schema.org/draft/2019-09/vocab/content: true

# in
allOf:
  - {$ref: meta/core}
  - {$ref: meta/applicator}
  - {$ref: meta/validation}
  - {$ref: meta/meta-data}
  - {$ref: meta/format}
  - {$ref: meta/content}

properties:
  definitions:
    type: object
    default: {}
    additionalProperties: {$recursiveRef: '#'}
    $comment: While no longer an official keyword as it is replaced by $defs, this
      keyword is retained in the meta-schema to prevent incompatible extensions as
      it remains in common use.
  dependencies:
    type: object
    additionalProperties:
      anyOf: [$recursiveRef: '#', $ref: meta/validation#/$defs/stringArray]
    $comment: '"dependencies" is no longer a keyword, but schema authors should avoid
      redefining it to facilitate a smooth transition to "dependentSchemas" and "dependentRequired"'
#+end_example


***** 2020-12

+ The top meta-schama will point to vocabs like =./meta/core=, not =./vocab/core=
+ The 2020-12 updates add =vocab/unevaluated= and change =vocab/format= to
  =vocab/format-annotation=

+ Order matters in =$vocabulary= and in the general evaluation of these files,
  AFAIK. It seems to evaluate the definition for =$ref= from =vocab/core= before
  getting to the =allOf= property, which implies that these =$vocabulary= schemata
  each evaluate to a type ... but one that's not quite handled identically.

+ however, for clarity, i've moved the =$defs= section above =properties=. this
  =$defs= property is actually defined in =properties= inside the same =meta/core=
  schema vocabulary file

+ The =$ref: '#'= needs to resolve locally AFAIK and =$dynamicRef: '#meta'= needs to
  resolve to a named umm schema namespace.

+ After grokking the difference between =properties= and =additionalProperties= ...
  the [[https://json-schema.org/understanding-json-schema/reference/object#extending][Extending Closed Schemas]] section shows how it affects validation when
  constraints like =allOf= are specified.

+ Pattern properties reserve slices of the effective property keyspace to
  strings which match the regex. I believe this happens after properties and
  before additionalProperties. The =properties= map the keyspace domain to schema
  types.

  #+begin_quote
The ideas from [[https://en.wikipedia.org/wiki/Free_monoid][free monoids and the Kleene Star]] are relevant. Ranges of key
space can be reserved to resolve with certainty in dependent/referencing schema
if the pattern properties are specified with regexps which do not overlap. It's
likely possible to have regexps which overlap, but from within the validation of
data consisting of nested types, it's preferable (from a mathematic perspective,
at least) to specify clear bounds on the regexp. Bounding from the left or from the
right looks like =/^prefix_.*/= or =/_.*suffix$/=. Bounding on both sides makes it
simple to ensure no overlapping patterns, but placing a constraint in the middle
(e.g. =/.*_midfix_.*/=) has subtle implications, including the need for multiply
sorted data (or the loss of benefits from partial/total orderings).

These problems are moreso mathematic in nature, but ultimately a program is a
value in binary stringspace that gets unwrapped and which MUST be evaluated from
the left (i.e. the physical machine executing a program can't know whether the
input for the bootloader ever terminates, so some properties needs to be
reserved to formats specified by a prefix, so that the machine can modulate it's
downstream processing of the binary/asm program instructions without needing to
first complete the intake of data.)

Kinda irrelevant here, but not entirely, if you really wanted to parse data or
meaning out of a key.
  #+end_quote

here's the root file

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/schema
$dynamicAnchor: meta
title: Core and Validation specifications meta-schema
$comment: This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.
type: [object, boolean]

$vocabulary:
  https://json-schema.org/draft/2020-12/vocab/core: true
  https://json-schema.org/draft/2020-12/vocab/applicator: true
  https://json-schema.org/draft/2020-12/vocab/unevaluated: true
  https://json-schema.org/draft/2020-12/vocab/validation: true
  https://json-schema.org/draft/2020-12/vocab/meta-data: true
  https://json-schema.org/draft/2020-12/vocab/format-annotation: true
  https://json-schema.org/draft/2020-12/vocab/content: true

allOf:
  - {$ref: meta/core}
  - {$ref: meta/applicator}
  - {$ref: meta/unevaluated}
  - {$ref: meta/validation}
  - {$ref: meta/meta-data}
  - {$ref: meta/format-annotation}
  - {$ref: meta/content}]

properties:
  definitions:
    $comment: '"definitions" has been replaced by "$defs".'
    type: object
    deprecated: true
    default: {}
    additionalProperties: {$dynamicRef: '#meta'}
  dependencies:
    $comment: '"dependencies" has been split and replaced by "dependentSchemas" and
      "dependentRequired" in order to serve their differing semantics.'
    type: object
    deprecated: true
    default: {}
    additionalProperties:
      anyOf:
        - $dynamicRef: '#meta'
        - $ref: meta/validation#/$defs/stringArray
  $recursiveAnchor:
    $comment: '"$recursiveAnchor" has been replaced by "$dynamicAnchor".'
    deprecated: true
    $ref: meta/core#/$defs/anchorString
  $recursiveRef:
    $comment: '"$recursiveRef" has been replaced by "$dynamicRef".'
    deprecated: true
    $ref: meta/core#/$defs/uriReferenceString

#+end_example

****** [[https://json-schema.org/draft/2020-12/meta/core][meta/core]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/core
$dynamicAnchor: meta
title: Core vocabulary meta-schema
type: [object, boolean]

$defs:
  anchorString:       {type: string, pattern: ^[A-Za-z_][-A-Za-z0-9._]*$}
  uriString:          {type: string, format: uri}
  uriReferenceString: {type: string, format: uri-reference}

properties:
  $id: {$ref: '#/$defs/uriReferenceString', pattern: ^[^#]*#?$, $comment: Non-empty fragments not allowed.}

  $schema:        {$ref: '#/$defs/uriString'}
  $ref:           {$ref: '#/$defs/uriReferenceString'}
  $anchor:        {$ref: '#/$defs/anchorString'}
  $dynamicRef:    {$ref: '#/$defs/uriReferenceString'}
  $dynamicAnchor: {$ref: '#/$defs/anchorString'}

  $comment:    {type: string}
  $vocabulary: {type: object, propertyNames: {$ref: '#/$defs/uriString'}, additionalProperties: {type: boolean}}
  $defs:       {type: object, additionalProperties: {$dynamicRef: '#meta'}}
#+end_example

****** [[https://json-schema.org/draft/2020-12/meta/applicator][meta/applicator]]

mainly for type composition

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/applicator
$dynamicAnchor: meta
title: Applicator vocabulary meta-schema
type: [object, boolean]

$defs:
  schemaArray: {type: array, minItems: 1, items: {$dynamicRef: '#meta'}}

properties:
  prefixItems: {$ref: '#/$defs/schemaArray'}

  items:    {$dynamicRef: '#meta'}
  contains: {$dynamicRef: '#meta'}

  propertyNames:        {$dynamicRef: '#meta'}
  additionalProperties: {$dynamicRef: '#meta'}

  properties:        {type: object, default: {}, additionalProperties: {$dynamicRef: '#meta' }}
  patternProperties: {type: object, default: {}, additionalProperties: {$dynamicRef: '#meta'}, propertyNames: {format: regex}}
  dependentSchemas:  {type: object, default: {}, additionalProperties: {$dynamicRef: '#meta' }}

  if:    {$dynamicRef: '#meta'}
  then:  {$dynamicRef: '#meta'}
  else:  {$dynamicRef: '#meta'}
  not:   {$dynamicRef: '#meta'}

  allOf: {$ref: '#/$defs/schemaArray'}
  anyOf: {$ref: '#/$defs/schemaArray'}
  oneOf: {$ref: '#/$defs/schemaArray'}
#+end_example

****** [[https://json-schema.org/draft/2020-12/meta/unevaluated][meta/unevaluated]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/unevaluated
$dynamicAnchor: meta
title: Unevaluated applicator vocabulary meta-schema
type: [object, boolean]

properties:
  unevaluatedItems:      {$dynamicRef: '#meta'}
  unevaluatedProperties: {$dynamicRef: '#meta'}
#+end_example


****** [[https://json-schema.org/draft/2020-12/meta/validation][meta/validation]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/validation
$dynamicAnchor: meta
title: Validation vocabulary meta-schema
type: [object, boolean]

$defs:
  nonNegativeInteger: {type: integer, minimum: 0}
  nonNegativeIntegerDefault0: {default: 0, $ref: '#/$defs/nonNegativeInteger'}
  simpleTypes: {enum: [array, boolean, integer, 'null', number, object, string]}
  stringArray: {type: array, default: [], items: {type: string}, uniqueItems: true}

properties:
  type:
    anyOf:
      - $ref: '#/$defs/simpleTypes'
      - {type: array, items: {$ref: '#/$defs/simpleTypes'}, minItems: 1, uniqueItems: true}

  const: true
  enum: {type: array, items: true}

  multipleOf: {type: number, exclusiveMinimum: 0}
  maximum: {type: number}
  minimum: {type: number}
  exclusiveMaximum: {type: number}
  exclusiveMinimum: {type: number}

  maxLength: {$ref: '#/$defs/nonNegativeInteger'}
  minLength: {$ref: '#/$defs/nonNegativeIntegerDefault0'}

  pattern: {type: string, format: regex}
  uniqueItems: {type: boolean, default: false}

  maxItems: {$ref: '#/$defs/nonNegativeInteger'}
  minItems: {$ref: '#/$defs/nonNegativeIntegerDefault0'}

  maxContains: {$ref: '#/$defs/nonNegativeInteger'}
  minContains: {$ref: '#/$defs/nonNegativeInteger', default: 1}

  maxProperties: {$ref: '#/$defs/nonNegativeInteger'}
  minProperties: {$ref: '#/$defs/nonNegativeIntegerDefault0'}

  required:          {$ref: '#/$defs/stringArray'}
  dependentRequired: {type: object, additionalProperties: {$ref: '#/$defs/stringArray'}}
#+end_example


****** [[https://json-schema.org/draft/2020-12/meta/meta-data][meta/meta-data]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/meta-data
$dynamicAnchor: meta
title: Meta-data vocabulary meta-schema
type: [object, boolean]

properties:
  default: true
  title:       {type: string}
  description: {type: string}
  deprecated:  {type: boolean, default: false}
  readOnly:    {type: boolean, default: false}
  writeOnly:   {type: boolean, default: false}
  examples:    {type: array, items: true}
#+end_example

****** [[https://json-schema.org/draft/2020-12/meta/format-annotation][meta/format-annotation]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/format-annotation
$dynamicAnchor: meta
title: Format vocabulary meta-schema for annotation results
type: [object, boolean]

properties:
  format: {type: string}
#+end_example

****** [[https://json-schema.org/draft/2020-12/meta/content][meta/content]]

#+begin_example yaml
$schema: https://json-schema.org/draft/2020-12/schema
$id: https://json-schema.org/draft/2020-12/meta/content
$dynamicAnchor: meta
title: Content vocabulary meta-schema
type: [object, boolean]

properties:
  contentEncoding:  {type: string}
  contentMediaType: {type: string}
  contentSchema:    {$dynamicRef: '#meta'}
#+end_example
