:PROPERTIES:
:ID:       706e72e2-575a-4c23-8410-bc14aa205140
:END:
#+TITLE: Documentation
#+CATEGORY: slips
#+TAGS:

* Roam
+ [[id:9bd811f1-75bd-4be1-9d05-242fd0f2c4ed][Infographics]]
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:286b6d1b-362b-44fe-bb19-e0e78513d615][GNU]]
+ [[id:8c34b195-76d9-4382-9600-45d70b2403d1][Cheatsheets: Index]]

* Docs


* Resources


* Topics

** Extracting Structure

*** Bash

**** From Completions

It's simpler to read from structs, classes, classes, metadata for tools like
doxygen, OpenAPI, JSON Schema... but [[https://brbsix.github.io/2015/11/29/accessing-tab-completion-programmatically-in-bash/][Accessing tab-completion programmatically
in Bash]] covers extracting data from the completion commands.

+ Their output does already encode a lot of structure
+ Automated tools generate them to be machine readable
+ A popular CLI tool describes most of its DSL within the POSIX syntax

A CLI tool interface is usually one of the lowest-level interfaces above a
compiled program. Whether it would change depends on the amount of
usage/breakage compared to potential benefits.

BTW, when =xz= changed to introduce a kind of grammar for squishing commands,
that was weird.

I wouldn't load this in every shell, but it does /start/ to traverse the tree of
subcommands

#+begin_example
# get_completions() { ... }

get_completions 'git  ' \
  | while read cmd; do
      echo -e "\n\n* git $cmd \n\n";
      get_completions "git $cmd ";
    done
#+end_example

Anyways, that that's wierd. It does look like =git help hook= is what I'm
looking for... and apparently a delorean because Grok says I probably missed my
ride

#+begin_example
#+begin_src org

   * git co



   * git commit



   * git config

   add.
   advice.
   alias.
   am.
   apply.
   attr.
   author.
   blame.
   branch.
   browser.
   bundle.
   checkout.

#+end_example

*** PDF

* Man

** Docs

*** Styling

**** =mandoc=
+ [[https://mandoc.bsd.lv/css.html][Projects using mandoc HTML output with their own CSS code]] this is tightly
  coupled to man's =html.c=
  + see [[https://github.com/palera1n/palera1n/blob/67805496f3395a086cd7782da6c59214e648ba2e/docs/mandoc.css#L4][palera1n/palera1n]] for an example [[https://github.com/palera1n/palera1n/blob/67805496f3395a086cd7782da6c59214e648ba2e/.github/workflows/build.yml#L40][.github/workflows/build.yml]]
**** CSS Examples

[[https://man7.org/linux/man-pages/style.css][CSS for man7.org]]

*** Git

Examples:  [[https://git.kernel.org/pub/scm/git/git-manpages.git/tree/man1][man1]]  [[https://git.kernel.org/pub/scm/git/git-manpages.git/tree/man5][man5]]  [[https://git.kernel.org/pub/scm/git/git-manpages.git/tree/man7][man7]]

*** Groff/Troff

+ man manpages -t :: Run for varied examples of basic formatting (including =i18n=)
+ [[https://wiki.archlinux.org/title/Man_page#Conversion_to_HTML][ArchWiki Man]] Conversion to HTML: can also use =man2html= or just =man -Ostyle=style.css=

** Resources

** Topics

*** Index

**** Stats

+ man -k . | wc -l :: count all manpages indexed
+ apropos . | wc -l :: count all manpages (alternative)


*** Importance

Distributions should measure their documentation coverage against Guix System.

+ With Guix system, I have only encountered packages without manpages once or
  twice (outside of personal packages). **EVERYTHING IS CORRECT**.
+ If your distribution doesn't make it obvious as to how to do this, that's just
  objectively wrong.

| Distro             | Score | Reason                                                                                           |
|--------------------+-------+--------------------------------------------------------------------------------------------------|
| Guix System        | A+    | EVERYTHING IS THERE.                                                                             |
| Guix               | A+    | If manpath is appended by the =./etc/profile=, you don't have to configure it                      |
|--------------------+-------+--------------------------------------------------------------------------------------------------|
| NixOS              | B     | Docs on man are good, but a bit perplexing (user error). Requires per-profile, per-system config |
| Nix Home Manager   | C     | Did you configure it? (idk, haven't checked)                                                     |
| Nix (foreign dist) | B     | You didn't configure it did you?                                                                 |
| Arch               | B     |                                                                                                  |
| AUR                | D     | Shame on you and your PKGBUILD's                                                                 |
| Fedora             | C     | Fedora is a toolbox                                                                              |
| Debian             | C?    | Debian/Ubuntu are probably great idk. Tools external to the distribution? Not so much.           |
| Linux Mint         | ?     | Did they configure it? IDK, didn't check                                                         |
|--------------------+-------+--------------------------------------------------------------------------------------------------|

I don't mean for this to compare nix/guix, as they both have pretty excellent
configuration of =man=. If you don't take =info= pages seriously, you might want to
get that checked out.

The tools =man= and =info= are supposed to provide the user with a WEB of links that
catalyze self-discovery.

+ Google doesn't show you much about what you're not asking for.
+ Social media ranks trends/topics/results by social importance ... so if your
  social media networks are full of braindead people, you still have to look for
  it.
+ On the other hand, emacs =M-x man= will return lots of information about
  manpages you didn't expect to find... only if =man= is configured properly

If you're on Guix Emacs, run =M-x man= then type =si=. LOOK: SIGNALS! This is better
if you're on Guix System. I /never/ would have encountered in Linux otherwise. I
just never would have. I didn't realize there was information about Linux C/C++
headers & api's in the man pages -- I was not "esoterically initiated" in a
university operating systems class. Youtube university here.

Now hit =M-:= and type =(kill-process (getenv "$$"))= ... okay that doesn't work bc
it's not bash.

*** Extracting Structure

... You can also just print man pages.



**** Process Man

+ The =col= and =rng= commands help
+ Using the =troff= source is simpler
+ Man pages may lack consistent source formatting

**** Process Man Output

Dump the =magick= options

#+name: manOptions
#+begin_src sh :file img/magick-options.txt
# man magick | col -b
man magick     \
    | grep -E '^ +(-[a-z0-9-]+ )+'     \
    | sed -E 's/^ +-([0-9a-z-]+) /-\1 /g'     \
    | sed -E 's/(.*)[[:blank:]]{2,}\w.*$/\1/g'
#+end_src

***** TODO show using =grep -n= and =rng= to extract line ranges

Section output by iterating over pairs of line numbers from =grep -n= output:

#+begin_src sh
# get lines
lines=(11 22 44 55)
# (11+1 22-1)
# (22+1 44-1)
# (44+1 55-1)
#+end_src
