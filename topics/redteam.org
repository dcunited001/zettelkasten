:PROPERTIES:
:ID:       d0d5896c-0cf5-4fa7-bf37-a2e3499c69d2
:END:
#+title: Red Team

* Resources

** [[https://book.hacktricks.xyz/][HackTricks.xyz]]
+ Particularly, [[https://book.hacktricks.xyz/tunneling-and-port-forwarding][Tunneling & Port Forwarding]]

** Cheatsheets
+ [[https://github.com/Jasutinn/Reverse-Shell][Reverse Shell Cheatsheet]]

** Links
+ OverTheWire [[https://overthewire.org/wargames/][security wargames]]

* [[https://gchq.github.io/CyberChef/][CyberChef]]

** Docs
+ Source ([[github:gchq/CyberChef][github]])

** Resources
+ [[https://github.com/mattnotmax/cyberchef-recipes][mattnotmax/cyberchef-recipes]]
+ [[https://github.com/Lifka/hacking-resources][Lifka/hacking-resources]]
+ [[https://c4pr1c3.github.io/awesome-ctf/][awesome-ctf]]

* [[https://www.hackthebox.com/][HackTheBox]]

* MITRE ATT&CK

** Tools ([[https://www.exabeam.com/explainers/mitre-attck/what-is-mitre-attck-an-explainer/][source]])

+ [[github:mitre-attack/attack-navigator][ATT&CK Navigator]]
+ MITRE [[https://car.mitre.org][Cyber Analytics Repository]] (CAR)
  - meta/data to facilitate analysis. includes some pseudocode.
+ [[github:mitre/caldera][Caldera]]
+ Red Canary [[https://github.com/redcanaryco/atomic-red-team][Atomic Red Team]]
  - test framework for MITRE attacks (integration testing?)
  - yaml-based (seems somewhat similar to ansible?)
+ endgameinc [[https://github.com/endgameinc/RTA][Red Team Automation]]


[[https://docs.mitmproxy.org/stable/concepts-certificates/][mitmproxy certificates]]


* CLI

** Network

*** Interlace

[[github:codingo/interlace][codingo/interlace]] extends single-threaded commands with CIDR-notation and
smart-globbing. It's like a network-centric version of GNU Parallels

*** Reconnoitre

[[github:codingo/reconnoitre][codingo/reconnoitre]]

#+begin_quote
A security tool for multithreaded information gathering and
service enumeration whilst building directory structures to store results, along
with writing out recommendations for further testing.
#+end_quote

* Enumeration

** Layer 2

*** ARP Enumeration

[[https://www.hackingloops.com/how-to-build-an-arp-network-enumeration-tool-using-python/][How to Build an ARP Network Enumeration Tool Using Python]]


* Scanners

** Visualizing Topologies

+ Visualizing Network Topologies

** Frameworks

+ [[https://openvas.org/][OpenVAS]] (and [[https://wiki.archlinux.org/title/OpenVAS][archwiki]])

** nmap

*** Docs

*** Resources

**** Webmap

[[https://github.com/Anteste/WebMap][WebMap]]: a web dashboard for Nmap XML Report ([[https://anteste.yo.fr/][anteste.yo.fr]])

+ The most recent branch is =1.x=. Run with docker
+ Includes a graph-based map of the network that's mapping.

**** ZenMap

A frontend for nmap

*** Topics

**** XML Format for nmap

UML Diagrams for the format:

Host-centric

[[file:img/nmap.host.svg]]

Scan-centric

[[file:img/nmap.nmaprun.svg]]


***** Converting from DTD to other formats

I tried using [[https://github.com/ncbi/DtdAnalyzer][DtdAnalyzer]], but I'm not sure what it expects. It includes a
=dtd2xml2json= tool which uses =xsl= as an intermediary format.

Trang seems to have worked:

#+begin_src sh :results value silent
# to XSD
trang -I dtd -O xsd nmap.dtd nmap.xsd

# and to RNG, which emacs apparently handles well
trang -I dtd -O rng nmap.dtd nmap.rng
#+end_src

Then after =pip install xsdata-plantuml=

#+begin_src sh :results output file :file img/nmap-uml.svg
xsdata nmap.xsd --output plantuml
plantuml generated/nmap.pu -tsvg
#+end_src

The UML definitions require the edges for composition/etc to be added. Most of
the initial entity types in the DTD specify only =CDATA= and many of the types
are incorrect... However, the =xsdata= library faithfully reproduces python data
classes anyways.

[[file:img/nmap.assoc.svg]]

To properly fix this, the =xsd= needs to be manually edited before the next
processing stages and then reviewed.

[[img/nmap.assoc.puml]]

* Automation

** Images for Lab Environments

+ [[https://www.pentestpartners.com/security-blog/red-team-lab-automation/][Red Team Lab Automation]]
+ [[https://www.splunk.com/en_us/blog/security/attack-range-v3-0.html][Splunk Attack Range 3.0]]

*** [[https://github.com/clong/DetectionLab][clong/DetectionLab]]

No longer actively maintained as of Jan 2023

Deployments:

+ [[https://www.detectionlab.network/deployment/aws/][AWS]] (Terraform)
+ [[https://www.detectionlab.network/deployment/azure/][Azure]] (Terraform/Ansible)
+ [[https://www.detectionlab.network/deployment/libvirt][VirtIO]] (Packer/Vagrant)
+ [[https://www.detectionlab.network/deployment/Proxmox][Proxmox]] (Terraform/Ansible)

*** [[Attack Lab Automation][mikegior/AttackLab-Lite]]

See [[https://www.mgior.com/automating-my-virtual-labs-with-too-many-tools/][Attack Lab Automation]] where [[https://www.mgior.com/updated-attacklab-automation/][part 2]] is more current and critiques the first
post. It describes the network and tools. The repository seems to be a good
example of combining ansible, terraform and packer.

*** [[github:ruzickap/packer-templates][ruzickap/packer-templates]]

These are =json= templates for packer.

Uses roles:

+ [[ruzickap/ansible-role-my_common_defaults][ruzickap/ansible-role-my_common_defaults]]
+ [[ruzickap/ansible-role-virtio-win][ruzickap/ansible-role-virtio-win]]

*** [[https://github.com/cliffe/SecGen][cliffe/SecGen]]

Create randomly insecure VMs for Virtualbox, Ovirt, ESXI, Proxmox.  Uses: Ruby,
Vagrant, Puppet, Packer (packerfiles)


* Reverse Engineering

** Shell Code

*** RISE Presentation

+ shell-code.org
+ github.com/gallop-sled/pwntools-tutorials
+ phoenix challenges (for understanding how c-code translates into assembly to
  construct the stack)

**** Pwntools

***** Shellcode Hardness

+ usually you need to disabled ASLR & stack canaries (to ensure that stack is executable)
+ shellcode harness?

***** Stack overflow protections

Usually the stack/heap are in different parts of the memory. The OS doesn't
allow you to execute what's in the stack (it doesn't usually make sense)

+ Stack canary: places random address in EIR, so kernel (or process?) can ensure
  that the proper memory address is returned to for execution.
+ ASLR: address space randomization (caller can't predict memory addresses)
  - may be possible to circumvent ASLR on small devices (and small processes?)

**** Frida

***** Dynamic Analysis

Frida is like a dynamic debugger (instrumentation framework with intercepter)

+ instead of manual setup, Frida allows you to write scripts to drive debugger
  with javascript. Frida drives the process.
+ Frida allows you to modify the memory image of the binary (example: to
  overwrite arguments to function calls)

+ stalker: code tracing

***** Tracing

Frida can generate the JS scripts necessary to trace syscalls in android apps

+ You can find the code that's making specific syscalls

** Dissasembly

*** Capstone



There is an emacs project
