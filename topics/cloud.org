:PROPERTIES:
:ID:       8a6898ca-2c09-47aa-9a34-a74a78f6f823
:END:
#+TITLE:     Cloud
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

This topic should be focused on:

+ Cloud Providers
  - similarities b/w offerings
  - API's and API Clients
+ SDN
  - Virtual Networking
  - Software defined networking

* Docs

* Resources
+ [[https://nubenetes.com/cheatsheets/][Nubenetes Cheatsheets]] docs [[https://github.com/nubenetes/awesome-kubernetes/tree/master/docs][here]]. pro tip: just clone the repo and search for
  PDF. the site looks great though.

* Issues

+ [[Configure a Point-to-Site (P2S) VPN on Linux for use with Azure Files][Configure a Point-to-Site (P2S) VPN on Linux for use with Azure Files]]

** Run AutoDesk apps in cloud


* Pricing

It's a little ridiculous that the tools to help price cloud services are not
more prominent. If you have a budget with cloud and you're not a little
concerned about the ease of use of pricing tools, you should be fired. It's not
a free market if the cloud vendors make their pricing tools slow/awkward. These
should be graphical tools that support markdown/yaml/mermaid or other plain text
formats.

I'm sure that efficient visibility and planning tools are a concern for
managers/etc, but I don't have a budget. This is a hobby.


** Resources

+ [[https://handbook.vantage.sh/][Cloud Cost Handbook]] guides mostly citing AWS. most of this information is on
  the vendors' management consoles, but here it's distilled a bit.

+ [[https://www.infracost.io/blog/cloud-pricing-api/][Infracost GraphQL API]] here it is again, another useful graphql
  API/schema. There's a free version, but they feel that it's worth $50 per
  seat*month for extended features including enforcing policy or triggering
  automations. Why is that?

* Providers

I'm using Azure for the Autodesk VM to keep things simple. I'm sure I'll make the rounds across the other providers as my free stuff expires.

I've never used the cloud for personal stuff because it's pricey and I don't like access to projects/services requiring a shit-show migration every 3 months when my "funemployment" catches up to me. !@#$@!%$

** Azure
*** Docs

*** Resources
**** [[github:Azure-Player/Cheatsheets][Azure-Player/Cheatsheets]]
+ Powershell, SQL
+ Scala

There is also one for [[https://github.com/Azure-Player/CheatSheets/blob/master/ADFDF-Cheat-Sheet-sqlplayer.pdf][Azure Data Factory Data Flow]] (and Azure Synapse), which is
a bit of a Rosetta Stone for stream processing using functional programming and
defines primatives like fan in/out, map/filter/reduce, etc in terms of SSIS and
SQL. Interesting.

** Red Hat

** Amazon AWS

*** Docs
+ [[https://aws.amazon.com/architecture/reference-architecture-diagrams/?solutions-all.sort-by=item.additionalFields.sortDate&solutions-all.sort-order=desc&whitepapers-main.sort-by=item.additionalFields.sortDate&whitepapers-main.sort-order=desc&awsf.whitepapers-tech-category=*all&awsf.whitepapers-industries=*all][Reference Architectures]]

** Google GCP

*** Docs
+ [[https://cloud.google.com/architecture][Reference Architectures]]
  - [[https://cloud.google.com/architecture#/types=Jump_Start_Solution_guide][Jump Start Solution Guides]]
+ [[https://googlecloudcheatsheet.withgoogle.com][googlecloudcheatsheet.withgoogle.com]]
  - The [[https://googlecloudcheatsheet.withgoogle.com/architecture][Architecture]] app gives you something like draw.io with reference
    architectures that show you how to combine the [hundreds of] products & API's

*** Resources
+ [[github:Priyankavergadia/google-cloud-4-words][Priyankavergadia/google-cloud-4-words]]

*** Tools

**** Interactive Shell

[[perpetually ][GCloud Interactive Shell]] (apparantly perpetually in beta) autocomplete for
gcloud shell

#+begin_src shell
# if beta components are not active
sudo apt-get install google-cloud-sdk

# this command fails for me
# gcloud components install beta

# this starts the interactive shell
gcloud beta interactive
#+end_src

**** Terraform

Add a =.customize_environments= file



*** Topics

**** GCloud Source

The whole point of diving into this is to locate a good data source to enumerate
the identifiers of roles/permissions of service accounts ... without fucking
scraping it. I have no idea how people learn all the detail here. I'm guessing
there isn't as much volume of detail as appears on the docs for
roles/permissions.

... if only there was a picture. one good picture is worth 10,000,000 tokens.

So I'm trying to suss out the ontology here, for other reasons. Not the actual
ontology, but just what's actually been reified. The OWL & OASIS docs are always
too abstract.

***** Core

core/resources.py

+ [[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/core/resources.py#L345][Resource]] :: registry, collection_info, subcolletion, ...
+ _ResourceParser ::
+ Registry :: "Keep a list of all the resource collections and their parsing
  functions." organizes parsers by collection (api name, api version, and
  collection name).
+ GRI :: A google resource identifier (i think?), parsed from path. GRIs can be
  disabled. idk

The Registry class is instantiated as a singleton: =REGISTRY = Registry()=, which
is accessed like =Registry.REGISTRY.parse()=.

****** CLI

The CLI subcommands & options are defined in
[[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/command_lib/][google-cloud-sdk/lib/googlecloudsdk/command_lib/**.*.yaml]]

****** Resource Map

+ ./lib/googlecloudsdk/command_lib/util/resource_map.py: "Default Resource map
  for universally common resource metadata"
+ [[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/command_lib/util/resource_map/resource_map.yaml#L20][./lib/googlecloudsdk/command_lib/util/resource_map/resource_map.yaml]], along
  with an adjacent schema file defines these resources.
+ and resource_map/declarative_map.py: "Utility for retrieving and parsing the
  Resource Map."

****** regen_api.py

In [[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/generated_clients/regen_apis_config.yaml#L16][regen_apis_config.yaml]] notes:

#+begin_quote
It is configuration for regen_apis.py script, which needs to be rerun
everytime some input discovery doc is added/updated or apitools generation
code has been changed.
#+end_quote

Tracing the YAML description for [[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/generated_clients/regen_apis_config.yaml#L822][gkehub]] leads to
[[https://github.com/twistedpair/google-cloud-sdk/blob/13bc428984e99113b8df45f674cdff0686335402/google-cloud-sdk/lib/googlecloudsdk/third_party/apis/gkehub_v1.json#L54][lib/googlecloudsdk/third_party/apis/gkehub_v1.json]], which corresponds to the [[https://cloud.google.com/kubernetes-engine/fleet-management/docs/reference/rest][GKE
Hub API]].

#+begin_quote
Apparently, this is for "Fleet Management", a subject of interest on many a
podcast I've listened to. It basically coordinates the lifecycle for K8S nodes
in a large cluster of clusters ... so like Chick-fil-a has fleet management
problems because they have resources corresponding to each store that need to
map to shared resources (shared between stores, for a region or for the entire
corporation). There are benefits to doing it this way, including fault tolerance
(data flow can endure disruptions in connections) and migration to new versions
(of applications or k8s things)

no, seriously, there's a fucking [[https://github.com/chick-fil-a/gitops][chick-fil-a/gitops]] demo repository that says
"Managing Fleets of Kubernetes Clusters w/GitOps". probably not GKE ... but it
was the subject of a podcast episode.
#+end_quote

These API clients have generated code in the =third_party= directory (I think)

***** IAM






**** Enabling API's

API's need to be enabled on a service account before using something like
Terraform. These API's need to be enabled at the project level, but the IAM
roles need access to them.

+ gcloud services list --available :: list available
+ gcloud services list :: list enabled

|------------------------------------+---|
| API                                |   |
|------------------------------------+---|
| autoscaling.googleapis.com         |   |
| bigquery.googleapis.com            |   |
| bigquerymigration.googleapis.com   |   |
| bigquerystorage.googleapis.com     |   |
| cloudapis.googleapis.com           |   |
| clouddebugger.googleapis.com       |   |
| cloudtrace.googleapis.com          |   |
| compute.googleapis.com             |   |
| container.googleapis.com           |   |
| containerfilesystem.googleapis.com |   |
| containerregistry.googleapis.com   |   |
| containersecurity.googleapis.com   |   |
| datastore.googleapis.com           |   |
| deploymentmanager.googleapis.com   |   |
| dns.googleapis.com                 |   |
| iam.googleapis.com                 |   |
| iamcredentials.googleapis.com      |   |
| logging.googleapis.com             |   |
| monitoring.googleapis.com          |   |
| oslogin.googleapis.com             |   |
| pubsub.googleapis.com              |   |
| redis.googleapis.com               |   |
| secretmanager.googleapis.com       |   |
| securitycenter.googleapis.com      |   |
| servicemanagement.googleapis.com   |   |
| serviceusage.googleapis.com        |   |
| sql-component.googleapis.com       |   |
| storage-api.googleapis.com         |   |
| storage-component.googleapis.com   |   |
| storage.googleapis.com             |   |
|------------------------------------+---|
** OpenShift

*** Docs

*** Resources
+ [[https://craig-robinson.medium.com/guide-to-installing-openshift-4-10-ipi-on-bare-metal-4a2c17bc2bb5][Installing Openshift 4.10 IPI on Dell Poweredge]]
  - this should be sufficiently similar to installing OKD
  - it sets up PXE booted Openshift nodes running on bare metal

** OKD

*** Docs

*** Resources
+ [[https://docs.okd.io/4.9/virt/virtual_machines/virt-create-vms.html][Creating VM's]]
  - OKD can run VM's as kubelets like Harvester
  - ... but doing so requires 3 OKD nodes (on bare metal...)

**** Installs
+ [[https://docs.okd.io/4.11/installing/installing_bare_metal/installing-bare-metal.html#installing-bare-metal][Deploying a user-provisioned cluster on bare metal]]
+ [[https://docs.okd.io/4.11/installing/installing_bare_metal_ipi/ipi-install-prerequisites.html][Deploying an Installer-provisioned cluster on bare metal]]
+ [[https://docs.okd.io/4.11/installing/installing_platform_agnostic/installing-platform-agnostic.html][Installing a cluster on any platform]] (i.e. Proxmox)

*** Issues
**** Mirrors
+ installing behind a firewall practically requires hosting:
  - a FCOS mirror (~1TB of data)
  - a Docker Registry
