:PROPERTIES:
:ID:       6f769bd4-6f54-4da7-a329-8cf5226128c9
:END:
#+title: Emacs

+ [[id:83315604-b917-45e3-9366-afe6ba029a60][Systems]]

* Docs
* Resources
+ [[https://emacs.zeef.com/ehartc43214321][Emacs Zeef]] (ehartc)
+ [[https://www2.lib.uchicago.edu/keith/emacs/][Use Emacs: The Plain Text Computing Environment]]
* Open Souce

+ [[https://www.fosskers.ca/en/blog/contributing-to-emacs][Contributing to Emacs]]

* Components

** Emacs Widgets (defcustom)

+ Types in =defcustom= are [[https://www.gnu.org/software/emacs/manual/html_mono/widget.html][Emacs widgets]]
  - basic types
  - sexp types (4 categories: constant/generic/atomic/composite)
    - atomic contains: regexp,

* Codebase

** Language

+ [[https://klibert.pl/posts/emacs-short-lambda.html][Clojure-like lambda expressions in Emacs Lisp]]

* Killer Apps

* Timesavers

** Learning

** Browsing Code
+ navigating definitions in arbitrary code (esp. elisp)
  + M-. :: =+lookup/definition=
  + M-, :: =better-jump-jump-backward= (or =xref=)

** Dired
+ Q :: =dired-do-find-regexp-and-replace=

** Dir Locals
+ [[https://stackoverflow.com/questions/63578123/setting-a-mode-for-a-particular-file-using-dir-locals-el][setting a mode for files in a project]]
  - handy to avoid modifying files on a local/remote project
  - also handy to avoid accidentally modifying your Doom Emacs config, which is
    tricky to trace. if this happens, you were probably already dealing with
    issues. Add =(mode . read-only)= inside =((nil . (...) ))=

* Tools

** Formattesrs
This could be done by the language's executable itself (or some subset of the
lang build), but it's usually not.  This should be done by tree-sitter, but
apparently comments make that hard. LSP can do it, but that's weird and it's not
on for most files, esp. JSON/HTML/etc.

*** Pre-Commit Hooks
+ [[https://prettier.io/docs/en/precommit.html][Configure prettier with a pre-commit hook]] (req. per-project configuration)

*** Lisp
+ [[https://mumble.net/~campbell/scheme/style.txt][Riastradh's Lisp Style Rules]]

*** Prettier
Includes 70+ direct dependencies :skeptical:


** Transient

*** Resources
+ [[github:positron-solutions/transient-showcase][positron-solutions/transient-showcase]] (reddit [[https://www.reddit.com/r/emacs/comments/13dr57f/comment/jjnv4pi/?utm_source=reddit&utm_medium=web2x&context=3][source]])

*** Transient Arguments

Use =C-x s= or =C-x C-s= or configure in =transient-values-file=

See [[https://magit.vc/manual/transient/Enabling-and-Disabling-Suffixes.html][setting transient arguments (on a permanent basis)]]

*** Show hidden items

Use =C-x l= or =<f2> l= or configure in =transient-levels-file=

See [[https://magit.vc/manual/transient/Saving-Values.html#Saving-Values][enabling/disabling suffixes]]

** LSP

*** Eglot

+ [[https://joaotavora.github.io/eglot/#Customizing-Eglot][eglot docs]]
+ mixing lsp-mode and eglot may require [[https://github.com/nemethf/eglot-x][eglot-x]]
  - protocol-extensions for Eglot? examples of missing features/etc here
  - discussion of missing features on [[feature][r/emacs]]

** Completion
*** Consult
+ [[https://kristofferbalintona.me/posts/202202211546/][Vertico, Marginalia, All-the-icons-completion, and Orderless]]

**** Vertico

|------------------+----------------------------------------|
| vertico mode     | description                            |
|------------------+----------------------------------------|
| grid-mode        | like zsh completion                    |
| reverse-mode     | show the completion order in reverse   |
| buffer-mode      | something like helm                    |
| flat-mode        | like the default emacs completion      |
| mouse-mode       | can click on the completion candidates |
| multiform-mode   |                                        |
| unobtrusive-mode |                                        |
| indexed-mode     | show numbers to use as prefix          |
|------------------+----------------------------------------|

*** Ivy

**** TODO Browse the =*Ivy Help*= buffer for tips on using minibuffer
+ From minibuffer, type =C-h m=

** Misc

*** Zone Programs
+ [[https://lonely.town/@wasamasa/110295744723507841][alarmclock zone program]] using bytes/chars to emulate digital LCD

* Topics
** Security

*** Seccomp

From [[https://www.masteringemacs.org/article/whats-new-in-emacs-28-1][mastering emacs]] post on emacs 28.1

Emacs 28.1 supports a =--seccomp=BPF= flag that =sock_filter= structures to
limit it's behavior ... [[https://www.kernel.org/doc/html/latest/networking/filter.html][somehow using BPF]]. This limits the functionality that
untrusted code would have access to.

+ See [[https://www.man7.org/linux/man-pages//man2/seccomp.2.html][man seccomp]] for more info. [[https://kubernetes.io/docs/tutorials/security/seccomp/][Kubernetes can also use seccomp filters]].
+ Using this feature requires compiling a BPF filter program. See [[https://www.man7.org/linux/man-pages//man2/bpf.2.html][man bpf]]
+ See =./tests/src/emacs-tests.el= for interface usage and expected behavior.

It appears that processes

* Issues

** Buffer Local Variables

+ This [[https://stackoverflow.com/questions/6493331/how-to-print-all-the-defined-variables-in-emacs][s/o]] answer indicates =M-x pp-eval-expression RET (buffer-local-variables)
  RET= will dump the buffer's state.

** Auth Sources

+ [[https://magit.vc/manual/ghub/How-Ghub-uses-Auth_002dSource.html#How-Ghub-uses-Auth_002dSource][Configure github for ghub/forge using auth-sources]]
+ Mastering Emacs: [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]]

** Performance

*** Implications of Emacs' Single-Threaded Nature

The CPU affinity/scheduling of emacs should ALWAYS be managed

- the CPU of emacs should ALWAYS be set
- performance will greatly benefit if there are always cache hits for
  emacs-related CPU instruction execution
  - garbage collection is an emacs bottleneck
  - similarly, if a CPU's L1/L2 caches remain emacs process-specific for longer,
    then the performance benefits are extended
  - therefore, one core should (?) be like 97% dedicated to emacs
    - this will never lock the system
    - the assigned CPU core's for =emacsclient= processes may be irrelevant
    - if a policy can be implemented to avoid executing any process except emacs
      code on the emacs CPU (or numa node), then this will help accelerate emacs
      quite a bit.
    - however, since emacs-lisp is an interpreted language, it's unclear how the
      a language's VM tracks values/references/variables and how this maps to
      how the CPU ultimately tracks L2/L3 cache references
    - if it is clear to the kernel/scheduler & cpu cache metrics how valuable
      emacs data is for that process, then it's more likely to be persisted.

In other words, this tells us what [some of us understand] which is that:

#+begin_quote
HAVING ACCESS TO GRANULAR CONFIGURATION/CUSTOMIZATION IS EXTREMELY VALUBALE IN
SOME SITUATIONS
#+end_quote

Such, when combined with something else that most of us understand:

#+begin_quote
Emacs is incredibly unlikely to ever be multi-threaded ... without breaking most
packages, yielding an abyssal number of bugs and resulting in somehow making
emacs 10x more complicated than it already is.
#+end_quote

**** TODO perf implications of mgmt/scheduling of emacs client/server processes?

** Windows/Popups

+ 20.6 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Buffers.html][Displaying a Buffer in a Window]]
+ 29.13 Displaying a Buffer in a Suitable Window
  - 29.13.6 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html][The Zen of Buffer Display]]
+ 29.27 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Parameters.html][Window Parameters]]
+ 14.7 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Follow-Mode.html][Follow Mode]]

** Frames/Tabs

** Tree-sitter
+ [[https://karthinks.com/software/a-consistent-structural-editing-interface/][A consistent structural editing interface]] (comparison of structural editng options in emacs)

** System Programming

*** Detecting [[https://emacs.stackexchange.com/questions/31224/how-to-test-programmatically-whether-the-current-emacs-session-among-several][Whether Emacs Is Running As Daemon]]

This detects whether the focused Emacs frame is connected to a server. It will
return false if there is not another emacs process running as server.

#+begin_example emacs-lisp
(and (boundp 'server-process)
     (processp server-process)
     (server-running-p))
#+end_example

** Keybindings
*** Learning Keybindings
+ [[https://www.reddit.com/r/emacs/comments/ykm7in/creating_and_displaying_cheatsheets_of_keybindings/][Creating and displaying cheatsheets of keybindings]] (r/emacs) contains good ideas
for learning keybindings.

*** Embark bindings

From: [[https://www.reddit.com/r/emacs/comments/s2ma7b/embark_export_which_key_bindings_to_a_separate/][Embark export which key bindings to a separate buffer?]]

You can use embark (hit =C-h= after prefix, before which-key to get the following )

#+begin_example emacs-lisp
(use-package embark
  :bind
  ([remap describe-bindings] . embark-bindings)
  :custom
  (prefix-help-command #'embark-prefix-help-command))
#+end_example

You can also just press =C-h= after *any* prefix ... MIND.BLOWN. It brings up  =embark-prefix-help-command=, no need to disable which-key.

*** Identifying Keys/maps:

+ [[https://emacs.stackexchange.com/questions/653/how-can-i-find-out-in-which-keymap-a-key-is-bound][Where a key is bound]]

**** TODO find which keymaps a binding appears in.

** Saving with another users permissions

+ There is =(sudo-save)= and a trick where you =chmod= with =dired=
  - but these are prone to
+ There is also the =:w !sudo tee %= trick from vim
  - It could be adopted for emacs, but handing keyboard input is dicey.
  - Not ever =(shell-... )= commend in emacs-lisp is going to make the correct
    calls for authorization.
  - [[https://vi.stackexchange.com/questions/475/how-to-save-a-file-for-which-i-have-no-write-permissions/476#476][S/O issue one]] & [[https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work][S/O issue two]]

* Emacsen
** Lem (cl-lisp implementation)

See [[https://www.cliki.net/cl-emacs][cliki.net/cl-emacs]]
