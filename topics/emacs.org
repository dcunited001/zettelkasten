:PROPERTIES:
:ID:       6f769bd4-6f54-4da7-a329-8cf5226128c9
:END:
#+title: Emacs

* Docs

With a decent =tex= environment, you can build some of the manuals in =./doc/misc= to PDF.

+ clone the repo
+ =./autogen.sh= and =configure= (not necessary for me)
+ =cd ./doc/misc= and run =make cl.pdf=

running =make pdf= or =make doc= was crashing for me.

* Resources

+ [[https://emacs.zeef.com/ehartc43214321][Emacs Zeef]] (ehartc)
+ [[https://www2.lib.uchicago.edu/keith/emacs/][Use Emacs: The Plain Text Computing Environment]]

** Frameworks

+ Doom Emacs
+ Spacemacs
+ [[github:SystemCrafters/crafted-emacs][SystemCrafters/crafted-emacs]]
+ [[https://codeberg.org/ashton314/emacs-bedrock][codeberg:ashton314/emacs-bedrock]]

* Open Souce

+ [[https://www.fosskers.ca/en/blog/contributing-to-emacs][Contributing to Emacs]]

* Components

** Emacs Widgets (defcustom)

+ Types in =defcustom= are [[https://www.gnu.org/software/emacs/manual/html_mono/widget.html][Emacs widgets]]
  - basic types
  - sexp types (4 categories: constant/generic/atomic/composite)
    - atomic contains: regexp,

* Codebase

** Language

+ [[https://klibert.pl/posts/emacs-short-lambda.html][Clojure-like lambda expressions in Emacs Lisp]]

* Killer Apps



* Timesavers

** Learning

** Browsing Code
+ navigating definitions in arbitrary code (esp. elisp)
  + M-. :: =+lookup/definition=
  + M-, :: =better-jump-jump-backward= (or =xref=)

** Dired
+ Q :: =dired-do-find-regexp-and-replace=

** Dir Locals
+ [[https://stackoverflow.com/questions/63578123/setting-a-mode-for-a-particular-file-using-dir-locals-el][setting a mode for files in a project]]
  - handy to avoid modifying files on a local/remote project
  - also handy to avoid accidentally modifying your Doom Emacs config, which is
    tricky to trace. if this happens, you were probably already dealing with
    issues. Add =(mode . read-only)= inside =((nil . (...) ))=

* Tools
** Yasnippet

+ [[https://joaotavora.github.io/yasnippet/snippet-development.html#org73e1209][Choosing fields value from a list]]



*** Configuration

+ Ensure the directory in your emacs config stays at the top of the list when
  appending to =yas-snippet-dirs= or it's cumbersome to =yas-add snippets=

*** Examples

**** =pcase= on =yas-choose-value=

#+begin_src dockerfile
# -*- mode: snippet -*-
# name: dockerize
# key: dockerize
# expand-env: ((yas-indent-line 'fixed) (yas-wrap-around-region nil))
# --

ENV DOCKERIZE_VERSION ${1:v0.6.1}

`(pcase (yas-choose-value "ubuntu" "alpine")
   ("ubuntu" (concat
               "RUN wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n"
               "    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n"
               "    rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz"))
   ("alpine" (concat
               "RUN apk add --no-cache openssl && \\\n"
               "    wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-alpine-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n"
               "    tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-${DOCKERIZE_VERSION}.tar.gz && \\\n"
               "    rm dockerize-alpine-linux-amd64-${DOCKERIZE_VERSION}.tar.gz")))`
#+end_src

** CI/CD

+ [[https://github.com/karlicoss/cloudmacs][karlicoss/cloudmacs]] run emacs in a browser
+ [[https://github.com/purcell/nix-emacs-ci][purcell/nix-emacs-ci]] uses nix & GH Actions
** File System

*** Treemacs

I only use dired and nothing like =treemacs=, which encourages me to actually
use/learn =dired= functions.

This also circumvents kind of a lot of issues I had when using Doom Emacs
... you know, the important things like "do i have emojies in the
tree-file-thingy?" Treemacs does work pretty well, but other pain points include
sorting out how to rectify =treemacs= or =neotree= or whatever with other
features:

+ perspective.el
+ projectile.el
+ project.el
+ desktop.el

And dont forget to combinatorially explode that and then handle emojies wherever
they occur -- oops the emojies (or whatever) broke your terminal emacs. you
could be figuring out how to get xsession back in order, but now you're
debugging a problem you can't test in the both X11 and console simultaneously.

I'm not trying to be mean, the concept of browsing file trees in emacs is just
not for me. I'd rather use dired.

*** Recentf

The feature provided by the function =consult-recent-file= is +useful+
essential, IMO. If I ever sat beside another person with moderate/light
experience in emacs, I would learn quite a bit. They would say "why don't you
just use recentf" and I would be all like "... what's that?"

Instead, the longer I use the wrong tools, the more deeply those features become
until the keybindings are hardwired into my muscle memory .... this makes it
hard to learn the correct way.

**** Configuring

Recentf is hooked into the following modes/contexts:

#+begin_src
(find-file-hook       recentf-track-opened-file)
(write-file-functions recentf-track-opened-file)
(kill-buffer-hook     recentf-track-closed-file)
(kill-emacs-hook      recentf-save-list)
#+end_src

Hook like this:

#+begin_src emacs-lisp
(add-hook 'buffer-list-update-hook #'recentf-track-opened-file)
  #+end_src


**** Performance concerns

TL;DR; maybe keep the =recentf-max-saved-items= on the low side if you notice
problems, but it probably doesn't matter.

#+begin_quote
The reason it's important to clarify these things is some modes/features can be
hooked into or called in quite a few calls. In a single threaded runtime, your
CPU cycles are more important than you think. If you're not keeping track of how
configuration changes affect glitches/lag, it can become a little harder to
untangle, especially when you need to trace -- neither of which am I as
proficient as I should be.

Fortunately C-g works very well almost all the time.

None of this is actually that difficult to learn/understand ... but on your own?
Yes. Performance used to be a much bigger issue back in
2013ish and it definitely is when you have lexical scoping upside down in Doom
Emacs.
#+end_quote

=recentf-keep= and =recentf-exclude= are mapped across *N* file in
=recentf-list=. These are given a list of *M* regexps/functions.

this means N*M calls to map-apply the list every time you interact with
recentf-list, wherever it gets employed in emacs ... nevermind, functions like
recentf-include-p are only called when the list is modified

phew! it's designed to solve the obvious problem ... okay good. I wanted to
structure the =recentf-exclude= list using the minimal number of calls to
optimize what regexp is good at.

Only after starting did I notice this was a list ... but yeh. I attempted to
reconstruct the original value.

#+begin_src emacs-lisp
(rx (or
     ;; "\\(\\(COMMIT\\|MERGEREQ\\|NOTES\\|PULLREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG"
     (and (or
           (and (or "COMMIT" "NOTES" "PULLREQ" "MERGEREQ" "TAG") "_EDIT")
           "MERGE_" "") "MSG")
     ;; \\(BRANCH\\|EDIT\\)_DESCRIPTION\\
     (and (or "BRANCH" "EDIT") "_DESCRIPTION"))
    ;; really ends with \\' .... ?
    "'")
#+end_src
** Docs/Help

Self documenting functionality

*** XRef


** Formatters
This could be done by the language's executable itself (or some subset of the
lang build), but it's usually not.  This should be done by tree-sitter, but
apparently comments make that hard. LSP can do it, but that's weird and it's not
on for most files, esp. JSON/HTML/etc.

*** Pre-Commit Hooks
+ [[https://prettier.io/docs/en/precommit.html][Configure prettier with a pre-commit hook]] (req. per-project configuration)

*** Lisp
+ [[https://mumble.net/~campbell/scheme/style.txt][Riastradh's Lisp Style Rules]]

*** Prettier
Includes 70+ direct dependencies :skeptical:


** Transient

*** Resources
+ [[github:positron-solutions/transient-showcase][positron-solutions/transient-showcase]] (reddit [[https://www.reddit.com/r/emacs/comments/13dr57f/comment/jjnv4pi/?utm_source=reddit&utm_medium=web2x&context=3][source]])

*** Transient Arguments

Use =C-x s= or =C-x C-s= or configure in =transient-values-file=

See [[https://magit.vc/manual/transient/Enabling-and-Disabling-Suffixes.html][setting transient arguments (on a permanent basis)]]

*** Show hidden items

Use =C-x l= or =<f2> l= or configure in =transient-levels-file=

See [[https://magit.vc/manual/transient/Saving-Values.html#Saving-Values][enabling/disabling suffixes]]

** LSP

*** Eglot

+ [[https://joaotavora.github.io/eglot/#Customizing-Eglot][eglot docs]]
+ mixing lsp-mode and eglot may require [[https://github.com/nemethf/eglot-x][eglot-x]]
  - protocol-extensions for Eglot? examples of missing features/etc here
  - discussion of missing features on [[feature][r/emacs]]

** Completion
*** Consult
+ [[https://kristofferbalintona.me/posts/202202211546/][Vertico, Marginalia, All-the-icons-completion, and Orderless]]

**** Vertico

|------------------+----------------------------------------|
| vertico mode     | description                            |
|------------------+----------------------------------------|
| grid-mode        | like zsh completion                    |
| reverse-mode     | show the completion order in reverse   |
| buffer-mode      | something like helm                    |
| flat-mode        | like the default emacs completion      |
| mouse-mode       | can click on the completion candidates |
| multiform-mode   |                                        |
| unobtrusive-mode |                                        |
| indexed-mode     | show numbers to use as prefix          |
|------------------+----------------------------------------|

*** Ivy

**** TODO Browse the =*Ivy Help*= buffer for tips on using minibuffer
+ From minibuffer, type =C-h m=

** Misc

*** Zone Programs
+ [[https://lonely.town/@wasamasa/110295744723507841][alarmclock zone program]] using bytes/chars to emulate digital LCD

* Topics
** Common Lisp

*** Error handling

[[https://quasilyte.dev/blog/post/writing-emacs-lisp-compiler-intrinsics/][Writing Emacs Lisp Compiler Intrinsics]] compares bytecode between:

+ emacs-lisp: =tag= and =catch=
+ cl-lib: =cl-return-from=

*** Autoloads

You can autoload =cl-defun= by simply adding =###autoload=

#+begin_quote
I had a very similar question regarding automagic emacs functionality when
reflecting over ='cl= functions/vars ... like =cl-defun=
#+end_quote

*** cl-loop

**** finally

You can say =finally=, but you can't do it.

#+begin_quote
  Miscellaneous clauses:
    with VAR = INIT
    if/when/unless COND CLAUSE [and CLAUSE]... else CLAUSE [and CLAUSE...]
    named NAME
    initially/finally [do] EXPRS...
    do EXPRS...
    [finally] return EXPR
#+end_quote

Also, =finally= comes first, of course, in line functional programming, but
=nreverse= and then =nconc=.

**** Error Handling

Side effects ...

You can't have them. I didn't know that. I was just thinking that maybe I should
look at =sblc= since it's basically the same thing as =emacs-lisp=. So it's less
like =emacs-lisp= and more like "soft haskell." In Haskell, you need to make
absolutely sure that invalid states don't emerge. Good code basically does the
same thing ... overdoing error handling it is a trap.

I barely understand the =cl-tagbody= but it seems that:

+ you define entry/exit points for higher-order functions.
+ and then control evaluation by bundling state with the =cl-return[-from]=
  macros. This /may/ be useful with a kind of state machine.
+ you want to preempt errors and adapt the flow of the program in the block

Which is what I'm trying to figure out: can =cl-block= and =cl-return[-from]=
handle events they didn't expect -- these usually result in an error.

#+begin_src emacs-lisp
;; cl-macs.el

;; it's very simple
(cl-defmacro cl-block (name &rest body)
  ;; if there's no side effects, yield the body up for expansion
  (if (cl--safe-expr-p `(progn ,@body))
      `(progn ,@body)

    ;; otherwise return this error handler
    `(cl--block-wrapper

      ;; the uncontrolled error is [yet] caught -- again, the last thing comes first
      (catch ',(intern (format "--cl-block-%s--" name))
        ,@body))))

;; cl-lib.el

;; the identity ... or is it?
(defalias 'cl--block-wrapper 'identity)
(defalias 'cl--block-throw 'throw)

;; if I had to guess, the identity is being used for 1+ layer(s) of "λ-wrapping"
;; like in the y-combinator, which I never really get on my own.
#+end_src

The rules here are important. After digging into the Emacs Doom source, I
realized of course that "one does not simply copy and paste the cl-functions"
... which is probably where I should be looking.

#+begin_src emacs-lisp
(defun cl--safe-expr-p (x)
  "Check if no side effects."
  (or (not (and (consp x) (not (memq (car x) '(quote function cl-function)))))
      (and (symbolp (car x))
	   (or (memq (car x) cl--simple-funcs)
	       (memq (car x) cl--safe-funcs)
	       (get (car x) 'side-effect-free))
	   (progn
	     (while (and (setq x (cdr x)) (cl--safe-expr-p (car x))))
	     (null x)))))
#+end_src

I'm not sure what all these turtles do here, but I'm a bit scared to find out.

#+begin_src emacs-lisp
;; Here is more or less how those dynbind vars are used after looping
;; over cl--parse-loop-clause:

(cl-block ,cl--loop-name
  (cl-symbol-macrolet ,cl--loop-symbol-macs
    (foldl #'cl--loop-let
           `((,cl--loop-result-var)
             ((,cl--loop-first-flag t))
             ((,cl--loop-finish-flag t))
             ,@cl--loop-bindings)
           ,@(nreverse cl--loop-initially)
           (while                   ;(well: cl--loop-iterator-function)
               ,(car (cl--loop-build-ands (nreverse cl--loop-body)))
             ,@(cadr (cl--loop-build-ands (nreverse cl--loop-body)))
             ,@(nreverse cl--loop-steps)
             (setq ,cl--loop-first-flag nil))
           (if (not ,cl--loop-finish-flag) ;FIXME: Why `if' vs `progn'?
               ,cl--loop-result-var
             ,@(nreverse cl--loop-finally)
             ,(or cl--loop-result-explicit
                  cl--loop-result)))))
#+end_src

** EXWM and XELB

Apparently, [[github:ch11ng/exwm][ch11ng/exwm]] is based on [[github:ch11ng/xelb][ch11ng/xelb]]:

#+begin_quote
XELB (X protocol Emacs Lisp Binding) is a pure Elisp implementation of X11
protocol based on the XML description files from XCB project. It features an
object-oriented API and permits a certain degree of concurrency. It should
enable you to implement some low-level X11 applications. Please refer to xelb.el
for more details.
#+end_quote

*** XKB in Emacs-lisp

I had seen exwm, but was a bit worried my Emacs sessions wouldn't quite be
stable enough, at least not without multiple servers. However, this XELB
implements all of X11 via it's XML description files ... this means it has data
structures for XKB, including the geometry.



** Images

*** SVG

+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/SVG-Images.html][svg.el]]
+ [[https://github.com/rougier/svg-lib][svg-lib.el]]
+ [[https://github.com/RaminHAL9001/emacs-svg-clock/blob/master/svg-analog-clock.el][SVG Clock]] render an animated clock from emacs

*** Misc

Links from this [[https://news.ycombinator.com/item?id=22032133][HN post]]

+ [[http://dantorop.info/project/emacs-animation/][Emacs Lisp Animations]] a series originally intended for art students
+ [[https://github.com/gongo/emacs-nes][Emacs NES Emulator]]
+ [[https://github.com/pft/gimpmode][gimpmode]]


** Security

*** Seccomp

From [[https://www.masteringemacs.org/article/whats-new-in-emacs-28-1][mastering emacs]] post on emacs 28.1

Emacs 28.1 supports a =--seccomp=BPF= flag that =sock_filter= structures to
limit it's behavior ... [[https://www.kernel.org/doc/html/latest/networking/filter.html][somehow using BPF]]. This limits the functionality that
untrusted code would have access to.

+ See [[https://www.man7.org/linux/man-pages//man2/seccomp.2.html][man seccomp]] for more info. [[https://kubernetes.io/docs/tutorials/security/seccomp/][Kubernetes can also use seccomp filters]].
+ Using this feature requires compiling a BPF filter program. See [[https://www.man7.org/linux/man-pages//man2/bpf.2.html][man bpf]]
+ See =./tests/src/emacs-tests.el= for interface usage and expected behavior.

It appears that processes

* Issues

** Buffer Local Variables

+ This [[https://stackoverflow.com/questions/6493331/how-to-print-all-the-defined-variables-in-emacs][s/o]] answer indicates =M-x pp-eval-expression RET (buffer-local-variables)
  RET= will dump the buffer's state.

** XRef

*** The xref functionality no longer functions in emacs packages from guix

Running =xref-find-definitions= navigates to the correct directory for straight
packages and most guix packages. Running =xref-find-references= in an emacs
=site-lisp= package typically fails, but it succeeds in other places.

This is happening in Emacs 29.1. Running =C-h f= for =xref-find-references= says
it's a function from =dc-interfaces.el=, which it's not. So right off the bat,
the help system isn't listing the correct definition for this (first time to
I've noticed that.)

Running =xref-find-definition= on =xref-find-references= is taking me to
=~/.emacs.g/straight/repos/xref= which is definitely wrong. Running
=straight-dependents= shows =xref= in completion and then lists:

+ consult-eglot
+ tabspaces
+ project, which is also a core emacs dependency

So adding =xref= and =project= to =straight-built-in-pseudo-packages=, calling
=straight-purge-repositories= and restarting emacs should fix the problem.

I may move from =setup.el= to =use-package=. I'm not sure yet: if it ain't too
broke, don't fix it. I like setup.el's DSL, but I consistently see =use-package=
everywhere. Doing this would almost certainly require using emacs' new
=-init-directory= feature, which also means dropping plexus/chemacs2. Too many
changes. i don't feel like it.

+ I'm actually fairly surprised that I haven't had more problems by mixing Guix
  and Straight, but I can get it to work.
+ On the other hand, I'm not sure I can easily mix =use-package= and I like that
  the latter provides deterministic, immutable emacs packages.

** Auth Sources

+ [[https://magit.vc/manual/ghub/How-Ghub-uses-Auth_002dSource.html#How-Ghub-uses-Auth_002dSource][Configure github for ghub/forge using auth-sources]]
+ Mastering Emacs: [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]]

** Performance

*** Implications of Emacs' Single-Threaded Nature

The CPU affinity/scheduling of emacs should ALWAYS be managed

- the CPU of emacs should ALWAYS be set
- performance will greatly benefit if there are always cache hits for
  emacs-related CPU instruction execution
  - garbage collection is an emacs bottleneck
  - similarly, if a CPU's L1/L2 caches remain emacs process-specific for longer,
    then the performance benefits are extended
  - therefore, one core should (?) be like 97% dedicated to emacs
    - this will never lock the system
    - the assigned CPU core's for =emacsclient= processes may be irrelevant
    - if a policy can be implemented to avoid executing any process except emacs
      code on the emacs CPU (or numa node), then this will help accelerate emacs
      quite a bit.
    - however, since emacs-lisp is an interpreted language, it's unclear how the
      a language's VM tracks values/references/variables and how this maps to
      how the CPU ultimately tracks L2/L3 cache references
    - if it is clear to the kernel/scheduler & cpu cache metrics how valuable
      emacs data is for that process, then it's more likely to be persisted.

In other words, this tells us what [some of us understand] which is that:

#+begin_quote
HAVING ACCESS TO GRANULAR CONFIGURATION/CUSTOMIZATION IS EXTREMELY VALUBALE IN
SOME SITUATIONS
#+end_quote

Such, when combined with something else that most of us understand:

#+begin_quote
Emacs is incredibly unlikely to ever be multi-threaded ... without breaking most
packages, yielding an abyssal number of bugs and resulting in somehow making
emacs 10x more complicated than it already is.
#+end_quote

**** TODO perf implications of mgmt/scheduling of emacs client/server processes?** TODO Describe CPU Pinning

**** Originally from =.emacs.g= config

TL;DR: Emacs is single threaded: cache hits nice; any cache misses :( long gc

+ emacs server should be pinned to a CPU
  - clients should perhaps be pinned nearby (IPC?)
  - Other tasks should avoid that CPU
+ NUMA should be configured in bios and on system

It probably won't help a ton, but it probably would make GC less noticeable,
especially if you can guarantee that other processes don't compete for the pinned CPU core

+ with [[https://www.amd.com/en/products/cpu/amd-ryzen-9-5950x][AMD 5950x]] (32 core, 8MB L2 and 64MB L3, it's probably somewhat
  significant (esp. during GC, so thresholds could be higher)
+ It's actually pretty nice that you can guarantee your IDE doesn't consume all
  your resources.

See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collection]] for info
  - #'garbage-collect :: runs GC and returns information about memory usage
  - garbage-collection-messages :: indicates gc start/stop in messages buffer

*** TODO Other performance concerns

How do bytecode/native compilation affect symbol names and memory footprint?

+ Can these features reduce the time-to-GC?
  - Yes, probably. The symbol representations/names /probably/ go away in
    bytecode/nativecomp, but they are at least accessible when emacs-lisp
    bytecode is made readable.
+ Could other similar features/configs extend the life of single-threaded Emacs?

** Windows/Popups

+ 20.6 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Buffers.html][Displaying a Buffer in a Window]]
+ 29.13 Displaying a Buffer in a Suitable Window
  - 29.13.6 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html][The Zen of Buffer Display]]
+ 29.27 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Parameters.html][Window Parameters]]
+ 14.7 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Follow-Mode.html][Follow Mode]]


*** Hacks

**** Displaying Multiple Buffers in the Same Window

See this comment in #303 in [[https://github.com/politza/pdf-tools/issues/303#issuecomment-397744326][politza/pdf-tools]] (to display multiple pages of a
PDF in a single window)

** Frames/Tabs

** Tree-sitter
+ [[https://karthinks.com/software/a-consistent-structural-editing-interface/][A consistent structural editing interface]] (comparison of structural editng options in emacs)

** System Programming

*** Detecting [[https://emacs.stackexchange.com/questions/31224/how-to-test-programmatically-whether-the-current-emacs-session-among-several][Whether Emacs Is Running As Daemon]]

This detects whether the focused Emacs frame is connected to a server. It will
return false if there is not another emacs process running as server.

#+begin_example emacs-lisp
(and (boundp 'server-process)
     (processp server-process)
     (server-running-p))
#+end_example

** Keybindings
*** Learning Keybindings
+ [[https://www.reddit.com/r/emacs/comments/ykm7in/creating_and_displaying_cheatsheets_of_keybindings/][Creating and displaying cheatsheets of keybindings]] (r/emacs) contains good ideas
for learning keybindings.

*** Embark bindings

From: [[https://www.reddit.com/r/emacs/comments/s2ma7b/embark_export_which_key_bindings_to_a_separate/][Embark export which key bindings to a separate buffer?]]

You can use embark (hit =C-h= after prefix, before which-key to get the following )

#+begin_example emacs-lisp
(use-package embark
  :bind
  ([remap describe-bindings] . embark-bindings)
  :custom
  (prefix-help-command #'embark-prefix-help-command))
#+end_example

You can also just press =C-h= after *any* prefix ... MIND.BLOWN. It brings up  =embark-prefix-help-command=, no need to disable which-key.

*** Identifying Keys/maps:

+ [[https://emacs.stackexchange.com/questions/653/how-can-i-find-out-in-which-keymap-a-key-is-bound][Where a key is bound]]

**** TODO find which keymaps a binding appears in.

** Saving with another users permissions

+ There is =(sudo-save)= and a trick where you =chmod= with =dired=
  - but these are prone to
+ There is also the =:w !sudo tee %= trick from vim
  - It could be adopted for emacs, but handing keyboard input is dicey.
  - Not ever =(shell-... )= commend in emacs-lisp is going to make the correct
    calls for authorization.
  - [[https://vi.stackexchange.com/questions/475/how-to-save-a-file-for-which-i-have-no-write-permissions/476#476][S/O issue one]] & [[https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work][S/O issue two]]

* Emacsen
** Lem (cl-lisp implementation)

See [[https://www.cliki.net/cl-emacs][cliki.net/cl-emacs]]

* Roam
+ [[id:83315604-b917-45e3-9366-afe6ba029a60][Systems]]
