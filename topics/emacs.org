:PROPERTIES:
:ID:       6f769bd4-6f54-4da7-a329-8cf5226128c9
:END:
#+title: Emacs

+ [[id:83315604-b917-45e3-9366-afe6ba029a60][Systems]]

* Docs


* Open Souce

+ [[https://www.fosskers.ca/en/blog/contributing-to-emacs][Contributing to Emacs]]

* Components

** Emacs Widgets (defcustom)

+ Types in =defcustom= are [[https://www.gnu.org/software/emacs/manual/html_mono/widget.html][Emacs widgets]]
  - basic types
  - sexp types (4 categories: constant/generic/atomic/composite)
    - atomic contains: regexp,

* Killer Apps

* Timesavers

** Learning

** Browsing Code
+ navigating definitions in arbitrary code (esp. elisp)
  + M-. :: =+lookup/definition=
  + M-, :: =better-jump-jump-backward= (or =xref=)

** Dired
+ Q :: =dired-do-find-regexp-and-replace=

** Dir Locals
+ [[https://stackoverflow.com/questions/63578123/setting-a-mode-for-a-particular-file-using-dir-locals-el][setting a mode for files in a project]]
  - handy to avoid modifying files on a local/remote project
  - also handy to avoid accidentally modifying your Doom Emacs config, which is
    tricky to trace. if this happens, you were probably already dealing with
    issues. Add =(mode . read-only)= inside =((nil . (...) ))=

* Tools

** Completion

*** Ivy

**** TODO Browse the =*Ivy Help*= buffer for tips on using minibuffer
+ From minibuffer, type =C-h m=


* Issues

** Performance

*** Implications of Emacs' Single-Threaded Nature

The CPU affinity/scheduling of emacs should ALWAYS be managed

- the CPU of emacs should ALWAYS be set
- performance will greatly benefit if there are always cache hits for
  emacs-related CPU instruction execution
  - garbage collection is an emacs bottleneck
  - similarly, if a CPU's L1/L2 caches remain emacs process-specific for longer,
    then the performance benefits are extended
  - therefore, one core should (?) be like 97% dedicated to emacs
    - this will never lock the system
    - the assigned CPU core's for =emacsclient= processes may be irrelevant
    - if a policy can be implemented to avoid executing any process except emacs
      code on the emacs CPU (or numa node), then this will help accelerate emacs
      quite a bit.
    - however, since emacs-lisp is an interpreted language, it's unclear how the
      a language's VM tracks values/references/variables and how this maps to
      how the CPU ultimately tracks L2/L3 cache references
    - if it is clear to the kernel/scheduler & cpu cache metrics how valuable
      emacs data is for that process, then it's more likely to be persisted.

In other words, this tells us what [some of us understand] which is that:

#+begin_quote
HAVING ACCESS TO GRANULAR CONFIGURATION/CUSTOMIZATION IS EXTREMELY VALUBALE IN
SOME SITUATIONS
#+end_quote

Such, when combined with something else that most of us understand:

#+begin_quote
Emacs is incredibly unlikely to ever be multi-threaded ... without breaking most
packages, yielding an abyssal number of bugs and resulting in somehow making
emacs 10x more complicated than it already is.
#+end_quote


**** TODO perf implications of mgmt/scheduling of emacs client/server processes?

** System Programming

*** Detecting [[https://emacs.stackexchange.com/questions/31224/how-to-test-programmatically-whether-the-current-emacs-session-among-several][Whether Emacs Is Running As Daemon]]

This detects whether the focused Emacs frame is connected to a server. It will
return false if there is not another emacs process running as server.

#+begin_example emacs-lisp
(and (boundp 'server-process)
     (processp server-process)
     (server-running-p))
#+end_example

** Saving with another users permissions

+ There is =(sudo-save)= and a trick where you =chmod= with =dired=
  - but these are prone to
+ There is also the =:w !sudo tee %= trick from vim
  - It could be adopted for emacs, but handing keyboard input is dicey.
  - Not ever =(shell-... )= commend in emacs-lisp is going to make the correct
    calls for authorization.
  - [[https://vi.stackexchange.com/questions/475/how-to-save-a-file-for-which-i-have-no-write-permissions/476#476][S/O issue one]] & [[https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work][S/O issue two]]
