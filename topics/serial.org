:PROPERTIES:
:ID:       14e8fb0c-abda-4175-8fca-49f7b865b7b6
:END:
#+TITLE: Serial (i2c, ddc, term)
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes on serial connections


* I2C

** Docs
+ [[github:kph/i2cipc][kph/i2cipc]] a pair of I2C drivers (controller/responder) that communicate over
  a bus.

** Resources

** Topics
*** Examples

**** [[https://tinkering.xyz/async-serial][Using Python's asyncio with serial devices]]

**** [[https://www.stupid-projects.com/posts/linux-and-the-i2c-and-spi-interfaces][Linux and the I2C & SPI interfaces]]

A 2+ part series that contrasts the differences between interacting with i2c/spi
devices in user space and via firmware.

+ code: [[https://bitbucket.org/dimtass/linux-arduino-spi-i2c][dimtass/linux-arduino-spi-i2c]]

*** Alternatives
**** UART

**** SPI

*** GNU Screen

This program connects to anything! ... And i mean anything, lulz
* Testing Hardware

Or Automating Hardware

** Any solution

*** Universal domain problems

Almost everything must overcome at least these issues:

+ process management & lifecycle, logging
+ mediating remote state (push, pull), loops in topology
+ race conditions, potentially clocking & corrupted data
+ message types/meanings (these differ between client/server or
  consumer/producer) & potentially transactions
+ maybe a system of ad-hoc addressing (i2c does this) which can simplify
  topography (& code), as long as messages are rebroadcast (mkfifo will consume)

Also, establishing a graph of connections where

+ both edges & nodes have types
+ nodes are treated as objects & may have multiple connection-points
+ and edges have directionality

Wrapping IPC in a "service" pattern can simplify things. It's then
quasi-stateless, so it's easier to recover from (usually manually). Otherwise,
your stateful programs need to be instantiated in some partial environment to
finish some incomplete transactions.

** TCL

This can interact with spawned processes

** Robot Framework & RPA

This can technically test hardware if combined with the correct scripts
(bash+python), but in most cases seems to be used for web testing. It's
basically cucumber (or a quasi-plain language DSL)

* Applications of i2c

** DDC

** Cisco

** Cloud

Deploy big compute and config, old-school

** Robotics

* UUCP
This is an older command for networked Unix systems, formerlly used with
modems/dialup to connect & transfer files. I guess it establishes a serial
connection.

The devices named =/dev/ttyACM*= for serial devices are owned by =root:uucp=. This
is a group for the =UUCP= subsystem, [[https://wiki.debian.org/SystemGroups][associated with uucico, uuclient and uuserver
protocols]]. Today, it provides blind people using a braille display with access
to the raw linux console (I guess reading the raw tty file idk)

- no manpages for those CLI tools, but =uucp= shows: =uucp: system-to-system copy=
- remove the group from user if/when unnecessary

** Docs
+ IBM: [[https://www.ibm.com/docs/da/aix/7.2.0?topic=u-uucp-command][uucp]]
** Resources

