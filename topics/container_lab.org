:PROPERTIES:
:ID:       6c837f3a-5290-4a68-af44-52caea643e34
:END:
#+TITLE: Container Lab
#+DESCRIPTION:
#+TAGS:


* Roam

+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][Networking]]
+ [[id:afe1b2f0-d765-4b68-85d0-2a9983fa2127][Containers]]
+ [[id:e967c669-79e5-4a1a-828e-3b1dfbec1d19][Route Switch]]

* Docs

Thank the jesus they have a [[https://github.com/srl-labs/containerlab/blob/main/schemas/clab.schema.json][JSON schema]] (mainly helps when writing arbitrary
yaml, but not really for yaml of mixed schemas)

** Commands

+ [[https://containerlab.dev/cmd/tools/veth/create/#examples][containerlab generate]] create a basis for a clab.yml
+ [[https://containerlab.dev/cmd/graph/][containerlab graph]] render a topology into graphviz, interactive HTML (via
  JSON), Mermaid, drawio.io
+ [[https://containerlab.dev/cmd/tools/veth/create/][containerlab tools veth create]]
  - other objects that require matching configs on multiple devices (VXLAN, ssh,
    Cert/CA/Sign)
+ [[https://containerlab.dev/cmd/exec/][containerlab exec]] distribute commands across nodes

** Topology

+ [[https://github.com/srl-labs/containerlab/tree/main/lab-examples][./lab-examples]]
+ [[https://github.com/srl-labs/containerlab/blob/main/lab-examples/clos02/clos02.clab.yml][./lab-examples/clos02/clos02.clab.yml]]: "5-stage CLOS fabric"

** Automation

+ [[https://github.com/srl-labs/pydantic-srlinux/tree/main/example][srl-labs/pydantic-srlinux]] examples (ending with simple nornir integration)
  - to use with containerlab, generate pydantic classes from topology schema
  - these are the pydantic classes from the srlinux variant of openconfig
  - to interact with FRR, must generate classes from FRR yang (via
    pydantic/pydantify)
  - initiate a containerlabs topology, iterate over it, extract hosts to
    nornir/ansible config, extract params to hostvars (or other config)
  - generate configuration or =vyos= set commands
  - log metadata

*** Mistral
Make for network tasks (different approach than ansible)

+ [[https://docs.openstack.org/mistral/latest/user/index.html][Docs]] and [[https://github.com/openstack/mistral][openstack/mistral]]
+ [[https://github.com/nokia/cloudflow][nokia/cloudflow]]

** Data Model
*** NDK
+ [[https://learn.srlinux.dev/ndk/apps/][NDK App Catalog]]
+ [[https://learn.srlinux.dev/ndk/guide/architecture/][NDK Architecture]]
+ [[https://ndk.srlinux.dev/][NDK Protobufs docs]]
  - nokia/srlinux-ndk-protobufs branches: [[https://github.com/nokia/srlinux-ndk-protobufs/tree/protos][protos]]
  - [[https://github.com/nokia/srlinux-ndk-go][nokia/srlinux-ndk-go]] go bindings (via proto)
  - [[https://github.com/nokia/srlinux-ndk-python][nokia/srlinux-ndk-python]] python bindings (via proto)
*** Yang
+ [[https://github.com/srl-labs/yang-browser][srl-labs/yang-browser]]

** NDK


* Resources

+ [[https://github.com/srl-labs/network-multitool][srl-labs/network-multitool]]
+ [[https://www.youtube.com/watch?v=oClamTj4LiY][Network Automation with YANG/Python is a Reality]] Generating pydantic lib from
  yang for sr linux

** Interesting projects

+ [[https://github.com/nokia/regexp-learner][nokia/regexp-learner]]: learns regexps from counter/examples. uses numpy and
  [[https://pypi.org/project/pybgl][pybgl]], the latter is a Boost C++ dep (headers only, doesn't need recompilation
  for FFI)

* Topics

I'm mostly interested in:

+ Topology Model
  - maybe my mistake was to assume edges/connections were layer 2+3
+ YANG/Pydantic code generation (probably one-way: read from devices into
  models, run commands via templates)

** Pydantify

to use [[https://github.com/srl-labs/pydantic-srlinux/tree/main/example][srl-labs/pydantic-srlinux]] with containerlab

generate pydantic classes from topology schema using
[[https://github.com/koxudaxi/datamodel-code-generator][koxudaxi/datamodel-code-generator]]. these are the pydantic classes from the
srlinux variant of openconfig

#+begin_src shell
# uv tool install datamodel-codegen
datamodel-codegen  --input person.json --input-file-type jsonschema --output model.py
#+end_src

+ to interact with FRR, must generate classes from FRR yang (via
  pydantic/pydantify)
+ initiate a containerlabs topology, iterate over it, extract hosts to
  nornir/ansible config, extract params to hostvars (or other config)
+ generate configuration or vyos =set= commands
+ log metadata

Then connect paths using these

+ [[https://github.com/openconfig/yang/blob/65fb9ff7590595be1ddeafef8fbaac37cb4c0671/experimental/ietf/ACL-MODEL/filter.yang#L2][openconfig/yang: experimental/ietf/ACL-MODEL/filter.yang]]
+ [[https://github.com/openconfig/yang/blob/65fb9ff7590595be1ddeafef8fbaac37cb4c0671/experimental/ietf/ACL-MODEL/filter-template.yang#L2][openconfig/yang: experimental/ietf/ACL-MODEL/filter-template.yang]]

**** Test =datamodel-codegen=

Wow that appears to work, but now I need to create a python environment to test
validation and I kinda don't feel like it. lol

#+begin_src shell :results output verbatim file :file img/net/clab_pydantic_gen.py
url=https://raw.githubusercontent.com/srl-labs/containerlab/refs/heads/main/schemas/clab.schema.json
uv tool run --from datamodel-code-generator[http] datamodel-codegen \
    --url=$url \
    --reuse-model
#+end_src

#+RESULTS:
[[file:img/net/clab_pydantic_gen.py]]

Adding =--reuse-mode= does this, which is terrible, since it could've been =async=
... hmmm

#+begin_example diff
diff -u /data/org/roam/topics/img/net/clab_pydantic_gen0.py /data/org/roam/topics/img/net/clab_pydantic_gen.py
--- /data/org/roam/topics/img/net/clab_pydantic_gen0.py	2025-05-28 11:04:05.657523953 -0400
+++ /data/org/roam/topics/img/net/clab_pydantic_gen.py	2025-05-28 11:04:13.862653730 -0400
@@ -1,6 +1,6 @@
 # generated by datamodel-codegen:
 #   filename:  https://raw.githubusercontent.com/srl-labs/containerlab/refs/heads/main/schemas/clab.schema.json
-#   timestamp: 2025-05-28T14:57:59+00:00
+#   timestamp: 2025-05-28T15:03:27+00:00

 # url=https://raw.githubusercontent.com/srl-labs/containerlab/refs/heads/main/schemas/clab.schema.json
 # uv tool run --from datamodel-code-generator[http] datamodel-codegen \
@@ -539,36 +539,20 @@
     exec: Optional[StageExec] = None


-class CreateLinks(BaseModel):
-    class Config:
-        extra = Extra.forbid
-
-    wait_for: Optional[WaitForConfig] = Field(None, alias="wait-for")
-    exec: Optional[StageExec] = None
-
-
-class Configure(BaseModel):
-    class Config:
-        extra = Extra.forbid
-
-    wait_for: Optional[WaitForConfig] = Field(None, alias="wait-for")
-    exec: Optional[StageExec] = None
+class CreateLinks(Create):
+    pass


-class Healthy(BaseModel):
-    class Config:
-        extra = Extra.forbid
+class Configure(Create):
+    pass

-    wait_for: Optional[WaitForConfig] = Field(None, alias="wait-for")
-    exec: Optional[StageExec] = None

+class Healthy(Create):
+    pass

-class Exit(BaseModel):
-    class Config:
-        extra = Extra.forbid

-    wait_for: Optional[WaitForConfig] = Field(None, alias="wait-for")
-    exec: Optional[StageExec] = None
+class Exit(Create):
+    pass


 class StagesConfig(BaseModel):

Diff finished.  Wed May 28 11:04:16 2025
#+end_example
** Multitool
+ [[https://github.com/srl-labs/network-multitool][srl-labs/network-multitool]]

** Examples
*** Node Types

By example

#+begin_src shell
# LOL that's a work of art
grep -e 'kind: ' /data/ecto/vyos/srl-labs/containerlab/lab-examples/**/*.yml  \
    | rev | sort | sed -e 's/.*:dnik.*:\(lmy.*\)\/sel.*/\1/g' \
    | rev | uniq -c
#+end_src

#+RESULTS:
|  1 | srlvjunos02/srlvjunos02.clab.yml |
|  2 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlcrpd01/srlcrpd01.clab.yml     |
|  1 | srlxrd01/srlxrd01.clab.yml       |
|  1 | freebsd01/freebsd01.clab.yml     |
|  1 | openbsd01/openbsd01.yml          |
|  1 | br01/br01.clab.yml               |
|  1 | ixiac01/ixiac01.clab.yml         |
|  2 | fortigate/fortigate.clab.yml     |
|  1 | srlvjunos01/srlvjunos01.clab.yml |
|  1 | vr04/vr04.clab.yml               |
|  1 | generic_vm01/generic_vm.clab.yml |
|  3 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlceos01/srlceos01.clab.yml     |
|  1 | vr01/vr01.clab.yml               |
|  1 | vr05/vr01.clab.yml               |
|  1 | cert01/cert01.clab.yml           |
|  1 | vr05/sros4.clab.yml              |
|  1 | vxlan01/vxlan-sros.clab.yml      |
|  1 | sonic01/sonic01.clab.yml         |
|  1 | ftdv01/ftdv01.yml                |
|  1 | vr03/vr03.clab.yml               |
|  1 | vr02/vr02.clab.yml               |
|  1 | vxlan01/vxlan-vmx.clab.yml       |
|  1 | vsrx01/vsrx01.yml                |
|  2 | openbsd01/openbsd01.yml          |
|  2 | ftdv01/ftdv01.yml                |
|  2 | vsrx01/vsrx01.yml                |
|  2 | freebsd01/freebsd01.clab.yml     |
|  6 | frr01/frr01.clab.yml             |
|  1 | srlfrr01/srlfrr01.clab.yml       |
|  2 | clos01/clos01.clab.yml           |
|  4 | clos02/clos02.clab.yml           |
|  4 | clos02/setup.clos02.clab.yml     |
|  4 | srl03/srl03.clab.yml             |
|  1 | ost-srl/ost-srl.clab.yml         |
|  1 | cvx01/topo.clab.yml              |
|  1 | cvx02/topo.clab.yml              |
|  1 | ixiac01/ixiac01.clab.yml         |
|  1 | sonic01/sonic01.clab.yml         |
|  1 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlcrpd01/srlcrpd01.clab.yml     |
|  1 | srlxrd01/srlxrd01.clab.yml       |
|  1 | srl01/srl01.clab.yml             |
|  1 | srl-quickstart/srl01.clab.yml    |
|  3 | br01/br01.clab.yml               |
|  1 | srlfrr01/srlfrr01.clab.yml       |
|  1 | vr01/vr01.clab.yml               |
|  1 | vr05/vr01.clab.yml               |
|  1 | srlceos01/srlceos01.clab.yml     |
|  3 | clos01/clos01.clab.yml           |
|  1 | srlvjunos01/srlvjunos01.clab.yml |
|  2 | srl02/srl02.clab.yml             |
|  2 | srl-quickstart/srl02.clab.yml    |
|  1 | vr02/vr02.clab.yml               |
| 10 | clos02/clos02.clab.yml           |
| 10 | clos02/setup.clos02.clab.yml     |
|  1 | srlvjunos02/srlvjunos02.clab.yml |
|  4 | srl03/srl03.clab.yml             |
|  1 | vr03/vr03.clab.yml               |
|  1 | vr04/vr04.clab.yml               |
|  1 | ost-srl/ost-srl.clab.yml         |
|  1 | generic_vm01/generic_vm.clab.yml |
|  1 | cvx01/topo.clab.yml              |
|  1 | cvx02/topo.clab.yml              |

count by =kind=

#+begin_src shell
grep -e 'kind: ' /data/ecto/vyos/srl-labs/containerlab/lab-examples/**/*.yml  \
    | rev | sort | sed -e 's/ :dnik.*//g' \
    | rev | uniq -c
#+end_src

#+RESULTS:
|  1 | juniper_vjunosevolved |
|  2 | k8s-kind              |
|  1 | juniper_crpd          |
|  1 | cisco_xrd             |
|  1 | freebsd               |
|  1 | openbsd               |
|  1 | bridge                |
|  1 | keysight_ixia-c-one   |
|  2 | fortinet_fortigate    |
|  1 | juniper_vjunosswitch  |
|  1 | cisco_xrv9k           |
|  1 | generic_vm            |
|  3 | ext-container         |
|  1 | arista_ceos           |
|  5 | nokia_sros            |
|  1 | sonic-vs              |
|  1 | cisco_ftdv            |
|  1 | cisco_xrv             |
|  2 | juniper_vmx           |
|  1 | juniper_vsrx          |
|  8 | linux                 |
| 17 | linux                 |
|  4 | linux                 |
|  3 | linux                 |
| 52 | nokia_srlinux         |
|  2 | cumulus_cvx           |


** Images

A pretty wide variety of images

| ceos:4.32.0F                                        | praqma/network-multitool:latest           |
| crpd:20.2R1.10                                      | vrnetlab/vr-fortigate:7.0.14              |
| docker-sonic-vs:2020-11-12                          | vrnetlab/vr-freebsd:13.2                  |
| frrouting/frr:v7.5.0                                | vrnetlab/vr-ftdv:7.2.5                    |
| frrouting/frr:v7.5.1                                | vrnetlab/vr-openbsd:7.3                   |
| ghcr.io/hellt/network-multitool                     | vrnetlab/vr-sros:21.2.R1                  |
| ghcr.io/nokia/srlinux                               | vrnetlab/vr-ubuntu:jammy                  |
| ghcr.io/nokia/srlinux:${SRL_VERSION:=latest}        | vrnetlab/vr-vjunosevolved:23.2R1-S1.8-EVO |
| ghcr.io/nokia/srlinux:23.10.1                       | vrnetlab/vr-vjunosswitch:23.2R1.14        |
| ghcr.io/nokia/srlinux:23.3.3                        | vrnetlab/vr-vmx:20.2R1.10                 |
| ghcr.io/nokia/srlinux:23.7.1                        | vrnetlab/vr-vmx:20.4R1.12                 |
| ghcr.io/nokia/srlinux:24.10                         | vrnetlab/vr-vsrx:23.2R1.13                |
| ghcr.io/nokia/srlinux:24.3.2                        | vrnetlab/vr-xrv:6.1.2                     |
| ghcr.io/open-traffic-generator/ixia-c-one:1.28.0-45 | vr-sros:21.2.R1                           |
| networkop/cx:4.3.0                                  | vr-xrv9k:7.2.1                            |
| networkop/host:ifreload                             | wbitt/network-multitool:alpine-extra      |
| nokia_sros:20.10.R1                                 | xrd-control-plane                         |
| ostinato/ostinato:v1.3.0-1                          |                                           |
** srl-labs/containerlab

*** Topology

+ Some of the CLI tools can ingest the topology file and populate a data
  structure with nodes without running through all the stages
  - The CLI for draw.io will pretty quickly boot a container to build the graph

**** Route discovery

+ [[https://github.com/srl-labs/containerlab/blob/2047a94541fb44d98f6fc243dbc0d72cf3618f01/utils/netlink.go#L129-L139][./utils/netlink.go]] -> [[https://github.com/jsimonetti/rtnetlink/blob/858ea9dbff34b590e5f33f2107984f5b2d3ad19c/rtnl/conn.go][rtnl/conn.go#Dial()]] -> [[https://github.com/jsimonetti/rtnetlink/blob/master/conn.go#L38][Dial]] -> netlink.Dial ([[https://github.com/mdlayher/netlink/blob/main/conn.go#L58-L71][./conn.go]])
  - This opens an =AF_NETLINK= socket which provides direct access to linux
    networking data.
  - [[https://mdlayher.com/blog/linux-netlink-and-go-part-1-netlink/][Linux, Netlink and Go]] ... what is this anyways?
+ [[https://github.com/jsimonetti/rtnetlink/blob/858ea9dbff34b590e5f33f2107984f5b2d3ad19c/rtnl/route_live_test.go][rtnetlink ./rtnl/route_live_test.go]] gets a route to an IP address
+ [[https://github.com/jsimonetti/rtnetlink/blob/858ea9dbff34b590e5f33f2107984f5b2d3ad19c/rtnl/neigh_live_test.go#L13-L30][rtnetlink ./rtnl/neigh_live_test.go]] demos "pushing gateway onto the neighbor table"

***** Path enumeration

Yeh, so it looks like "model is not the system" ... the behavior of the CLab
network as a system is more complicated than model's config can provide (and
thus, it needs to be simulated in order to extract live data ... basically no
matter what)

So, to enumerate routes, stand up infrastructure sufficiently similar to IRL
infrastructure, then distribute "queries" across the network to extract routing
tables/etc... Then data collected from each device/interface's perspective on
the network needs to be collated/merged.

These can all still impair your ability to trace paths through the network.

+ dynamic routing protocols, firewall rules
+ interface flapping or device state
+ connectivity issues, etc

Distributing an nmap service across the network to test paths/ports gives you
=point-to-point@port= data, but not =netflow= (i.e. analogous to ping vs.
traceroute)

Exporting/Using the topology format helps define what tasks need to run, but
still doesn't contain enough information to merge it later. Control over
L2/L3/L4 (interfaces, ip, session) data that emit the traffic is a trap.

*** Makefile

#+begin_example shell
d=$(pwd)
cd $_ECTO/clab/srl-labs/containerlab
makefile-graph --makefile Makefile --direction LR \
  | dot -Tsvg -Kdot > $d/img/clab/clab-makefile.svg
#+end_example


[[file:img/clab/clab-makefile.svg]]
** Topology

*** Web View

The third to last =<script>= tag contains the topology as javascript data:

#+begin_src javascript
// console.log(data); // it's global
{
    "nodes": [
        {"name":"client1",
         "image":"ghcr.io/srl-labs/alpine",
         "kind":"linux",
         "state":"N/A"},
        {"name":"client2",
         "image":"ghcr.io/srl-labs/alpine",
         "kind":"linux",
         "state":"N/A"},
        {"name":"srl1",
         "image":"ghcr.io/nokia/srlinux:24.10.1",
         "kind":"nokia_srlinux",
         "state":"N/A"},
        {"name":"srl2",
         "image":"ghcr.io/nokia/srlinux:24.10.1",
         "kind":"nokia_srlinux",
         "state":"N/A"}],
    "links":[
        {"source":"client1",
         "source_endpoint":"eth1",
         "target":"srl1",
         "target_endpoint":"e1-1"},
        {"source":"srl1",
         "source_endpoint":"e1-10",
         "target":"srl2",
         "target_endpoint":"e1-10"},
        {"source":"srl2",
         "source_endpoint":"e1-1",
         "target":"client2",
         "target_endpoint":"eth1"}
    ]
}
#+end_src
* Issues
