:PROPERTIES:
:ID:       8d789c98-5e74-4bf8-9226-52fb43c5ca51
:END:
#+TITLE: Gitforge

* Gitlab

** Docs

** Resources
+ [[https://docs.gitlab.com/ee/install/docker.html][Gitlab Docker Images]]

*** Gitlab Environment Toolkit

Walkthroughs explaining setup of advanced gitlab features & service integrations
on multiple cloud providers. Req. terraform, but offers overview of the ins/outs
of gitlab.

+ [[https://gitlab.com/gitlab-org/gitlab-environment-toolkit/-/blob/main/docs/environment_configure.md][Configuring the environment with ansible]] (roam: [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][DevOps]])
+ [[https://gitlab.com/gitlab-org/gitlab-environment-toolkit/-/blob/main/docs/environment_post_considerations.md][Backups/security]]
+ [[https://gitlab.com/gitlab-org/gitlab-environment-toolkit/-/tree/main/examples][Example deploys on cloud/hybrid]] (both google cloud and aws)

* Github

** Docs
*** API

*** GraphQL API

See [[https://github.com/magit/ghub/blob/main/lisp/ghub-graphql.el][ghub-graphql.el]] in [[https://github.com/magit/ghub][magit/ghub]] for API, particularly the queries defined as
=defconstant= like =ghub-fetch-repository= and the matching =cl-defun=.

And see [[https://github.com/vermiculus/graphql.el][vermiculus/graphql.el]] for graphql queries generally.

** Resources
*** Searches
+ Find repos with =.github/workflows= defined [[https://github.com/search?q=path%3A%2F%5E%5C.github%5C%2Fworkflows%5C%2F.*%5C.yaml%24%2F&type=code][path:/^\.github\/workflows\/.*\.yaml$/]]


** Topics
*** Github Backend
**** [[https://dl.acm.org/doi/10.1145/3487019.3487022][Static Analysis at GitHub: An experience report]] (2021)

Kafka launches treesitter workers.

*** GraphQL


* Github Actions

** Docs
+ [[https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions][Using Secrets in Github Actions]]
+ NaCl [[https://libsodium.gitbook.io/doc/public-key_cryptography/sealed_boxes][libsodium sealed boxes]] use X25519 and XSalsa20-Poly1305.


** Resources


** Topics

*** Secrets

The usage of =crypto_box= implies the key needs a secondary method of encryption
to be safely stored.

*** Secrets Encryption

Crypto Box

| Key exchange | Encryption | Authentication |
|--------------+------------+----------------|
| X25519       | XSalsa20   | Poly1305       |

**** x25519 Support

+ [[https://github.com/arekinath/pivy][arekinath/pivy]] can work with =crypto_box= (and it is agent-based YAY!) ... but
  it's an =ebox= which doesn't use =Curve22519= ... so nevermind. PIV itself
  [[https://github.com/str4d/age-plugin-yubikey/issues/70][doesn't support x25519]].

***** On x25519

x25519 key exchange offers [[https://libsodium.gitbook.io/doc/public-key_cryptography/authenticated_encryption][authenticated encryption]] (which is probably why it's
difficult to work into the PIV specification). This is similar to signing, but
means that someone can validate whether a decryptable secret was encrypted by
someone (i guess it's similar to signing)

#+begin_quote
Based on Bob’s public key, Alice can compute a shared secret key. Using Alice’s
public key and his secret key, Bob can compute the same shared secret key. That
shared secret key can be used to verify that the encrypted message was not
tampered with before decryption.
#+end_quote

If i'm getting this correctly:

+ $f : A_{priv}, B_{pub} \rightarrow AB_{shared}$
+ and $f\prime : A_{pub}, B_{priv} \rightarrow AB_{shared}$
+ but also maps between pub/private keys

So, I'm skeptical because symmetry must satisfy critical properties in crypto.
You want functions that transform domains into ranges where measure is
near-uniform.

+ The maps should "mix" values going from message-space to cipher-space and this
  should be computationally easy.
+ Entropy should be high in cipher-space (the values are well-mixed)
+ Unmixing the values should be computationally hard without the keys.
+ You can easily create functions that transform a domain into uniform measure
  which are also easily reversed.

So, you must violate some kinds of symmetry while preserving others. This and
not all elliptic curves are created equally ... i'm pessimistic, not optimistic.
I guess the maps $f, f\prime$ above are only used for authentication. IDK
though.
