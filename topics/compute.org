:PROPERTIES:
:ID:       79d41758-7ad5-426a-9964-d3e4f5685e7e
:END:
#+TITLE: Compute
#+DESCRIPTION: Info on GPU's, CUDA, OpenCV, OpenCL
#+TAGS:

* Roam
+ pci

* Docs

* Resources

* Issues
** Check Versions
Use =gpu-viewer= if possible ... if it's broken, then:

+ glxinfo :: OpenGL
+ vulkaninfo :: Vulkan
+ clinfo :: OpenCL
+ es2_info :: EGL
+ vdpauinfo :: VDPAU (Supported on x11)
+ lscpu :: CPU
+ lsb_release :: Distro
+ XDG_CURRENT_DESKTOP :: Desktop
+ XDG_SESSION_TYPE :: Windowing System
+ cat /proc/meminfo | awk '/Mem/' :: Memory information
+ uname -r :: Kernel Information

** Uninstall AMDGPU Pro Drivers

These were for Blender, but weren't necessary for long...

*** Reinstall AMDGPU Open Drivers

#+begin_src shell
yay -Syu mhwd-amdgpu xf86-video-amdgpu-git \
    linux-hdr-headers-git \
    vulkan-radeon vulkan-headers vulkan-validation-layers vulkan-tools \
    mesa-git
#+end_src

But =mesa-git= conflicts with =vulkan-mesa-layers= which is provided by
=garuda-video-linux-config= ... so just install that, which supplies these:

#+begin_example
xf86-video-ati  xf86-video-amdgpu  xf86-video-nouveau  vulkan-intel  vulkan-radeon
intel-media-driver  libvdpau-va-gl  libva-intel-driver  libva-mesa-driver
mesa-vdpau  vulkan-mesa-layers  vulkan-swrast  lib32-vulkan-intel
lib32-vulkan-radeon  lib32-mesa-vdpau  lib32-libva-intel-driver
lib32-libva-mesa-driver  lib32-vulkan-mesa-layers

#Optional Deps

opencl-mesa
lib32-opencl-mesa
intel-compute-runtime
libva-vdpau-driver
lib32-libva-vdpau-driver
#+end_example

Ensure the drivers aren't blacklisted in =/etc/modprobe.d= and update
=/etc/mkinitcpio.conf=. Check kernel flags.

*** Rebuild opencl-amd-dev

This includes all the =hip= and =opencl= dependencies

* Topics

** CPU


** Numa

+ NUMA, multicore & CPU RAM Access
  - [[https://linuxconcept.com/tutorial/tuning-the-cpu-and-memory-with-numa-kvm/][Tuning the CPU and memory with NUMA]]
  - Remote RAM Latency (CAS, CL-n)
    * as measured in # of CPU Cycles

*** Resources
+ [[https://frankdenneman.nl/2016/07/11/numa-deep-dive-part-3-cache-coherency/][NUMA Deep Dive]]

** GPU

* NVidia
** Hardware

* AMD
** Hardware

** Support

** Compute (ROCm)

#+begin_quote
NOTE: check cuda support you buy a gpu..
#+end_quote

*** [[https://sep5.readthedocs.io/en/latest/][Docs]]

*** Resouces
+ [[)][ROCm Programming Guide]] with a few python options
+ [[https://rocmdocs.amd.com/en/latest/Deep_learning/Deep-learning.html][AMD ROCm Tensorflow]] (v2.2)
  - lots of good links

** Issues

*** Use OpenCL in Docker

[[https://github.com/RadeonOpenCompute/ROCm/issues/1180#top][RadeonOpenCompute/ROCm#1180]]: Figuring out that I need to run
=HSA_OVERRIDE_GFX_VERSION=10.3.0 python= just cost me like 12 hours bc I thought
"building native" would help me resolve issues...

*** Build Tensorflow on Archlinux

Something about XLA, a prematurely upgraded Bazel and some
=intel-oneapi-grs-fuk-agpu= prevents tensorflow from building and =clinfo= from
running on arch (as of 4/12/2023)

*** Unknown EDID CEA parser results


Similar issues, explains what it is though.

+ [[https://gitlab.freedesktop.org/drm/amd/-/issues/1589][AMDGPU fails to properly parse EDID information from display, causing weird resolution setting issues]]


From [[https://www.truenas.com/community/threads/daily-error-in-console-mar-2-06-30-20-truenas-kernel-drm-unknown-edid-cea-parser-results.108243/][Daily Error in Console]] (TrueNAS, March 2023):

#+begin_quote
"This is nothing. Basically, the GPU is complaining it can't establish a DRM-protected path to the monitor"
#+end_quote

From [[https://nvidia.custhelp.com/app/answers/detail/a_id/3569/~/managing-a-display-edid-on-windows][Managing display EDID on Windows]] (nvidia):

#+begin_quote
+ You can use it to fake a display being attached for testing.
+ In A/V environments with switchers and/or cable extenders the display EDID may be lost.
  - With the EDID being read from file the OS will always think the display is attached.
  - Protecting against hot plug events [or reconfiguring displays]
#+end_quote

* OpenMP

** Docs

** Resources
