
@startuml
hide empty methods
hide empty fields

class "**ContainerlabTopologyDefinitionFile**" as ContainerlabTopologyDefinitionFile {
        StringType **name**
        StringType **prefix**
        ContainerlabTopologyDefinitionFileMgmt **mgmt**
        ContainerlabTopologyDefinitionFileTopology **topology**
        ContainerlabTopologyDefinitionFileSettings **settings**
}

class "ContainerlabTopologyDefinitionFileMgmt" as ContainerlabTopologyDefinitionFileMgmt {
        StringType **network**
        StringType **bridge**
        StringType **ipv4-subnet**
        StringType **ipv6-subnet**
        Ipv4Addr **ipv4-gw**
        StringType **ipv6-gw**
        StringType **ipv4-range**
        StringType **ipv6-range**
        MTU **mtu**
}

class "**Ipv6Addr**" as Ipv6Addr {}
class "**Ipv4Addr**" as Ipv4Addr {}
class "**MTU**" as MTU {}

class "ContainerlabTopologyDefinitionFileTopology" as ContainerlabTopologyDefinitionFileTopology {
        ObjectType **nodes**
        ContainerlabTopologyDefinitionFileTopologyKinds **kinds**
        NodeConfig **defaults**
}

class "ContainerlabTopologyDefinitionFileTopologyKinds" as ContainerlabTopologyDefinitionFileTopologyKinds {
        NodeConfig **nokia_srlinux**
        NodeConfig **nokia_sros**
        NodeConfig **bridge**
        NodeConfig **ovs-bridge**
        NodeConfig **openbsd**
        NodeConfig **freebsd**
        NodeConfig **linux**
        NodeConfig **host**
        NodeConfig **ext-container**
        NodeConfig **juniper_vmx**
        NodeConfig **cisco_xrv**
        NodeConfig **rare**
}
        /'
         ' NodeConfig **arista_ceos**
         ' NodeConfig **cisco_xrd**
         ' NodeConfig **cisco_8000**
         ' NodeConfig **cisco_c8000v**
         ' NodeConfig **cumulus_cvx**
         ' NodeConfig **huawei_vrp**
         ' NodeConfig **generic_vm**
         ' NodeConfig **fdio_vpp**
         ' NodeConfig **sonic-vs**
         ' NodeConfig **sonic-vm**
         ' NodeConfig **dell_ftosv**
         ' NodeConfig **dell_sonic**
         ' NodeConfig **juniper_crpd**
         ' NodeConfig **juniper_vsrx**
         ' NodeConfig **juniper_vjunosrouter**
         ' NodeConfig **juniper_vjunosswitch**
         ' NodeConfig **juniper_vjunosevolved**
         ' NodeConfig **aruba_aoscx**
         ' NodeConfig **cisco_xrv9k**
         ' NodeConfig **cisco_nxos**
         ' NodeConfig **cisco_csr**
         ' NodeConfig **cisco_cat9kv**
         ' NodeConfig **cisco_ftdv**
         ' NodeConfig **cisco_iol**
         ' NodeConfig **ipinfusion_ocnos**
         ' NodeConfig **keysight_ixia-c-one**
         ' NodeConfig **checkpoint_cloudguard**
         '/

class "**NodeConfig**" as NodeConfig {
        StringType **image**
        StringType **image-pull-policy**
        StringType **restart-policy**
        StringType **kind**
        StringType **license**
        StringType **type**
        StringType **group**
        StringType **startup-config**
        IntegerType **startup-delay**
        BooleanType **enforce-startup-config**
        BooleanType **auto-remove**
        StringType[] **exec**
        StringType[] **binds**
        StringType[] **ports**
        ObjectType **env**
        StringType **user**
        StringType **entrypoint**
        StringType **cmd**
        Labels **labels**
        StringType **runtime**
        Ipv4Addr **mgmt-ipv4**
        Ipv6Addr **mgmt-ipv6**
        StringType **network-mode**
        IntegerType **cpu**
        StringType **memory**
        StringType **cpu-set**
        StringType **sandbox**
        StringType **kernel**
        ExtrasConfig **extras**
        ConfigConfig **config**
        StagesConfig **stages**
        DnsConfig **dns**
        CertificateConfig **certificate**
        HealthcheckConfig **healthcheck**
        StringType[] **aliases**
}

class "ContainerlabTopologyDefinitionFileSettings" as ContainerlabTopologyDefinitionFileSettings {
        CertificateAuthorityConfig **certificate-authority**
}

class "**CertificateAuthorityConfig**" as CertificateAuthorityConfig {
        StringType **cert**
        StringType **key**
        IntegerType **key-size**
        StringType **validity-duration**
}

class "**ExtrasConfig**" as ExtrasConfig {
        StringType[] **srl-agents**
        StringType **mysocket-proxy**
}

class "**ConfigConfig**" as ConfigConfig {
        ObjectType **vars**
}

class "**CertificateConfig**" as CertificateConfig {
        BooleanType **issue**
        StringType[] **sans**
        IntegerType **key-size**
        StringType **validity-duration**
}

class "**HealthcheckConfig**" as HealthcheckConfig {
        StringType[] **test**
        IntegerType **interval**
        IntegerType **retries**
        IntegerType **timeout**
        IntegerType **start-period**
}

class "**DnsConfig**" as DnsConfig {
        StringType[] **servers**
        StringType[] **search**
        StringType[] **options**
}

class "**StagesConfig**" as StagesConfig {
        StagesConfigCreate **create**
        StagesConfigCreateLinks **create-links**
        StagesConfigConfigure **configure**
        StagesConfigHealthy **healthy**
        StagesConfigExit **exit**
}

class "StagesConfigCreate" as StagesConfigCreate {
        WaitForConfigInner[] **wait-for**
        StageExec **exec**
}

class "**WaitForConfig**" as WaitForConfig extends List {}

class "**StageExec**" as StageExec {}

class "StagesConfigCreateLinks" as StagesConfigCreateLinks {
        WaitForConfigInner[] **wait-for**
        StageExec **exec**
}

class "StagesConfigConfigure" as StagesConfigConfigure {
        WaitForConfigInner[] **wait-for**
        StageExec **exec**
}

class "StagesConfigHealthy" as StagesConfigHealthy {
        WaitForConfigInner[] **wait-for**
        StageExec **exec**
}

class "StagesConfigExit" as StagesConfigExit {
        WaitForConfigInner[] **wait-for**
        StageExec **exec**
}

class "WaitForConfigInner" as WaitForConfigInner {
        StringType **node**
        StringType **stage**
}

enum "StagesEnum" as StagesEnum {
    **CREATE**
    **CREATE_LINKS**
    **CONFIGURE**
    **HEALTHY**
    **EXIT**
}

class "**StageExecList**" as StageExecList extends List {}

ContainerlabTopologyDefinitionFile  *--  ContainerlabTopologyDefinitionFileMgmt
ContainerlabTopologyDefinitionFile  *--  ContainerlabTopologyDefinitionFileTopology
ContainerlabTopologyDefinitionFile  *--  ContainerlabTopologyDefinitionFileSettings
ContainerlabTopologyDefinitionFileMgmt  *--  Ipv4Addr
ContainerlabTopologyDefinitionFileMgmt  *--  MTU
ContainerlabTopologyDefinitionFileTopology  *--  ContainerlabTopologyDefinitionFileTopologyKinds

ContainerlabTopologyDefinitionFileTopology  *--  NodeConfig
ContainerlabTopologyDefinitionFileTopologyKinds  *--  NodeConfig
ContainerlabTopologyDefinitionFileSettings  *--  CertificateAuthorityConfig

/' NodeConfig *-- Labels '/
NodeConfig *-- Ipv4Addr
NodeConfig *-- Ipv6Addr
NodeConfig *-- ExtrasConfig
NodeConfig *-- ConfigConfig
NodeConfig *-- StagesConfig
NodeConfig *-- DnsConfig
NodeConfig *-- CertificateConfig
NodeConfig *-- HealthcheckConfig

StagesConfig  *--  StagesConfigCreate
StagesConfig  *--  StagesConfigCreateLinks
StagesConfig  *--  StagesConfigConfigure
StagesConfig  *--  StagesConfigHealthy
StagesConfig  *--  StagesConfigExit
    
StagesConfigCreate "0" *-- "n" WaitForConfigInner
StagesConfigCreate  *--  StageExec

StagesConfigCreateLinks "0" *-- "n" WaitForConfigInner
StagesConfigCreateLinks  *--  StageExec
    
StagesConfigConfigure "0" *-- "n" WaitForConfigInner
StagesConfigConfigure  *--  StageExec
    
StagesConfigHealthy "0" *-- "n" WaitForConfigInner
StagesConfigHealthy  *--  StageExec
    
StagesConfigExit "0" *-- "n" WaitForConfigInner
StagesConfigExit  *--  StageExec

footer \ngenerated with yacg (https://github.com/OkieOth/yacg),\n(template: plantUml.mako v1.1.0)\npowered by plantuml (https://plantuml.com/)
@enduml
