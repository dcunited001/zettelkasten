# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/srl-labs/containerlab/refs/heads/main/schemas/clab.schema.json
#   timestamp: 2025-05-28T15:03:27+00:00

# url=https://raw.githubusercontent.com/srl-labs/containerlab/refs/heads/main/schemas/clab.schema.json
# uv tool run --from datamodel-code-generator[http] datamodel-codegen \
#     --url=$url
#     --reuse-model --output /tmp/fdsa.py

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, confloat, conint, constr


class ImagePullPolicy(Enum):
    always = "always"
    Always = "Always"
    never = "never"
    Never = "Never"
    ifnotpresent = "ifnotpresent"
    IfNotPresent = "IfNotPresent"


class RestartPolicy(Enum):
    no = "no"
    No = "No"
    on_failure = "on-failure"
    On_failure = "On-failure"
    Always = "Always"
    always = "always"
    unless_stopped = "unless-stopped"
    Unless_stopped = "Unless-stopped"


class Kind(Enum):
    nokia_srlinux = "nokia_srlinux"
    arista_ceos = "arista_ceos"
    juniper_crpd = "juniper_crpd"
    sonic_vs = "sonic-vs"
    sonic_vm = "sonic-vm"
    nokia_sros = "nokia_sros"
    juniper_vmx = "juniper_vmx"
    juniper_vqfx = "juniper_vqfx"
    juniper_vsrx = "juniper_vsrx"
    juniper_vjunosrouter = "juniper_vjunosrouter"
    juniper_vjunosswitch = "juniper_vjunosswitch"
    juniper_vjunosevolved = "juniper_vjunosevolved"
    cisco_xrv = "cisco_xrv"
    cisco_xrv9k = "cisco_xrv9k"
    arista_veos = "arista_veos"
    cisco_csr1000v = "cisco_csr1000v"
    paloalto_panos = "paloalto_panos"
    mikrotik_ros = "mikrotik_ros"
    cisco_n9kv = "cisco_n9kv"
    cisco_ftdv = "cisco_ftdv"
    dell_ftosv = "dell_ftosv"
    dell_sonic = "dell_sonic"
    aruba_aoscx = "aruba_aoscx"
    linux = "linux"
    bridge = "bridge"
    ovs_bridge = "ovs-bridge"
    border0 = "border0"
    host = "host"
    keysight_ixia_c_one = "keysight_ixia-c-one"
    ipinfusion_ocnos = "ipinfusion_ocnos"
    checkpoint_cloudguard = "checkpoint_cloudguard"
    ext_container = "ext-container"
    rare = "rare"
    cisco_xrd = "cisco_xrd"
    cisco_c8000 = "cisco_c8000"
    cisco_c8000v = "cisco_c8000v"
    cisco_cat9kv = "cisco_cat9kv"
    cisco_iol = "cisco_iol"
    cumulus_cvx = "cumulus_cvx"
    huawei_vrp = "huawei_vrp"
    openbsd = "openbsd"
    freebsd = "freebsd"
    generic_vm = "generic_vm"
    fortinet_fortigate = "fortinet_fortigate"
    k8s_kind = "k8s-kind"
    fdio_vpp = "fdio_vpp"


class Port(BaseModel):
    __root__: constr(
        regex=r"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?:([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$|^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?:([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])+(/tcp|/udp|/sctp)$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])+(/tcp|/udp|/sctp)$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$|^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])-([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]):([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])+(/tcp|/udp|/sctp)?$"
    )


class Runtime(Enum):
    docker = "docker"
    ignite = "ignite"


class Endpoint(BaseModel):
    __root__: constr(regex=r"^\S+:\S+$")


class LinkEndpoint(BaseModel):
    class Config:
        extra = Extra.forbid

    node: str = Field(..., description="")
    interface: str = Field(..., description="")
    mac: Optional[constr(regex=r"^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})")] = (
        Field(None, description="")
    )


class LinkVxlanVni(BaseModel):
    __root__: conint(ge=1, le=16777215) = Field(..., description="VXLAN VNI")


class LinkVxlanUdpport(BaseModel):
    __root__: conint(ge=1, le=65535) = Field(..., description="Remote UDP port")


class LinkVars(BaseModel):
    pass


class Labels(BaseModel):
    __root__: Dict[constr(regex=r".+"), Union[constr(min_items=1), float]] = Field(
        ..., description="container labels"
    )


class LinkHostInterface(BaseModel):
    __root__: str = Field(
        ..., description="link-scoped variables used by config engine"
    )


class ExtrasConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    srl_agents: Optional[List[str]] = Field(
        None,
        alias="srl-agents",
        description="list of SR Linux agent's config files to be copied to the NOS filesystem",
        min_items=1,
        unique_items=True,
    )
    mysocket_proxy: Optional[str] = Field(
        None,
        alias="mysocket-proxy",
        description="http/s proxy to be used by mysocketctl",
    )


class ConfigConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    vars: Optional[Dict[str, Any]] = Field(
        None, description="config variables passed to config engine"
    )


class CertificateConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    issue: Optional[Any] = Field(
        None, description="Set to `true` to generate a TLS certificate for the node"
    )
    sans: Optional[List[str]] = Field(
        None,
        description="list of subject alternative names (SAN) to use for this node",
        unique_items=True,
    )
    key_size: Optional[int] = Field(
        None, alias="key-size", description="size of the to be generated key"
    )
    validity_duration: Optional[str] = Field(
        None,
        alias="validity-duration",
        description="Duration for how long the certificate issued by the CA will be valid.",
    )


class HealthcheckConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    test: Optional[List[str]] = Field(None, description="test command")
    interval: Optional[int] = Field(None, description="test execution interval")
    retries: Optional[int] = Field(None, description="test execution retries")
    timeout: Optional[int] = Field(
        None, description="test execution timeout in seconds"
    )
    start_period: Optional[int] = Field(
        None,
        alias="start-period",
        description="time in seconds to wait before starting the healthcheck",
    )


class DnsConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    servers: Optional[List[str]] = Field(
        None, description="DNS server addresses", unique_items=True
    )
    search: Optional[List[str]] = Field(
        None, description="DNS search domains", unique_items=True
    )
    options: Optional[List[str]] = Field(
        None, description="DNS options", unique_items=True
    )


class CertificateAuthorityConfig1(BaseModel):
    class Config:
        extra = Extra.forbid

    cert: str = Field(
        ...,
        description="Path to the CA certificate file. If set, it is expected that the CA certificate already exists by that path",
    )
    key: str = Field(
        ...,
        description="Path to the CA key file. If set, it is expected that the CA certificate already exists by that path",
    )
    key_size: Optional[int] = Field(
        None,
        alias="key-size",
        description="Key size. Can only be set if the external CA certificate is not provided",
    )
    validity_duration: Optional[str] = Field(
        None,
        alias="validity-duration",
        description="CA certificate validity duration. Can only be set if the external CA certificate is not provided",
    )


class CertificateAuthorityConfig2(BaseModel):
    class Config:
        extra = Extra.forbid

    cert: Optional[str] = Field(
        None,
        description="Path to the CA certificate file. If set, it is expected that the CA certificate already exists by that path",
    )
    key: Optional[str] = Field(
        None,
        description="Path to the CA key file. If set, it is expected that the CA certificate already exists by that path",
    )
    key_size: int = Field(
        ...,
        alias="key-size",
        description="Key size. Can only be set if the external CA certificate is not provided",
    )
    validity_duration: Optional[str] = Field(
        None,
        alias="validity-duration",
        description="CA certificate validity duration. Can only be set if the external CA certificate is not provided",
    )


class CertificateAuthorityConfig3(BaseModel):
    class Config:
        extra = Extra.forbid

    cert: Optional[str] = Field(
        None,
        description="Path to the CA certificate file. If set, it is expected that the CA certificate already exists by that path",
    )
    key: Optional[str] = Field(
        None,
        description="Path to the CA key file. If set, it is expected that the CA certificate already exists by that path",
    )
    key_size: Optional[int] = Field(
        None,
        alias="key-size",
        description="Key size. Can only be set if the external CA certificate is not provided",
    )
    validity_duration: str = Field(
        ...,
        alias="validity-duration",
        description="CA certificate validity duration. Can only be set if the external CA certificate is not provided",
    )


class CertificateAuthorityConfig(BaseModel):
    __root__: Union[
        CertificateAuthorityConfig1,
        Union[CertificateAuthorityConfig2, CertificateAuthorityConfig3],
    ] = Field(..., description="Certificate Authority")


class StagesEnum(Enum):
    create = "create"
    create_links = "create-links"
    configure = "configure"
    healthy = "healthy"
    exit = "exit"


class Phase(Enum):
    on_enter = "on-enter"
    on_exit = "on-exit"


class StageExecItem(BaseModel):
    class Config:
        extra = Extra.forbid

    command: str = Field(..., description="Shell command to execute")
    target: Optional[str] = Field(
        "container",
        description="Location to run the command (e.g. 'container', 'host')",
    )
    phase: Phase = Field(
        ..., description="Phase to execute this command (on-enter or on-exit)"
    )


class StageExecList(BaseModel):
    __root__: List[str] = Field(
        ..., description="list of commands to execute", min_items=1
    )


class Mtu(BaseModel):
    __root__: confloat(ge=1.0, le=65535.0) = Field(
        ..., description="MTU for the custom network"
    )


class Ipv4Addr(BaseModel):
    __root__: constr(
        regex=r"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?$"
    ) = Field(..., description="IPv4 address")


class Ipv6Addr(BaseModel):
    __root__: constr(
        regex=r"^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?$"
    ) = Field(..., description="IPv6 address")


class Mgmt(BaseModel):
    class Config:
        extra = Extra.forbid

    network: Optional[str] = Field(None, description="management network name")
    bridge: Optional[str] = Field(
        None,
        description="Set bridge to use for the management network (instead of the default generated bridge).",
    )
    ipv4_subnet: Optional[constr(regex=r"(^.+/[0-9]{1,2}$)|(auto)")] = Field(
        None,
        alias="ipv4-subnet",
        description="IPv4 subnet to use for the custom management network. e.g. 172.100.100.0/24",
    )
    ipv6_subnet: Optional[constr(regex=r"(^.+/[0-9]{1,3}$)|(auto)")] = Field(
        None,
        alias="ipv6-subnet",
        description="IPv6 subnet to use for the custom management network. e.g. 3fff:172:100:100::/64",
    )
    ipv4_gw: Optional[Ipv4Addr] = Field(
        None,
        alias="ipv4-gw",
        description="IPv4 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
    )
    ipv6_gw: Optional[Ipv6Addr] = Field(
        None,
        alias="ipv6-gw",
        description="IPv6 gateway address that will be set on a bridge used for the management network. Will be set to the first available IP address by default",
    )
    ipv4_range: Optional[constr(regex=r"^.+/[0-9]{1,2}$")] = Field(
        None,
        alias="ipv4-range",
        description="IPv4 range out of the ipv4-subnet to use for the custom management network. e.g. 172.100.100.128/25",
    )
    ipv6_range: Optional[
        constr(
            regex=r"^((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?$"
        )
    ] = Field(
        None,
        alias="ipv6-range",
        description="IPv6 range out of the ipv6-subnet to use for the custom management network. e.g. 3fff:172:100:100:8000::/65",
    )
    mtu: Optional[Mtu] = Field(
        default_factory=lambda: Mtu.parse_obj(1500),
        description="MTU for the custom network",
    )


class Settings(BaseModel):
    class Config:
        extra = Extra.forbid

    certificate_authority: Optional[CertificateAuthorityConfig] = Field(
        None, alias="certificate-authority"
    )


class LinkConfigShort(BaseModel):
    class Config:
        extra = Extra.forbid

    endpoints: Optional[List[Endpoint]] = Field(
        None, description="endpoints list", min_items=2, unique_items=True
    )
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None


class LinkTypeVeth(BaseModel):
    type: str = Field("veth", const=True)
    endpoints: List[LinkEndpoint] = Field(
        ..., description="Endpoints for the links", max_items=2, min_items=2
    )
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkTypeMgmtNet(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("mgmt-net", const=True)
    endpoint: LinkEndpoint
    host_interface: LinkHostInterface = Field(..., alias="host-interface")
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkTypeMacvlan(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("macvlan", const=True)
    endpoint: LinkEndpoint
    host_interface: Mtu = Field(..., alias="host-interface")
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkTypeHost(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("host", const=True)
    endpoint: LinkEndpoint
    host_interface: LinkHostInterface = Field(..., alias="host-interface")
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkTypeDummy(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("dummy", const=True)
    endpoint: LinkEndpoint
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkVxlanRemote(BaseModel):
    __root__: Union[Ipv4Addr, Ipv6Addr]


class WaitForConfigItem(BaseModel):
    class Config:
        extra = Extra.forbid

    node: Optional[str] = Field(None, description="node name to wait for")
    stage: Optional[StagesEnum] = Field(None, description="phase to wait for")


class WaitForConfig(BaseModel):
    __root__: List[WaitForConfigItem] = Field(
        ..., description="Dependency list for the node", unique_items=True
    )


class StageExec1(BaseModel):
    class Config:
        extra = Extra.forbid

    on_enter: Optional[StageExecList] = Field(None, alias="on-enter")
    on_exit: Optional[StageExecList] = Field(None, alias="on-exit")


class StageExec(BaseModel):
    __root__: Union[StageExec1, List[StageExecItem]] = Field(
        ..., description="per-stage exec configuration"
    )


class LinkTypeVxlan(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("vxlan", const=True)
    endpoint: LinkEndpoint
    remote: LinkVxlanRemote
    vni: LinkVxlanVni
    udp_port: LinkVxlanUdpport = Field(..., alias="udp-port")
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class LinkTypeVxlanStitched(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str = Field("vxlan-stitch", const=True)
    endpoint: LinkEndpoint
    remote: LinkVxlanRemote
    vni: LinkVxlanVni
    udp_port: LinkVxlanUdpport = Field(..., alias="udp-port")
    mtu: Optional[Mtu] = Field(default_factory=lambda: Mtu.parse_obj(1500))
    vars: Optional[LinkVars] = None
    labels: Optional[Labels] = None


class Create(BaseModel):
    class Config:
        extra = Extra.forbid

    wait_for: Optional[WaitForConfig] = Field(None, alias="wait-for")
    exec: Optional[StageExec] = None


class CreateLinks(Create):
    pass


class Configure(Create):
    pass


class Healthy(Create):
    pass


class Exit(Create):
    pass


class StagesConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    create: Optional[Create] = Field(None, description="create stage configuration")
    create_links: Optional[CreateLinks] = Field(
        None, alias="create-links", description="create stage configuration"
    )
    configure: Optional[Configure] = Field(
        None, description="create stage configuration"
    )
    healthy: Optional[Healthy] = Field(None, description="create stage configuration")
    exit: Optional[Exit] = Field(None, description="create stage configuration")


class NodeConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = Field(None, description="type of a node")
    image: Optional[str] = Field(
        None, description="container image to use for this node"
    )
    image_pull_policy: Optional[ImagePullPolicy] = Field(
        None,
        alias="image-pull-policy",
        description="policy for pulling the referenced container image",
    )
    restart_policy: Optional[RestartPolicy] = Field(
        None,
        alias="restart-policy",
        description="restart policy for the referenced container image",
    )
    kind: Optional[Kind] = Field(None, description="kind of this node")
    license: Optional[str] = Field(None, description="path to a license file")
    group: Optional[str] = Field(
        None,
        description="grouping parameter of a node. A free form string that is mainly used in sorting elements when graphing",
    )
    startup_config: Optional[str] = Field(
        None,
        alias="startup-config",
        description="path to a startup config file (if supported by the kind)",
    )
    startup_delay: Optional[int] = Field(
        None,
        alias="startup-delay",
        description="Optional startup delay (seconds) to apply",
    )
    enforce_startup_config: Optional[bool] = Field(
        None,
        alias="enforce-startup-config",
        description="Set to `true` to make the node to boot with a startup-config even if the config file is present in the lab directory",
    )
    auto_remove: Optional[bool] = Field(
        None,
        alias="auto-remove",
        description="Set to `true` to remove the node automatically, instead of auto-restarting",
    )
    exec: Optional[List[str]] = Field(
        None, description="list of commands to execute post deploy", min_items=1
    )
    binds: Optional[List[str]] = Field(
        None,
        description="list of file/directory bindings",
        min_items=1,
        unique_items=True,
    )
    ports: Optional[List[Port]] = Field(
        None, description="list of port mappings", min_items=0, unique_items=True
    )
    env: Optional[Dict[constr(regex=r".+"), Union[str, float, bool]]] = Field(
        None, description="environment variables"
    )
    user: Optional[Union[constr(min_items=1), float]] = Field(
        None, description="user to use within the container"
    )
    entrypoint: Optional[str] = Field(None, description="container's entrypoint")
    cmd: Optional[str] = Field(None, description="command to launch container with")
    labels: Optional[Labels] = None
    runtime: Optional[Runtime] = Field(
        None, description="Runtime used to launch the container node"
    )
    mgmt_ipv4: Optional[Ipv4Addr] = Field(
        None,
        alias="mgmt-ipv4",
        description="IPv4 management address of the node (e.g. 172.10.10.11)",
    )
    mgmt_ipv6: Optional[Ipv6Addr] = Field(
        None,
        alias="mgmt-ipv6",
        description="IPv6 management address of the node (e.g. 172.10.10.11)",
    )
    network_mode: Optional[constr(regex=r"^(host)|(container:\S+)|(none)$")] = Field(
        None,
        alias="network-mode",
        description="node network mode (can only be set host, defaults to bridge)",
    )
    cpu: Optional[confloat(ge=0.0)] = Field(
        None, description="number of vcpu to allocate for this node/container"
    )
    memory: Optional[str] = Field(
        None, description="memory limit for this node/container"
    )
    cpu_set: Optional[str] = Field(
        None, alias="cpu-set", description="CPU cores to use by this node/container"
    )
    sandbox: Optional[str] = Field(None, description="ignite's sandbox image name")
    kernel: Optional[str] = Field(None, description="ignite's kernel image name")
    extras: Optional[ExtrasConfig] = None
    config: Optional[ConfigConfig] = None
    stages: Optional[StagesConfig] = None
    dns: Optional[DnsConfig] = None
    certificate: Optional[CertificateConfig] = None
    healthcheck: Optional[HealthcheckConfig] = None
    aliases: Optional[List[str]] = Field(
        None,
        description="list of additional network aliases for the node",
        unique_items=True,
    )


class Kinds(BaseModel):
    class Config:
        extra = Extra.forbid

    nokia_srlinux: Optional[NodeConfig] = None
    arista_ceos: Optional[NodeConfig] = None
    juniper_crpd: Optional[NodeConfig] = None
    sonic_vs: Optional[NodeConfig] = Field(None, alias="sonic-vs")
    sonic_vm: Optional[NodeConfig] = Field(None, alias="sonic-vm")
    dell_ftosv: Optional[NodeConfig] = None
    dell_sonic: Optional[NodeConfig] = None
    nokia_sros: Optional[NodeConfig] = None
    juniper_vmx: Optional[NodeConfig] = None
    juniper_vsrx: Optional[NodeConfig] = None
    juniper_vjunosrouter: Optional[NodeConfig] = None
    juniper_vjunosswitch: Optional[NodeConfig] = None
    juniper_vjunosevolved: Optional[NodeConfig] = None
    aruba_aoscx: Optional[NodeConfig] = None
    cisco_xrv: Optional[NodeConfig] = None
    cisco_xrv9k: Optional[NodeConfig] = None
    cisco_nxos: Optional[NodeConfig] = None
    cisco_csr: Optional[NodeConfig] = None
    cisco_cat9kv: Optional[NodeConfig] = None
    cisco_ftdv: Optional[NodeConfig] = None
    cisco_iol: Optional[NodeConfig] = None
    linux: Optional[NodeConfig] = None
    bridge: Optional[NodeConfig] = None
    ovs_bridge: Optional[NodeConfig] = Field(None, alias="ovs-bridge")
    host: Optional[NodeConfig] = None
    ipinfusion_ocnos: Optional[NodeConfig] = None
    keysight_ixia_c_one: Optional[NodeConfig] = Field(None, alias="keysight_ixia-c-one")
    checkpoint_cloudguard: Optional[NodeConfig] = None
    ext_container: Optional[NodeConfig] = Field(None, alias="ext-container")
    cisco_xrd: Optional[NodeConfig] = None
    rare: Optional[NodeConfig] = None
    cisco_8000: Optional[NodeConfig] = None
    cisco_c8000v: Optional[NodeConfig] = None
    cumulus_cvx: Optional[NodeConfig] = None
    openbsd: Optional[NodeConfig] = None
    freebsd: Optional[NodeConfig] = None
    huawei_vrp: Optional[NodeConfig] = None
    generic_vm: Optional[NodeConfig] = None
    fdio_vpp: Optional[NodeConfig] = None


class Topology(BaseModel):
    class Config:
        extra = Extra.forbid

    nodes: Dict[constr(regex=r".*"), Optional[NodeConfig]] = Field(
        ..., description="topology nodes configuration container"
    )
    kinds: Optional[Kinds] = Field(
        None, description="topology kinds configuration container"
    )
    defaults: Optional[NodeConfig] = None
    links: Optional[
        List[
            Union[
                LinkConfigShort,
                LinkTypeVeth,
                LinkTypeMgmtNet,
                LinkTypeMacvlan,
                LinkTypeHost,
                LinkTypeVxlan,
                LinkTypeVxlanStitched,
                LinkTypeDummy,
            ]
        ]
    ] = Field(None, description="topology links section", min_items=1)


class ContainerlabTopologyDefinitionFile(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(..., description="topology name")
    prefix: Optional[str] = Field(None, description="lab prefix")
    mgmt: Optional[Mgmt] = Field(
        None, description="configuration container for management network"
    )
    topology: Topology = Field(..., description="topology configuration container")
    settings: Optional[Settings] = Field(
        None, description="Global containerlab settings"
    )
