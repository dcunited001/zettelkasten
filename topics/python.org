:PROPERTIES:
:ID:       b4c096ee-6e40-4f34-85a1-7fc901e819f5
:END:
#+TITLE: Python
#+DESCRIPTION: python stuff
#+TAGS:

* Roam
+ [[id:ca4b43cc-90fb-4434-9bca-5d43e28b00ae][blender: build on garuda archlinux]]
+ [[id:8b93d9a6-746f-4480-8ef5-45310e03b783][Fedora: setup AMD gpu for blender/tensorflow]]

* Docs

** Guides

+ [[https://khuyentran1401.github.io/Efficient_Python_tricks_and_tools_for_data_scientists/README.html][Efficient Python Tricks/Tools for Data Scientists]]

** Official Docs

[[https://docs.python.org/3/reference/grammar.html][Full Grammar Spec]] (mixture of EBNF and PEG)

*** [[Input and ][Tutorial]]

*6 [[https://docs.python.org/3/tutorial/modules.html][Modules]]*


+ [[https://docs.python.org/3/tutorial/modules.html#packages][Packages]] covers how =__init__.py= structures/affects modules and the
  resolution of =import= statements.

*10-11 Brief tour of [[https://docs.python.org/3/tutorial/stdlib.html][Standard Library]]*

*** [[https://docs.python.org/3/using/index.html][Setup and Usage]]

*3 [[https://docs.python.org/3/using/configure.html][Configure Python]]* (builds)

*** [[https://docs.python.org/3/reference/index.html][Language Reference]]

*3 [[https://docs.python.org/3/reference/datamodel.html][Data Model]]*

- 3.2: standard type hierarchy
- 3.3: special method names
- 3.4: Coroutines (async)

*** [[https://docs.python.org/3/library/index.html][Standard Library]]

Lots of handy stuff in here that you don't have to do.
* Resources
+ [[https://www.adventuresinwhy.com/post/eglot/][eglot+tree-sitter in emacs 29]]
+ [[https://wiki.python.org/moin/PythonDocumentation][PQRC]] Python Quick RefCard (Python v2.4, but good)
  - same guy to do the [[https://perso.limsi.fr/pointal/_media/python:cours:mementopython3-v1.0.5a-english.pdf][Python 3 RefCard]] no wonder
  - this is an ideal cheatsheet (dense but visually easy to reference)
  - you can fit like 200 of these in a notebook and have a bookshelf worth of
    reference material, no javascript or batteries required.
  - And a [[https://perso.limsi.fr/pointal/python:abrege][more technical version]] (very nice) ... this one comes in French and
    others in German, Chinese, etc

** Poetry
+ Modern Python (create a library, manage the automations and publish to PyPi)
  - (part 1) [[https://www.adaltas.com/en/2021/06/09/pyrepo-project-initialization/][Start a project with pyenv & poetry]]
  - (part 2) [[https://www.adaltas.com/en/2021/06/24/unit-tests-conventional-commits/][write unit tests and enforce git commit conventions]]
  - (part 3) [[https://www.adaltas.com/en/2021/06/28/pypi-tox-cicd-github-actions/][run a CI pipeline & publish your package to PyPi]]

** Tooling

+ [[github:victorgarric/pip_search][victorgarric/pip_search]]: search pip
+ [[github:thebjorn/pydeps][thebjorn/pydeps]]
+ [[github:tox-dev/pipdeptree][tox-dev/pipdeptree]]
+ [[ddelange/pipgrip][ddelange/pipgrip]]

** AsyncIO

[[https://realpython.com/async-io-python/][AsyncIO]] (real python)

Uses the "reactor pattern" for single-threaded concurrency, though I can never
find references to this term on the net. The single thread advances by ticks and
manages the async tasks that it is awaiting.

*** AsyncIO concepts

|------------+--------------------------------------------------------------------------|
| coroutine  | invocation of `foo()` for `async def foo:` produces a coroutine (future) |
| callbacks  |                                                                          |
| event loop | transparent abstraction that continues progress on invoked async fn's    |
| events     |                                                                          |
| transports |                                                                          |
| protocols  |                                                                          |
| futures    |                                                                          |
| gather()   | bundle a group of async coroutines, invoke them and join their results   |
|------------+--------------------------------------------------------------------------|

Futures vs. Promises is covered in [[http://dist-prog-book.com/chapter/2/futures.html][Prog. Models Distributed Computing]]. In
javascript, futures/promises are conflated into one Promise interface. In Scala:

#+begin_quote
A future is a placeholder object for a result that does not yet exist. A promise
is a writable, single-assignment container, which completes a future. Promises
can complete the future with a result to indicate success, or with an exception
to indicate failure.
#+end_quote

** Concurrency

[[https://realpython.com/python-concurrency/][Concurrency in Python]] (real python)

* Topics

** Syntax

*** Dictionaries

Merge operator

#+begin_src python :results value verbatim
stftparam = {
    'hop_length': 512,
    'n_fft': 2048
}

specparam = {
    'x_axis': 'time',
    'y_axis': 'log'
}

# also stftparam |= specparam
return stftparam | specparam
#+end_src

#+RESULTS:
: {'hop_length': 512, 'n_fft': 2048, 'x_axis': 'time', 'y_axis': 'log'}

**** Splatting =**kwargs=

Dictionaries can be passed as keyword args, but they have to be merged first.

#+begin_src python
stftparam = {
    'hop_length': 512,
    'n_fft': 2048
}

specparam = {
    'x_axis': 'time',
    'y_axis': 'log'
}

spect = librosa.stft(y, **stftparam)

# they could even be double splatted ... but can't contain multiple keywords
spect = librosa.stft(y, **{**stftparam,**stftparam})

# but the calls can't contain extraneous keywords
librosa.display.specshow(spect_db, sr=sr, **stftparam, **specparam, ax=ax_spect);
#+end_src

** OOP

*** [[https://docs.python.org/3/library/dataclasses.html][Data Classes]]

The =@dataclass= decorator helps speed up definition of classes

[[https://florimond.dev/en/posts/2018/10/reconciling-dataclasses-and-properties-in-python/][Reconciling Dataclasses and Properties in Python]] Getting properties to play nice
with dataclasses

** Build Dependencies

|-----------------+--------------------------------------------------------------------|
| Role            | Guix Packages                                                      |
|-----------------+--------------------------------------------------------------------|
| C Interop       | libffi (or sad python)                                             |
| GUI/TUI         | tk, ncurses                                                 |
| Compression     | bzip2 (on system profile), zlib, zip, unzip and xz (includes lzma) |
| XML             | expat and libxml2 (python doesn't build in xmlsec)                 |
| Data            | sqlite                                                             |
| CA Certs        | nss-certs (should probably be [[https://docs.python.org/3/using/unix.html#custom-openssl][on your system]])                      |
| Hashing Library | gdbm (so python go vroom)                                          |
|-----------------+--------------------------------------------------------------------|

** Security

+ Yubico/python-fido2

** Lists/Comprehensions
+ itertools

** Metaprogramming
+ [[https://pypi.org/project/sip/][Python Sip]]

** Modules
+ Load code in a python project: [[https://www.devdungeon.com/content/python-import-syspath-and-pythonpath-tutorial][Python import, sys.path, and PYTHONPATH Tutorial]]


** Data Science

** Async


* Environments

+ See [[https://github.com/direnv/direnv/wiki/Python][Direnv Integrations for Python]]

** Pip

*** Issues
**** [[https://bobbyhadz.com/blog/python-remove-uninstall-all-packages-installed-by-pip#removeuninstall-all-packages-installed-by-pip-in-python][Remove all pip packages]]

To backup

#+begin_src sh
pip freeze > to_remove.txt # to backup package list
#+end_src

To remove

#+begin_src sh
pip uninstall -y -r <(pip freeze)
#+end_src

To reinit

#+begin_src sh
pip install -U pip setuptools
pip install poetry
#+end_src

*** Resources

**** [[https://github.com/ddelange/pipgrip][pipgrip]]

Python dependency resolution using the [[https://medium.com/@nex3/pubgrub-2fb6470504f][PubGrub]] algorithm ([[https://github.com/dart-lang/pub/blob/SDK-2.2.1-dev.3.0/doc/solver.md][see spec here]]) which
apparently relates to B-SAT (but what NP doesn't)

pipgrip vs. poetry:

#+begin_quote
poetry offers package management with dependency resolution, essentially
replacing pip/setuptools. This means that poetry packages don't contain
setup.py, and hence are not compatible with =pip install -e=:

poetry projects would have to be converted to setuptools-based projects with
e.g. dephell. To avoid such hassle, pipgrip only requires the selected
package(s) + dependencies to be available to pip in the usual way.
#+end_quote

**** pipdeptree

** [[https://github.com/python-poetry/poetry][Poetry]]

*** Resources

+ Combining [[https://python.plainenglish.io/why-you-should-use-pyenv-poetry-for-python-projects-a13f8d234e46][Pyenv & Poetry]]
+ [[https://github.com/python-poetry/poetry/issues/5252][python/poetry#5252]] Dealing with pyenv/poetry problems:

**** Poetry Install Script

#+begin_quote
+ Create a new virtual environment using the built-in venv module, or the
  virtualenv zipapp if venv is unavailable.  This will be created at a
  platform-specific path (or =$POETRY_HOME= if =$POETRY_HOME= is set:
  - =~/Library/Application Support/pypoetry= on macOS
  - =$XDG_DATA_HOME/pypoetry= on Linux/Unix (=$XDG_DATA_HOME= is
    =~/.local/share= if unset)
  - =%APPDATA%\pypoetry= on Windows
+ Update pip inside the virtual environment to avoid bugs in older versions.
+ Install the latest (or a given) version of Poetry inside this virtual
  environment using pip.
+ Install a =poetry= script into a platform-specific path (or =$POETRY_HOME/bin=
  if =$POETRY_HOME= is set):
  - =~/.local/bin= on Unix
  - =%APPDATA%\Python\Scripts= on Windows
+ Attempt to inform the user if they need to add this bin directory to their
  =$PATH=, as well as how to do so.
+ Upon failure, write an error log to =poetry-installer-error-<hash>.log= and
  restore any previous environment.
#+end_quote

*** Issues

**** [[https://github.com/python-poetry/poetry/blob/master/docs/managing-environments.md#managing-environments][Managing Environments]]

Using with =pyenv=

#+begin_quote
If you use a tool like pyenv to manage different Python versions, you can set
the experimental =virtualenvs.prefer-active-python= option to =true=. Poetry
will then try to find the current python of your shell.
#+end_quote


Environment info

#+begin_src sh

#+end_src

Switching Environments

#+begin_src sh
poetry env use $pythonpath
poetry env use python3.7 # if it's in PATH (or just 3.7)
#+end_src

** Venv

The oldschool way to manage deps (for some definition of oldschool) and still
the standard.

** Pyenv

langenv for python

*** Issues

**** Don't link from =PYENV_ROOT=, just set it

NOTE: if using link from =$HOME/.pyenv= to conserve space in the home partition
then pyenv will end up create many symlinks (whose parent paths link back
in). This adds a lot of [[https://man7.org/linux/man-pages/man7/path_resolution.7.html][directory traversal]] to early python initialization,
which doesn't really matter.

Regardless, the reason i noticed is because i'm trying to reconcile the
differences between pyenv/poetry to see whether Poetry's
=virtaulenvs.prefer-active-python= does what it should if direnv's =layout='s
are managing pyenv version and poetry-installed dependencies.

properly setting =$PYENV_ROOT= and then fixing the venv links causes this:

#+begin_example
$PYENV_ROOT/pyenv.d/exec/pip-rehash/pip: $PYENV_ROOT/versions/3.10.11/bin/pip: $HOME/.pyenv/versions/3.10.11/bin/python3.10: bad interpreter: No such file or directory
#+end_example

**** TKinter errors with =pyenv=

Ensure tkinter is installed or run =pacman -Syu tk= and restart xorg to refresh
path. New pythons being installed will need it.

I swear TCL is like the "other Perl" -- a virtually unused language without
which most of our technology & internets would cease functioning.

What's amusing to me is that any program would really need an interface to TCL,
itself being the universal interface to any program ... but i guess it makes
sense. Why reinvent the wheel if some languages are just superior?

**** OpenSSL errors with =pyenv=

Ensure the python is building in OpenSSL support.

Ben Mezger installs python versions like so [[https://github.com/benmezger/dotfiles/blob/main/Makefile#L162-L177][in this Makefile]]

#+begin_example shell
PATH="$(HOME)/.pyenv/bin:${PATH}"; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.10.2; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.8.12; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.9.9; \
CFLAGS=-I/usr/include/openssl LDFLAGS=-L/usr/lib pyenv install -s 3.11.0; \

eval $(pyenv init -)
pip install --upgrade -r scripts/requirements.txt
#+end_example

From [[https://stackoverflow.com/questions/37055420/python-how-can-i-tell-if-my-python-has-ssl][s/o How can I tell if my python has SSL?]]

Test for openssl with =openssl rand -hex 20= and the installed python with:

#+begin_src shell
pyenv shell 3.11.3
python -c "import ssl; print(ssl.OPENSSL_VERSION)"
#+end_src

#+RESULTS:
: OpenSSL 3.0.8 7 Feb 2023

**** Installing Pythons on Guix with Pyenv

#+begin_quote
Note: =pyenv= doesn't work well on Guix, so a different =direnv= workflow is
needed. I knew it was likely to be this way, but once I start running into
=LD_LIBRARY_PATH= issues, that's it. That will end up being brittle at best.

My channel is still too new to support essential custom packages. This is
another reason I was mad to discover I /could/ actually use GPG/SSH the way it
was initially described.
#+end_quote

Pyenv needs to be cloned:

#+begin_example shell
git clone https://github.com/pyenv/pyenv $HOME/.pyenv
#+end_example

And then [[github:pyenv/pyenv-virtualenv][pyenv/pyenv-virtualenv]] needs to be cloned into the plugins dir:

#+begin_example
git clone https://github.com/pyenv/pyenv-virtualenv.git "$(pyenv root)/plugins/pyenv-virtualenv"
#+end_example

Ensure the above =python-pyenv.sh= has been added to =.config/sh/_load_profile.sh=

These dependencies (and [[https://github.com/pyenv/pyenv/wiki#suggested-build-environment][probably more]]) need to be accessible on path (see elsewhere in python notes)

Since multiple profiles can source the same lib, for consistency, run =pyenv
install $version= within =guix shell -m ~/.config/guix/manifests/devtools.scm=.
Since these are shared libs, then the profile needs to be loaded wherever
pythons are run.


* Jupyter

** Docs
+ [[https://jupyterlab.readthedocs.io/en/stable/index.html][JupyterLab Docs]]
+ [[https://jupyterlab.readthedocs.io/en/stable/api/index.html][API docs]]

** Resources
+ [[https://adamj.eu/tech/2019/03/11/pip-install-from-a-git-repository/]['pip install' From a Git Repository]]

** Topics

*** [[id:32a21c5e-8e7c-4df1-88dd-74d828f90b9c][Environment Management]]

Links to other org-roam node on options for jupyter environment (using
cloud/docker)

*** Multimedia

**** nglviewer/nglview
view molecular structures and trajectories

**** K3D-tools/K3D-jupyter
[[https://k3d-jupyter.org][Docs]]


*** Plots
**** PyVista with Trame

+ Can build docker image at =./docker/Dockerfile= to get GPU rendering


*** Security

+ JupyterLab v3.6 [[https://jupyterlab.readthedocs.io/en/stable/extension/identity.html][builds on top of the IdentityProvider]]
  - Jupyter Server v2 [[https://jupyter-server.readthedocs.io/en/latest/operators/security.html#identity-model][/api/me]] identity endpoint

+ [[https://jupyter-notebook.readthedocs.io/en/stable/public_server.html#running-a-notebook-server][Running a personal notebook server]]
+ Three means of authentication
  - how can I set up OTP/U2F? to require a yubikey touch to auth?
+ [[https://docs.docker.com/engine/security/protect-access/][Setting up Docker TLS certs]]
  - can Yubikey PIV interface with these?


*** Matplotlib

+ [[https://matplotlib.org/stable/tutorials/text/text_intro.html][Text in matplotlib]]
+ [[https://matplotlib.org/3.5.0/tutorials/intermediate/gridspec.html][Subplots and GridSpec]]
+ [[https://matplotlib.org/stable/gallery/subplots_axes_and_figures/colorbar_placement.html][Placing colorbars]]

* NumPy, CuPy

** Docs
+ [[https://numpy.org/doc/stable/reference/routines.statistics.html#][statistics]]

** Resources
+ [[https://github.com/cupy/cupy/wiki/Projects-using-CuPy][Projects Using CuPy]]

*** Performance
+ [[https://medium.com/data-analysis-center/a-practical-approach-to-speed-up-python-code-numba-numpy-cupy-65ab52526ad4][A practical approach to speed up python code (numpy: @njit, @jitclass)]]

*** Docker Images

+ [[https://hub.docker.com/r/cupy/cupy/][cupy/cupy]] (nvidia)
+ [[https://hub.docker.com/r/cupy/cupy-rocm][copy/copy-rocm]] (AMD)

*** CuPy on ROCm

[[https://docs.cupy.dev/en/stable/install.html#using-cupy-on-amd-gpu-experimental][Using CuPy on AMD GPU]] and the [[https://docs.cupy.dev/en/stable/install.html#limitations][limitations]] which are significant:

** Issues

** Topics


* SciPy

** Docs
+ [[https://scipy-cookbook.readthedocs.io/items/C_Extensions_NumPy_arrays.html][SciPy Cookbook]]
+ [[https://numpy.org/doc/stable/reference/distutils_guide.html#scipy-structure][SciPy structure]] (config details for scipy from the numpy docs)

** Resources

** Topics

*** Splines



* Issues

** Installing Python on [[id:b82627bf-a0de-45c5-8ff4-229936549942][Guix]]
*** Via guix packages and guix import ([[https://felsoci.sk/blog/installing-python-modules-on-guix.html][2022]])

=guix import pypi dash-bootstrap-components -r= creates a guix package
description for =dash-bootstrap-components=

*** Guix supports python3, pip3 and virtualenv ([[https://github.com/pjotrp/guix-notes/blob/master/PYTHON.org][2021]])

See [[https://github.com/pjotrp/guix-notes/blob/master/PYTHON.org#isolated-module-installation][pjotr's notes]]

*** Old Arch Setup

+ Pipenv should be installed to =--user=, at least on guix
  - after =guix install python pip3=, then run =pip3 install --user pipenv=
  - or use a manifest to manage the base python and load it into the environment
  - pip3/pipenv will install its user packages to =~/.local/=
  - otherwise, see [[https://github.com/pjotrp/guix-notes/blob/master/PYTHON.org#isolated-module-installation][pjotr's notes]] on isolated module installation
    - should guix/python need the package's hashed path
+ With these environment variables, then pipenv should sync the packages in
  =Pipfile= to =./.venv=
  - this is easier than managing a dozen =virtualenv= instances like I did
    before the pipenv era
  - old projects should probably be cleaned up. small files eat many inodes. i'm
    looking at you NodeJS.

#+begin_src sh :tangle .config/sh/profile.d/python-old.sh :shebang #!/bin/sh
# to manually specify where venv's are set up
# export WORKON_HOME=~/.venvs
export PIPENV_VENV_IN_PROJECT=1

# to load an alternate .env file
#PIPENV_DOTENV_LOCATION=/path/to/.env pipenv shell

# to prevent loading of .env files (containing config secrets)
# PIPENV_DONT_LOAD_ENV=1

# to setup shell completion in bash
# eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
#+end_src

*** Mostly residual feelings from many nodejs/frontend projects

I have a lot of concerns when configuring my systems: two main workstations, but
one with Garuda Arch and the other with Guix Systems, where some packages are
older. This has led to friction like:

- I've worked on a project on one or both laptops and now I can't get the
  runtime to load.
- I have to worry about what files/folders need to be added to =.gitignore=,
  =.stow-local-ignore= AND =.stignore= so syncthing don't fuck things up or
  transfer 40,000 files from a +python install+ nodejs project

Examining all this stuff leads me to understand it more, yet it's one hell of a
"paradox of choice" problem.

+ VM's would be great: but they don't work for GPU/CUDA projects ... unless I
  have money for a external enclosure that supports multiple GPUs, I really
  cannot justify $500 for a deskweight.
+ Network storage would be great ... but doesn't work so well for IDE's (I
  think?)
+ The homelab (with or without kubernetes) would be great: but I'm not rich
  enough to afford manageable storage. That's a hard requirement for K3S for me,
  but working via Tramp may be possible.
+ The cloud would be great... but have I told you /exactly/ how poor I am?

** Packages

*** Builds

+ [[https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/][pyproject.toml]]

*** Pip Commands
**** TODO determine how to check whether wheel/sdist would be installed

... probably almost always, if it's a popular package. The commands =pip index=
and =pip cache= may help.

+ [[https://realpython.com/python-wheels/][What are python wheels and why should you care?]]
  - you should probably care if you have a decent machine

#+begin_example shell
$ time python -m pip install \
      --no-cache-dir \
      --force-reinstall \
      --no-binary=:all: \
      cryptography
#+end_example

***** Ensure python's pip is running with =python -m pip=

yeh, noob here

**** Parallel Builds

pip does some parallelism by default, but i'm not sure what

+ [[https://pythonspeed.com/articles/faster-pip-installs/][Making pip installs a little less slow]]

*** Data Science
**** SciPy/[[https://cupy.dev/][CuPy]] with AMD [[id:79d41758-7ad5-426a-9964-d3e4f5685e7e][Rocm]]

+ setup drivers in arch
  - =yay -Syu openblas-lapacksudo  opencl-amd-dev=
  - this installs all the ROCm, HIP and miopen packages
+ install scipy and numpy
+ install =cupy-rocm-5.0= by [[https://docs.cupy.dev/en/stable/install.html#building-cupy-for-rocm-from-source][building from source]]
  - ensure environment is set ([[rocm-opencl-runtime][install instructions]])

#+begin_example shell
export CUPY_INSTALL_USE_HIP=1
export ROCM_HOME=/opt/rocm
export HCC_AMDGPU_TARGET=gfx906

# pip install cupy-rocm-5. # specify ???

# instead run
pip install --no-cache-dir --force-reinstall --no-binary=:all: scipy numpy
pip install --no-cache-dir --no-binary=cupy cupy
#+end_example

The last option =--no-binary=:all:= is probably overkill

***** DONE rebuild cupy passing env vars to pip ([[https://docs.cupy.dev/en/stable/install.html#environment-variables][cupy docs]])
CLOSED: [2022-12-15 Thu 00:56]

**** Numba (LLVM JIT compiler, eats python & returns CUDA)
