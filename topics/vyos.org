:PROPERTIES:
:ID:       5aa36ac8-32b3-421f-afb1-5b6292b06915
:END:
#+title: VyOS
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes
Is it feasible to blacklist all users from being able to view some of the configuration files?

i.e. when users run `show config`, is it directly accessing & running gunzip to

The

The `acl` package and its commands are not on a default ISO.

VyOS has =nftables= and a decent DSL with fairly good ansible support.

+ +The DSL+ Some significant part of VyOS is implemented in OCaml.
+ It only supports x86 for now.
+ It's missing some of the plug-in functionality of OPNsense (packet/traffic
  inspection), but has the ability to run images in containers with
  routing/firewall on the container host. So you could set up a container to do
  much of what the PFSense and OPNsense ecosystem allows (see the [[https://docs.vyos.io/en/stable/configuration/container/index.html#example-configuration][Zabbix
  container example]])

* Roam
+ [[id:5aa36ac8-32b3-421f-afb1-5b6292b06915][VyOS]]
+ [[id:e967c669-79e5-4a1a-828e-3b1dfbec1d19][Route Switch]]
+ [[id:23716a1b-7937-4cd1-923d-9adae1286601][Debian]]
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][Networking]]

* Docs

+ [[https://docs.vyos.io/en/stable/automation/index.html][Automation]] and [[https://docs.vyos.io/en/stable/automation/command-scripting.html#executing-pre-hooks-post-hooks-scripts][pre/post hooks]]
+ [[https://docs.vyos.io/en/stable/cli.html#configuration-overview][Configuration overview]] (navigating the router CLI like with IOS
  shortcuts/help)
+ [[https://docs.vyos.io/en/stable/troubleshooting/index.html][Troubleshooting]]
+ [[https://support.vyos.io/support/solutions/articles/103000096255-what-are-the-hardware-requirements-][Hardware Requirements]]

** How to

+ [[https://docs.vyos.io/en/stable/configexamples/index.html][Configuration Blueprints]] and [[https://docs.vyos.io/en/stable/configexamples/index.html#configuration-blueprints-autotest][Autotest Blueprints]]
+ [[https://docs.vyos.io/en/sagitta/contributing/build-vyos.html#][Build a VyOS ISO]]
+ [[https://docs.vyos.io/en/latest/installation/install.html#pxe-boot][Build PXE Image]]

** DSL

+ [[https://docs.vyos.io/en/stable/configuration/firewall/index.html][firewall]]
+ [[https://docs.vyos.io/en/stable/configuration/container/index.html][container]]
+ [[https://docs.vyos.io/en/stable/configuration/interfaces/index.html][interfaces]]
  + [[https://docs.vyos.io/en/stable/configuration/interfaces/openvpn.html][OpenVPN]] (with LDAP)

** Community
+ [[https://forum.vyos.io/][forum.vyos.io]]
+ [[https://support.vyos.io/support/home][Support Portal]]
+ [[https://vyos.dev/][vyos.dev]]: Issue/Feature Tracking
+ Slack is for customers/contributors

** Printing

* Resources

+ [[https://blog.kroy.io/2019/11/21/battle-of-the-bare-metal-routers/][Battle of the Metal Routers]]
+ [[https://blog.kroy.io/2019/08/23/battle-of-the-virtual-routers/][Battle of the Virtual Routers]] (VyOS)

** Kernel

+ Post with [[https://discourse.ubuntu.com/t/kernel-configuration-in-ubuntu/35857][Notes on Kernel Configuration in Ubuntu]] (not vyos-specific)

** OpenAPI

A VyOS instance that runs the API can be configured to host an OpenAPI browser
at https://muh.router.lab.local/redoc, so this is a good place to look for
metaprogramming

* Topics



** Automation

*** Managing Config

+ Jinja templates may work well.


*** Devops
+ Ansible is the main tool for configuration. Their ansible code includes
  inventory plugins, but I'm unsure of the discovery mechanisms.
+ Ansible requires paramiko for ssh
+ SSH/Shell is just as proficient as ansible for DSL configuration, but doesn't
  include the benefits (or overhead) of an Ansible project.
+ Napalm, Netmiko, Salt can also be used, but support/functionality seems
  limited.
+ [[https://docs.vyos.io/en/stable/automation/terraform/index.html][Terraform]] can provision a VyOS image (and Ansible configures).
+ [[https://docs.vyos.io/en/stable/automation/cloud-init.html][Cloud-init]] is also an option

*** Data Flow


The VyOS source code implies these processes. It's API and CLI enables some
others.

#+begin_src dot :file img/vyos/fw-workflow.svg
digraph g {
    //rank=RT;
    user [label="User\n(Shell/UI)"];
    localData [label="Local\nData"];
    configMgmtData [label="Config MGMT Data\n(Network Services)"];
    nautobot [label="Nautobot\n(Inventory\nSource of Truth)"]
    networkAutomation [label="Network\nAutomation\n(services/workflows)"]
    subgraph cluster_VyosRouter {
        vyosCLI [label="VyOS CLI"];
        vyosFS [label="VyOS\nfile://\nscp"];
        vyosDSL [label="VyOS DSL"];
        vyconfd [label="vyconfd\n(isolated daemon\nvalidates & applies)"];
        vyosData [label="VyOS Data\n(files, state,...)"];
        fwTemplates [label="nftables\nTemplates"];
        fwState [label="nftables\nState"];
        fwApiData [label="VyOS\nAPI Data"];
    }
    user -> vyosCLI [label="Render\nCLI\nTemplates"];
    user -> vyosFS  [label="Render\nDSL\nFiles"];
    vyosFS -> vyosDSL [labels="Files\nto VyOS"]
    vyosCLI -> vyosDSL;
    vyosDSL -> vyconfd [label="Validation\n(interpret intent\ncheck state)"];
    vyconfd -> vyosData;
    vyconfd -> fwTemplates -> fwState;
    vyosData -> fwApiData;
    configMgmtData -> networkAutomation [label="Realtime\nNetwork\nState"]
    {configMgmtData,localData} -> networkAutomation [label="Merge\nInto\nParams"]
    {fwApiData} -> networkAutomation [label="Realtime\nDevice\nState"]
    networkAutomation -> vyosDSL [label="Genrates\nVyOS DSL"]
    networkAutomation -> vyosCLI [label="Genrates\nVyOS CLI"]
    nautobot -> configMgmtData;
}
#+end_src

#+RESULTS:
[[file:img/vyos/fw-workflow.svg]]


** From A Live ISO

#+name: tmpdir
#+begin_src sh :cache yes
mktemp -d
#+end_src

#+RESULTS[d11bbe9264aafab22d88733f2c0f56e64bc0e8a9]: tmpdir
: /tmp/tmp.FGNzBW0pUI

*** Packages

*** Services


*** Kernel


Fetch =/proc/config.gz=, then =gunzip=

#+begin_example shell
# this works, but tramp completion is problematic -- emacs close to locking :(
# +begin_src shell :dir /ssh:vyostest:/home/vyos :results output file :file img/vyos.kconfig
cat /proc/config.gz | gunzip -c
#+end_example

Just use scp

#+begin_src shell :var d=tmpdir
scp vyostest:/proc/config.gz $d
#+end_src

Run =gunzip= and save to =kconfig=

#+begin_src shell :var d=tmpdir
# total lines: 6390. without commented or empty lines: 3309
cat $d/kconfig | grep -v '^#' | grep -ve '^$' | wc -l
#+end_src

#+RESULTS:
: 3309

Whereas for this hsot arch zen kernel, there are =9386= positively-defined kconfig
settings (and =12192= total).

*** Hardware

Gonna want =hwinfo=

** Security

*** Stripping Private Data From Config

[[https://forum.vyos.io/t/ip-tv-with-igmp-issues/11604/3][Source]]

#+begin_example shell
show configuration commands | strip-private
#+end_example

*** Luks Volumes

During boot, vyos can [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/src/init/vyos-router#L86-L145][decrypt a Luks volume]] using keys stored in TPM. See: [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/.github/workflows/package-smoketest.yml#L198][GH
smoketest]] and [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/tpm.py#L23][./python/vyos/tpm.py]] and [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/src/helpers/vyos-config-encrypt.py#L36][./src/helpers/vyos-config-encrypt.py]].
** Source
*** vyos-1x

+ Contains the XML that specifies the VyOS cli.

Running =make all= runs these tasks

+ clean
+ interface_definitions :: configuration mode commands (via *.xml.in files)
+ op_mode_definitions :: operation mode commands (via *.xml.in files)
+ test
+ j2lint :: run linter for jinja2 files in =data/=
+ vyshim :: run make tasks in =src/{shim,shim/mkjson}/Makefile=
+ generate-configd-include-json :: generates JSON from the results of
  =interface_definitions= and =op_mode_definitions=

**** Build

[[https://docs.vyos.io/en/latest/contributing/build-vyos.html#build-packages][This section]] explains how to build the =*.deb= package, but it's not clear how the
dependencies are expected to be provided so =python/setup.py= can do it's thing.
It seems you need to use =vyos-build= to prep the =vyos-1x= code in order to run -- or
run scripts that include the

**** VyShim

+ vyos-configd-service :: 0MQ server
+ vyshim :: 0MQ client
+ mkjson :: C serializer to lay JSON on the 0MQ wire

[[https://vyos.dev/T6326][vyos.dev/T6326]] explains that API requests are relayed to the core
vyos-configd-service via 0MQ socket:

#+begin_quote
1. API(configure)
2. vyos-http-api-server(.py)
3. configsession.py
4. /opt/vyatta/sbin/my_commit(symlinked to: my_cli_bin)
5. sudo is called here, but I am too code blind when it comes to C to figure out where/how it is called
6. vyshim (ZMQ client)
7. vyos-configd-service (ZMQ server)
8. <py service file>
#+end_quote

See [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/data/vyos-configd-env-set#L1][./data/vyos-configd-env-set]]

**** XML Spec

Transclusion for XML specs in [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/op-mode-definitions/][./op-mode-definitions]] and
[[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/interface-definitions][./interface-definitions]] is performed by [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/scripts/transclude-template#L54][./scripts/transclude-template]]

Running =make op_mode_definitions= and =make interface_definitions= will generate
XML in the respective subdirs of =./build=. This can be queried with =xq= et alias.

The vyos =*.xml.in= files [[https://docs.vyos.io/en/latest/contributing/development.html#gnu-preprocessor][use the GNU Preprocessor]], merged in [[https://vyos.dev/T1843][T1843]]. The [[https://docs.vyos.io/en/latest/contributing/development.html#c-backend-code][CLI
parser is C++]] and found in [[https://github.com/vyos/vyatta-cfg][vyos/vyatta-cfg]]

***** Op Mode Definitions

+ [ ] in emacs, this results in a find/exec task that doesn't complete

***** Interface Definitions

+ [ ] building these requires having a compatible =libvyosconfig.so=

***** XML Schema

After building ISO, XML =RelaxNG= schemas are in
=./build/vyos-1x/schema/*.{rnc,rng}=

**** GraphQL API

The API is implemented in python using Ariadne in the vyos-1x repo.

The last task when =make all= generates the JSON versions of the same XML

The file [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/README.graphql#L3][src/services/api/graphql/README.graphql]] contains example queries

+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/graphql/schema/schema.graphql#L17][src/services/api/graphql/graphql/schema/schema.graphql]]
+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/graphql/schema/auth_token.graphql#L1][src/services/api/graphql/graphql/schema/auth_token.graphql]]
+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/graphql/client_op/auth_token.graphql#L3][src/services/api/graphql/graphql/client_op/auth_token.graphql]]

Python generates schemata (in this order, in generate_schema.py)

+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/generate/schema_from_op_mode.py#L154][src/services/api/graphql/generate/schema_from_op_mode.py]]
+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/generate/schema_from_config_session.py#L154][src/services/api/graphql/generate/schema_from_config_session.py]]
+ [[https://github.com/vyos/vyos-1x/blob/4d3e976271e30d70c8b2660d869a220de98d8c59/src/services/api/graphql/generate/schema_from_composite.py#L154][src/services/api/graphql/generate/schema_from_composite.py]]

These files use these config values

#+begin_example python
from vyos.defaults import directories

# ...

OP_MODE_PATH = directories['op_mode'] #
SCHEMA_PATH = directories['api_schema']
CLIENT_OP_PATH = directories['api_client_op']
DATA_DIR = directories['data']
#+end_example


**** Config Parser

Config language seems loosely modeled on =*.nft= files from nftables

+ Config is loaded here [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/configtree.py#L187-L210][./python/vyos/configtree.py]] at line 187, after the FFI
  functions for =cdll= bindings are bound to the =ConfigTree= object.
  - it can be instantiated from a =config_string= ... or an =internal= or an =address=
+ [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/config.py#L17][./python/vyos/config.py]]
  - The python files in =./src/= handle parsing modified config, validation and
    reconfiguration (see [[https://docs.vyos.io/en/latest/contributing/development.html#configuration-script-structure-and-behaviour][Configuration Script Structure/Behavior]]) ... but these
    are scripts invoked at runtime that depend on the library in =./python=
  - They are executed in [[https://docs.vyos.io/en/latest/contributing/development.html#other-considerations-vyos-configd][the vyos-configd context]]
+ [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/migrate.py#L40][./python/vyos/migrate.py]] is a good starting point for scripting
  - [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/component_version.py#L152-L159][./python/vyos/component_version.py]] reads the config file here (and splits it
    into parts)
+ [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/compose_config.py#L34][./python/vyos/compose_config.py]] will =apply_func= (Callable) or =apply_file= (with
  =func_file= and =func_name=) and dump the updated =config_tree= to a string.

Anyways ... using the =ConfigTree= directly in scripts should allow merging fairly
minimal configuration snippets in order to produce larger trees, which are
rendered to a final configuration object.

You'll need to run the vyos python code within a container that's built vyos
(set a tag to the build result, but ensuring critical files are present)

***** Merge from Jinja -> config strings -> config trees

e.g. with templates for the the config

#+begin_example conf
interfaces {
  ethernet en0 {
    address {% en0.address %}
    description "WAN Interface"
    offload {% en0.offload | join(' ') %}
  }
}
#+end_example

And a system

#+begin_example conf
system {
  host-name vyos
  time-zone America/New_York
  name-server 10.123.0.1
}
#+end_example

+ This approach isn't much better than =set= commands via ssh.
+ Still suffers from managing/transforming config
+ Can't sequence configuration transformations (to validate and attempt to
  =commit= config, rolling back transactions if subsequent =commit= is invalid or
  problematic after commit) ... i.e. it's all-or-nothing

**** Data

***** Protobufs

+ Need to build straight outta the vyos-1x directory

#+begin_example gitignore
# autogenerated vyos-commitd protobuf files
python/vyos/proto/*pb2.py
python/vyos/proto/*.desc
python/vyos/proto/vyconf_proto.py
#+end_example

**** Systemd

+ Service definitions and templates: [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/src/systemd][./src/systemd]]

** ISO Build

It's a =debian-live= build

+ [[https://debian-live-config.readthedocs.io/][Debian Live Config Docs]]
  - [[https://github.com/nodiscc/debian-live-config/blob/master/doc/md/custom.md][./doc/md/custom.md]]
+ [[https://packages.debian.org/bookworm/live-build][Live Build System Components]]

Other build projects (apparently the support isn't great)

+ [[https://github.com/grahamhayes/vyos-build/][grahamhayes/vyos-build]] (containers, but old)
+ [[https://github.com/mcbridematt/vyos-arm64-builder][mcbridematt/vyos-arm64-builder]] (without containers)
+ [[https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.youtube.com/watch%3Fv%3DpbCQ5DXwUhI&ved=2ahUKEwimnNHcgaKNAxVzEFkFHTrZMG4QtwJ6BAgUEAI&usg=AOvVaw0mxO4FE6gLKe1cgbZzdZJc][Video: successfully installed VyOS on custom ARM64]]

*** Directories

According to [[https://github.com/vyos/vyos-build?tab=readme-ov-file][vyos/vyos-build]], the directories used:

#+begin_quote
+ build :: Used for temporary files used for the build and for build artifacts
+ data :: Data required for building the ISO (e.g. boot splash/configs)
+ packages :: This directory can hold arbitrary *.deb packages which will be
  embeded into the resulting ISO. Among other things those packages will be:
  Linux Kernel, FRR, Netfiler...
+ scripts :: Scripts that are used for the build process
+ tools :: Scripts that are used for maintainer's tasks automation and other
  purposes, but not during ISO build process
#+end_quote

*** Customization

The [[https://github.com/vyos/vyos-build/blob/247e810339294218876922d6cc015c8bbc746c39/scripts/image-build/build-vyos-image#L201-L223][options passed to build-vyos-image]] can also be customized in
=./data/build-flavors/*.toml=, where the most complete defaults are seen in
[[https://github.com/vyos/vyos-build/blob/247e810339294218876922d6cc015c8bbc746c39/data/defaults.toml#L1][./data/defaults.toml]]

**** Add Packages

When added to the =build-flavor=, these should append.

#+begin_src toml
packages = [
  "lvm2",
  "hwinfo",
  "yubico-piv-tool",
  "opensc-pkcs11",
  "opensc",
  "age",
  "emacs-nox",
  "tmux",
  "acl"
]
#+end_src
**** Smoketests

See [[https://docs.vyos.io/en/latest/contributing/testing.html#smoketests][Testing]] for info on enabling smoketests during ISO build

*** Permanent Installation

Running =install image= eventually spawns =sudo
${vyos_op_scripts_dir}/image_installer.py --action install=

+ This is built into the ISO at ./build/vyos-1x/src/op_mode/image_installer.py
+ And sourced from the vyos-1x repo at [[https://github.com/vyos/vyos-1x/blob/572400156976a5fc36e1dbe2fcdaf12d61510e13/src/op_mode/image_installer.py#L4][src/op_mode/image_installer.py]]
+ It basically transfers the ISO contents onto the Root and EFI partitions. See
  [[https://github.com/vyos/vyos-1x/blob/572400156976a5fc36e1dbe2fcdaf12d61510e13/src/op_mode/image_installer.py#L791-L963][image_install]]
+ For the bootloader, it relies on [[https://github.com/vyos/vyos-1x/blob/572400156976a5fc36e1dbe2fcdaf12d61510e13/python/vyos/system/grub.py][grub]] and [[https://github.com/vyos/vyos-1x/blob/572400156976a5fc36e1dbe2fcdaf12d61510e13/python/vyos/system/grub_util.py][grub_util]] from =import vyos.system=
  - grub_util :: handles ={set,update}_console_speed= and
    ={set,update}_kernel_cmdline_options=
  - grub ::

*** Other Artifacts
**** Interesting files

+ ./build/vyos-1x/schema/*.{rnc,rng} :: RelaxNG XML schemas for interface &
  op-mode commands
+ ./build/config/hooks/{live,normal} ::


**** Structure of =build=

The files at =data/live-build-config/hooks/live= run when the ISO is mounted, so
=data/live-build-config/hooks/live/00-manifest.binary= writes to
=./live/packages.txt=, found at =/usr/lib/live/mount/medium/live/packages.txt=

***** Directories

Without vyos-1x, cache or chroot directories, the file structure is compact

#+begin_src shell :results output verbatim :dir /data/ecto/vyos/vyos/vyos-build
tree -dI vyos-1x -I cache -I chroot build
#+end_src

#+RESULTS:
#+begin_example
build
├── auto
├── binary
│   ├── boot
│   │   └── grub
│   │       ├── live-theme
│   │       └── x86_64-efi
│   ├── EFI
│   │   └── boot
│   ├── isolinux
│   └── live
├── config
│   ├── apt
│   ├── archives
│   ├── bootloaders
│   │   └── grub-pc
│   │       └── live-theme
│   ├── debian-installer
│   ├── hooks
│   │   ├── live
│   │   └── normal
│   ├── includes
│   ├── includes.binary
│   │   └── isolinux
│   ├── includes.bootstrap
│   ├── includes.chroot
│   │   ├── etc
│   │   │   ├── initramfs-tools
│   │   │   │   └── hooks
│   │   │   ├── modprobe.d
│   │   │   ├── modules-load.d
│   │   │   ├── sudoers.d
│   │   │   └── systemd
│   │   │       └── system
│   │   │           └── getty@tty1.service.d
│   │   ├── opt
│   │   │   └── vyatta
│   │   │       └── etc
│   │   │           ├── grub
│   │   │           └── install-image
│   │   ├── usr
│   │   │   └── share
│   │   │       └── vyos
│   │   │           └── keys
│   │   └── var
│   │       └── lib
│   │           └── shim-signed
│   │               └── mok
│   ├── includes.chroot_after_packages
│   ├── includes.chroot_before_packages
│   ├── includes.installer
│   ├── includes.source
│   ├── package-lists
│   ├── packages
│   ├── packages.binary
│   ├── packages.chroot
│   ├── preseed
│   └── rootfs
└── local
    └── bin

60 directories
#+end_example

** Running Image

*** SquashFS

Once the image is built, it's =isolinux -> squashfs. you need to mount readonly
as loopback, then unpack the squashfs to check the file system.

In addition to many other file systems, the squashfs mounts as:

#+begin_example text
/dev/loop0 on /usr/lib/live/mount/rootfs/filesystem.squashfs type squashfs (ro,noatime,errors=continue)
overlay on / type overlay (rw,noatime,lowerdir=//filesystem.squashfs/,upperdir=/live/overlay//rw,workdir=/live/overlay//work,uuid=on)
#+end_example

*** Python

**** Environment

=/usr/share/vyos-http-api-tools/pyvenv.cfg=

#+begin_example conf
home = /usr/bin
include-system-site-packages = true
version = 3.11.2
executable = /usr/bin/python3.11
command = /usr/bin/python3 -m venv \
  --system-site-packages $__w # see below: long path, but completes all the way
#+end_example


**** Files

+ =/usr/lib/python3/dist-packages/vyos/= files in [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/ifconfig/][vyos/vyos-1x: ./python/vyos]]
+ =/usr/libexec/vyos/= merged; includes some files in [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/python/vyos/ifconfig/][vyos/vyos-1x: ./python/vyos]]
  - also includes graphql api
HTTP env

+ =/usr/share/vyos/=
+ =/usr/share/vyos-http-api-tools/= python env for HTTP API
  - =lib/python3.11/site-packages/vyos-http-api-tools/=

This env

+ =/__w/vyos-reusable-workflows/vyos-reusable-workflows/vyos-build/=
  - =scripts/package-build/pmacct/pmacct/=
    - =src/external_libs/rootfs=
*** System

+ =/opt/vyatta/config/active/= active configuration as a filesystem
  - =system/login/user/vyos=


** Config

*** Default Profiles

There are several profiles to build, each with a =config.boot.default=, though
some of the profiles below are CI/CD (not in the =vyos-build= project)

#+begin_src shell :results output verbatim
locate '/data/ecto/vyos*vyos*config*default' \
    | sed -e 's/\/data\/ecto\/vyos\/vyos\///g'  \
    | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
├── gh-action-test-vyos-1x
│   ├── data
│   │   └── config.boot.default
│   └── tests
│       └── data
│           └── config.boot.default
├── vyos
│   └── configs
│       └── etc
│           └── vyos
│               └── config.boot.default
├── vyos-1x
│   ├── data
│   │   └── config.boot.default
│   └── tests
│       └── data
│           └── config.boot.default
├── vyos-build
│   ├── build
│   │   └── vyos-1x
│   │       ├── data
│   │       │   └── config.boot.default
│   │       └── tests
│   │           └── data
│   │               └── config.boot.default
│   └── tools
│       ├── cloud-init
│       │   └── AWS
│       │       └── config.boot.default
│       └── container
│           └── config.boot.default
└── vyos-workflow-test-temp
    ├── data
    │   └── config.boot.default
    └── tests
        └── data
            └── config.boot.default

27 directories, 11 files
#+end_example

*** Snippets

Lots of snippets tests (mostly jinja templates), though some of these are
standard =.conf= files. The jinja is a bit hard to parse.

#+begin_src sh
find ./vyos/vyos-workflow-test-temp/ -name '*.conf*' -type f
#+end_src

+ vrf-basic: lots of static routes
** Org Babel

It would be possible to run commands against a vyos interface.

*** Potential Problems

+ Since [[https://docs.vyos.io/en/equuleus/cli.html#the-config-mode][configuraton mode changes the shell prompt from $ to #]], the tramp regexp
  may need to change.

**** Statefulness

The usage of =configure= introduces "statefulness" and so your scripts must adapt
to this.

***** Config modes

Three modes for configuration: saved (startup), working, and active/running.

This actually makes scripting much easier:

+ Your changes are transactional, =commit= the whole thing or reset
+ Aborted automation scripts can easily be unwound.

***** Command Modes

There are two modes for commands: Operational mode and Configuration mode

+ Running =show interfaces= in configuration mode outputs diffs with
  additions/replacements/deletions.

So scripts that do the following may be problematic

+ sets data based on state which cannot be predicted: network data or
  configuration management service which retrieve data on the router itself
+ sets data only in the working configuratioin parameters
+ can only source data for configuration after changes to firewall/routing.
  these scripts should generally be broken into multiple scripts, unless that
  would require multiple "transaction" rewinds
+ scripts that need to "hold" changes to working configuration on multiple
  devices, to evaluate whether the transaction should be commit. e.g. making
  changes to VPN/GRE tunnels for devices that would lose connectivity, where you
  want something to validate changes to working configuration (again, it
  displays in diff)

And actually, most of the working-configuration state is lost when you exit
configuration mode. This is probably for the best, as your scripts should
precompute all values anyways.

+ also, scripts that should generally require multiple transactions. i.e. you
  would like to =commit= mutliple times, but then need to rewind the changes to
  multiple devices -- in this case, the sequence of commands to rewind the
  changes cannot be known to be the "inverse" of the configured commands. So, a
  pattern for automation where you always save the running config before you
  initiate changes.

Since you can't exit configuration mode without commiting, your automation needs
to manage:

+ connection state (e.g. ssh)
+ error handling ... (e.g. you fat-fingered that VPN)
+ in addition to config delta and configuration mode state (e.g. the mode or the
  active interface)

The answers to the above general design concerns should be found in the code
that supports the [[https://docs.vyos.io/en/equuleus/configexamples/index.html][Configuration Blueprints]], especially the automated testing.

THE PROBLEM: these scenarios are actually exceedingly common for managing large
deployments, which are actually more common than you'd think (although
Route/Switch is small world)

You absolutely will take down the network & services lulz

*** Connect using =sshfs= to eval

One approach would just set the =:dir= to a Tramp path, but this isn't great

#+begin_example org
#+begin_src sh :dir (concat (identity sshfs-uri)) :shebang #!/bin/ash :eval never
ssh aserver '
nvram show | grep vlan
'
#+end_src
#+end_example

+ and [[https://lists.gnu.org/archive/html/emacs-orgmode/2016-01/msg00321.html][there can be issues with =/tmp=]] since babel will try to store scripts
  there on the remote host while it runs them
  - This is an issue for =busybox=, maybe =ash= and maybe =dropbear=... so it like
    doesn't work well for ddwrt, unless it's a custom build
+ =sshfs-uri= would be something like =(setq sshfs-uri
  "/ssh:root@router.mynet.local:/jffs/deploy")=
+ idk whether I used =sshfs= because =/ssh:user@host:/root/muh/server=, but Tramp
  maintains a persistent =ssh= connection that it injects real commands into
  (which is why it doesn't work when =PS1= has a colorized prompt)

There may be other approaches that combine Tramp/Babel

+ This requires some [[https://stewart123579.github.io/blog/posts/emacs/emacs-on-windows-getting-tramp-to-work/][Tramp tweaks for Windows]]

*** From the VyOS manual

Running this at a shell would connect, then run the commands

#+begin_example sh
ssh 192.0.2.1 'vbash -s' <<EOF
source /opt/vyatta/etc/functions/script-template
run show interfaces
exit
EOF
#+end_example

** ZeroTier & Tailscale

[[https://lev-0.com/][lev-0]] has several series on setting Tailscale on VyOS as a podman service. The
VyOS DSL has a =container= subcommand. I haven't worked out the details, but
this seems like a fairly viable option.

** PKI

** Contribution

*** [[https://vyos.dev/T7483][T7483]]: SSH FIDO2 Support

Setup

+ [ ] fork repository
+ [ ] build live ISO image that includes packages:
  - vim/emacs along with vyos repos
  - maybe use sshfs here (from server back to local, run dev commands on server)
+ [ ] add edits, watchexec to run make, run tests when build completes
+ [ ] test against the running live ISO
+ [ ] build an iso, test live with various configs
+ [ ] run smoke tests

Feature

+ [ ] ensure dependencies satisfied for yubico fido2
+ [ ] add a node to be compatible with ConfigTree
  - update =*.xml.in= for interface_definitions
+ [ ] add validation logic to [[https://github.com/vyos/vyos-1x/blob/bc6e337a13f3021ad39eb064e2452df7df77232f/src/conf_mode/service_ssh.py#L47][./src/conf_mode/service_ssh.py]]
+ [ ] update [[https://github.com/vyos/vyos-workflow-test-temp/blob/f2b087926864f164b31a3b833995f94cdbf49e36/data/templates/ssh/sshd_config.j2#L52][.data/templates/ssh/sshd_config.j2]] in vyos-1x (and elsewhere?)
  - SecurityKeyProvider: either set in the same jinja conditional or
  - PubkeyAuthOptions: none,touch-required,verify-required
+ [ ] docs should indicate that =ed25519-sk= is set first in user's configuration
+ [ ] ensure other =sshd= configurations aren't affected


** CLI Tools

*** For Templates


**** vyos-commands-to-config

+ =vyos-config-file-query= or =vyos-config-file-json= in the =bash= shell
+ or =merge= in the =vbash= shell

**** vyos-config-file-query

Same as API call, but =ssh= connection gives immediate response.

|-----------------+--------------------------|
| -f --file=      | Config file (or snippet) |
| -p --path=      | Config path              |
|-----------------+--------------------------|
| --return-value  |                          |
| --return-values |                          |
| --list-nodes    |                          |
| --exists        |                          |
|-----------------+--------------------------|

#+begin_src shell
vyos-config-file-query --path="interfaces" \
    --file=/opt/vyatta/etc/config/config.boot \
    --list-nodes
#+end_src

** Firewall

ipv6 subcommands have =hop-limit= but are mostly the same

*** Group Type

The =address*= indicates the fields' value sets a multi

=set firewall group $groupType=

|----+--------------------+-------+----------------------|
|    | type               | key   | field                |
|----+--------------------+-------+----------------------|
| +> | address-group      | $name | address* description |
| +> | ipv6-address-group | $name | address* description |
|----+--------------------+-------+----------------------|
| +> | network-group      | $name | address* description |
| +> | ipv6-network-group | $name | address* description |
|----+--------------------+-------+----------------------|
| +> | remote-group       | $name | url* description     |
|----+--------------------+-------+----------------------|

port group (value is a port, range or service name in =/etc/services=)

|----+------------+-------+--------------------|
|    | type       | key   | field              |
|----+------------+-------+--------------------|
| +> | port-group | $name | value* description |
|----+------------+-------+--------------------|

Others

|----+-----------------+-------+---------------------|
| +> | domain-group    | $name | domain* description |
| +> | interface-group | $name | if* description     |
| +> | mac-group       | $name | mac* description    |
|----+-----------------+-------+---------------------|

Dynamic groups are composed of a single type above and receive their values from
the =add-address-to-group= rule during firewall execution.

|---+---------------+-------+-------|
|   | type          | key   | field |
|---+---------------+-------+-------|
| > | dynamic-group | $type | $name |
|---+---------------+-------+-------|

*** ipv4

|------+-------------+----|
| ipv4 | fwd         | 34 |
| ipv4 | input       | 32 |
| ipv4 | out(filter) | 33 |
| ipv4 | out(raw)    | 23 |
| ipv4 | pre(raw)    | 23 |
|------+-------------+----|

Subcommands

subcommands =x: missing=

|-----+-----+----+-----+----------+---+-----------------------+-----------------------------------------------------------------------------------|
| pre | fwd | in | out | out(raw) |   |                       |                                                                                   |
|-----+-----+----+-----+----------+---+-----------------------+-----------------------------------------------------------------------------------|
|     |     |    |     |          | > | add-address-to-group  | Add ip address to dynamic address-group                                           |
| x   |     |    |     | x        | + | connection-mark       | Connection mark                                                                   |
| x   |     |    |     | x        | > | connection-status     | Connection status                                                                 |
| x   |     |    |     | x        | + | conntrack-helper      | Match related traffic from conntrack helpers                                      |
|     |     |    |     |          |   | description           | Description                                                                       |
|     |     |    |     |          | > | destination           | Destination parameters                                                            |
|     |     |    |     |          |   | disable               | Disable instance                                                                  |
|     |     |    |     |          | + | dscp                  | DSCP value                                                                        |
|     |     |    |     |          | + | dscp-exclude          | DSCP value not to match                                                           |
|     |     |    |     |          | > | fragment              | IP fragment match                                                                 |
| x   |     |    |     | x        | > | gre                   | GRE fields to match                                                               |
|     |     |    |     |          | > | ttl (hop-limit)       | Time to live limit                                                                |
|     |     |    |     |          | > | icmp                  | ICMP type and code information                                                    |
|     |     |    | x   | x        | > | inbound-interface     | Match inbound-interface                                                           |
|     |     |    |     |          | > | ipsec                 | IPsec encapsulated packets                                                        |
|     |     |    |     | x        |   | jump-target           | Set jump target. Action jump must be defined to use this setting                  |
|     |     |    |     |          | > | limit                 | Rate limit using a token bucket filter                                            |
|     |     |    |     |          |   | log                   | Log packets hitting this rule                                                     |
|     |     |    |     |          | > | log-options           | Log options                                                                       |
| x   |     |    |     | x        |   | mark                  | Firewall mark                                                                     |
| x   |     | x  | x   | x        |   | offload-target        | Set flowtable offload target. Action offload must be defined to  use this setting |
| x   |     | x  |     |          | > | outbound-interface    | Match outbound-interface                                                          |
| x   |     |    |     | x        | + | packet-length         | Payload size in bytes, including header and data to match                         |
| x   |     |    |     | x        | + | packet-length-exclude | Payload size in bytes, including header and data not to match                     |
| x   |     |    |     | x        |   | packet-type           | Packet type                                                                       |
|     |     |    |     |          |   | protocol              | Protocol to match (protocol name, number, or "all")                               |
|     |     |    |     |          |   | queue                 | Queue target to use. Action queue must be defined to use this setting             |
|     |     |    |     |          | + | queue-options         | Options used for queue target. Action queue must be defined to use this setting   |
|     |     |    |     |          | > | recent                | Parameters for matching recently seen sources                                     |
|     |     | x  |     |          | > | set                   | Packet modifications                                                              |
|     |     |    |     |          | > | source                | Source parameters                                                                 |
| x   |     |    |     | x        | + | state                 | Session state                                                                     |
| x   |     |    |     | x        | > | synproxy              | Synproxy options                                                                  |
|     |     |    |     |          | > | tcp                   | TCP options to match                                                              |
|     |     |    |     |          | > | time                  | Time to match rule                                                                |
|-----+-----+----+-----+----------+---+-----------------------+-----------------------------------------------------------------------------------|

*** ipv6

|------+---------------+----|
| ipv6 | fwd           | 34 |
| ipv6 | input(filter) | 32 |
| ipv6 | out(filter)   | 33 |
| ipv6 | out(raw)      | 22 |
| ipv6 | pre(raw)      | 22 |
|------+---------------+----|

subcommands =x: missing=

|-----+-----+----+-----+----------+---+-----------------------+----------------------------------------------------------------------------------|
| pre | fwd | in | out | out(raw) |   |                       |                                                                                  |
|-----+-----+----+-----+----------+---+-----------------------+----------------------------------------------------------------------------------|
|     |     |    |     |          | > | add-address-to-group  | Add ipv6 address to dynamic ipv6-address-group                                   |
| x   |     |    |     | x        | + | connection-mark       | Connection mark                                                                  |
| x   |     |    |     | x        | > | connection-status     | Connection status                                                                |
| x   |     |    |     | x        | + | conntrack-helper      | Match related traffic from conntrack helpers                                     |
|     |     |    |     |          |   | description           | Description                                                                      |
|     |     |    |     |          | > | destination           | Destination parameters                                                           |
|     |     |    |     |          |   | disable               | Disable instance                                                                 |
|     |     |    |     |          | + | dscp                  | DSCP value                                                                       |
|     |     |    |     |          | + | dscp-exclude          | DSCP value not to match                                                          |
|     |     |    |     |          | > | fragment              | IP fragment match                                                                |
| x   |     |    |     | x        | > | gre                   | GRE fields to match                                                              |
|     |     |    |     |          | > | hop-limit (ttl)       | Hop limit                                                                        |
|     |     |    |     |          | > | icmpv6                | ICMPv6 type and code information                                                 |
|     |     |    | x   | x        | > | inbound-interface     | Match inbound-interface                                                          |
|     |     |    |     |          | > | ipsec                 | IPsec encapsulated packets                                                       |
|     |     |    |     | x        |   | jump-target           | Set jump target. Action jump must be defined to use this setting                 |
|     |     |    |     |          | > | limit                 | Rate limit using a token bucket filter                                           |
|     |     |    |     |          |   | log                   | Log packets hitting this rule                                                    |
|     |     |    |     |          | > | log-options           | Log options                                                                      |
| x   |     |    |     | x        |   | mark                  | Firewall mark                                                                    |
| x   |     | x  | x   | x        |   | offload-target        | Set flowtable offload target. Action offload must be defined to use this setting |
| x   |     | x  |     |          | > | outbound-interface    | Match outbound-interface                                                         |
| x   |     |    |     | x        | + | packet-length         | Payload size in bytes, including header and data to match                        |
| x   |     |    |     | x        | + | packet-length-exclude | Payload size in bytes, including header and data not to match                    |
| x   |     |    |     | x        |   | packet-type           | Packet type                                                                      |
|     |     |    |     |          |   | protocol              | Protocol to match (protocol name, number, or "all")                              |
|     |     |    |     |          |   | queue                 | Queue target to use. Action queue must be defined to use this setting            |
|     |     |    |     |          | + | queue-options         | Options used for queue target. Action queue must be defined to use this setting  |
|     |     |    |     |          | > | recent                | Parameters for matching recently seen sources                                    |
|     |     | x  |     |          | > | set                   | Packet modifications                                                             |
|     |     |    |     |          | > | source                | Source parameters                                                                |
| x   |     |    |     | x        | + | state                 | Session state                                                                    |
| x   |     |    |     | x        | > | synproxy              | Synproxy options                                                                 |
|     |     |    |     |          | > | tcp                   | TCP options to match                                                             |
|     |     |    |     |          | > | time                  | Time to match rule                                                               |
|-----+-----+----+-----+----------+---+-----------------------+----------------------------------------------------------------------------------|

*** Jinja Templates

#+begin_src shell :results output verbatim
find -name 'nftables*.j2' -type f -printf '%p\n' \
    | tee -a >(echo ./data/templates/firewall/sysctl-firewall.conf.j2) \
    | sed -e 's/^.\///g' \
    | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── data
    └── templates
        ├── conntrack
        │   ├── nftables-ct.j2
        │   └── nftables-helpers.j2
        ├── firewall
        │   ├── nftables-bridge.j2
        │   ├── nftables-cgnat.j2
        │   ├── nftables-defines.j2
        │   ├── nftables-geoip-update.j2
        │   ├── nftables.j2
        │   ├── nftables-nat66.j2
        │   ├── nftables-nat.j2
        │   ├── nftables-offload.j2
        │   ├── nftables-policy.j2
        │   ├── nftables-static-nat.j2
        │   ├── nftables-zone.j2
        │   └── sysctl-firewall.conf.j2
        └── load-balancing
            └── nftables-wlb.j2

6 directories, 15 files
#+end_example

Entry points

#+begin_src shell :results output verbatim
grep -e '#!/usr/sbin/nft' $(find -name 'nftables*.j2' -type f -printf '%p\n' \
    | tee -a >(echo ./data/templates/firewall/sysctl-firewall.conf.j2)) \
    | sed -e 's/.\/data\/templates\///g' \
    | sed -e "s/:#!/ => #!/g"
#+end_src

#+RESULTS:
: conntrack/nftables-ct.j2 => #!/usr/sbin/nft -f
: firewall/nftables-cgnat.j2 => #!/usr/sbin/nft -f
: firewall/nftables-policy.j2 => #!/usr/sbin/nft -f
: firewall/nftables-nat66.j2 => #!/usr/sbin/nft -f
: firewall/nftables.j2 => #!/usr/sbin/nft -f
: firewall/nftables-nat.j2 => #!/usr/sbin/nft -f
: firewall/nftables-static-nat.j2 => #!/usr/sbin/nft -f
: firewall/nftables-geoip-update.j2 => #!/usr/sbin/nft -f
: load-balancing/nftables-wlb.j2 => #!/usr/sbin/nft -f

Imports

#+begin_src shell :results output verbatim
grep -e import $(find -name 'nftables*.j2' -type f -printf '%p\n' \
    | tee -a >(echo ./data/templates/firewall/sysctl-firewall.conf.j2)) \
    | sed -e 's/.\/data\/templates\///g' \
    | sed -e "s/:{% / => /g" | sed -e "s/ %}//g"
#+end_src

#+RESULTS:
#+begin_example
conntrack/nftables-ct.j2 => import 'conntrack/nftables-helpers.j2' as helper_tmpl
conntrack/nftables-ct.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
firewall/nftables-policy.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
firewall/nftables-nat66.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
firewall/nftables.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
firewall/nftables.j2 => import 'firewall/nftables-bridge.j2' as bridge_tmpl
firewall/nftables.j2 => import 'firewall/nftables-offload.j2' as offload_tmpl
firewall/nftables.j2 => import 'firewall/nftables-zone.j2' as zone_tmpl
firewall/nftables-bridge.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
firewall/nftables-nat.j2 => import 'firewall/nftables-defines.j2' as group_tmpl
#+end_example

Macros

#+begin_src shell :results output verbatim
grep -e '{% macro' $(find -name 'nftables*.j2' -type f -printf '%p\n' \
    | tee -a >(echo ./data/templates/firewall/sysctl-firewall.conf.j2)) \
    | sed -e 's/.\/data\/templates\///g' \
    | sed -e "s/:{% / => /g" | sed -e "s/ %}//g"
#+end_src

#+RESULTS:
: conntrack/nftables-helpers.j2 => macro conntrack_helpers(module_map, modules, ipv4=True)
: firewall/nftables-offload.j2 => macro flowtable(name, config)
: firewall/nftables-bridge.j2 => macro bridge(bridge)
: firewall/nftables-defines.j2 => macro groups(group, is_ipv6, is_l3)
: firewall/nftables-zone.j2 => macro zone_chains(zone, ipv6=False, state_policy=False)

Chains

#+begin_src shell :results output verbatim
grep -e 'chain' $(find -name 'nftables*.j2' -type f -printf '%p\n' \
    | tee -a >(echo ./data/templates/firewall/sysctl-firewall.conf.j2)) \
    | sed -e 's/.\/data\/templates\///g' \
    | sed -e "s/:{% / => /g" | sed -e "s/ %}//g"
#+end_src

#+RESULTS:



** Printing Docs

Run the =js=, add a new =css= and paste that in.

#+begin_src emacs-lisp
(defun invert-css-rgb (x)
  (format "%06X" (- #xffffff x)))
#+end_src

#+begin_src javascript
// navbar
document.querySelector('.wy-nav-side').remove()
// header
document.querySelector('iframe#vyos-header-iframe').remove()
document.querySelector('.wy-breadcrumbs').remove()
// bottom of code elements
Array.from(document.querySelectorAll('.copyDiv')).forEach(el => el.remove());
// footer
document.querySelector('.iframe-container').remove()
document.querySelector('.rst-footer-buttons').remove()
document.querySelector('footer').remove()
// read the docs

document.querySelector('readthedocs-flyout').remove()
document.querySelector('readthedocs-notification').remove()
document.querySelector('readthedocs-search').remove()
document.querySelector('readthedocs-hotkeys').remove()
#+end_src

#+begin_src css
.wy-grid-for-nav { padding-top: 0 !important; }
.wy-nav-content { padding: 0 !important; }
.wy-nav-content-wrap { max-width: 100% !important; }
.wy-nav-content-wrap-opened-sidebar { margin: 0 !important; }
code { line-height: 1.0em; !important; font-size: 0.9em !important; padding: 0 !important }
p { margin: 0 0 0.2em !important; line-height: 1.0em !important; font-size: 0.9em !important }
h1,h2,h3,h4 { margin: 0 0 0.2em !important; }
h1 { line-height: 1.5em !important; font-size: 1.4em !important }
h2 { line-height: 1.3em !important; font-size: 1.2em !important }
h3 { line-height: 1.1em !important; font-size: 1.0em !important }
h4 { line-height: 0.9em !important; font-size: 0.8em !important }
/* h1,h2,h3,h4 { line-height: 1.5em !important; font-size: 0.9em !important } */

section ul {
    margin: 0 !important;
    line-height: 0.9em !important;
}

.rst-content dl dd {
    margin: 0 !important;
    line-height: 0.9em !important;
}
.rst-content div[class^=highlight] {
    margin: 0.2em !important;
}
.rst-content {
  & div[class^="highlight"] div[class^="highlight"], & pre.literal-block div[class^="highlight"] {
    background: #FFFFFF !important;
  }
  & div[class^="highlight"], & pre.literal-block {
    background: linear-gradient(#FFFFFF, #FFFFFF);
  }
  & .linenodiv pre, & div[class^="highlight"] pre, & pre.literal-block {
    color: #000;
    font-size: 0.9em !important;
    line-height: 0.9em !important;
  }
}
.highlight {
  background: #FFFFFF !important;
}
.highlight {
  & .cp { color: #3D002C !important; } /* xml version */
  & .cm { color: #2A1813 !important; } /* xml comment */
  & .nt { color: #022E01 !important; } /* node */
  & .cm { color: #123E11 !important; } /* prop */
  & .s  { color: #24190F !important; } /* string */
  & .ni { color: #5B5B52 !important; } /* encoded */
  & .kn { color: #330025 !important; }
  & .nn { color: #2F1104 !important; }
  & .o  { color: #191919 !important; }
  & .s2 { color: #290A19 !important; }
  & .s1 { color: #3D002C !important; }
  & .nb { color: #330025 !important; }
  & .c1 { color: #231410 !important; }
  & .n  { color: #003333 !important; }
  & .k  { color: #330025 !important; }
  & .se { color: #24190F !important; }
  & .nv { color: #11280B !important; }
  & .gh { color: #333300 !important; }
  & .gd { color: #003333 !important; }
  & .gi { color: #330033 !important; }
  & .gu { color: #003D00 !important; }
  & .mi { color: #310C1F !important; }
  & .nf { color: #123E11 !important; }
  & .kc { color: #3D002C !important; }
  & .ch { color: #2A1813 !important; }
  & .mf { color: #290A19 !important; }
  & .go { color: #191919 !important; }
  & .m  { color: #290A19 !important; }
}

// (invert-css-rgb #xd5e7ec)
// (invert-css-rgb #xc2ffd3)
// (string-to-number (number-to-string (- #xffffff #xd5e7ec)) 16)
#+end_src
