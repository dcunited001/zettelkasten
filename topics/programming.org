:PROPERTIES:
:ID:       4cdfd5a2-08db-4816-ab24-c044f2ff1dd9
:END:
#+TITLE: Programming
#+DESCRIPTION: General Info On Programming
#+TAGS:

Holy shit [[https://www.cheat-sheets.org/][The motherlode of all cheatsheets]] ... holy shit lol

Oh and also [[https://github.com/EbookFoundation/free-programming-books/blob/main/more/free-programming-cheatsheets.md][EBookFoundation/free-programming-books]] has more cheatsheets (via an
indexed [[https://sourcegraph.com/github.com/EbookFoundation/free-programming-books/-/blob/more/free-programming-cheatsheets.md#scala][sourcegraph search]], of all places)

* Resources

** Tools

*** Read

**** Sourcegraph

**** Codesearch


An internal Google tool using indexed regexp, with finite automata ... and
trigrams?

+ The original article: [[https://swtch.com/~rsc/regexp/regexp4.html][Regular Expression Matching with a Trigram Index]] (or How
  Google Code Search Worked)
+ [[https://about.sourcegraph.com/podcast/han-wen-nienhuys][Building The Foundation of Code Search]]: podcast with Han-Wen Nienhuys, author
  of lilypond (a great reference for Guile Scheme ... and it does sheet music,
  guitar tabs, etc)

*** Learn

**** Indexing ASTs

+ Concepts: [[https://dcreager.net/stack-graphs/][Stack Graphs]] and [[https://dcreager.net/scope-graphs/][Scope Graphs]]
+ [[https://dcreager.net/2021/06/tree-sitter-map/][Treesitter ecosystem]]
+ [[https://github.blog/2021-12-09-introducing-stack-graphs/][GH Announcment]]
+ [[https://github.com/github/semantic][github/semantic]]: treesitter-based parsing, analyzing and comparing. Used for
  Github's analysis. Maybe discontinued, not sure. Semantic generates haskell
  types from treesitter grammers and implements some of the ideas above to index
  code at scale.
+ [[github:github/stack-graphs][github/stack-graphs]] and [[https://docs.rs/tree-sitter-stack-graphs/0.7.0/tree_sitter_stack_graphs/][tree_sitter_stack_graphs]] provides the Tree Sitter DSL
  for stack graphs ... so it's more useful when trying to figure out how various
  parts of the source code interact with other parts.

Roam: [[id:aef34489-3943-4c2f-bf88-828f5ea39e16][Tree-sitter]]


** Awesome Lists

*** General

**** [[https://github.com/jwasham/coding-interview-university][jwasham/coding-interview-university]]

main resouces

+ a bunch of c/c++ [[https://github.com/jwasham/coding-interview-university/tree/main/extras/cheat%20sheets][cheatsheets]]
+ lots of structured advice on data structures and algs in the readme
+ more specific topics in [[https://github.com/jwasham/coding-interview-university/tree/main#additional-detail-on-some-subjects][Additional Detail]]
+ many book recommendations in [[https://github.com/jwasham/coding-interview-university/blob/main/programming-language-resources.md][programming-language-resources.md]].

other info

+ [[https://github.com/jwasham/coding-interview-university/tree/main#additional-books][additional books]]
+ a section on system design, which recommends starting with
  [[https://github.com/donnemartin/system-design-primer][donnemartin/system-design-primer]]. lots of links; many articles from
  [[http://highscalability.com/][highscalability.com]] (out of date, no ssl, but probably a good resource)
+ [[https://github.com/jwasham/coding-interview-university/tree/main#balanced-search-trees][balanced search trees]]
+ deep dives on garbage collection
+ [[https://github.com/jwasham/coding-interview-university/tree/main#video-series][playlists of lectures]]
+ recommendations of [[https://github.com/jwasham/coding-interview-university/tree/main#additional-detail-on-some-subjects][lectures]] for specific topics
+ recommendations on [[https://github.com/jwasham/coding-interview-university/tree/main#papers][papers]]

* Topics

** Printing Source Code

Use =enscript= to [[https://tashian.com/guides/print-out-your-code/#_][Print Out Your Code. On Paper]] It's occasionally useful

** Visualizing Source Code

*** [[github:githubocto/repo-visualizer][githubocto/repo-visualizer]]

[[https://githubnext.com/projects/repo-visualization][Visualizing a codebase]]

* Pair Programming

** Apps

*** [[https://zed.dev/][zed.dev]]

Pairing IDE

*** [[https://code.librehq.com/qhong/crdt.el/][crdt.el]]

Emacs pairing based on [[https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type][CRDT (conflict-free replicated data types)]]

** Topics

*** Ensemble Programming

*** Code Retreats
+ [[https://www.coderetreat.org/facilitators/gameoflife/][Game of Life]]
*** Problems
+ [[https://www.cs.cornell.edu/courses/cs1380/2018sp/textbook/chapters/08/3/monty-hall-problem.html][Monty Hall Problem]]
