:PROPERTIES:
:ID:       4cdfd5a2-08db-4816-ab24-c044f2ff1dd9
:END:
#+TITLE: Programming
#+DESCRIPTION: General Info On Programming
#+TAGS:

Holy shit [[https://www.cheat-sheets.org/][The motherlode of all cheatsheets]] ... holy shit lol

Oh and also [[https://github.com/EbookFoundation/free-programming-books/blob/main/more/free-programming-cheatsheets.md][EBookFoundation/free-programming-books]] has more cheatsheets (via an
indexed [[https://sourcegraph.com/github.com/EbookFoundation/free-programming-books/-/blob/more/free-programming-cheatsheets.md#scala][sourcegraph search]], of all places)

* Resources

** Functional Programming

*** AlHassy

+ [[https://alhassy.com/PathCat][Graphs are to categories as Lists are to Monoids]]
+

** Tools

*** Read

**** Sourcegraph

**** Codesearch


An internal Google tool using indexed regexp, with finite automata ... and
trigrams?

+ The original article: [[https://swtch.com/~rsc/regexp/regexp4.html][Regular Expression Matching with a Trigram Index]] (or How
  Google Code Search Worked)
+ [[https://about.sourcegraph.com/podcast/han-wen-nienhuys][Building The Foundation of Code Search]]: podcast with Han-Wen Nienhuys, author
  of lilypond (a great reference for Guile Scheme ... and it does sheet music,
  guitar tabs, etc)

*** Learn

**** Indexing ASTs

+ Concepts: [[https://dcreager.net/stack-graphs/][Stack Graphs]] and [[https://dcreager.net/scope-graphs/][Scope Graphs]]
+ [[https://dcreager.net/2021/06/tree-sitter-map/][Treesitter ecosystem]]
+ [[https://github.blog/2021-12-09-introducing-stack-graphs/][GH Announcment]]
+ [[https://github.com/github/semantic][github/semantic]]: treesitter-based parsing, analyzing and comparing. Used for
  Github's analysis. Maybe discontinued, not sure. Semantic generates haskell
  types from treesitter grammers and implements some of the ideas above to index
  code at scale.
+ [[github:github/stack-graphs][github/stack-graphs]] and [[https://docs.rs/tree-sitter-stack-graphs/0.7.0/tree_sitter_stack_graphs/][tree_sitter_stack_graphs]] provides the Tree Sitter DSL
  for stack graphs ... so it's more useful when trying to figure out how various
  parts of the source code interact with other parts.

Roam: [[id:aef34489-3943-4c2f-bf88-828f5ea39e16][Tree-sitter]]


** Awesome Lists

*** General

**** [[https://github.com/jwasham/coding-interview-university][jwasham/coding-interview-university]]

main resouces

+ a bunch of c/c++ [[https://github.com/jwasham/coding-interview-university/tree/main/extras/cheat%20sheets][cheatsheets]]
+ lots of structured advice on data structures and algs in the readme
+ more specific topics in [[https://github.com/jwasham/coding-interview-university/tree/main#additional-detail-on-some-subjects][Additional Detail]]
+ many book recommendations in [[https://github.com/jwasham/coding-interview-university/blob/main/programming-language-resources.md][programming-language-resources.md]].

other info

+ [[https://github.com/jwasham/coding-interview-university/tree/main#additional-books][additional books]]
+ a section on system design, which recommends starting with
  [[https://github.com/donnemartin/system-design-primer][donnemartin/system-design-primer]]. lots of links; many articles from
  [[http://highscalability.com/][highscalability.com]] (out of date, no ssl, but probably a good resource)
+ [[https://github.com/jwasham/coding-interview-university/tree/main#balanced-search-trees][balanced search trees]]
+ deep dives on garbage collection
+ [[https://github.com/jwasham/coding-interview-university/tree/main#video-series][playlists of lectures]]
+ recommendations of [[https://github.com/jwasham/coding-interview-university/tree/main#additional-detail-on-some-subjects][lectures]] for specific topics
+ recommendations on [[https://github.com/jwasham/coding-interview-university/tree/main#papers][papers]]

* Topics

** Printing Source Code

*** Enscript

Use =enscript= to [[https://tashian.com/guides/print-out-your-code/#_][Print Out Your Code. On Paper]]. It's occasionally
useful.

** Visualizing Source Code

*** [[github:githubocto/repo-visualizer][githubocto/repo-visualizer]]

[[https://githubnext.com/projects/repo-visualization][Visualizing a codebase]]

** Testing

For code comprehension, extrapolation or interviews

*** Red/Green Partial Diffs

I think this might be a good way to broaden younger programmers' exposure to
code or Open Source culture or Git Forge practices, regardless of whether this
is an app that would be used to test for comprehension.

The goal is not for a student/interviewee to "fix" the code or "find the bug" --
instead these would be intended to:

+ Require less time investment than later stage technical interviews (which may
  require 5+ hours ... of free work?)
+ Filter interviewees after or perhaps before initial phone screen.
+ Provide questions that mix some structure/grading with opportunity for
  open-ended responses.

Thus, the code should be fairly "normal" while the changeset is definitely
driven by a purpose. This could either be explained a diff that:

+ corrects a bug or adds a feature
+ illustrates a possible use case (either integration test or e2e test) changes
  an interface
+ expands potential for interaction between extant design patterns
+ expands CLI options, etc
+ creates inversion of control

... But you want a large base of source material, likely 1,000+ changesets:

+ some smaller fraction of which would be repeated
+ changesets can be tagged/categorized or scored according to difficulty

Draw testing material from somewhat complicated PRs or Diffs on Github where
many lines are changed in a small number of files.

+ Obscure 40-80% of either the diff's red lines or green lines or 20% of both
+ Ask the student/interviewer to identify missing functionality.
+ Press for reasoning, reaction time, potential social reception of the Diff/PR
  (e.g. there could be problems)
+ Ask for extrapolation of changes, code or future problems
+ Potentially ask the student/interviewer to add the missing lines or to outline
  the UML/Models for unspecified interfaces (outside of the context of the )

*Technically what I've described is basically Github ...*

#+begin_quote
I was thinking last night about the "nevers" and "havent' evers" and those
quantifiably infinitessimals ... I don't think I have ever seen a single Github
notification on my desktop. Not on MacOS, Not on Github. My browser
notifications have been misconfigured for some time. But yeh, there's not much
that draws me back into Github or grabs my attention when responses are needed.

/I don't have Windows, I don't have a tablet, I don't have the GH desktop app,
My old email account crashes every client I log into, I have never used the =gh=
CLI tool because I don't put authorization cookies in my home directory/.

So yeh, given how much time I wasted on social media, I definitly regret not
using Github socially or seeking out FOSS as a kind of social network.
#+end_quote

* Pair Programming

** Apps

*** [[https://zed.dev/][zed.dev]]

Pairing IDE

*** [[https://code.librehq.com/qhong/crdt.el/][crdt.el]]

Emacs pairing based on [[https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type][CRDT (conflict-free replicated data types)]]

** Topics

*** Ensemble Programming

*** Code Retreats
+ [[https://www.coderetreat.org/facilitators/gameoflife/][Game of Life]]
*** Problems
+ [[https://www.cs.cornell.edu/courses/cs1380/2018sp/textbook/chapters/08/3/monty-hall-problem.html][Monty Hall Problem]]
