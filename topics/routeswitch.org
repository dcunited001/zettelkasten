:PROPERTIES:
:ID:       e967c669-79e5-4a1a-828e-3b1dfbec1d19
:END:
#+TITLE:     Route Switch
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Linux Routing

** VyOS

VyOS has =nftables= and a decent DSL with fairly good ansible support.

+ The DSL is implemented in OCaml.
+ It only supports x86 for now.
+ It's missing some of the plug-in functionality of OPNsense (packet/traffic
  inspection), but has the ability to run images in containers with
  routing/firewall on the container host. So you could set up a container to do
  much of what the PFSense and OPNsense ecosystem allows (see the [[https://docs.vyos.io/en/stable/configuration/container/index.html#example-configuration][Zabbix
  container example]])

*** Docs

+ [[https://docs.vyos.io/en/stable/automation/index.html][Automation]] and [[https://docs.vyos.io/en/stable/automation/command-scripting.html#executing-pre-hooks-post-hooks-scripts][pre/post hooks]]
+ [[https://docs.vyos.io/en/stable/cli.html#configuration-overview][Configuration overview]] (navigating the router CLI like with IOS
  shortcuts/help)
+ [[https://docs.vyos.io/en/stable/troubleshooting/index.html][Troubleshooting]]

**** How to
+ [[https://docs.vyos.io/en/stable/configexamples/index.html][Configuration Blueprints]] and [[https://docs.vyos.io/en/stable/configexamples/index.html#configuration-blueprints-autotest][Autotest Blueprints]]
**** DSL

+ [[https://docs.vyos.io/en/stable/configuration/firewall/index.html][firewall]]
+ [[https://docs.vyos.io/en/stable/configuration/container/index.html][container]]
+ [[https://docs.vyos.io/en/stable/configuration/interfaces/index.html][interfaces]]
  + [[https://docs.vyos.io/en/stable/configuration/interfaces/openvpn.html][OpenVPN]] (with LDAP)

*** Resources
+ [[https://blog.kroy.io/2019/11/21/battle-of-the-bare-metal-routers/][Battle of the Metal Routers]]
+ [[https://blog.kroy.io/2019/08/23/battle-of-the-virtual-routers/][Battle of the Virtual Routers]] (VyOS)

*** Topics

**** Automation
+ Ansible is the main tool for configuration. Their ansible code includes
  inventory plugins, but I'm unsure of the discovery mechanisms.
+ Ansible requires paramiko for ssh
+ SSH/Shell is just as proficient as ansible for DSL configuration, but doesn't
  include the benefits (or overhead) of an Ansible project.
+ Napalm, Netmiko, Salt can also be used, but support/functionality seems
  limited.
+ [[https://docs.vyos.io/en/stable/automation/terraform/index.html][Terraform]] can provision a VyOS image (and Ansible configures).

+ [[https://docs.vyos.io/en/stable/automation/cloud-init.html][Cloud-init]] is also an option


**** ZeroTier & Tailscale

[[https://lev-0.com/][lev-0]] has several series on setting Tailscale on VyOS as a podman service. The
VyOS DSL has a =container= subcommand. I haven't worked out the details, but
this seems like a fairly viable option.

**** PKI

** FRR

*** Docs

*** Resources
+ [[https://docs.netgate.com/pfsense/en/latest/packages/frr/index.html][FRR On PFSense]]
+ [[https://docs.frrouting.org/projects/dev-guide/en/latest/building-frr-for-freebsd10.html][FRR On BSD]]

*** Topics

**** Northbound API

+ See docs on [[https://docs.frrouting.org/projects/dev-guide/en/latest/northbound/architecture.html#yang-models][intro/architecture]] and [[https://docs.frrouting.org/projects/dev-guide/en/latest/northbound/advanced-topics.html][advanced topics]]

**** Dependencies

See [[https://docs.frrouting.org/projects/dev-guide/en/latest/northbound/plugins-sysrepo.html#managing-the-configuration][installation]].

Req. deps include:

#+begin_quote
build-essential bison flex libpcre3-dev libev-dev
libavl-dev libprotobuf-c-dev protobuf-c-compiler libcmocka0
libcmocka-dev doxygen libssl-dev libssl-dev libssh-dev
#+end_quote

Optional Deps

+ libyang :: libyang0.16 libyang-dev
+ [[https://github.com/sysrepo/sysrepo.git][sysrepo]]: YANG-based configuration and operational state data store
+ [[https://github.com/CESNET/libnetconf2][libnetconf2]]: netconf
+ [[https://github.com/CESNET/Netopeer2.git][netopeer2]]: netconf toolset

*** Issues


* Open Source Firmware
+ [[https://forum.openwrt.org/t/getting-an-old-cisco-2911-running-with-openwrt-big-project/125344][Getting an old Cisco 2911 Running with OpenWRT]]

* Cisco

See this [[https://www.reddit.com/r/networking/comments/12lgpmv/issues_sshing_to_eveng_cisco_routers_from_ubuntu/][r/networking]] thread. The guy is trying to do exactly what I'm trying to
do -- goal: manage VLAN's with Ansible, particularly to support trunking
temporarily for an IP address migration -- and the updates to remove =ssh-rsa=
by default from most systems just break the game for homelabbers with a Cisco
switch.

Forget about:

+ Kubernetes
+ or setting up a GraphQL
+ the [[https://homelab.khuedoan.com/][Khue Doan homelab thing]] where you push a button (really just useful as
  reference for me)
+ or a nomad/k3s worker to pull upwork jobs
+ or learning Scala on Coursera
+ or setting up the VPN or ZeroTier for Coursera

  #+begin_quote
NO, YOU HAVE TO CONFIGURE A GODDAMN CISCO SWITCH AND YOU DIDN"T BUY SMARTNET AND
NOW YOURE GOING TO BE POOR FOREVER
  #+end_quote

All of those things above might get me a job. Try explaining to people that "you
couldn't get ssh to run on X so you could configure VLAN's" .... yeh it sounds
like you're garbage if you can't do that.

** Docs

** Resources

+ [[https://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html#anc41][Cisco Hardening Guide]] one of the more concise guides
+ [[https://www.cisco.com/c/en/us/support/ios-nx-os-software/ios-15-0s/products-command-reference-list.html#anchor913][Cisco IOS Command Reference]]

*** Switches
+ [[https://www.cisco.com/c/en/us/td/docs/routers/sdwan/command/iosxe/qualified-cli-command-reference-guide/m-vrf-commands.pdf][VRF Commands (reference)]]
+ [[https://www.reddit.com/r/PFSENSE/comments/6i410h/native_vlan_pfsense_and_cisco_switchap/][Native VLANs and Untagged Traffic on Connected Devices]]

*** SSH Configuration

+ Authoritative Resource on [[https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst2960/software/release/15-0_1_se/configuration/guide/scg2960/swauthen.html#68859][Configuring SSH on Cisco]]
  - [[https://www.cisco.com/c/en/us/support/docs/security-vpn/terminal-access-controller-access-control-system-tacacs-/10384-security.html][Configure AAA on an access server]]
  - [[https://www.firewall.cx/cisco-technical-knowledgebase/cisco-routers/1100-cisco-routers-ssh-support-configuration-rsa-key-generation.html][Enabling/Configuring SSH on Cisco Routers]]

+ Cisco's dumbass [[https://community.cisco.com/t5/network-access-control/checking-the-identity-of-a-router-with-its-rsa-key-fingerprint/td-p/2500568][key format]] which doesn't parse for shit
  - Solution [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjE2--o9vX_AhUJF1kFHR_EAl0QtwJ6BAgOEAI&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdQw4w9WgXcQ&usg=AOvVaw0aHtehaphMhOCAkCydRLZU&opi=89978449][here behind a login]]
  - Just kidding, rick roll...
  - Ok, maybe [[https://learningnetwork.cisco.com/s/question/0D53i00000Kt5BZCAZ/where-is-the-rsa-fingerprint][here]] but only if you use the web-inspector to delete the modal
    that requires evil cookies
  - And I guess this is a case of conflating details about cisco's use of
    non-standard key formats and limited software support

*** Security

+ [[https://rayanfam.com/topics/cisco-switch-sec-cheatsheet/][Cisco Switch Security Features Cheatsheet]]
+ [[https://study-ccna.com/cisco-privilege-levels/][Cisco Priviledge Levels]]
+ [[https://community.cisco.com/t5/security-knowledge-base/why-you-should-be-using-scrypt-for-cisco-router-password-storage/ta-p/3157196][Use scrypt passwords]]

*** GNU Screen

+ [[https://yakking.branchable.com/posts/screen-advanced/][Advanced Uses Of GNU Screen]]
+ [[https://unix.stackexchange.com/questions/56614/send-file-by-xmodem-or-kermit-protocol-with-gnu-screen][Send file by xmodem or kermit protocol with GNU Screen]]

*** Terminal Interaction

+ [[https://etherealmind.com/cisco-ios-cli-shortcuts/][Cisco IOS Shortcuts]]

** Issues

*** Formatting

**** Remove Carriage Returns

Run =cat backups/cisco.ios | tr -d "\r" > backups/cisco.oops.ios= and now you
can =diff= before you =conf disable= ....

LoL you can make that mistake one good time ... in a lab.

** Topics

*** Configure Services (DNS/HTTPS/IP)

TL;DR; a layer 3 switch needs to:

+ be a leaf node in the network, generally.
+ have robust ACL's and/or use VRF's to isolate Layer 3 across VLANs
+ disable the hell out of the HTTP/S servers

+ [[https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/ipaddr_dns/configuration/15-sy/dns-15-sy-book/Configuring-DNS.html#GUID-C2B0D7AA-79D8-4602-AFE8-92E85AF1D838][Cisco DNS Docs]]

Layer 3 switches were new when I was working with Cisco, so it's not really
intuitive and I've always been skeptical. The switch should be transparent to
the network and adding IP routing or the HTTP server can cause issues.

If I'm reading the docs correctly, then in my network, getting DNS on the switch
means I need default routes and potentially a static route or two ... but
without the proper ACL's in place, if another VLAN sets an IP to route, then
regardless of how specific the routes are, traffic will typically flow on the
same path, given its destination.

+ If you're connecting to the switch via a directly connected management
  network, that network's traffic will exit to your DNS subnet through the other
  VLAN.
+ If you specify a default gateway on the other VLAN (or specify the route head
  that way), then now traffic innocuously flows through your admin network.
+ ACL's don't address this, since their logic applies after routes are
  selected. You will simply cut yourself off of services at best.

Without more granular control over routing, an actual routing protocol with
priorities and/or VRF's, then a firewall is maybe getting bypassed. The risk
here is if you later add an IP to the second VLAN, you may not be thinking about
the connectivity. Because it's routing and not ACL's then you may miss it in
your firewall logs.

*** OSPFv3

Want dynamic adjustable routes? For IPv6? To test multicast or other things?
Nope. Not gonna happen. With Quagga or FRP maybe.

I really don't have the topology for this though (not really enough areas) and,
for dynamic services/networks, OSPF can either be stable or unstable.
Disruptions in connectivity can cause other issues as well. It probably doesn't
mix well with L3 Switch in small networks.

=|[ ] [ ] [+]---------[+] [ ] [ ]|=

A cable could be a problem ... and loops are bad design in OSPF. Also, IPSec
tunnels in the wrong place may cause problems.

*** Security

**** Use =scrypt= Passwords

***** For a local user:

Don't actually use passwords ... unless maybe you're accounting? I donno.

#+begin_src ios
username $user privilege 15 algorithm-type scrypt secret $secret
#+end_src

***** For an enable password:

Run this an the =enable secret 9 $hash= line will appear in your config

#+begin_src ios
enable algorithm-type scrypt secret $secret
#+end_src

**** HTTP/S Server

Just don't ... and check the security reports on the downloads page if you don't
believe me.

*** File Transfer Systems

See [[https://www.cisco.com/c/en/us/td/docs/ios/fundamentals/configuration/guide/15_0s/cf_15_0S_book/cf_file-transfer.html][Configuring Basic File Transfer Services]] for more information. TL;DR: [[https://www.gnu.org/software/tramp/#Inline-methods][Tramp
supports rsh]] and if you've never had timing issues with xmodem, you should be
very happy about that.

+ [[https://en.wikipedia.org/wiki/Berkeley_r-commands][Berkeley r-commands]]

**** XModem

On RPM-based systems, install the deps with =dnf install lrzsz= and the commands
are found as =sx= to send-X and =rx= to receive-X and ymodem/zmodem are also
available, whatever those are.

You can use X-Modem to paste in large keys before you have =scp= or =rcp=
available. the latter of which may be more useful to receive files from Cisco
IOS before ssh/scp are available. Emacs Tramp, the world's best kept secret,
should allow you to copy using =rcp/scp= from the comfort of dired.

However, I haven't used =rx= to receive files and I'm not sure where to specify
the serial device. Also, the whole point here is that you're probably connected
via serial and if so, the active connection probably will not support file
transfers AFAIK.

**** RSH/RCP

Cisco uses a custom implementation of the =rsh= protocol and thus needs a
_temporary_ configuration for authorized users in lieu of the usual =.rhosts=
file that your ancestors used in the 80's -- I mean "ancestors" in the
figurative and honorific sense. And of course Emacs Tramp supports this because
it supports more protocols for file transfer than wikipedia can list on any
single page.

+ Open port =513-514, tcp/udp= on your interface if the traffic hops a network.
+ Do not leave =rsh= enabled on the router. You also probably don't want to
  install an rsh server on your linux box just in case it automatically installs
  a service. These are the kind of exciting things a port-scanner may discover.
+ The Cisco device needs a local user record created. If you were using RADIUS
  or PKI, then you probably wouldn't need to jump through these hoops.
+ For RPM systems, the =emacs-nox= package avoids downloading X11
  dependencies. You do not want those on a server.

#+begin_src ios
dnf install emacs-nox rsh
#+end_src

***** Setup rsh server on Cisco

To enable rcp to accept inbound connections, run the following.

#+begin_src ios
conf t

!! enable is optional and allows the usage of enable commands.
ip rcmd remote-host $localuser $rhost $remoteuser enable

!! start the server
ip rcmd rsh-enable
line vty 0 15
  !! rlogin is no longer an option?
  transport input ssh rlogin
  !! transport input all
exit

!! to stop the server and reset line configuration
no ip rcmd rsh-enable
line vty 0 15
  transport input ssh
exit
#+end_src

***** No Setup RSH Client

Connecting via rlogin/rsh results in no response. Since the option's no longer
listed under =transport input= I assume =rsh= has been removed from Cisco like
it has from every other OS.

*** Usability

+ =do show ...= from within config modes
+ =show run | beg $KEYPHRASE= is very helpful
+ Use the linux vtty's and serial.
  - SSH and IP config aren't needed this way. No lost connections.
  - i.e. you're better off on a server without a GUI
+ run =set BAUD 115200= in ROMMON for faster connection.
  - commands output much more quickly.
  - 9600 is 1200 bytes per second...

*** Configure NTP

AHHH! 1993? What the fuck?

#+begin_src ios
show ntp status
show ntp associations
#+end_src

Configure PFSense to act as an NTP server, then get the switch to talk to it.

From =conf t= configure an [[https://www.cisco.com/c/en/us/td/docs/switches/connectedgrid/cgs2520/software/release/12_2_53_ex/configuration/guide/scg2520/swadmin.html?dtid=osscdc000283#98219][ntp server association]]

#+begin_src ios
ntp server $ip
#+end_src

Cisco appears to support NTP authentication, but PFSense indicates I need
=NTPv3= and I just don't feel like winning that round of trivia at the
bar. Usually when protocol versions of something are needed for this device, I
just err on the side of "i don't actually have smartnet", but it looks like my
switch does support NTPv3. Unfortunately, NTP usually flows freely through a
network, so not using this could render you susceptible to drift attacks, though
Cisco's usage of MD5 really makes you wonder.

#+begin_quote
We all remember what happened with Windows and MD5, right? We remember that,
right? ... no, no one remembers anything that happened more than a week ago.
#+end_quote

Some points on security of old cisco devices generally:

- The lack of smartnet-enabled IOS updates means that you only get
  "critical" security updates, so you can't have nice things like =ecdsa= which is
  far more efficient to calculate.
- There's no way these devices have an equivalent to =AES-NI= instructions
  AFAIK. But block ciphers related to those are the only ones you can select
  from.
- I don't know the implementation details for =ecdsa= but I'm guessing most
  CPU's can handle it, but lack the software requirements. My switch offers the
  option in autocomplete ... and just errors out when you try to use it.

Given the usage of weak crypto: the key takeaway here is that if you don't
configure =ntp= with authentication on an old Cisco device, you really need to
ensure that =port 123= traffic could only reach it if it's emitted from that
network. I'm not sure what PFSense does with =scapy= packets generated from an
insecure subnet, but if it doesn't reject them (and it probably won't), then you
need a floating firewall rule to filter that from the outside in.

**** No Practical Free & Open Network Devices that can be automated?

The lack of reasonably configurable open/free options for route/switch/firewall
is particularly infurating. Well plebs, if you want to automate your network
gear for your "smart" home, you better start paying up. Your cloud bill is due
and it's easily $500. You could always invest hundreds of hours managing your
network, but why not give a handful of corporate giants alllll of your data.
It's properly secured with encryption isn't it?

This is almost as infurating as the lack of decent features on that Cable
Company router that you're perpetually "renting" ... which is almost as
infuriating as the leverage that ISP's generally have when selling your
data. That IPv6 makes it fairly easy to use a combination of devices (even with
the proper DHCPv6 or SLAAC) to unmask the identity of a network assigned a
dynamic IP is a little unsettling given the number of "smart" devices in your
home.

*** Transfer Files From TFTP Server On Switch

Fortunately, there's an [[https://www.cisco.com/c/en/us/td/docs/ios/fundamentals/command/reference/cf_book/cf_t1.html][alphabetized command reference]] that describes how to get
the switch to /act as a TFTP server/. It's the cryptic "tftp-server" command.

Generate your keys and start the TFTP server on the switch

#+begin_src ios
tftp-server flash:$path
#+end_src

Get you a TFTP client. Preferably one that doesn't stick around on your system.

#+begin_src shell
guix shell tftp-hpa
#+end_src

Then on the linux host, run =tftp $ipaddress=. The rest is self-explanatory.

*** Manipulate Files on Flash Storage

Inspect the file systems on the switch. Not your switch, but the one in this
[[https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3850/software/release/3se/system_management/configuration_guide/b_sm_3se_3850_cg/b_sm_3se_3850_cg_chapter_010011.html][incomprehensible URL]]. Although I guess you can find device-specific docs by
using "my devices" in Cisco. I was under the impression that required smart
net.

I guess I'm irritated because it's realllly complicated to answer the question
"what _actual features_ do my device and IOS support?" So I have the sneaking
suspicion that my device only supports =3072-bit= RSA keys and I remember it was
tough to transfer files. So if I use =4096-bit=, does that mean I'll have to
start over after getting vague errors? Only way I know to find out is to try.

**** List files on the device

#+begin_src ios
show filesystems

!! list files ...
dir
dir flash:

!! mkdirr
mkdir flash:/keys

!! delete files
delete flash:$keyname*
#+end_src

*** Update IOS

Install/configure TFTP server, make a directory to contain the files.

Ensure the firewall is open. Then run

#+begin_src shell
/usr/sbin/in.tftpd -c -p -s $share
#+end_src

On the switch run:

#+begin_src ios
enable

!! then enter the host/file and transfer
copy tftp: flash:
#+end_src


*** Configure SSH

Status Commands

+ show ssh
+ show ip ssh
+ show aaa

TL;DR: just configure the keys like normal and fucking add them with:

#+begin_src ios
conf t
ip ssh pubkey-chain
username $myuser
key-string $(fold -bw72 ~/.ssh/just-my-fucking-yubikey.pub)
#+end_src

I had already configured this before, but since SSH kept erroring out, I
couldn't confirm whether it was actually rejecting my key for authentication or
it was instead choking on some 1990's crypto bullshit.

I just spent like 16 hours, more or less, tracking this down and it's fucking
bullshit. It is difficult to determine what your switch is doing -- but
maddening to determine the capabilities/support of the hardware. Cisco is it's
own little world and I guess usually someone just configures proper PKI or
RADIUS and you just log in like nothing happens.

**** Current Notes

Recommended configuration from [[https://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html#anc41][Cisco hardening guide]]

#+begin_src ios
hostname router
ip domain-name cisco.com
ip ssh version 2
ip ssh authentication-retries 5
ip ssh time-out 120

!! Specify the name of the RSA key pair (in this case, "sshkeys") to use for SSH
ip ssh rsa keypair-name sshkeys

!! Enable the SSH server for local and remote authentication on the router using
!! the "crypto key generate" command
!! For SSH version 2, the modulus size must be at least 768 bits

crypto key generate rsa usage-keys label sshkeys modulus 2048
#+end_src

Ummm okay, but seriously why would you recommend 2048? I mean if the switch is
not capable of processing a single 4096 RSA connection, then you should not be
using it in a high-load situation. This is actually all the more reason to
implement ECDSA.

***** Generate your keys

See [[https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/security/a1/sec-a1-xe-3se-3850-cr-book/sec-a1-xe-3se-3850-cr-book_chapter_0110.pdf][PDF for 3800 series switches]].

The =$hostname= is the keypair name

#+begin_src ios
!! doesn't work
!! crypto key generate rsa label $hostname exportable modulus 4096 storage flash:

crypto key generate rsa label $hostname exportable modulus 4096
#+end_src

And here I discover what I already found (but I guess didn't note) ... The
=flash:= file system cannot store crypto keys and =show usb controllers= is not
a valid command.

... okay, nevermind. The flash filesystem isn't secure anyways. You transfer
keys to files with =crypto key export= and the IOS device forces you to choose
=DES= or =3DES= to protect them ... which is the passphrase I believe I lost :(

#+begin_src ios
conf t
crypto key export rsa $hostname pem url flash:$filename 3des $passphrase
exit !! or end !! or ctrl-z

dir flash:
#+end_src

***** Test The SSH

Move the keys to =~/.ssh= and change their permissions.

Start =ssh-agent=. Run =ssh-add ~/.ssh/$host.prv=. Enter the =3DES=
password. The key should be accepted.

At this point, you need to address some issues introduced by newer versions of
OpenSSH and lack of security updates to older Cisco devices:

#+begin_src ssh-config
# the basics
Host $host
  Hostname $hostname
  User $aaa_cisco
  IdentitiesOnly yes
  IdentityFile ~/.ssh/$host.prv

  # here are the changes you'll need
  # each line results from an additional error type
  Ciphers aes256-cbc
  MACs hmac-sha1
  KexAlgorithms diffie-hellman-group14-sha1
  PubkeyAcceptedKeyTypes +ssh-rsa
  HostKeyAlgorithms +ssh-rsa

  # ^ssh-rsa will instead bump it to the front of the list
  # +ssh-rsa adds it as an option and -ssh-rsa removes it
#+end_src

At this point, you may finally find a comprehensive doc on Cisco/SSH -- see
[[authoritative link]].  By running =show ip ssh= you'll discover the switch is
running SSH 1.99, but the real problem is that it still has a =1024b= public key
configured.

#+begin_src ios
conf t
ip ssh version 2
do show ip ssh !! and it says it's still running both SSHv1 and SSHv2

!! sets the ssh pubkey to the proper keypair
ip ssh rsa keypair-name $kp
#+end_src

And now the Switch's SSH server does something slightly different.

+ Asks me to validate the host key that the switch is offering
+ Hangs at =send packet type 30 ... expecting SSH2_MSG_KEX_ECDH_REPLY=,
+ Then receives the reply after about 10 seconds at which point =libcrypto= on
  Centos blows up and simply reports:
  - =Found key in ....= and =debug2: bits set: 1042/2048= whatever TF that
    means.

**** From old notes

*Caveat Lector:* This section contains an incomplete description of the process,
but it includes some some useful tricks using GNU screen if you're on a serial
connection.

Particularly, some of the older hardware uses older algorithms, but also
certificate formats that are non-standard (or at least unusual), which makes it
a bit wierd to import. I can't remember which method I got to work: either
transferring files via =xmodem= or transferring text.

***** TODO Describe problems with =crypto key rsa import=

Yeh, som of this is reaaly really bad.

***** Importing External Keys

=crypto key rsa import $KEYNAME pem url xmodem:/file= was working for
either public or private keys (when one was in PEM format).

This approach wasnt working for me -- SSH user setup just needs
=key-string= anyways.

***** Generating Keypairs

- Run =crypto key rsa generate rsa modulus 4096= to generate a generic
  keypair. This requires a hostname & domain name.
- Validate generation/upload with =do show crypto key mypubkey all=
- Remove keys with =crypto key rsa zeroize $KEYNAME=

***** Setup SSH

This will let you remotely manage your router (and use tools like
ansible)

+ Configuring SSH from Linux
  - IOS doesn't accept DSA or OpenSSH keys
  - keys need to be in the format of =ssh-rsa ... comment=
+ Refer to this post on [[https://nsrc.org/workshops/2016/renu-nsrc-cns/raw-attachment/wiki/Agenda/Using-SSH-public-key-authentication-with-Cisco.html][Cisco/SSH via Linux]]

****** Generate keys

Older cisco devices want RSA, but generating 4096b keys on the device
takes forever.

+ Run =ssh-keygen -t rsa -b 4096 -f $FILENAME=
+ Use screen & =exec !! fold= to copy/paste into the key-string
  - or modify the key-string in a config that you upload
+ Verify the key with =ssh-keygen -E md5 -lf $FILENAME.pub=

***** Configuring SCP Transfers

****** TODO maybe figure this out someday. maybe not.

*** Linux Tools for Cisco

**** TFTP

***** dnsmasq

Ensure your firewall is temporarily configured. Only TFTP downloads
are allowed.

=dnsmasq --no-daemon --enable-tftp --tftp-root=$TFTPROOT -i $IFACE=

***** tftp-server

On RPM systems, run =dnf install tftp tftp-server=

+ The client will be found at =tftp= and
+ The server can be started with =/usr/sbin/in.tftpd -c -p -s $share=

You'll need to enable/disable TFTP on port 69, potentially both on PFSense and
on =firewalld=.

See [[https://fedoramagazine.org/how-to-set-up-a-tftp-server-on-fedora/][How to set up a TFTP server on Fedora]], but it recommends enabling the =TFTP=
service.... don't do that.

**** Serial: =screen=

***** Enable Linux Serial for User

Find the =/dev/ttySn= serial file. Also, add user to =dialout= group.

For faster connection, run =set BAUD 115200= or the serial gnomes won't favor
your file transfers.

***** Use Screen to Transfer Files to IOS via Serial

To transfer files like IOS updates, type =C-a := in screen. Then run =exec !! sx
-b -X $FILENAME= to copy.

The =-b= flag pipes binary data into screen, so the IOS terminal can be expected
to receive it. From what I remember, this is tricky to time right.

At the correct time, press the button after typing:

=copy xmodem:/flash:/filename.bin=

Press it again if it didn't work. Also, this must be done from within ROMMON,
unless the =copy= menu gives you access to =xmodem:=

***** Pasting A Big SSH Key

To emulate copy/paste in screen, enter content into a file, then type =C-a := in
screen to run Screen commands.

Run =exec !! fold -bw72 $FILENAME= and the content will be piped in as input.

Cisco has a maximum of 254 chars per line, so the =-bw72= arg specifies a
maximum.

***** Updating IOS from ROMMON

Refer to this post to [[https://stelfox.net/2019/reflashing-cisco-catalyst-with-xmodem/][Reflash Cisco Catalyst with XMODEM]]


** Hardware

*** 2960



* Avaya

** Issues

*** Ctrl-y

Avaya expects a "Ctrl-y" after boot. This is displayed to a user
connecting to a console (with putty/etc) ... if the console cable is
connected during the boot.

* Fresh Tomato

+ [[https://wiki.freshtomato.org/doku.php/firmware_basics_procedures#netgear_r-series][Install ARM image for netgear R7000]]. from dd-wrt (i think??), requires:
  - flash NVRAM
  - install *-initial image
  - probably flash NVRAM from the menu
  - install the real firmware image
  - then configure
  - it's suggested to reflash each upgrade.

** Topics

*** Automation
[[github:NotVaryClever/tomato-nvram][NotVaryClever/tomato-nvram]]

* DDWRT

** Docs

*** Top Wikis

+ [[https://wiki.dd-wrt.com/wiki/index.php/Useful_scripts][Useful Scripts]]
+ [[https://wiki.dd-wrt.com/wiki/index.php/TFTP_flash#Linux][TFTP Flash (linux)]]
+ [[https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=51486][The "Peacock" Thread]] old, but lots of useful info

*** Firewall

+ [[https://forum.dd-wrt.com/wiki/index.php/FirewallExample][Firewall Example]]
+ [[https://forum.dd-wrt.com/wiki/index.php/Firewall][Firewall]]
+ [[https://forum.dd-wrt.com/wiki/index.php/Firmware_FAQ#Which_router_should_I_buy.3F][Firmware FAQ]]
+ [[https://forum.dd-wrt.com/wiki/index.php/Installation#Is_Your_Router_Supported.3Fhttps://forum.dd-wrt.com/wiki/index.php/Installation#Is_Your_Router_Supported.3F][Installation]]

**** Netgear R7000-specific

+ R7000 [[https://wiki.dd-wrt.com/wiki/index.php/Category:R7000][wiki articles]]
+ R7000 [[https://forum.dd-wrt.com/phpBB2/viewtopic.php?t=264152][best practices]] (forum)

** Resources

*** Guides

This guy has guides with the r7000 router

+ [[http://www.regressionist.com/2020/07/05/poor-mans-cluster/][Poor Man's Cluster]]
+ [[http://www.regressionist.com/2020/06/11/securing-a-research-vlan-on-a-retail-router-with-dd-wrt/][Securing a research VLAN on a retail router with DD-WRT]]
+ [[http://www.regressionist.com/2020/06/14/kickstarting-from-my-dd-wrt-router/][Kickstarting from my DD-WRT Router]]
+ and to top it off: [[http://www.regressionist.com/2020/06/20/reviews-of-distributed-filesystems/][Reviews of Distributed File Systems]]
+ [[https://www.tweaking4all.com/hardware/netgear-r7000-dd-wrt/][Netgear R7000 specific instructions]] (2014)

*** Scripts

**** [[https://github.com/tknarr/ddwrt-nvram-tools][tknarr/ddwrt-nvram-tools]]

+ nvram_dump & nvram_build scripts
+ diff your nvram backups
+ my notes say: "doesn't quite work" but seeing the code solved my problems

**** [[https://github.com/impressiver/ddwrt_conntrack][impressiver/ddwrt_conntrack]]

+ QoS IP Connection Tracking/Bandwidth Monitor

**** [[https://github.com/daenney/ddwrt-snmp_exporter][daenney/ddwrt-snmp_exporter]]

+ yaml file to enable "prometheus" to scrape DDWRT routers for SNMP

**** [[github:carlosedp/ddwrt-monitoring][carlosedp/ddwrt-monitoring]]

+ monitor ddwrt with prometheus/graphana (configs only)


** Topics

*** Basic Install/Config

Some generic steps to walk through in the webui

**** Install
+ Reset Netgear Router
+ Walk through initial Netgear setup (one last time)
+ Then flash the *.chk file to the router

**** Initial Config
+ Set a new admin/password
+ Disable wifi radios
+ Set time zone
+ Configure Gateway
  - network/cidr/gateway
+ Configure LAN
  - network/cidr/gateway (and a router IP address)
+ Configure DHCP
+ Configure NTP
  - most external router should sync to =time.nist.gov=
+ Configure Administration settings
  - change protocol to HTTPS
  - disable info site
  - restrict  remote ip range

*** Intrusion Detection

If socat can run, then it should be possible to use it (and maybe light
iptables) to intercept traffic streams, duplex them and forward them to an
off-device instance of snort or something

#+begin_quote
... this is without something like an $500 ARM device or the $100 [[https://shop.hak5.org/products/throwing-star-lan-tap][Hak5 ethernet
ninja star]] thing that only people with annual average salaries above that of
Saharan Africa can afford.

Ahhhh it really pays to be poor. It's about the journey, not the destination! It
really ~just~ forces you to develop smart ways /just/ to get around -- which is
obviously something most people appreciate! That's why people like Marc Cuban
value keeping their kids poor of course. So they have a well-balanced
perspective and a background with challenges to overcome.
#+end_quote

*** Filesystem


**** /tmp (ramfs)


**** /jffs (jffs2)

+ [[https://wiki.dd-wrt.com/wiki/index.php/Jffs][Journaling Flash File System]]


*** SSH

This requires RSA-2048 which has bit me so many times

*** [[https://wiki.dd-wrt.com/wiki/index.php/Ipkg][ipkg]]

A package manager that can get =socat= on the device somehow...



** Issues

*** ipkg commands report missing files or read-only file system

+ [[https://forum.dd-wrt.com/phpBB2/viewtopic.php?p=503846][old post]] seems to indicate missing modules or potential storage issues


*** Decompile Cisco IOS

+ [[https://notabug.org/viperultra/cisco-ios-reverse][viperultra/cisco-ios-reverse]]

Probably violates ToS, but damn [[https://techcrunch.com/2023/04/19/russian-hackers-exploit-six-year-old-cisco-flaw-to-target-us-government-agencies/][the hand-me-down IOS is really really bad]] and
old hardware in need of a landfill irritates the shit out of me. If it's got
gigabit ethernet and it doesn't choke under load, why can't I use that with
automation to configure it? Does anyone besides FAANG even buy Cisco stuff
anymore? No offense there ... but I actually think networking's lack of
accessibility is a serious future problem for economic growth and/or data
privacy. And I'm not sure why a company that targets grey markets with hardware
buybacks for new implementations would really give a shit about being offended
here.
