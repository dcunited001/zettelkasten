:PROPERTIES:
:ID:       bb0ad8b3-9493-48fd-b77b-c6ec0a3d3fa9
:END:
#+title: Terraform
#+CATEGORY: topics
#+TAGS:

* Docs

** Plan & State

+ [[https://developer.hashicorp.com/terraform/internals/json-format][JSON Output Format]]

* Resources
+ [[https://github.com/scraly/terraform-cheat-sheet][scraly/terraform-cheat-sheet]]
+ [[https://jayendrapatil.com/terraform-cheat-sheet/][terraform cheatsheet]] (web)
+ [[https://menendezjaume.com/post/gpg-encrypt-terraform-secrets/][GPG Encrypt Terraform Secrets]]

** Tools

*** Docs

+ terraform-docs ::
+ terraform-plugin-docs :: generate/validate terraform plugin/provider docs

*** Inventory

+ terraform-inventory :: from terraform state $\rightarrow$ ansible dynamic
  inventory
+ terracognita :: read from existing cloud providers (rev. terraform) and
  generates your infrastructure as code on terraform config.

*** Misc

+ tfsec :: security scanner (static analysis)
+ tflint :: linter

** Nix/Guix

Guix packages for Hashicorp products are a bit sparse. This guide details getting Terraform

* Topics

** Network Configuration & Subnetting

*** [[https://developer.hashicorp.com/terraform/language/functions/cidrsubnet][cidrsubnet]] ([[https://build5nines.com/terraform-using-cidr-notation-to-define-ip-address-ranges-and-subnet-address-spaces/][source]]) and also cidrhost, cidrnetmask, cidrsubnets

See [[https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast/stages/2-networking-b-vpn][GoogleCloudPlatform/cloud-foundation-fabric (stage 2b VPN)]] which sets up a
hybrid topology using HA VPN with monitoring.

+ this example also sets up firewall rules using a network resource factory. see
  [[https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/blob/master/fast/stages/2-networking-d-separate-envs/data/dns-policy-rules.yaml][data/dns-policy-rules.yaml]], [[https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/blob/master/fast/stages/2-networking-d-separate-envs/data/cidrs.yaml][cidrs.yaml]] and [[https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/blob/master/fast/stages/2-networking-d-separate-envs/data/hierarchical-policy-rules.yaml][hierarchical-policy-rules.yaml]] for
  configuration. these files are reused through several of the stages, with some
  changes.

** [[Terraform Cloud Agents][Terraform Cloud Agents]]

+ Pull-based architecture for

** Plan and State

[[https://github.com/hashicorp/terraform/issues/17619#issuecomment-374450588][Terraform Plan Output Is Not Sorted Properly]]

#+begin_quote
the output is currently sorted by resource address with the intent that it's
therefore easy to find a particular item in the list if you know its address.

It sounds like you'd prefer to have Terraform do a topological sort so that the
list is approximately the graph traversal order.

*(It can't be exactly that order because some actions will execute concurrently
and so the execution sequence is not deterministic.)*
#+end_quote

** Code & Docs Generation

*** Snippets

There's [[https://github.com/staticaland/terraform-generate-snippets][staticaland/terraform-generate-snippets]], which autogenerates snippets
from =terraform providers schema -json=

*** LSP

+ terraform-ls :: LSP server

*** Project

+ tfautomv :: generate terraform moved blocks automatically (for refactoring)
+ terraform-index :: print the AST of an HCL file

** Network Configuration
*** ZeroTier with Terraform

** Project Structure

[[https://www.youtube.com/watch?v=IDLGpkRmDXg][Structuring Repositories For Terraform Workspace]] A good intro to some of the
considerations for processes/structure in teams.

[[https://www.youtube.com/watch?v=Qg8VZsbaXxA][4 Considerations To Structure Terraform Code]] A deeper dive into issues for more
modular projects

+ consider rate of change of project/environment components when
  refactoring. components that would otherwise sprawl across multiple proj/env
  could be contained.
+ don't import external modules that lack semantic versioning/tagging...
+ when components could benefit from a separate release cycle, it begins to
  justify the cost/time and process overhead to do so.
+ use folder/module structure to constrain the set of resources affected by
  changes. this limits risk.
+ submodules can be bad for code reuse (they usually problematize your workflow,
  but are very useful when they're the right tool)

Be aware of where Terraform state is stored:

+ the "Terraform workspace" layout is easy to get started with, but the state for
  multiple environments by default shares the same backend!
  - i.e. your dev/staging/prod state may share the same backend: anyone with
    access to one may implicitly have access to others.
+ The "file-tree" workspace will require multiple =terraform apply= commands per
  environment

Within a specific context (like a project's environment), it's sometimes useful
to split out modules into sequenced subdirectories, like the following. The
indexes can be used to guarantee that state transformations occur in order.

+ 0_keeper :: resources that must exist in all following stages of a terraform
  deploy. this stage may not need to be re-run on every deploy.
+ 1_netsec :: security rules for the above TF resources which may change often
+ 2_expressroute :: apparently, the Express Routes are something in Azure that
  you do not want to change, since it's hard to predict when TF backend decides
  your resources should be torn-down and recreated. For Azure Express Routes, if
  they are fully dropped & recreated instead of mutated, it results in a "devops
  equivalent" of locking yourself out of your router/firewall.

  The idea behind the last item is to limit the blast radius (& risk) that
  changes may create. It's generally a good idea to be confident about this,
  without needing to inefficiently /look/ for dependencies and state validation.

*** Following the meaning of senses from Plato's Republic:

+ the visual sense is one where you must direct your visual focus (or attention)
  consciously. You can't see everything all at once. Thus, for tech, you want to
  simplify the structure or narrow the scope of things requiring your active
  attention.
+ whereas your auditory sense allows you to react to things you didn't need to
  be focused on. This follows the "push notification" or "event-driven" means of
  messaging [queues].
+ The correct approach to structuring these projects implicitly limits the sets
  of information or the set of event-streams (automailers/notifications) that
  people need to tune into. However, you can't just shuffle things around on a
  whim.

.... okay not exactly germaine to the topic.


** Modules

 Some notes from [[https://www.youtube.com/watch?v=7xngnjfIlK4&t=7408s][Complete Terraform Course]]

*** Module Sources

Types of module sources

+ Root Module :: implicit from local dir
+ Child Module :: separate module from local file

Examples of module sources

+ Local paths
+ Github (Forges)
+ Terraform Registry. Over +3000 official modules served (and they're counting!)
  with keys/values to learn & appreciate
+ HTTPS URL's
+ S3/GCS Buckets

*** Module Design

**** Good Modules:

+ Raise abstraction level (from HCL base types or resource types)
+ Group resources logically (or promote such grouping)
+ Expose input vars to enable customization/composition (like a modular synth)
+ Provide useful defaults
+ Return Outputs to make further integrations possible

**** Code Rot

The first two are exceedingly obvious. The latter two, less so. The last one is
fairly specific to Terraform.

+ Unpinned versions
+ Deprecated deps
+ Out of band changes
+ Unapplied changes

**** Managing Secrets

Mark vars using the =sensitive= keyword

Pass with:
+ TF_ENV_NOT_REALLY :: No don't actually do this without some protection
  - the FBI hiding on your box scrolling through your =top= ...
+ -var :: use this tf cmdline option (secrets manager) ... okay maybe
+ external secret store :: congratulations you won a kubernetes!
  - or "simply" nomad + a love of dynamic network configurations.  the choice is
    yours.

**** Basic Types

Primative: string, number bool

Complex (types are optional)

+ list<type> :: lists
+ set<type> :: sets
+ tuple[<type>,...] :: tuples
+ object{attr=<type>} :: objects
+ map<type> :: maps

According to HCL docs, the following types behave identically in most situations:

+ Lists and Tuples
+ Maps and Objects

*** Design Patterns

Maybe just "design motifs" because they're pretty small in scope.

**** Reuse or Create

Use alternate ternary statements on variables/inputs to =DROP IF EXISTS; CREATE=

#+begin_src hcl
resource "aws_route53_zone" "primary" {
  count = var.create_dns_zone ? 1 : 0
  name = var.domain
}

data "aws_route53_zone" "primary" {
  count = var.create_dns_zone ? 0 : 1
  name = var.domain
}
#+end_src

**** Lifecycle

create_before_destroy

#+begin_src hcl
resource "azurerm_resource_group" "example" {
  # ...

  lifecycle {
    create_before_destroy = true
  }
}
#+end_src

+ ignore_changes
+ prevent_destroy
+ terraform_remote_state


**** Meta-args on Module Imports

Can use meta-args like =count, foreach, provides, depends_on= here

#+begin_src hcl
module "webapp" {
  source ...
  input_var = "..."
}
#+end_src

***** TODO examples of using metaargs there? not in notes
