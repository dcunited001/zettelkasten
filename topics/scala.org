:PROPERTIES:
:ID:       a0824536-6aed-409e-ab35-ac07be2eb1b2
:END:
#+TITLE: Scala
#+DESCRIPTION: The functional JVM Language
#+TAGS:

* Docs

+ [[https://ssudan16.medium.com/internals-of-jvm-architecture-a7162e989553][Internals of JVM Architecture]]

* Resources

** Cheatsheets

+ codecentric scala cheatsheet
+ [[https://warisradji.com/Scala-CheatSheet/][WarisRadij Scala Cheatsheet]]

* Topics

** Class Hierarchy

Images from [[https://docs.scala-lang.org/tour/tour-of-scala.html][scalalang.org]] via warisradij

[[file:img/scala-class-hierarchy.png]]

Unified Types

[[file:img/scala-unified-types-diagram.svg]]

Typecasting of primatives

[[file:img/scala-type-casting-diagram.svg]]

*** Collections

Overview

[[file:img/scala-collections-diagram.svg]]

Immutable

[[file:img/scala-collections-immutable-diagram.svg]]

Mutable

[[file:img/scala-collections-mutable-diagram.svg]]

** Dynamic Programming

*** The Dyn. Prog. Long Read

[[https://marketsplash.com/tutorials/scala/scala-dynamic-programming/][Scala Dynamic Programming]]

#+begin_quote
Use the stdlib, Luke...
#+end_quote

As long as the context permits mutable data structures, you can use
mutable maps to memoize function calls.

#+begin_src scala
val cache = collection.mutable.Map[Int, Int]()

def fibonacci(n: Int): Int = {
  if (n <= 1)
    n
  else
    cache.getOrElseUpdate(n, fibonacci(n - 1) + fibonacci(n - 2))
}

val result = fibonacci(10) // Returns 55
#+end_src



* Issues



* Roam
