:PROPERTIES:
:ID:       a0824536-6aed-409e-ab35-ac07be2eb1b2
:END:
#+TITLE: Scala
#+DESCRIPTION: The functional JVM Language
#+TAGS:

* Docs

+ [[https://ssudan16.medium.com/internals-of-jvm-architecture-a7162e989553][Internals of JVM Architecture]]

* Resources

** Cheatsheets

+ codecentric scala cheatsheet
+ [[https://warisradji.com/Scala-CheatSheet/][WarisRadij Scala Cheatsheet]]

** Tools

*** SBT

+ [[https://www.scala-sbt.org/release/docs/Howto-Generating-Files.html][Generate sources]]
+ [[https://www.scala-sbt.org/release/docs/Howto-Startup.html][Tasks on sbt startup]]
+ [[https://www.scala-sbt.org/release/docs/Multi-Project.html][Multi-project builds]]
+ [[https://www.scala-sbt.org/1.x/docs/Organizing-Build.html][Organizing the Build]]

**** Concepts

[[https://www.scala-sbt.org/release/docs/Scopes.html][Scopes]] There are three-scope axes, represented as a tuple: subject, dependency
config, task.

#+begin_src scala
projA / Compile / console / scalacOptions

// This is the slash syntax, introduced in sbt 1.1, for:

scalacOptions in (
  Select(projA: Reference),
  Select(Compile: ConfigKey),
  Select(console.key)
)
#+end_src

[[https://www.scala-sbt.org/1.x/docs/Plugins.html][Plugins]]

**** Dependencies

+ [[https://www.scala-sbt.org/1.x/docs/Combined+Pages.html#Cached+Resolution][Cached Resolution]]

**** Project Templates

+ scala 2: =sbt new scala/scala-seed.g8=
+ scala 3: =sbt new scala/scala-seed.g8=

okay i guess giter8 is a thing ... which would probably help straighten out my
python $\otimes$ pyenv $\otimes$ direnv $\otimes$ poetry problems ... nevermind
it's scala-specific like a [[https://github.com/seattlerb/hoe][seattlerb/hoe]].  I always wanted to maintain gems at
scale... but no. It just wasn't in the cards.

*** [[https://get-coursier.io/docs/overview][Coursier]]

#+begin_quote
Coursier is the Scala application and artifact manager. It can install Scala
applications and setup your Scala development environment. It can also download
and cache artifacts from the web.
#+end_quote

[[https://github.com/coursier/launchers/][coursier/launchers]] blobs for launchers

*** Metals (LSP)

+ [[https://scalameta.org/metals/docs/editors/user-configuration/][Metals User Configuration]]
+ Uses [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjU5Nrj8eWAAxW4mYQIHYfZANIQFnoECBEQAQ&url=https%3A%2F%2Fscalameta.org%2Fdocs%2Fsemanticdb%2Fguide.html&usg=AOvVaw0fuvXGCdTjTKEoWXIfq1IG&opi=89978449][SemanticDB]] (metac and metap)
  - SemanticDB has [[https://github.com/scalameta/scalameta/blob/main/semanticdb/semanticdb/shared/src/main/proto/semanticdb.proto][protobuf defs]] that define its language structure (as well as
    an explanation that maps to [[https://github.com/scalameta/scalameta/blob/main/semanticdb/semanticdb.md#java][java]]). See [[https://github.com/scalameta/scalameta/blob/main/semanticdb/semanticdb.md#data-schemas][docs]]
+ Troubleshooting: [[https://scalameta.org/metals/docs/troubleshooting/faq][FAQ]] and [[https://scalameta.org/metals/docs/troubleshooting/proxy][proxy]]

**** Build Tool Integration

Metal gets your IDE talking to either SBT, Maven, Gradle or Bloop with SBT being
the most popular.

Just [[https://scalameta.org/metals/docs/build-tools/sbt#sbt-build-server][use SBT's BSP]]:

#+begin_quote
As of sbt 1.4.1, Metals has integrated support for the sbt BSP server.
#+end_quote



* Topics

** SBT Configuration

*** Generate a dependency graph

Search +docs+ source code for .png, .svg, ".dot" and see [[https://github.com/sbt/sbt/issues/6976][sbt/sbt/issues#6976]].

+ Add to project/build.sbt: =dependencyBrowseGraph= (just that)
+ From the sbt repl, run =dependencyBrowseGraph=
+ It will try to open a browser if it can, but saves HTML with a D3 viewer to
  =target/graph.html= along with =dependencies.dot=

Very useful when you don't know anything.

*** Generate a project graph

This [[github:dwijnand/sbt-project-graph][dwijnand/sbt-project-graph]] looks a bit old, but [[https://gist.github.com/xuwei-k/4469101194f6a192eb3a1c71444741ea][this gist is from March
2022]]. This would help a lot for more complicated multi-project builds.

+ The [[https://github.com/dwijnand/sbt-project-graph/blob/master/build.sbt][build.sbt]] indicates it supports at least scala 2.12.15, but 3.3.0 support
  is not immediately apparent.

+ To install, add =addSbtPlugin("com.dwijnand" % "sbt-project-graph" % "0.4.0")=
  to =$HOME/.sbt/1.0/plugins/plugins.sbt= ... which is slowing starting to feel
  like one of those "obvious" things that exist in most programming
  languages.
+ After updating the =sbt= file, run =reload= in the SBT shell.
+ Then run =projectsGraphDot=

#+begin_src dot :file img/myscalaproject.svg
digraph "projects-graph" {
    graph[rankdir="LR"]
    node [
        shape="record"
    ]
    edge [
        arrowtail="none"
    ]
    "project"[label=<project>]
}
#+end_src

#+RESULTS:
[[file:img/myscalaproject.svg]]

LOL

*** Multi-project Builds

This is already somewhat of an issue for me, since I'm sharing a single
=docker-compose.yml= that needs its bindmount volume updated for multiple
projects. However, since the submission script depends on files in
=$hw/project/*.scala=, it's not entirely clear whether this would
succeed or [[https://www.scala-sbt.org/release/docs/Multi-Project.html#Appendix%3A+Subproject+build+definition+files][build properly without customization]]:

#+begin_quote
Note: You cannot have a project subdirectory or project/*.scala files in the
sub-projects. foo/project/Build.scala would be ignored.
#+end_quote

As is, the =submit= task is available within =emacs=.

SBT expects to read configuration from directories like =$HOME/.sbt/plugins=
which affects other projects. Wrapping subprojects within a container project is
covered in this video: [[https://www.youtube.com/watch?v=alNInbRuQ_Y][Scala Metals with Multiple Roots in a Workspace]]

** Class Hierarchy

Images from [[https://docs.scala-lang.org/tour/tour-of-scala.html][scalalang.org]] via warisradij

[[file:img/scala-class-hierarchy.png]]

Unified Types

[[file:img/scala-unified-types-diagram.svg]]

Typecasting of primatives

[[file:img/scala-type-casting-diagram.svg]]

*** Collections

Overview

[[file:img/scala-collections-diagram.svg]]

Immutable

[[file:img/scala-collections-immutable-diagram.svg]]

Mutable

[[file:img/scala-collections-mutable-diagram.svg]]

** Dynamic Programming

*** The Dyn. Prog. Long Read

[[https://marketsplash.com/tutorials/scala/scala-dynamic-programming/][Scala Dynamic Programming]]

#+begin_quote
Use the stdlib, Luke...
#+end_quote

As long as the context permits mutable data structures, you can use
mutable maps to memoize function calls.

#+begin_src scala
val cache = collection.mutable.Map[Int, Int]()

def fibonacci(n: Int): Int = {
  if (n <= 1)
    n
  else
    cache.getOrElseUpdate(n, fibonacci(n - 1) + fibonacci(n - 2))
}

val result = fibonacci(10) // Returns 55
#+end_src

** Scala in Emacs

#+begin_quote
I don't know anything about SBT or Scala's tooling, so ... most of my problems
are largely a result of that. And ultimately I'm just pessimistic unless details
are clear.

I know about 1,000,000 ways that things can go wrong with tooling like this, so
when interpolating between "automagic" features, I want to see from end to
end. Otherwise, I'm pretty sure something's not connected.
#+end_quote

*** Metals

**** With eglot (without the lsp-mode installer)

**** In a Docker Container

The Coursier =cs= build tool simplifies the build.

Interpolate between:

+ [[https://steemit.com/scala/@josiah-b/integrating-scala-metals-with-doom-emacs-using-lsp-on-ubuntu][this guide for Doom Emacs]]
+ the AUR package sources for [[https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=metals][metals]] and [[https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=coursier][coursier]].

*** [[github:hvesalai/emacs-scala-mode][hvesalai/emacs-scala-mode]]

*** [[github:hvesalai/emacs-sbt-mode][hvesalai/emacs-sbt-mode]]

This is a major-mode that derives from comint

**** sbt-mode

Without LSP/metals, =sbt-mode= can:

+ sbt-grep :: greps a list of files cogent to the SBT project
+ sbt-find-usages
+ sbt-find-definitions

These do work, but =sbt-find-usages= runs grep and =sbt-find-definitions= goes
to the interfaces defined in the =trait=.

** [[https://github.com/sbt/docker-sbt][sbt/docker-sbt]]

#+begin_quote
Yeh, i should just use Coursera's environment, but it doesn't have Emacs keys
and also i realllly need to figure out this LSP stuff. If I can just get it
working with a docker image, than I can quickly have autocomplete on anylang.

Having SBT on docker really helps, since I can attach to the container and run
the tasks.
#+end_quote

*** Coursier and Metals

I added the following to enable coursier/metals in the Dockerfile.

#+begin_src diff
15a16,17
> ARG COURSIER_VERSION
> ENV COURSIER_VERSION ${COURSIER_VERSION:-2.1.5}
59d60
< # Switch working directory
61a63,85
>
> # NONE OF THESE BINARIES ARE SIGNED
> # linux-container doesn't contain support for graal-vm
> RUN \
>   COURSIER_GZ=https://github.com/coursier/coursier/releases/download/v$COURSIER_VERSION/cs-x86_64-pc-linux-container.gz && \
>   curl -fsL $COURSIER_GZ | gzip -d > cs && \
>   chmod +x cs && ./cs install --dir /home/sbtuser/bin cs && \
>   rm cs && \
>   echo "export PATH=/home/sbtuser/bin:$PATH" >> ~/.bashrc
>
> RUN \
>   /home/sbtuser/bin/cs bootstrap \
>   --java-opt -Xss4m \
>   --java-opt -Xms100m \
>   --java-opt -Dmetals.client=emacs \
>   org.scalameta:metals_2.12:0.10.1 \
>   -r bintray:scalacenter/releases \
>   -r sonatype:snapshots \
>   -o /home/sbtuser/bin/metals-emacs -f -v -v -v
>
> # Switch working directory
> WORKDIR /home/sbtuser/project
>
80c104,109
<   if [ -d "/home/sbtuser/.ivy2" ]; then ln -s /home/sbtuser/.ivy2 /root/.ivy2; fi
---
>   if [ -d "/home/sbtuser/.ivy2" ]; then ln -s /home/sbtuser/.ivy2 /root/.ivy2; fi && \
>   echo "export PATH=/home/sbtuser/bin:$PATH" >> /root/.bashrc
>
> # HACK: not even sure if eglot's going to connect to metal-emacs or not
> #RUN ln -s /home/sbtuser/bin/cs /usr/local/bin/cs && \
> #  ln -s /home/sbtuser/bin/metal-emacs /usr/local/bin/metal-emacs
#+end_src

Warm Cache and Links

#+begin_src dockerfile
# Prepare sbt (warm cache)
RUN \
  sbt sbtVersion && \
  mkdir -p project && \
  echo "scalaVersion := \"${SCALA_VERSION}\"" > build.sbt && \
  echo "sbt.version=${SBT_VERSION}" > project/build.properties && \
  echo "// force sbt compiler-bridge download" > project/Dependencies.scala && \
  echo "case object Temp" > Temp.scala && \
  sbt compile && \
  rm -r project && rm build.sbt && rm Temp.scala && rm -r target

# Link everything into root as well
# This allows users of this container to choose, whether they want to run the container as sbtuser (non-root) or as root
USER root
RUN \
  rm -rf /tmp/..?* /tmp/.[!.]* * && \
  ln -s /home/sbtuser/.cache /root/.cache && \
  ln -s /home/sbtuser/.sbt /root/.sbt && \
  if [ -d "/home/sbtuser/.ivy2" ]; then ln -s /home/sbtuser/.ivy2 /root/.ivy2; fi && \
  echo "export PATH=/home/sbtuser/bin:$PATH" >> /root/.bashrc
#+end_src


**** Quirks

It's a bit hacky.

+ There's an expectation that =/root/.cache= is going to be absent, so that the
  cache can be linked, so you can't install =metals= or =cs= before then (not
  without =rm -rf= on the cache).
+ To allow either =root= or =sbtuser= to access the binaries, I installed them
  in =/home/sbtuser/bin=, rather than installing them elsewhere -- doing so
  requires =chmod= if changing the =cs --dir= option or =mv=. The latter may not
  work if the =--dir= prefix is in the build and the former may have other
  issues, depending on whether the =--cache= is in the built binaries.

***** /tmp issues

I thought I might circumvent the issues that =sbt= has with =/tmp= with =chmod=,
but =/tmp= already has the permissions it needs. There may be a problem with how
=M-x sbt-start= initiates the =sbt= session that's a combination of =sbt-mode=
and the user's =sbt= config files.

#+begin_quote
]0;root@658f89b46bbd: ~root@658f89b46bbd:~# ls -al /tmp
ls -al /tmp
total 20
drwxrwxrwt 1 root    root    4096 Aug 17 21:56 .
drwxr-xr-x 1 root    root    4096 Aug 18 03:49 ..
drwxr-xr-x 1 root    root    4096 Aug 17 21:56 hsperfdata_root
drwxr-xr-x 1 sbtuser sbtuser 4096 Aug 18 03:50 hsperfdata_sbtuser
]0;root@658f89b46bbd: ~root@658f89b46bbd:~# ls -al /tmp/hsperfdata_sbtuser
ls -al /tmp/hsperfdata_sbtuser
total 24
drwxr-xr-x 1 sbtuser sbtuser 4096 Aug 18 03:50 .
drwxrwxrwt 1 root    root    4096 Aug 17 21:56 ..
drwxrwxr-x 2 sbtuser sbtuser 4096 Aug 18 03:50 .bsp
drwxrwxr-x 3 sbtuser sbtuser 4096 Aug 18 03:50 project
drwxrwxr-x 4 sbtuser sbtuser 4096 Aug 18 03:50 target
#+end_quote

The shell prompt is also a bit wonky which i can't quite figure out.

After running the container as root once for a project, sbt creates a bunch of
files in the project directory. Then, after =chown -R= on that directory, I can
start the =sbt= as non-root with no problems.......

#+begin_src yaml
    volumes:
      - type: bind
        source: myproject
        target: /home/sbtuser/project
#+end_src


..... nevermind, I guess the command was run from the wrong docker buffer.
=find . -user root -exec ls -al \{\} += finds all the files the root user
created ... but these are all under the project which should be fine.

Looking at =/tmp= shows a socket created under =/tmp/.sbt=, but unless it's
trying to write to the root-owned directory, then it should be okay.

#+begin_quote
drwxrwxrwt 1 root    root    4096 Aug 18 04:49 .
drwxr-xr-x 1 root    root    4096 Aug 18 04:49 ..
drwxr-xr-x 1 root    root    4096 Aug 18 02:15 hsperfdata_root
drwxr-xr-x 1 sbtuser sbtuser 4096 Aug 18 04:49 hsperfdata_sbtuser
drwxr-xr-x 3 sbtuser sbtuser 4096 Aug 18 04:49 .sbt
#+end_quote

My guess is that the =docker-sbt= project hasn't updated for some change in how
this version of SBT/etc access temporary files, whether they're in
=/root/.cache= or =~/.cache= or =/tmp= ... who knows?


***** Running metal

Assuming that =metal-emacs= and your Scala tooling is installed locally, then
this should be as simple as =M-x eglot= followed by =metal-emacs=

This is probably going to require modifying the =tramp-remote-path=

See [[https://scalameta.org/metals/docs/editors/emacs#eglot][Metals config for eglot]]. For me (and for now anyways) this takes care of
=init.el=:

#+begin_src emacs-lisp
(setup (:pkg scala-mode))

(setup (:pkg sbt-mode)
  (:option sbt:program-options '("-Djline.terminal=none"
                                 "-Dsbt.supershell=false")))
#+end_src

For some reason, =tramp-own-remote-path= is undefined in the containers buffers
so =(add-to-list 'tramp-remote-path 'tramp-own-remote-path)= isn't working.

To shim it, then in =.dir-locals= to add =metals-emacs= to the
=tramp-remote-path=:

#+begin_src lisp-data
((nil
  . ((eval . (add-to-list 'tramp-remote-path "/home/sbtuser/bin")))))
#+end_src

Until I can figure out why =sbt-start= expects a project only in
=/home/sbtuser/project=, then the =.dir-locals.el= needs to be in docker volume,
so =tramp-remote-path= is respected when running commands on the container.

This still results in the following errors:

#+begin_quote
# from *Messages*
Tramp: Opening connection *EGLOT (project/(scala-mode)) stderr* for sbtuser@courserascala1 using docker...done
Tramp: Opening connection EGLOT (project/(scala-mode)) for sbtuser@courserascala1 using docker...done
Scan error: "Scan error", "Containing expression ends prematurely 81 82"
[jsonrpc] Server exited with status 127
Process EGLOT (project/(scala-mode)) not running: exited abnormally with code 127

# from *EGLOT (project...*
[internal] Fri Aug 18 00:26:14 2023:
(:message "Running language server: /bin/sh -c stty raw > /dev/null; metals-emacs")
[internal] Fri Aug 18 00:26:14 2023:
(:message "Connection state changed" :change "exited abnormally with code 127\n")
#+end_quote

So, in other words, =/bin/sh -c stty raw > /dev/null; metals-emacs= is running
with =/bin/sh= which doesn't take the =.bashrc= into account. Even though
=tramp-remote-path= has been set, for some reason, it doesn't work. So, trying
=/home/sbtuser/bin/metal-emacs= directly leads to the content being encoded and
shipped over the to =/tmp/= ... hmmmm

#+begin_quote
# from *Messages*
Tramp: Encoding local file ‘/tmp/tramp.1V6pgv.scala’ using ‘base64-encode-region’...done
Tramp: Decoding remote file ‘/docker:sbtuser@courserascala1:/home/sbtuser/project/src/main/scala/recfun/RecFun.scala’ using ‘base64 -d -i >%s’...done
Wrote /docker:sbtuser@courserascala1:/home/sbtuser/project/src/main/scala/recfun/RecFun.scala
Mark set [2 times]
Tramp: Opening connection *EGLOT (project/(scala-mode)) stderr* for sbtuser@courserascala1 using docker...done
Tramp: Opening connection EGLOT (project/(scala-mode)) for sbtuser@courserascala1 using docker...done
Scan error: "Scan error", "Containing expression ends prematurely 81 82"
[jsonrpc] Server exited with status 127
Process EGLOT (project/(scala-mode)) not running: exited abnormally with code 127

# from *EGLOT (project...*
[internal] Fri Aug 18 00:31:01 2023:
(:message "Running language server: /bin/sh -c stty raw > /dev/null; /home/sbtuser/bin/metals-emacs")
[internal] Fri Aug 18 00:31:01 2023:
(:message "Connection state changed" :change "exited abnormally with code 127\n")
#+end_quote

And it turns out that I'm referencing the old =dc/sbtscala= image in my
=compose.yml= .... so no, that binary doesn't exist in docker.




*** Configuring Metals

The =.metals/metals.log= file will fill you in as to what the server is
doing. the =metals= process will start a bloop server.

See [[https://scalameta.org/metals/docs/editors/emacs/#files-and-directories-to-include-in-your-gitignore][files/directories to include in your gitignore]] for more info, although I
have a =.bsp= directory in lieu of =.bloop=. I'm not sure whether these are
mutually exclusive, though I've read that BSP supercedes Bloop (which is
scala-specific). Regardless, the [[https://scalameta.org/metals/docs/build-tools/sbt/#manual-installation][import build instructions in Manual
Installation]] imply that I need to edit the =project=

Add the following to =project/plugins.sbt= or to
=/.sbt/1.0/plugins/plugins.sbt=:

#+begin_src scala
resolvers += Resolver.sonatypeRepo("snapshots")
addSbtPlugin("ch.epfl.scala" % "sbt-bloop" % "1.5.8")
// above: addSbtPlugin("ch.epfl.scala" % "sbt-scalafix" % "0.9.26")
#+end_src

Save the file and =eglot= instantly recognizes that I need to "Import Project."

After running =reload= in the =sbt= repl, I'm still getting the same warning
from eglot ... which probably already restarted itself.

#+begin_quote
eglot--error: [eglot] Unsupported or ignored LSP capability `:declarationProvider'
#+end_quote

Importing gives a warning about Scala 3.3.0, need to downgrade to 3.0. This is
the same warning I get using Metals in the lab environment. However, =scala
--version= in the attached container shows a metal-incompatible =2.13.10=, which
means /something/ isn't right. Since VSCode shields me from complexity (so that
I can focus on learning the language instead of boilerplate), I have no idea
what that is. =ripgrep= for =3.3.0= shows =build.sbt=.

Time to shut everything down and rebuild the container... After the rebuild things
improve:

+ For functions defined in the project, =M-.= navigates to function
  definition instead of the =trait=
+ =consult-eglot-symbols= does list classes, but no other symbols.
+ But there's still no introspection available for plain old java functions like
  =assert=

The metals LSP is unpacking metadata from JARs, but this is apparently being
generated by =consult-eglot-symbols= or something else. On the lab environment,
this =readonly= directory is only populated once used.

#+begin_quote
/data/edu/coursera/scala1/recfun/.metals/readonly
├── java.base
│   └── java
│       ├── lang
│       │   ├── AssertionError.java
│       │   └── AssertionStatusDirectives.java
│       ├── net
│       │   └── HttpCookie.java
│       ├── nio
│       │   ├── ByteBufferAsShortBufferB.java
│       │   └── channels
│       └── util
│           ├── concurrent
│           ├── stream
│           └── TreeMap.java
└── java.desktop
    └── javax
        ├── accessibility
        │   └── AccessibleStateSet.java
        ├── print
        │   └── attribute
        └── swing
            ├── plaf
            └── text

18 directories, 6 files

#+end_quote

The Eglot events buffer shows an error about =SemanticDB=. I changed the scala
version to 3.3.0, so maybe this is why. However, even with =scala 3.3.0=,
looking up functions like this works in the lab environment -- [[https://scalameta.org/metals/blog/2023/07/19/silver][Metals v1.0.0 is
compatible with Scala 3.3.0]] though.

#+begin_quote
(:jsonrpc "2.0" :id 146 :method "textDocument/definition" :params
          (:textDocument
           (:uri "file:///home/sbtuser/project/src/test/scala/recfun/RecFunSuite.scala")
           :position
           (:line 34 :character 8)))
[server-notification] Fri Aug 18 05:17:06 2023:
(:jsonrpc "2.0" :method "window/logMessage" :params
          (:type 4 :message "2023.08.18 09:17:06 ERROR code navigation does not work for the file '/home/sbtuser/project/src/test/scala/recfun/RecFunSuite.scala' because the SemanticDB file '/home/sbtuser/project/.bloop/project/bloop-bsp-clients-classes/test-classes-Metals-IM3rXdQmQVOQ72xKjuPn-Q==/META-INF/semanticdb/src/test/scala/recfun/RecFunSuite.scala.semanticdb' doesn't exist. There can be many reasons for this error. "))
[server-notification] Fri Aug 18 05:17:06 2023:
(:jsonrpc "2.0" :method "window/logMessage" :params
          (:type 4 :message "2023.08.18 09:17:06 WARN  unsupported Scala 3.3.0"))
[server-reply] (id:146) Fri Aug 18 05:17:06 2023:
(:jsonrpc "2.0" :id 146 :result
          [])
#+end_quote

Ah okay, so changing =cs bootstrap= to download a more recent version of metals
fixes the compatibility issues: =org.scalameta:metals_2.13:1.0.0=. Now I get
things like:

+ Navigate to definition for basic java refs like =Int= and =assert=
+ Code actions like those on the [[https://scalameta.org/metals/docs/features/codeactions]["features" page]]
+ =consult-eglot-symbols= shows symbols other than classes (YAY!)

Like they say: you can't believe everything you read on the internet ... or
blindly enter it into your Dockerfile. So you can drive the car, but can you fix
the car?

**** Trying to make sense of Metals

Unzipping the assignment in the lab environment yields these files. =tree= is
not installed, but it doesn't help for diffing anyways.

#+begin_quote
creating: recfun/project/
   creating: recfun/src/
   creating: recfun/src/main/
   creating: recfun/src/main/scala/
   creating: recfun/src/main/scala/recfun/
   creating: recfun/src/test/
   creating: recfun/src/test/scala/
   creating: recfun/src/test/scala/recfun/
  inflating: recfun/.gitignore
  inflating: recfun/assignment.sbt
  inflating: recfun/build.sbt
  inflating: recfun/project/CourseraStudent.scala
  inflating: recfun/project/MOOCSettings.scala
  inflating: recfun/project/StudentTasks.scala
  inflating: recfun/project/build.properties
  inflating: recfun/project/buildSettings.sbt
  inflating: recfun/project/plugins.sbt
  inflating: recfun/src/main/scala/recfun/RecFun.scala
  inflating: recfun/src/main/scala/recfun/RecFunInterface.s
#+end_quote

In the web VS Code, the metals plugin then offers to import the project which
creates these differences:

#+begin_quote
Only in recfun: .bloop
Only in recfun/project: .bloop
Only in recfun/project: metals.sbt
Only in recfun/project: project
Only in recfun/project: target
Only in recfun: target
#+end_quote

However, comparing =recfun= to =recfun2= shows that =.metals= is created in each
directory, regardless of whether I've opened the project or visited the
directory. Since hidden files are not shown in the file-tree -- in typical
Microsoft "protect-you-from-details" fashion -- I am thus helpless against the
forces of "implementation" details ... once they actually begin to matter.

When using LSP functionality, definitions (headers) are extracted from the JARs
into directories like
=.metals/readonly/dependencies/munit_3-0.7.26-sources.jar/=. It is very nice to
see what "LSP" is supposed to do.

* Issues

** Running SBT In A Container

#+begin_quote
yeh, i'm really outing my own Docker Compose power level here ... Hint: it's not
exactly 9,000. I missed out on a lot of container workflows. It's just much
easier to learn when you work beside other people.
#+end_quote

*** Permissions Issues

+ [[https://github.com/sbt/docker-sbt/pull/99][pull#99 on docker-sbt]] exposes =USER_ID= and =GROUP_ID= as build args

*** Using Docker Compose

Potential problems:

+ The container's been created with user =sbtuser= with id =1001=
+ Not sure how docker compose supports [[github:][uid/gid remapping]] (i.e. link suggests
  that it doesn't seem to very well).
+ The image can be rebuilt, avoiding the need to recursively =chown=. see
  pull#99, [[https://jtreminio.com/blog/running-docker-containers-as-current-host-user/][this blog]] and particularly this section on [[and][using .env within
  docker-compose.yml]]

#+begin_export yaml
services:
  scala:
    container_name: courserascala1
    hostname: courserascala1
    image: sbtscala/scala-sbt:eclipse-temurin-focal-17.0.5_8_1.9.3_2.13.11
    # user: sbtuser
    working_dir: /home/sbtuser/scala1
    command: /bin/bash
    stdin_open: true
    tty: true
    volumes:
      - type: bind
        source: .
        target: /home/sbtuser/scala1
#+end_export

So to fix this, you need to create a new image that changes the user's ID, then
recursively changes the files it owns. Otherwise, your projects will be littered
with root-owned

*** Using Podman

The app is a single container, so skipping the "nice to haves" of emacs
docker.el in favor of a directory littered with root permissions.

** Running SBT in Emacs without environment dependencies

There are a few options here.

The following process should work and, assuming that the =sbt-mode= codebases
are pretty easy to modify, then getting it to work should require just a few
changed lines.

Open directory with tramp:

=C-x d /docker:sbtuser@courserascala1:/home/sbtuser/scala1=

Then descend into the scala project directory that contains your =*.sbt= files
(fingers crossed) ... running =M-x start-sbt= here should work transparently.

*** Bailing out

When things get too complicated, it's important to have a plan to bail
out... Here that is to just get the =docker-compose.yml= or =podman= running
sbt, scala and any other dependencies I need. Both =podman= and =docker= are
available on Guix.

If I can just get an SBT prompt or run the scala code.

*** SBT over Tramp with Docker

The hvesalai/emacs-sbt-mode package doesn't use =remote...= when running
=(executable-find sbt:program-name)=, so it can't easily run Tramp. It should be
pretty simple to get this to work.

Before I explain that, there is a better hack ... which is simply to ensure that
a dangling alias exists inside the bind mount directory.

Since it also checks this =(file-executable-p (concat project-root
sbt:program-name))=, then it may attempt to run it.

**** SBT Mode changes required to implement Tramp paths/bins

#+begin_example emacs-lisp
(defun sbt:run-sbt (&optional kill-existing-p pop-p)
  "Start or re-strats (if kill-existing-p is non-NIL) sbt in a
buffer called *sbt*projectdir."
  (let* ((project-root (or (sbt:find-root)
			   (error "Could not find project root, type `C-h f sbt:find-root` for help.")))
         (buffer-name (sbt:buffer-name))
         (inhibit-read-only 1))
    ;; (when (null project-root)
    ;;   (error "Could not find project root, type `C-h f sbt:find-root` for help."))
#+end_example

Particularly, by changing these lines

#+begin_example emacs-lisp
    (when (not (or (executable-find sbt:program-name)
                   (file-executable-p (concat project-root sbt:program-name))))
      (error "Could not find %s in %s or on PATH. Please customize the sbt:program-name variable." sbt:program-name project-root))
#+end_example

To use =(executable-find sbt:program-name (file-remote-p default-directory))=
then everything should /just work/ ... depending on how extensively =sbt-mode=
should use the optional booleanparameter of =(executable-find command &optional
remote)=

***** permissions issues

If you don't rebuild the container with =USER_ID/GROUP_ID= build args then =sbt=
still runs into permissions issues when running remotely via docker/tramp.

It first encounters issues on initialization when creating directories, but even
after that, it will encounter things like this when running =M-x sbt-start=

It may seem it's not running as root ... if you don't close out all the other
buffers, ensuring dired's path looks -- like
=/docker:root@courserascala1:/path/to/proj= versus =/docker:sbtuser@ctr= -- then
no, it's not running as root.

After changing that, i'm no longer getting the errors.

#+begin_quote
Running sbt
java.io.IOException: Permission denied
	at java.base/java.io.UnixFileSystem.createFileExclusively(Native Method)
	at java.base/java.io.File.createTempFile(File.java:2170)
	at sbt.StandardMain$.$anonfun$initialGlobalLogging$1(Main.scala:242)
	at sbt.internal.io.Retry$.apply(Retry.scala:46)
	at sbt.internal.io.Retry$.apply(Retry.scala:28)
	at sbt.internal.io.Retry$.apply(Retry.scala:23)
	at sbt.StandardMain$.createTemp$1(Main.scala:240)
	at sbt.StandardMain$.$anonfun$initialGlobalLogging$3(Main.scala:246)
	at sbt.internal.util.GlobalLogBacking$.apply(GlobalLogging.scala:61)
	at sbt.internal.util.GlobalLogging$.initial(GlobalLogging.scala:88)
	at sbt.StandardMain$.initialGlobalLogging(Main.scala:247)
	at sbt.StandardMain$.initialGlobalLogging(Main.scala:250)
	at sbt.StandardMain$.initialState(Main.scala:280)
	at sbt.xMain$.$anonfun$run$11(Main.scala:126)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
	at scala.Console$.withIn(Console.scala:230)
	at sbt.internal.util.Terminal$.withIn(Terminal.scala:578)
	at sbt.internal.util.Terminal$.$anonfun$withStreams$1(Terminal.scala:358)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
	at scala.Console$.withOut(Console.scala:167)
	at sbt.internal.util.Terminal$.$anonfun$withOut$2(Terminal.scala:568)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
	at scala.Console$.withErr(Console.scala:196)
	at sbt.internal.util.Terminal$.withOut(Terminal.scala:568)
	at sbt.internal.util.Terminal$.withStreams(Terminal.scala:358)
	at sbt.xMain$.withStreams$1(Main.scala:87)
	at sbt.xMain$.run(Main.scala:121)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
	at sbt.xMain.run(Main.scala:46)
	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
	at xsbt.boot.Launch$.run(Launch.scala:149)
	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
	at xsbt.boot.Launch$.launch(Launch.scala:159)
	at xsbt.boot.Launch$.apply(Launch.scala:44)
	at xsbt.boot.Launch$.apply(Launch.scala:21)
	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
	at xsbt.boot.Boot$.run(Boot.scala:73)
	at xsbt.boot.Boot$.main(Boot.scala:21)
	at xsbt.boot.Boot.main(Boot.scala)
[error] [launcher] error during sbt launcher: java.io.IOException: Permission denied
#+end_quote

*** Hacking Comint

It may be possible to start the remote =sbt= process as comint and then changing
over the major mode.  From that point, commands using =(sbt:buffer-name)= will
adopt the buffer and ... it should work (in theory). However, there is
project-local and buffer-loca state that needs to be set up as sbt-mode expects,
which would require a deep dive into the codebase. Ultimately, it's just a hack.

** Metals in Emacs

*** Lock Files

Metals seems to think that the Emacs lock files are actual files ... This is
occasionally seen in Emacs/LSP (see [[https://github.com/facebook/create-react-app/issues/9056][facebook/create-react-app/issues/9056]])

#+begin_quote
java.nio.file.NoSuchFileException: /home/sbtuser/project/src/main/scala/recfun/.#RecFun.scala
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)
	at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:860)
	at com.swoval.files.SymlinkWatcher.addSymlink(SymlinkWatcher.java:194)
	at com.swoval.files.SymlinkFollowingPathWatcher$1.onNext(SymlinkFollowingPathWatcher.java:48)
	at com.swoval.files.SymlinkFollowingPathWatcher$1.onNext(SymlinkFollowingPathWatcher.java:36)
	at com.swoval.files.Observers.onNext(Observers.java:31)
	at com.swoval.files.NioPathWatcher.runCallbacks(NioPathWatcher.java:451)
	at com.swoval.files.NioPathWatcher.handleEvent(NioPathWatcher.java:475)
	at com.swoval.files.NioPathWatcher.access$300(NioPathWatcher.java:35)
	at com.swoval.files.NioPathWatcher$2.accept(NioPathWatcher.java:108)
	at com.swoval.files.NioPathWatcher$2.accept(NioPathWatcher.java:102)
	at com.swoval.files.NioPathWatcherService$2.run(NioPathWatcherService.java:95)
#+end_quote

This is the [[https://www.scala-sbt.org/1.x/docs/sbt-1.0-Release-Notes.html#Alternative+watch+mode][NIO file watch service]], which is SBT, not Metals. An [[https://www.scala-sbt.org/1.x/docs/Howto-Customizing-Paths.html#Include%2Fexclude+files+in+the+source+directory][excludeFilter]]
is needed to exclude the lock files. This is [[https://www.scala-sbt.org/1.x/docs/Combined+Pages.html#WatchSource][configured in the WatchSource]] for
the =*.sbt=, but mine seems to automagically watch anything named =*.scala=.

I think this all means that I'm the only person on the internet using
Emacs/Tramp/Docker/Scala/Metals:

#+begin_quote
Achievement Unlocked?

Nope. Not sure what to do with this =sbt= stuff
#+end_quote

[[https://github.com/sbt/sbt/blob/f5e08386e19eb615e395b06cb7a9917f5533d8ba/sbt-app/src/sbt-test/project/flatten/build.sbt#L17][Jenkies]] it is a [[https://github.com/sbt/sbt/blob/f5e08386e19eb615e395b06cb7a9917f5533d8ba/sbt-app/src/sbt-test/project/lint/build.sbt#L16][clue]] I wonder whether [[https://github.com/sbt/sbt/blob/f5e08386e19eb615e395b06cb7a9917f5533d8ba/sbt-app/src/sbt-test/nio/reload/.scalafmt.conf#L4][.scalafmt.conf]] will [[https://github.com/sbt/sbt/blob/f5e08386e19eb615e395b06cb7a9917f5533d8ba/sbt-app/src/sbt-test/plugins/twirl/project/TwirlPlugin.scala#L20][change the build]] --
spoiler: probably not, but zero ChatGPT's were harmed in the making of this
plain text "guide" on configuring Scala for Emacs.

Hint: even Google/Github queries functions like =site:= should answer your
questions if you know where to look.

* Roam
+ [[id:786edde6-2a08-4ec5-8076-45bbd4a34243][Tramp]]
