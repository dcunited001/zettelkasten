:PROPERTIES:
:ID:       fbf366f2-5c17-482b-ac7d-6dd130aa4d05
:END:
#+title: Arch

* Docs
+ [[https://wiki.archlinux.org/title/system_maintenance][System maintainence]]
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]

* Resources

[[https://farseerfc.me/en/pacvis.html][PacViz: Visualize Pacman Local Database]] it would be tough to install Guix or
Nix and /not have this functionality/

** ArchWiki Lists
+ List of [[https://wiki.archlinux.org/title/List_of_applications/Internet#XMPP_clients][apps/internet]] (ginormous list of links/names)

* Topics

** Package Management
*** [[https://wiki.archlinux.org/title/pacman/Tips_and_tricks#Utilities][Utilities]]
+ repoctl
+ pacutils
+ pkgtools
+ pkgtop :: stats to manage resources
+ aurutils
*** [[https://wiki.archlinux.org/title/AUR_helpers][AUR Helpers]]
*** GUI
+ pkgbrowser



* Issues
** Listing package files

+ pacman -Fl :: works when the file database is current
+ pacman -Fy :: updates

*** From Archwiki:

+ paccheck --md5sum --quiet :: Listing all changed files from packages
+ fakepkg :: can recreate a package from the file system
+ pacreport :: track unowned files (from pacutils)
** Updating stale AUR-git packages

** Cleaning Garuda Packages

See "Updating stale AUR-git packages" above (haven't quite gotten around to
this: one foot in; mostly the rest of me is out)

#+begin_src shell
yay -Qdt | cut -f1 -d' ' > /tmp/before-clean
sudo pacman -Runs $(yay -Qdt | cut -f1 -d' ')
garuda-update
yay -Qdt | cut -f1 -d' ' > /tmp/after-update

# these are a bit harder to clean
yay -Qet | cut -f1 -d' ' > /tmp/after-clean-explicitly-installed
#+end_src

Then readd flatpaks

#+begin_src shell
yay -Rns discord hashcat-git heroic-games-launcher-bin podman-desktop \
    remmina rpi-imager slack-desktop thunderbird torbrowser-launcher \
    visual-studio-code-bin wireshark-cli woeusb-ng zeal
flatpak remove --user com.discordapp.DiscordCanary
flatpak update --user
flatpak update --system

# better way other than to flatpak search every one?
flatpak install com.discordapp.Discord \
    org.raspberrypi.rpi-imager \
    com.slack.Slack \
    io.podman_desktop.PodmanDesktop \
    org.mozilla.Thunderbird \
    org.torproject.torbrowser-launcher \
    com.visualstudio.code \
    org.zealdocs.Zeal \
    com.github.mdh34.quickdocs \
    com.zoom.Zoom

yay -Qdt | cut -f1 -d' ' > /tmp/before-clean
#+end_src

Diffing the original before/after

#+begin_src shell :results output code :wrap example diff
diff /tmp/before-clean /tmp/after-update
#+end_src

#+begin_example diff
1,173c1,7
< afdko
< autoconf2.13
< autogen
< awesome-terminal-fonts
< aws-sdk-cpp
< bazel
< bdf-unifont
< blueprint-compiler
< bluez-qt5
< box2d
< cbindgen
< check
< cjson
< clang15
< cython
< dejagnu
< dhclient
< dump_syms
< egl-wayland
< electron
< electron19-bin
< electron31
< electron32
< electron33
< electron35
< fish-autopair
< fontforge
< frameworkintegration5
< gcab
< gdk-pixbuf-xlib
< gendesk
< gi-docgen
< glibmm-2.68
< gn
< gperf
< gptfdisk
< grantlee
< gtk-doc
< guile1.8
< guile2.2
< haskell-gio
< haskell-gtk3
< help2man
< http-parser
< imake
< js115
< kactivities-stats5
< kcalendarcore5
< kcmutils5
< kdesignerplugin
< kdesu5
< kdevelop-php
< kdiagram5
< kdnssd5
< kdsoap-qt5
< kfilemetadata5
< kholidays5
< khtml
< kidletime5
< kimageannotator-qt5
< kirigami-addons5
< knotifyconfig5
< kpeoplevcard
< kplotting5
< kquickcharts5
< krunner5
< ldns
< lib32-faudio
< lib32-gsm
< lib32-lapack
< lib32-libwrap
< lib32-rust-libs
< libclc
< libdwarf
< libfixposix
< libgexiv2
< libgssglue
< libindicator-gtk3
< libomxil-bellagio
< libqaccessibilityclient-qt5
< libretro-citra
< libretro-duckstation
< libsidplay
< libsmbios
< libvisual
< lua52
< mingw-w64-gcc
< mingw-w64-tools
< modemmanager-qt5
< nasm
< network-manager-sstp
< networkmanager-fortisslvpn
< networkmanager-l2tp
< networkmanager-openconnect
< networkmanager-openvpn
< networkmanager-pptp
< networkmanager-qt5
< networkmanager-strongswan
< networkmanager-vpnc
< nm-cloud-setup
< okularpart5
< opencollada
< oxygen-sounds
< patchelf
< perl-ipc-run3
< perl-json
< perl-locale-po
< powerline
< psautohint
< python-async-timeout
< python-atspi
< python-build
< python-enrich
< python-exceptiongroup
< python-gevent
< python-google-api-python-client
< python-installer
< python-mock
< python-ordered-set
< python-pbr
< python-pyaudio
< python-pydantic
< python-pyrate-limiter
< python-pytest-asyncio
< python-pytest-cov
< python-routes
< python-scikit-build
< python-setuptools-scm-git-archive
< python-tensorflow-estimator
< python-testpath
< python-toml
< python-tomli
< python-toolz
< python-uc-micro-py
< python-validate-pyproject
< python-vcrpy
< python-xcffib
< qgpgme-qt5
< qqc2-desktop-style5
< qt5-3d
< qt5-charts
< qt5-datavis3d
< qt5-doc
< qt5-networkauth
< qt5pas
< qtkeychain-qt5
< rapidjson
< reuse
< rp-pppoe
< simde
< sip
< spirv-headers
< sqlcipher
< swig
< t1lib
< tinycompress
< tinyxml
< ttf-meslo-nerd-font-powerlevel10k
< ungoogled-chromium-debug
< uriparser
< valgrind
< vc
< wasi-libc++
< wayland-protocols
< webrtc-audio-processing-0.3
< wireguard-tools
< wpebackend-fdo
< xorg-server-devel
< xorg-server-xvfb
< xorg-xsetroot
< xsimd
< yarn
< yasm
---
> appstream-qt5
> libnma
> libnma-gtk4
> meson
> openldap
> powerline-fonts
> python-hypothesis
#+end_example

* Manjaro

** Resources
+ [[https://wiki.manjaro.org/index.php/Build_Manjaro_ISOs_with_buildiso][Build Manjaro ISOs]]

** Topics
*** Tools

+ [[https://wiki.manjaro.org/index.php/Manjaro-tools][manjaro-iso]]
+ I have no idea. I only just looked at their gitlab.

* Garuda
** Resources

** Topics
*** Services

**** Locate timer

Garuda ships =plocate=, but I need to tweak the configuration. It indexes BTRFS
=/.snapshots= and =/gnu/store=. The config is in =/etc/updatedb.conf=, so I just
needed to add those directories to =PRUNEPATHS=

#+begin_src sh :results output verbatim
pacman -Fl plocate | cut -f2 -d' ' | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
├── etc
│   └── updatedb.conf
├── usr
│   ├── bin
│   │   ├── locate
│   │   ├── mlocate
│   │   ├── plocate
│   │   ├── plocate-build
│   │   └── updatedb
│   ├── lib
│   │   ├── systemd
│   │   │   └── system
│   │   │       ├── plocate-updatedb.service
│   │   │       └── plocate-updatedb.timer
│   │   ├── sysusers.d
│   │   │   └── plocate.conf
│   │   └── tmpfiles.d
│   │       └── plocate.conf
│   └── share
│       └── man
│           ├── man1
│           │   └── plocate.1.gz
│           ├── man5
│           │   └── updatedb.conf.5.gz
│           └── man8
│               ├── plocate-build.8.gz
│               └── updatedb.8.gz
└── var
    └── lib
        └── plocate
            └── CACHEDIR.TAG

17 directories, 15 files
#+end_example

It runs with a timer

#+begin_src sh :results output verbatim
systemctl  list-timers --all --plain 'plocate*'
#+end_src

#+RESULTS:
: NEXT                        LEFT LAST                        PASSED UNIT                   ACTIVATES
: Wed 2025-04-16 00:33:00 EDT  15h Tue 2025-04-15 00:08:17 EDT 8h ago plocate-updatedb.timer plocate-updatedb.service
:
: 1 timers listed.

And can be edited using =systemctl edit --full plocate-updatedb.service=.

*** Tools

Equivalents to similar tools from Manjaro (also higher level than many of the
arch tools they all derive from)

*** Performance Optimizations

See generic Arch [[https://wiki.archlinux.org/title/improving_performance][overview on archwiki]]

+ how changes are applied: 3 services and one package
+ [[https://gitlab.com/garuda-linux/applications/garuda-assistant/-/blob/master/garudaassistant.ui?ref_type=heads#L1329-1403][arguments]] to changes applied


**** [[https://gitlab.com/garuda-linux/themes-and-settings/settings/performance-tweaks][performance-optimizations]] (package)

Some of these would be difficult to apply yourself, esp. at a low level or on
startup. The udev tweaks to disks are good, if some interface with the kernel
doesn't already do that. Other settings seem to mirror what i've got set in
BIOS.

+ Sets [[https://wiki.archlinux.org/title/AMDGPU#Boot_parameter][AMDGPU boot parameter]] to overclock, which I kinda hope doesn't conflict
  with my BIOS or override other settings.
+ [[https://gitlab.com/garuda-linux/themes-and-settings/settings/performance-tweaks/-/tree/master/usr/lib/udev/rules.d?ref_type=heads][udev tweaks]] to tune handling of devices
+ other [[https://gist.github.com/dante-robinson/cd620c7283a6cc1fcdd97b2d139b72fa][tweaks]] for power management, cpu governor, etc

**** [[https://github.com/irqbalance/irqbalance][IRQBalance]]

+ Rebalances IRQ load across cores. Probably more beneficial for CPU's that have
  a high core count ... but something generates an insanely high process count
  for me.

**** [[https://github.com/irqbalance/irqbalance][Ananicy]]

This applies a community-developed policy for managing niceness to processes.

+ It won't let me renice processes though.

I need emacs to be snappy. My desktop has 16 cores, twice the RAM, etc ... but
my laptop with 6 cores runs emacs 3-4x faster ... I don't have nearly the same
number of buffers open.

**** [[https://wiki.archlinux.org/title/preload][Preload]]

+ /etc/conf.d/preload :: config file. Docs at [[https://github.com/arunanshub/preload/blob/master/preload.conf.in][arunanshub/preload]], though it's
  not clear that this is the original format.
+ sets ~IONICE_OPTS="-c3"~
+ see [[https://wiki.archlinux.org/title/improving_performance#Storage_I/O_scheduling_with_ionice][ionice in archwiki]]

Preloads application files in RAM. The archwiki mentions that =preload= records
statistics about which programs are loading, but it's unclear how it informs the
kernel of the ELF's executable's image in memory (and/or the ELF's
assoc. files?)

I guess I could read [[https://cs.uwaterloo.ca/~brecht/courses/702/Possible-Readings/prefetching-to-memory/preload-thesis.pdf][Preload: An Adaptive Prefetching Daemon]]

The combination of =preload= with =ionice= is probably very helpful

#+begin_quote
For high-interrupt processes with unpredictable load requiring many copies of
the same program, a fully static compilation could help ... though it's
complicated, since it tightly constrains your process/threading model.  The
=k0s= distribution makes more efficient utilization of shared memory by
statically compiling all components of =kubernetes= into a single binary. It's
unclear to me exactly how the shared memory images are shared.

But (i think) you just have a service that spawns instances with the same
initial shared memory image ... it really depends on whether a forked process
can continue executing with the same stack/heap and (if so) how both processes
manage immediately manage the shared stack/heap to split child procs off
efficiently.

idk what i'm talking about.

But it does really seem that software design makes very poor usage of compute &
energy resources.
#+end_quote

*** Dock
**** Plasma Dock replaced Latte Dock
Latte UI/UX was great, but the project really needed some love. Diffing configs
was tough. Lots of dynamic changes.

Garuda replaced this with Plasma Dock. The configs were a bit tough to
find. Most garuda configs have been moved outside of =/etc/skel/= and the
scripts to create the dock are now in
[[/usr/share/plasma/look-and-feel/Dr460nized/contents/layouts/org.kde.plasma.desktop-layout.js]]


*** Podman
**** processing tar file(potentially insufficient UIDs or GIDs available in user namespace...)

+ Rootless Podman not configured properly (see [[https://github.com/containers/podman/issues/12715][containers/podman#12715]])
  - follow instructions in [[https://docs.podman.io/en/latest/markdown/podman.1.html#rootless-mode][podman docs]] (may not be sufficient)
  - restart podman service and attempt pulling image

*** Misc
+ shadow-verify service fails bc ntp
  - NTP service moved to systemd-timesyncd from ntpd
  - ensure /var/lib/ntp is gone
  - remove ntp user if necessary
+ [[https://nekoyukimmm.hatenablog.com/][Arch Cheatsheets (japanese)]
