:PROPERTIES:
:ID:       013f2a46-ac4a-4881-a25a-ef0beb9d8290
:END:
#+TITLE: Yubikey

* Docs

** PIV

+ [[https://developers.yubico.com/PIV/Guides/Certificate_authority.html][CA with a Yubikey]]
+ [[https://docs.yubico.com/yesdk/users-manual/application-piv/slots.html][PIV Slots]]


* Resources

** Deployments
+ [[https://cryptsus.com/blog/secure-openvpn-setup-X509-LDAP-yubikey-2fa-authentication-Ubuntu18.04.html][Secure OpenVPN Setup With X.509, LDAP and 2FA Yubikey Auth on Ubuntu]]

* Topics

** OpenVPN on PFSense with Yubikey Attestation Keys

S had no idea PIV could function as a "mediator" for CA ... So I guess PIV
wasn't a waste of time after all?

+ [[https://jamesog.net/2023/03/03/yubikey-as-an-ssh-certificate-authority/][YubiKey PIV (9c) as an SSH Certificate Authority]]
+ [[https://blog.ctis.me/2022/12/yubikey-piv-gpg/][yubikey deep dive on PKCS11, GPG, Certificate Deployment]]
+ [[https://smallstep.com/blog/access-your-homelab-anywhere/][Access your homelab with YubiKey (cert attest + YK C.A.) and mutual TLS (step-ca & caddy)]]

I got PFSense to validate the chain of trust up to the Yubico CA. It's not
really clear whether the OpenVPN handshake will really involve the
Yubikey. There can only be one SCDaemon client per smartcard AFAIK. So using GPG
for SSH while running the VPN looks like a no go (at least on one key), unless
perhaps the VPN service is started first and then ... nevermind.

I need to straighten out the routing/acl's, but this would greatly simplify
quite a few things. I was worried about cert auth & secrets, (which is partially
what pkcs12 is for). All in all, I still need ansible for most of this,
especially if I don't have a static IP -- it's funny how /your ISP will _still_
charge you for that/, but won't tell you everything is transparently routed IPv6
end-to-end. THAT IS BULLSHIT ACTUALLY.

** Deployment

+ [[https://support.yubico.com/hc/en-us/articles/360015668919-YubiKey-Smart-Card-Deployment-Considerations][Deployment Considerations]]

** Maximum Certificate Sizes

See [[https://docs.yubico.com/yesdk/users-manual/application-piv/cert-size.html][yubikey docs on max cert size]]. Apparently, the 5.x keys can store up to 24 private key and
certifcate pairs at around 2KB per slot. I'm not sure where these extra slots
are though. Hmmmm. These may be a bit troublesome to use though.

See [[https://docs.yubico.com/yesdk/users-manual/application-piv/slots.html][PIV Slots]]:

#+begin_quote
Generate and import asymmetric keys:

Slots =9A, 9C, 9D, 9E, 82 - 95 and F9= hold asymmetric keys ... all slots other
than =80, 81, and =9B= hold asymmetric keys.

Signing:

[in addition to =9C= ...], it is also possible to sign using the keys in slots
=9A, 9D, 9E, and 82 - 95= as well.

#+end_quote

Also, using [[https://security.stackexchange.com/questions/258518/using-retired-extra-slots-82-95-on-yubikey][Retired Slots on Yubikey]]

* Issues

** Pinentry And Input Handling

Okay, so i knew that pinentry grabbed keyboard in TTY/Curses, which is why i've
been using them, more or less. Once again, [[https://lists.archive.carbon60.com/gnupg/devel/80187?page=last][stupid mistake]]. Not enough exposure
to these other [[https://manpages.ubuntu.com/manpages/trusty/man1/pinentry-gtk-2.1.html][pinentry-* CLI's]] ... they redirect the input streams.

I assumed that you couldn't do this in X11 or window managers generally unless
it was like MacOS/Windows and tightly controlled .... Keyboard handling is
completely different in X11 and Linux Console which is why =loadkeys= is
required for TTY and [[https://github.com/wez/evremap][approaches like evremap]] are required for unified
configurations.

** Management Key

*** Risks Associated to Management Key

Unless configured by a user, the 3DES management key is transparently derived
from the PIN. By compromising it ... you can do exciting things like [[https://docs.yubico.com/yesdk/users-manual/application-piv/pin-puk-mgmt-key.html#operations-that-require-the-management-key][generating
new keys]] or changing the PIN policy, which isn't the same as signing/authing.
[[therhttps://www.reddit.com/r/yubikey/comments/sq02qn/comment/hwq9d4k/?context=3][This reddit user advocates]] that for the average user, there's no significant
benefit to configuring it, but it's more complicated to manage.

However, Yubico docs indicate that one should be wary of PIN-generated
management keys.

** PIN, PUK, Touch

Generally, the PIN/PUK and Touch policies are critical in distinguishing the
Yubikey (or generic USB Smart Cards) from other security methods. They require
physical access to the card and so physical security is also critical. This
requirement also /compels someone to get physically close to you or a backup
card/ to perform operations. So, if someone is probing for a soft spot, you can
generally get a feel for it.

The attacker also must know the PIN/PUK if the policy forces them to.

*** Pin Unlocking

+ See [[https://support.yubico.com/hc/en-us/articles/360013779219-Smart-Card-PIN-Unlock-Reset-Operational-Approaches][Smart Card PIN Unlock/Reset]]

** Multiple Yubikey Applications

GPG uses the CCID interface/driver which requires exclusive device access,
whereas [[https://www.procustodibus.com/blog/2023/02/gpg-2-4-on-ubuntu-22-04/][other applications use pcscd]]. This should be addressed in GnuPG 2.4.
Yubikey also has guide on [[https://lists.gnupg.org/pipermail/gnupg-devel/2019-September/034462.html][GPG's CCID Conflicts]]. This [[https://lists.gnupg.org/pipermail/gnupg-devel/2019-September/034462.html][GnuPG issue]] on GnuPG seems
to that multi-app access in =scdaemon= addressed and coming down the pipe.

#+begin_src conf
reader-port Yubico Yubi
disable-ccid
pcsc-driver /usr/lib/libpcsclite.so.1
# not libpcsc D lite.so.1 ... results in "error in libcrypto"
#+end_src

However, it's still not working on either Arch or Guix.

+ Both are using a Guix gnupg package =2.2.39=
+ On Arch, there /could/ be library/interface compatibility conflicts between
  requests via Guix GnuPG and pacman pcscd.
+ After the PIN times out for gpg/pcscd, then applications outside of the
  original =/dev/ttyN= cause something to fail to register and =pinentry-tty=
  fucks up. Once I authorize in the proper TTY again, then it only requests
  touch. This is really frustrating and obviously I need to give up the TTY
  here...
+ I tested Arch with the pacman =gpg-agent= which is =2.2.41=. This for some
  reason requires entering the PIN with a =gpg= command first otherwise it
  refuses to act for =ssh=. It still results in the same error for =pkcs11-tool=
  though.
+ I'm getting the same issue on both Arch/Guix =CKR_DEVICE_ERROR=. Another
  possibility is =udev= or permissions. However, =pkcs11-tool --list-slots=
  works while GPG is not running, so it's likely not using PCSCD. I just don't
  have time, but wanted to work it through bc sparse notes aren't useful.

On the other hand:

+ The [[https://demo.yubico.com/webauthn-technical/registration][Yubico FIDO2 test registration]] works, which should use PCSCD (... it doesn't)
+ Running =ykman piv info= works. This may simply probe for metadata or pkcs11
  objects. This may could circumvent =pcscd= since they don't require
  authentication. Running =ssh-keygen -D /usr/lib64/pkcs11/opensc-pkcs11.so -e=
  may also be a bad test ... but it works.

The [[https://developers.yubico.com/yubico-piv-tool/Actions/test-signature.html][yubico-piv-tool actions]] don't depend on gpg-agent being configured to be
compatible with PKCS11. =yubico-piv-tool -a verify-pin [-a other-actions] -s
[slot]= which gives

#+begin_quote
Jul 26 08:49:26 myhost pcscd[91137]: 99999999 winscard.c:281:SCardConnect() Error Reader Exclusive
Jul 26 09:00:33 myhost pcscd[91137]: 99999999 winscard.c:281:SCardConnect() Error Reader Exclusive
Jul 26 09:24:27 myhost pcscd[91137]: 99999999 winscard.c:281:SCardConnect() Error Reader Exclusive
#+end_quote

So yeh, PCSCD definitely doesn't work for now.

#+begin_quote
I had assumed that CCID was somehow a feature apropos to PCSCD and SCDaemon and
that using =disable-ccid= meant I would be resorting to a quick hack that
downgraded security, perhaps significantly by removing "exclusive access"
...

Really(?...), any apps that interface with it ultimately proceed through drivers
enforcement of standards/rules. Any interactions should also be further subject
to the hardware's standards/rules.
#+end_quote

*** Why go through the trouble to use PIV?

I mainly want to know if using PIV with GPG is possible/practical because it
would make issuing certificates contained within a context easier -- e.g. TLS
for libvirt and _it's /trivial/ to build guix systems with extra public
keys_. It's also not hard to do similar things with Ansible, but for
desktop/laptop, PIV would be preferable. It's a damn shame that so many people
trash GNU/FSF, while acting like they are concerned about it.

Of course, I would have none of these problems for servers if I could run
K8S/Vault. I have enough hardware to run a k3s cluster, but I don't want to
trust it with certificate management since it would be running on a less secure
network segment. I'm not sure how PIV workflows function for servers. Vault can
be run on container or on nomad, but you're cautioned against at least the
former.

I could really use some advice/help on this stuff. There are so many options for
doing things, but too many moving parts for each strategy.

** Dealing with a stolen smartcard

If someone steals a card, you should have a backup Yubikey with mostly similar
configuration. If you have a spare, you can at least securely identify yourself
for long enough to change things out.

The PIN/PUK /should/ prevent them from using it.

*** Stolen Card with GPG

Additionally, for the OpenPGP application, you should have multiple backups of
the masterkey and subkeys along with revocation certificates store on an
encrypted flash drive. You really need multiple flash drives, especially if they
are older or have a lot of storage, since they are known to degrade.

This can require a lot of overhead in the longrun, but you may need more than
one key anyways. However, it pays to be able to manage this stuff quickly. The
GPG application is easy in GUI land which works for most users -- you just need
to work in a custom =$GNUPGHOME= and get the keys off your device ASAP. Even
then, understanding number of backups, planning revocation, etc will typically
be prohibitively difficult for most people to understand without having
experienced it or having someone help them out.

** GPG Keys

*** Key parameters on multiple yubikeys

If you have multiple yubikeys that you plan on loading GPG subkeys to, then for
some of the subkeys, it's not practical to load different subkeys to different
cards.

Older cards and older GPG/SSH applications have more limitations on algorithms,
so you need to use the "least common denominator" for at least some functions.

Unless all of your cards are yubikey 5.x, then you'll need to use RSA for at
least some of the keys and 2048 keys take up a lot of space. Thus, for redundant
cards, you should just avoid loading all the GPG subkeys and retain =RSA
4096-bit= keys where possible.

I can't remember all of the specifics, but if you have 3x RSA and 3x EC subkeys,
then some of your signing/authentication may fail if multiple keys haven't had
the same subkeys loaded. You can produce both at one time, associate them to the
GPG master key and migrate later once all your smartcards support the same.

+ Remove devices that would for some reason require validation of signatures but
  couldn't be updated, then you may need the signing GPG subkey.
+ For GPG encryption of content to be accessed between multiple devices (like
  via EPG in emacs/dired), then trying to use two different encryption subkeys
  on two smartcards won't work AFAIK (even when associated to the same master
  key). It may be possible to decrypt for both subkeys using the master key, but
  you should never, ever touch that.
+ Devices that only support RSA for authentication aren't so much of a problem,
  since you can import keys into GPG agent and manage them when you have an
  incompatible device.

When I first tried GPG's ssh-agent method about 2+ years ago, I had some stupid
misconfiguration. I thought the authentication key would be used for SSH, but
the misconfig prevented things from working. Since I didn't have anyone to ask
and certain things were not clear, I started learning PIV, which is a bit more
involved and on +some+ most devices (using =scdaemon=), but you can't
simultaneously access GPG and PIV on a yubikey using =scdaemon=, so this gets in
the way of using GPG, which is more critical for me at least. It's a pain in the
ass to add SSH keys through gpg-agent and it's a bit unclear how these are
encrypted/protected. I believe I have notes on that somewhere and ... I think
they are, since encrypting these would like basically be the whole fucking
point, right? Well good luck googling that ... but every other programmer/devops
person just knows someone who could answer ... not if you're on Tom Hanks Island
though.

#+begin_quote
okay, apparently I misinterpreted the purpose of =disable-ccid=. see issue on
multiple applications.
#+end_quote

In other words, _it really, really sucks_ to miss out on that "cloudflare
5'oclock free yubikey giveaway" especially when your management setup is
airgapped and you need to redistribute your keys to HKPS. I could have acted on
this, but for some reason hesitated (i think because I didn't have the cash
... fucking $10). When I tried to get some later on, I still didn't have the $10
cash per key and it took over an hour to determine whether the offer was still
valid.

"First world" problems, am I right?

*** Misc

+ Older Cisco devices without smartnet have poor compatibility with key exchange
  algorithms, so if GPG Agent is acting as SSH Agent, then =RSA 4096-bit= keys
  will take 30+ seconds to exchange keys and negotiate a connection with the
  strong-er but embarrasingly weak hashing algorithms these versions of IOS use.

** PKCS#11

*** On Arch, the ssh-agent won't authorize the use of an added PKCS#11 key

Error message:

#+begin_example
Could not add card "/usr/lib/pkcs11/opensc-pkcs11.so": agent refused operation
#+end_example

Debug:

#+begin_example
debug2: process_request_identities: entering
debug3: identity_permitted: entering: key ECDSA comment "PIV AUTH pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key ECDSA comment "SIGN pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key ECDSA comment "KEY MAN pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key RSA comment "CARD AUTH pubkey", 1 socket bindings, 0 constraints
debug2: process_request_identities: replying with 4 allowed of 4 available keys
debug1: process_message: socket 1 (fd=4) type 13
debug1: process_sign_request2: entering
debug1: process_sign
debug1: check ECDSA /gnu/store/rmyyf4b229cvgianq7biswfvxh85wsiv-opensc-0.22.0/lib/opensc-pkcs11.so PIV AUTH pubkey
debug1: pkcs11_check_obj_bool_attrib: provider "/gnu/store/rmyyf4b229cvgianq7biswfvxh85wsiv-opensc-0.22.0/lib/opensc-pkcs11.so" slot 0 object 94918503568288: attrib 514 = 0
C_Sign failed: 257
process_sign: ECDSA_sign returned 0
debug1: pkcs11_k11_free: parent 0x5653efac58c0 ptr (nil) idx 1
debug1: process_sign_request2: sshkey_sign: error in libcrypto
process_sign_request2: sshkey_sign: error in libcrypto
#+end_example


Potential causes:

+ bad configuration?
  - yubikey? ssh-config?
  -
+ suspend or OOM cause keys to be dumped from ssh-agent memory
  - reported on mac os mostly. however, this happens immediately for me
+ similar issues (from ~2017) recommend compiling openssh

**** The yubikey 4 doesn't permit 384-bit ecdsa keys in some PIV slots

+ on some slots? on any slots? we don't know.
+ i've seen it before ... but it's hard to remember all these specifics
+ the GUI application definitely lets you choose invalid keys
+ there is total storage for bits (can't have too many pesky RSA keys)
  - it's not clear whether

I wanted to have an extra RSA key in the =CARD AUTH= slot bc some devices like
ddwrt lack software/config/etc for elliptic crypto. The problem is that if you
misconfigure:

+ your =ssh-agent= will reject keys you add/remove and add again (confusing)
+ the yubikey allows you to delete certificates, but it doesn't so easily allow
  you to delete the keys.
+ it doesn't quite need all the keys deleted, but if there's a huge RSA key,
  then you may need to =ykman piv reset= the whole keycard.

**** .......... Yubikey PIV . . .

It seems like yubikey tries to keep their docs current, but holy shit it's hard
to assemble this info. Trying to plan this out has required me to keep between
6-10 yubikey doc URL's open in a tab group for about 6 weeks on/off bc I never
have the time to complete it.

+ I haven't talked to anyone who has configured one about this, though I have
  about 6 (all but two are far too old for everyday usage at this point).
  - honestly the hardest part was blindly stumbling through all the potential
    UI/UX workflows for using the key. it wasn't even the technical stuff, but
    trying to decide on:
    - GPG-Agent (+ passphrase mgmt for ssh)
    - or ecdsa-sk "resident keys" which I had never heard of
    - or PIV & pkcs11, which I also never heard of and found absolutely last.
  - and am i paranoid or is loading =ssh-agent= to be available prior to your to
    your windows manager shell a bad idea?
    - this is an easy question for someone to answer, but honestly it seems like
      something that most people won't advise/touch since it's incredibly
      inconvenient or difficult to handle.

+ So i've had to figure this all out myself and I usually prefer CMD-line first,
  especially when things are more complicated
  - .... at least until I need GUI to explore options and the yubikey GUI tools,
    while useful, don't map to the API.
  - both GUI and CMD-line can be a good way to survey the space

**** TLDR: A =yubico-lint= tool would help quite a bit

** Webauthn

*** Yubikey not accessible from browser when using webauthn/u2f
This may be a udev rule

+ [[https://blog.hansenpartnership.com/webauthn-in-linux-with-a-tpm-via-the-hid-gadget/][Webauthn in Linux with a TPM via the HID gadget]]

**** ANSWER: the =hidraw= devices are receiving permissions =600=
This requires a udev rule, but something is already assigning permission.

It hits this rule in =/run/current-system/profile/lib/udev/rules.d/=, but the Guix =operating-system= must be configured to pull this =./lib/udev/rules.d/...= rule from the == package

#+begin_example udev
KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0113|0114|0115|0116|0120|0200|0402|0403|0406|0407|0410", TAG+="uaccess", GROUP="plugdev", MODE="0660"
#+end_example
