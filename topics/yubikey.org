:PROPERTIES:
:ID:       013f2a46-ac4a-4881-a25a-ef0beb9d8290
:END:
#+TITLE: Yubikey

* Docs

** PIV

+ [[https://developers.yubico.com/PIV/Guides/Certificate_authority.html][CA with a Yubikey]]

* Resources

** Deployments
+ [[https://cryptsus.com/blog/secure-openvpn-setup-X509-LDAP-yubikey-2fa-authentication-Ubuntu18.04.html][Secure OpenVPN Setup With X.509, LDAP and 2FA Yubikey Auth on Ubuntu]]


* Topics

** OpenVPN on PFSense with Yubikey Attestation Keys

S had no idea PIV could function as a "mediator" for CA ... So I guess PIV
wasn't a waste of time after all?

+ [[https://jamesog.net/2023/03/03/yubikey-as-an-ssh-certificate-authority/][YubiKey PIV (9c) as an SSH Certificate Authority]]
+ [[https://blog.ctis.me/2022/12/yubikey-piv-gpg/][yubikey deep dive on PKCS11, GPG, Certificate Deployment]]
+ [[https://smallstep.com/blog/access-your-homelab-anywhere/][Access your homelab with YubiKey (cert attest + YK C.A.) and mutual TLS (step-ca & caddy)]]

I got PFSense to validate the chain of trust up to the Yubico CA. It's not
really clear whether the OpenVPN handshake will really involve the
Yubikey. There can only be one SCDaemon client per smartcard AFAIK. So using GPG
for SSH while running the VPN looks like a no go (at least on one key), unless
perhaps the VPN service is started first and then ... nevermind.

I need to straighten out the routing/acl's, but this would greatly simplify
quite a few things. I was worried about cert auth & secrets, (which is partially
what pkcs12 is for). All in all, I still need ansible for most of this,
especially if I don't have a static IP -- it's funny how /your ISP will _still_
charge you for that/, but won't tell you everything is transparently routed IPv6
end-to-end. THAT IS BULLSHIT ACTUALLY.

* Issues

** PKCS#11

*** On Arch, the ssh-agent won't authorize the use of an added PKCS#11 key

Error message:

#+begin_example
Could not add card "/usr/lib/pkcs11/opensc-pkcs11.so": agent refused operation
#+end_example

Debug:

#+begin_example
debug2: process_request_identities: entering
debug3: identity_permitted: entering: key ECDSA comment "PIV AUTH pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key ECDSA comment "SIGN pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key ECDSA comment "KEY MAN pubkey", 1 socket bindings, 0 constraints
debug3: identity_permitted: entering: key RSA comment "CARD AUTH pubkey", 1 socket bindings, 0 constraints
debug2: process_request_identities: replying with 4 allowed of 4 available keys
debug1: process_message: socket 1 (fd=4) type 13
debug1: process_sign_request2: entering
debug1: process_sign
debug1: check ECDSA /gnu/store/rmyyf4b229cvgianq7biswfvxh85wsiv-opensc-0.22.0/lib/opensc-pkcs11.so PIV AUTH pubkey
debug1: pkcs11_check_obj_bool_attrib: provider "/gnu/store/rmyyf4b229cvgianq7biswfvxh85wsiv-opensc-0.22.0/lib/opensc-pkcs11.so" slot 0 object 94918503568288: attrib 514 = 0
C_Sign failed: 257
process_sign: ECDSA_sign returned 0
debug1: pkcs11_k11_free: parent 0x5653efac58c0 ptr (nil) idx 1
debug1: process_sign_request2: sshkey_sign: error in libcrypto
process_sign_request2: sshkey_sign: error in libcrypto
#+end_example


Potential causes:

+ bad configuration?
  - yubikey? ssh-config?
  -
+ suspend or OOM cause keys to be dumped from ssh-agent memory
  - reported on mac os mostly. however, this happens immediately for me
+ similar issues (from ~2017) recommend compiling openssh

**** The yubikey 4 doesn't permit 384-bit ecdsa keys in some PIV slots

+ on some slots? on any slots? we don't know.
+ i've seen it before ... but it's hard to remember all these specifics
+ the GUI application definitely lets you choose invalid keys
+ there is total storage for bits (can't have too many pesky RSA keys)
  - it's not clear whether

I wanted to have an extra RSA key in the =CARD AUTH= slot bc some devices like
ddwrt lack software/config/etc for elliptic crypto. The problem is that if you
misconfigure:

+ your =ssh-agent= will reject keys you add/remove and add again (confusing)
+ the yubikey allows you to delete certificates, but it doesn't so easily allow
  you to delete the keys.
+ it doesn't quite need all the keys deleted, but if there's a huge RSA key,
  then you may need to =ykman piv reset= the whole keycard.

**** .......... Yubikey PIV . . .

It seems like yubikey tries to keep their docs current, but holy shit it's hard
to assemble this info. Trying to plan this out has required me to keep between
6-10 yubikey doc URL's open in a tab group for about 6 weeks on/off bc I never
have the time to complete it.

+ I haven't talked to anyone who has configured one about this, though I have
  about 6 (all but two are far too old for everyday usage at this point).
  - honestly the hardest part was blindly stumbling through all the potential
    UI/UX workflows for using the key. it wasn't even the technical stuff, but
    trying to decide on:
    - GPG-Agent (+ passphrase mgmt for ssh)
    - or ecdsa-sk "resident keys" which I had never heard of
    - or PIV & pkcs11, which I also never heard of and found absolutely last.
  - and am i paranoid or is loading =ssh-agent= to be available prior to your to
    your windows manager shell a bad idea?
    - this is an easy question for someone to answer, but honestly it seems like
      something that most people won't advise/touch since it's incredibly
      inconvenient or difficult to handle.

+ So i've had to figure this all out myself and I usually prefer CMD-line first,
  especially when things are more complicated
  - .... at least until I need GUI to explore options and the yubikey GUI tools,
    while useful, don't map to the API.
  - both GUI and CMD-line can be a good way to survey the space

**** TLDR: A =yubico-lint= tool would help quite a bit

** Webauthn

*** Yubikey not accessible from browser when using webauthn/u2f
This may be a udev rule

+ [[https://blog.hansenpartnership.com/webauthn-in-linux-with-a-tpm-via-the-hid-gadget/][Webauthn in Linux with a TPM via the HID gadget]]

**** ANSWER: the =hidraw= devices are receiving permissions =600=
This requires a udev rule, but something is already assigning permission.

It hits this rule in =/run/current-system/profile/lib/udev/rules.d/=, but the Guix =operating-system= must be configured to pull this =./lib/udev/rules.d/...= rule from the == package

#+begin_example udev
KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0113|0114|0115|0116|0120|0200|0402|0403|0406|0407|0410", TAG+="uaccess", GROUP="plugdev", MODE="0660"
#+end_example
