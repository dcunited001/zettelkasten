:PROPERTIES:
:ID:       33cee19d-b67b-429c-963b-29209d0982bc
:END:
#+title: Orgmode

* Docs
** org-mode
** org-ref
** org-roam
** org-noter

* Resources

** Examples
+ [[dfeich-org-babel-examples]]
** Philosophy
+ Karl Voit [[https://karl-voit.at/tagstore/downloads/Voit2012b.pdf][TagTrees: Improving Personal Information Management Using
  Associative Navigation]] (thesis)

** Tools

*** Analysis

+ [[https://github.com/andersjohansson/orgqda][andersjohannson/orgqda]] quantatative data analysis on org files via metadata

* Org Roam

** Topics

*** Learning In Public
+ [[How I Take Notes with Org-roam][How I Take Notes With Org-Roam]] (from the package author)
+ [[https://notes.nicolevanderhoeven.com/Fork+My+Brain][Fork My Brain]]

* Topics
** Babel
+ [[https://howardism.org/Technical/Emacs/literate-programming-tutorial.html][Literate Devops]] (there is also a youtube video)


** Publishing
+ For a summary of options: =org-export-dispatch=
  - [[https://hieuphay.com/en/posts/2018-05-17_org-mode-to-latex-pdf/][Basic publishing config]] of org/latex for export
+ [[https://www.aidanscannell.com/post/org-mode-resume/][Creating a CV/Resume in Org-Mode using LaTeX Templates]] (aidanscannell)

** Org Drill

**** TODO move some of this into a slip

*** Example Configs
+ sacha
+ HaoZeke
+ blejdfist
*** Example Decks
+ [[https://github.com/jzsampaio/spaced-repetition-decks][jzsampaio/spaced-repitition-decks]]
+ [[https://github.com/jschaf/org-drill][jschaf/org-drill]]
*** Example captures

**** Capture Web/Snippets

#+begin_example emacs-lisp
;; from blejdfist/dotfiles
;; TODO append to org-capture-templates

          ("w"
           "Capture web snippet"
           entry
           (file+headline "my-facts.org" "Inbox")
           ,(concat "* Fact: '%:description'       :"
                    (format "%s" org-drill-question-tag)
                    ":\n:PROPERTIES:\n:DATE_ADDED: %u\n:SOURCE_URL: %c\n:END:\n\n%i\n%?\n")
           :empty-lines 1
           :immediate-finish t)

          ("f"
           "Capture normal snippet"
           entry
           (file+headline "my-facts.org" "Inbox")
           ,(concat "* Fact: '%f'       :"
                    (format "%s" org-drill-question-tag)
                    ":\n:PROPERTIES:\n:DATE_ADDED: %u\n:SOURCE_URL: [[%l][%f]]\n:END:\n\n%i\n%?\n")
           :empty-lines 1
           :immediate-finish t)

#+end_example

**** COMMENT Capture Bibtex

From [[https://fossies.org/linux/emacs/lisp/org/ol-bibtex.el][ol-bibtex]] (see [[https://www.andy-roberts.net/res/writing/latex/bibentries.pdf][bibtex manual]])

+ org-bibtex :: export the current file to a .bib
+ org-bibtex-check :: check for missing fields
+ org-bibtex-all :: fill in missing fields
+ org-bibtex-read :: read a bibtex entry after point

The following capture template sets up bibtex captures

#+begin_example emacs-lisp
(setq org-capture-templates
      '((?b "* READ %?\n\n%a\n\n%:author (%:year): %:title\n   \
         In %:journal, %:pages.")))
#+end_example

On this example bibtex entry (from the comments in the source link above)

#+begin_example
@Article{dolev83,
  author =    {Danny Dolev and Andrew C. Yao},
  title =     {On the security of public-key protocols},
  journal =   {IEEE Transaction on Information Theory},
  year =      1983,
  volume =    2,
  number =    29,
  pages =     {198--208},
  month =     {Mars}
}
#+end_example

Then =M-x org-capture= on this entry in the Bibtex DB will produce a buffer with
a bibtex format reference.

** Org Capture

+ [[file:/data/ecto/x.files/sachac/emacs/Sacha.org::*Templates][Sacha's capture templates]]
+ [[file:/data/ecto/x.files/blejdfist/dotfiles/.emacs.d/init.el][file:/data/ecto/x.files/blejdfist/dotfiles/.emacs.d/init.el]]:568

** Org Snippets
+ When is it more appropriate to use snippets vs capture templates:

#+begin_example
# zzamboni
./zzamboni/doom/snippets/org-mode/cq
./zzamboni/doom/snippets/org-mode/star
./zzamboni/doom/snippets/org-mode/htmldiv
./zzamboni/doom/snippets/org-mode/floatright
./zzamboni/doom/snippets/org-mode/graph
./zzamboni/doom/snippets/org-mode/leanpubquiz
./zzamboni/doom/snippets/org-mode/digraph
./zzamboni/doom/snippets/org-mode/frag
./zzamboni/doom/snippets/org-mode/elvish-literate-module
./zzamboni/doom/snippets/org-mode/plantuml
./zzamboni/doom/snippets/graphviz-dot-mode/htmlnode
./zzamboni/doom/snippets/graphviz-dot-mode/graph
./zzamboni/doom/snippets/graphviz-dot-mode/digraph

# HaoZeke
./HaoZeke/doom/snippets/org-mode/beamerSection
./HaoZeke/doom/snippets/org-mode/Anki Card
./HaoZeke/doom/snippets/org-mode/twoColbeamer
./HaoZeke/doom/snippets/org-mode/afterSaveHook
./HaoZeke/doom/snippets/org-mode/subfigure
./HaoZeke/doom/snippets/org-mode/eisvogelPdf
./HaoZeke/doom/snippets/org-mode/shebang
./HaoZeke/doom/snippets/org-mode/New Seminar
./HaoZeke/doom/snippets/org-mode/shortPdf
./HaoZeke/doom/snippets/org-mode/org-beamer Execushares
./HaoZeke/doom/snippets/org-mode/uniRprt
./HaoZeke/doom/snippets/org-mode/maximaMath
./HaoZeke/doom/snippets/org-mode/nowebCode
./HaoZeke/doom/snippets/org-mode/orgBeamerVerona
./HaoZeke/doom/snippets/org-mode/orgReRevPres
./HaoZeke/doom/snippets/org-mode/ReReveal Two Column
./HaoZeke/doom/snippets/org-mode/Orgmode R Analysis
./HaoZeke/doom/snippets/org-mode/orgBeamerMetropolis
./HaoZeke/doom/snippets/org-mode/short-review

# tecosaur
./tecosaur/doom/snippets/org-mode/header-arg-tangle
./tecosaur/doom/snippets/org-mode/python_src
./tecosaur/doom/snippets/org-mode/display-maths
./tecosaur/doom/snippets/org-mode/header-arg-noweb
./tecosaur/doom/snippets/org-mode/header-arg-dir
./tecosaur/doom/snippets/org-mode/header-arg-wrap
./tecosaur/doom/snippets/org-mode/elisp_src
./tecosaur/doom/snippets/org-mode/property-header-args
./tecosaur/doom/snippets/org-mode/inline-math
./tecosaur/doom/snippets/org-mode/src
./tecosaur/doom/snippets/org-mode/global-property
./tecosaur/doom/snippets/org-mode/header-arg-width
./tecosaur/doom/snippets/org-mode/header-arg-output
./tecosaur/doom/snippets/org-mode/__
./tecosaur/doom/snippets/org-mode/header-arg-eval
./tecosaur/doom/snippets/org-mode/header-arg-results
./tecosaur/doom/snippets/org-mode/header-arg-session
./tecosaur/doom/snippets/org-mode/header-arg-export
./tecosaur/doom/snippets/org-mode/header-arg-height
./tecosaur/doom/snippets/org-mode/header-arg-graphics
./tecosaur/doom/snippets/org-mode/header-arg-silent
./tecosaur/doom/snippets/org-mode/header-arg-file


#+end_example

*** File Templates

Not exactly org-mode, but related to snippets/captures

#+begin_example
./zzamboni/doom/doom.org:287
./zzamboni/doom/init.el:63
./HaoZeke/doom/docs/index.html:379
./HaoZeke/doom/docs/config.html:601
./HaoZeke/doom/config.org:220
./HaoZeke/doom/init.el:69
./dwt1/dotfiles/.config/doom/init.el:56
./benmezger/dotfiles/dot_doom.d/init.el:28
./isti115/dotfiles/.doom.d/init.el:53
./lccambiaghi/doom/init.el:51
./hlissner/doom/init.el:43
./sunnyhasija/doom/init.el:53
./Brettm12345/emacs/init.el:9
./tecosaur/doom/config.org:544
./tecosaur/doom/config.org:4955
./tecosaur/doom/config.org:4956
./tecosaur/doom/config.org:4957
#+end_example


* Issues

** Github Flavored Org-Mode

Github exports from Org to HTML using [[https://github.com/wallyqs/org-ruby][wallyqs/org-ruby]]

+ After processing to HTML, Github cleanses a ton of attributes from the
  DOM. This is in addition to the parameters passed to =org-ruby=

*** Images

#+begin_quote
GH added a width to the markdown container and images are decorated with
=max-width: 100%=, so this isn't as relevant anymore.
#+end_quote

Images can have their sizes fixed using =#+ATTR_HTML: :style width:800px;=

+ Whether this works continuously on Github is unclear.
+ Github cleanses the inline styles, so this needs to be =#+ATTR_HTML: :width
  800px= as a babel parameter (with no semicolon)

**** Images as code block results

See this [[https://stackoverflow.com/questions/61390513/how-can-i-add-attr-html-around-results-preview-output-of-source-block-in][s/o answer]]

+ Ensure =:results file= or something valid
+ Add =:exports both= or it won't render.

To limit the width (while making the image obvious as a link)

+ Name the code block
+ As mentioned above set =#+ATTR_HTML= on the code block and the formatting
  should apply in the results ...........

#+begin_quote
it definitely doesn't though. Only =#+ATTR_HTML: :width 800px= directly on the
result is doing this for me.
#+end_quote

I also tried moving the =#+ATTR_HTML: width 800px= above the result block. No
effect. However

**** Example

So here, only the =guix-graph-python-fido= gets the =width=800px= applied to the
HTML, as exported by =org-export=.

#+begin_example org
#+attr_html: :width 800px
#+name: guix-graph-python-yk
#+begin_src sh :file img/python-yubikey-manager.png :results file :exports both
# max depth:  -M 2
guix graph -M 2 python-yubikey-manager | dot -Tpng
#+end_src

#+RESULTS: guix-graph-python-yk
[[file:img/python-yubikey-manager.png]]

Check the reverse depedency graphs of the lower dependencies to see what else
might be affected. Builds for these packages should be tested.

#+name: guix-graph-python-fido
#+begin_src sh :file img/python-fido2.png :results file :exports both
guix graph --type=reverse-package python-fido2 | dot -Tpng
#+end_src

#+attr_html: :width 800px
#+RESULTS: guix-graph-python-fido
[[file:img/python-fido2.png]]
#+end_example


** Org-Babel & Tangling

This is a quick self-reference for me, while I'm focusing on this tangle-heavy project.

*** Testing Header Args

Test babel's perceived =header-args= for a block with:

#+begin_example emacs-lisp
(org-entry-get (point) "header-args" t)
#+end_example

*** Inherited Header Args

=:PROPERTIES: ... :END:= must start *exactly one new-line* after a headline

Using this under a headline will wipe out any existing header-args.

#+begin_example org
:PROPERTIES:
:header-args: ...
:END:
#+end_example

Must use =:header-args+:= instead.

*** =:mkdirp yes=

This does not work in a file-level #+PROPERTY header-args declaration.

*** =:comments link=

This is useful for detangling... but can't be used with =<<noweb-templates>>= AFAIK. I will simply tangle the blocks to individual files and assemble into a script somewhere else.

** Org Tables

See the [[https://orgmode.org/worg/org-tutorials/][automated regression tests for org-table]] (from worg table examples)

*** Referencing columns from other tables

+ See [[https://emacs.stackexchange.com/questions/66232/use-variable-in-reference-with-remote-in-org-table][this answer]] (and [[https://emacs.stackexchange.com/questions/10954/generate-populate-table-in-org-mode-using-org-lookup-all][this answer]])
+ see [[https://orgmode.org/worg/org-tutorials/org-lookups.html][worg table examples]]

*** Referencing emacs-lisp variables (global scope)

Use ='(identity foobar)= to get variables defined at a global level

*** Referencing org-babel blocks

Use the ='(org-sbe foobar)= macro to get variables defined by [the evaluation of
?] an org-babel block

#+begin_quote
Signature
(org-sbe SOURCE-BLOCK &rest VARIABLES)

Documentation
Return the results of calling SOURCE-BLOCK with VARIABLES.

Each element of VARIABLES should be a list of two elements: the
first element is the name of the variable and second element is a
string of its value.
#+end_quote

* Workflow Ideas
** Refile Lists
+ use a different charset for refile labels intended as inboxes?
  - i.e. '** 研究の受信' instead of '** Research Inbox'
  - prefixing with a letter from the alt-gr set may be easier
    * must be mnemonic & obvious

* org-noter

Emacs needs to build epdftools, which it will try to do on the first invocation of =org-noter=

+ Dependencies: libpng, zlib, poppler-glib, cask (should be covered by guix/straight)

** Resources

+ [[https://github.com/org-noter/org-noter/blob/master/docs/CUSTOMIZATIONS.org][Customizations]] (includes notes on usage)
