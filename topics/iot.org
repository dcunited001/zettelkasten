:PROPERTIES:
:ID:       708d6f59-64ad-473a-bfbb-58d663bde4f0
:END:
#+TITLE: IoT
#+DESCRIPTION:
#+TAGS:

* Roam
+ [[id:4630e006-124c-4b66-97ad-b35e9b29ae0a][Electronics]]
+ [[id:584f8339-a893-40ab-b808-7b4f7046313c][Hardware]]

* Docs

* Resources
** Wokwi
+  [[https://wokwi.com/][Device emulation in browser]] (see [[https://github.com/wokwi][github org]])

* Topics
** Device Emulation
*** [[https://github.com/wokwi/rp2040js][wokwi/rp2040js]]
Some interesting stuff in here:

+ [[https://github.com/wokwi/rp2040js/blob/main/src/rp2040.ts][./src/rp2040.ts]]: hardware description
+ [[https://github.com/wokwi/rp2040js/blob/main/test-utils/gdbclient.ts][./test-utils/gdbclient.ts]]: utils to script gdb on the emulator (see [[https://github.com/wokwi/rp2040js/tree/main/src/gdb][./src/gdb]])
+ [[https://github.com/wokwi/rp2040js/tree/main/src/peripherals][./src/peripherals]]: various internal/external device interfaces (and hardware
  protocols)

** Programming Paradigms & Patterns

*** "Hardware As Software"

This is a liberating understanding of hardware: it's just software whose code is
found in another form. The code can be imagined to be written in the language of
logic ... but it's really written in non-linear systems. Unfortunately that's
too complicated for hoo-mans to reason about.

#+begin_quote
It matters though: e.g. Ladder-Logic is definitely responding to the evolution
of non-linear systems. So there are a few more checks/balances you need in place
to ensure your control over & reaction to an industrial system enforces the
logic you need.

Hysteresis is one example of non-linear system where the state-space takes on
topological characteristics where the history of the system's states determine
the output of the system. (i.e. when you approach part of the state space from
some specific direction, new output states can emerge)
#+end_quote

Regardless, a simpler view concerns itself more with logic & clock rates. These
exercises should help:

+ Creating your own CPU
+ Implementing the USB protocol using a combination of hardware/software
+ Reading/writing from RAM to satisfy timing constraints
+ Clock syncronization for multi-hop I2C serial connections
+ Clock syncronization for a secondary chip to perform its functions

Most of these patterns are found elsewhere in software, as well:

+ Apple's GCD semaphores being one of them.
+ The syncronization of updates to shared memory among child processes. The
  startup & coordination of processes using shared memory.
+ Coordination of threads and locking memory/files.

* ARM



* ESP32

** Docs

+ Github Org for [[https://github.com/espressif][espressif]]
+ [[https://github.com/espressif/kicad-libraries][espressif/kicad-libraries]]

ESP32

+ [[https://docs.espressif.com/projects/esp-idf/en/stable/esp32/hw-reference/index.html][Hardware Reference on docs.Espressif.com]] with links to most current docs
+ [[https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_en.pdf][Tech Reference (v5.2)]]
  + Earlier [[https://cdn-shop.adafruit.com/product-files/3269/esp32_technical_reference_manual_en_0.pdf][Tech Reference (v1.0)]]
+ [[https://docs.espressif.com/projects/esp-hardware-design-guidelines/en/latest/esp32/index.html][Hardware Design Guidelines]]
+ [[https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf][Datasheet]]

ESP32-S3

+ [[https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_en.pdf][Tech Reference (v1.6)]]
+ [[https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf][Datasheet]] (v1.9)

*** ESP-IDF

+ [[https://visualgdb.com/documentation/espidf/][VisualGDB]] (req. Visual Studio)

* Raspberry Pi Pico

Microcontroller by Raspberry Pi

** Docs

[[https://www.raspberrypi.com/documentation/microcontrollers/pico-series.html][Pico docs]]

RP2040: dual ARM Cortex-M0+

+ [[https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf][Datasheet]]
+ [[https://datasheets.raspberrypi.com/rp2040/hardware-design-with-rp2040.pdf][Hardware Design]]

RP2350: Dual Cortex-M33 (ARM) or Hazard3 (RISC-V)

+ [[https://datasheets.raspberrypi.com/rp2350/rp2350-datasheet.pdf][Datasheet]]
+ [[https://datasheets.raspberrypi.com/rp2350/hardware-design-with-rp2350.pdf][Hardware Design]]
+ [[https://datasheets.raspberrypi.com/rp2350/rp2350-product-brief.pdf][Product Brief]]

** Resources

+ [[https://github.com/adafruit/Adafruit_Learning_System_Guides][Adafruit Learning System Guide]] Example applications using Raspberry Pi (C/C++/Python)
+ [[https://github.com/orgs/adafruit/repositories?type=all&q=sort%3Astars][Adafruit Github Repos (sorted by stars)]]

* Issues

* Sensors

** Gas

*** MQ

+ Sparkfun Project: [[https://learn.sparkfun.com/tutorials/hazardous-gas-monitor][Hazardous Gas Sensor]]
+ [[https://wiring.org.co/learning/basics/airqualitymq135.html][MQ-135 Wiring Example]] (fairly generic, though )

| [[https://www.sparkfun.com/smoke-sensor-mq-2.html][MQ-2]]   | Smoke & Combustible Gas       | [[https://cdn.sparkfun.com/assets/3/b/0/6/d/MQ-2.pdf][Datasheet]] |                                |
| [[https://www.sparkfun.com/alcohol-gas-sensor-mq-3.html][MQ-3]]   | Alcohol Gas                   | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-3 ver1.3 - Manual.pdf][Datasheet]] | includes breathalyzer project) |
| [[https://www.sparkfun.com/methane-cng-gas-sensor-mq-4.html][MQ-4]]   | Methanol CNG                  | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-4 Ver1.3 - Manual.pdf][Datasheet]] |                                |
| MQ-5   |                               | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-4 Ver1.3 - Manual.pdf][Datasheet]] |                                |
| [[https://www.sparkfun.com/lpg-gas-sensor-mq-6.html][MQ-6]]   | LPG (Liquified Petroleum Gas) | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-6 Ver1.3 - Manual.pdf][Datasheet]] | Butane, Propane                |
| [[https://www.sparkfun.com/carbon-monoxide-sensor-mq-7.html][MQ-7]]   | Carbon Monoxide               | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-7 Ver1.3 - Manual.pdf][Datasheet]] |                                |
| [[https://www.sparkfun.com/hydrogen-gas-sensor-mq-8.html][MQ-8]]   | Hydrogen Gas                  | [[https://cdn.sparkfun.com/datasheets/Sensors/Biometric/MQ-8 Ver1.3 - Manual.pdf][Datasheet]] |                                |
| MQ-9   |                               | [[https://www.haoyuelectronics.com/Attachment/MQ-9/MQ9.pdf][hwsensor]]  |                                |
| [[https://www.sparkfun.com/dual-gas-co-and-ch4-detection-sensor-mq-9b.html][MQ-9B]]  | Dual Gas                      | [[https://cdn.sparkfun.com/assets/d/f/5/e/2/MQ-9B_Ver1.4__-_Manual.pdf][Datasheet]] | Carbon Monoxide & Methane      |
| MQ-135 |                               |           |                                |

* HCI

** Display Drivers

*** PCD8544



** Displays

*** Sparkfun Nokia 5110 (+ driver unit)

+ Recognizeable from Nokia 3110/5110
+ Display Driver is [[https://cdn.sparkfun.com/assets/b/1/b/e/f/Nokia5110.pdf][Driver: PCD8544]] (the URL mentions Nokia 5110, but the manual
  doesn't mention Nokia)

#+begin_quote
These displays use SPI to communicate, 4 or 5 pins are required to interface.
#+end_quote

+ Adafruit driver: [[https://github.com/adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library][adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library]]
  - You'll also need [[https://github.com/adafruit/Adafruit-GFX-Library][adafruit/Adafruit-GFX-Library]], apparently
+ Adafruit circuit python: [[https://github.com/adafruit/Adafruit_CircuitPython_PCD8544][adafruit/Adafruit_CircuitPython_PCD8544]]
  - [[https://github.com/adafruit/Adafruit_CircuitPython_BusDevice][adafruit/Adafruit_CircuitPython_BusDevice]] this provides two helper classes
    for micropython that implement classes which wrap access to devices on Bus
    (to prevent concurrent requests.)
  - [[https://github.com/adafruit/circuitpython][adafruit/circuitpython]] (apparently not micropyton)
+ Arduino driver [[https://github.com/infusion/PCD8544][infusion/PCD8544]]
