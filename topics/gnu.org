:PROPERTIES:
:ID:       286b6d1b-362b-44fe-bb19-e0e78513d615
:END:
#+title: GNU

* Docs
+ [[https://www.gnu.org/manual/manual.html][GNU Motherlode]]

* FSF
+ [ ] XMPP server: jabber.member.fsf.org
+ [ ] Mailing lists:

* Social
** Usenet

*** Issues

**** [[https://www.emacswiki.org/emacs/GnusSync][Syncing Gnus]]: using gnus on two machines

**** Configuring Gnus/NNTP


** Mailing Lists

* Topics
** Docs
*** Printing
**** Make Small HTML Docs More Printable

More consolidated, less paper, smaller binders. It only makes sense for some
docs. Most projects provide the =texinfo= manuals, but it seems difficult to shim
the =@example= or =@lisp= to get simple syntax highlighting. This is completed in
the HTML manuals.

hide most of the chapters by adding inline ~style="{display:none;}"~ to print
chapters individually:

#+begin_src js
document.querySelectorAll('div.chapter').forEach(el => el.setAttribute('style','display:none;'))
// and do the same for TOC's top-level list elements
document.querySelectorAll('div.contents > ul > li').forEach(el => el.setAttribute('style','display:none;'))
#+end_src

Remove some of the extraneous web elements

#+begin_src js
document.querySelectorAll('.nav-panel').forEach(el => el.remove())
document.querySelectorAll('.header').forEach(el => el.remove())

// this usually contains the GNU GPLv2/3 License content, i think
document.querySelector('div.appendix').forEach(el => el.remove())
document.querySelector('div.unnumbered').forEach(el => el.remove())
document.querySelector('div.footnote').forEach(el => el.remove())

// to remove the unnumbered sections:
document.querySelectorAll('div.unnumbered').forEach(el => el.remove())

// unless removing the unnumbered sections:
//
// (i.e. to format concepts/functions/variables)

['.fn-letters-header-printindex',
 '.fn-letters-footer-printindex',
 '.vr-letters-header-printindex',
 '.vr-letters-footer-printindex']
document.querySelectorAll().forEach(el => el.remove())

document.querySelectorAll('tr > .entries-header-printindex').
    forEach(el => el.parentElement.remove())
#+end_src

I also customized some of the CSS to remove spacing. There were some other DOM
nodes I manually removed. Typically, I print two sheets per page, front/back, so
that 4 pages of the document can be visible at once, when in a notebook or
bound. The font here is a bit small.

#+begin_src css
h2 { margin: 0 }
h3 { margin: 0.3em 0 0.3em 0; }
h4 { margin: 0.2em 0 0.2em 0; }   /* margin: 1.8em 0 0.88em 0; */

html { background-color: white;  }

@media (min-width: 45em) {
  body { padding: .2em 1em .2em 1em; }     /* padding: .5em 2em 1em 2em; */
}

body {
  padding: .2em .2em;
  max-width: none;
  margin: 0;
  border: 0;
}

ol li { margin: 0.3em 0; } /* margin: .5em 0 .5em 1em; */
ul li { margin: .20em; } /* margin: .5em 0 .5em 1em; */

pre[class^="example"], pre[class^="lisp"], pre[class^="display"] {
  /* padding: 1em 2.5%; */
  padding: 0.3em 0.3em;
}

dt { margin: .2em 0; }  /* margin: .5em 0; */
dd { margin: .2em 0 0.2em 3%; }  /* margin: .5em 0 1em 3%; */
dd p { margin: .1em 0; } /* margin: .5em 0; */
dl { margin: 0.2em 0; } /* margin: 1em 0; */

hr { margin: 0.5em 0; } /* margin: 2em 0; */
p, pre { margin: 0.3em 0; }   /* margin: 1em 0; */

div[class*="example"], div[class*="lisp"], div[class*="display"], table.cartouche {
  /* margin: 1.2em 0 1.5em; */
  margin: 0.3em 0 0.3em;
}

/* Inline #4 | https://guix.gnu.org/manual/devel/en/guix.html#Home-Configuration */

code { line-height: 1.0em; }

/* code { line-height: 1.0em; color:purple; }
var.var { color: blueviolet} */

pre { line-height: 1.4em; }

/* manual.css | https://www.gnu.org/software/gnulib/manual.css */

p, pre, li, dt, dd, table, code, address { line-height: 1.0em; }  /* line-height: 1.5em; */

/* userContent.css | file:///home/dc/.mozilla/firefox/agb7m7p6.default-release/chrome/userContent.css */

domain("guix.gnu.org") {
  dl.def p code {
    /* color: orange; */
    color: purple;
  }
}

domain("guix.gnu.org") {
  dl.def dt span > code {
    /* color: orange; */
    color: green;
  }
}

/* manual.css | https://guix.gnu.org/themes/initial/css/manual.css */

div.settitle, div.top, div.chapter, div.section, div.subsection, div.subsubsection, div.unnumberedsec, div.unnumberedsubsec {
  font-size: 12px;   /* font-size: 18px; */
}

div.lisp > pre.lisp { padding: 0 0 0.3em; }   /* padding: 0 0 .4em; */
div.lisp, pre.lisp { margin: 0.1em 0 0.1em 0; }  /* margin: 1em 0 1em 3%; */
div.lisp { padding: 0.2em 0.5em .2em; }  /* padding: .8em 1.2em .4em; */

/* code.css | https://guix.gnu.org/themes/initial/css/code.css */

.symbol-definition + dd { padding: .1em 0% 0.1em 1%; }  /* padding: .5em 3% 1em 3%; */

  /* padding: .5em 0; */
.symbol-definition { padding: .1em 0; }
.lisp { line-height: 1.25em; }
samp { color: indianred; }

/*   background-color: papayawhip; */
pre.example { background-color: lavender; }
#+end_src

#+RESULTS:
#+begin_example
h2 { margin: 0 }
h3 { margin: 0.3em 0 0.3em 0; }
h4 { margin: 0.2em 0 0.2em 0; }   /* margin: 1.8em 0 0.88em 0; */

html { background-color: white;  }

@media (min-width: 45em) {
  body { padding: .2em 1em .2em 1em; }     /* padding: .5em 2em 1em 2em; */
}

body {
  padding: .2em .2em;
  max-width: none;
  margin: 0;
  border: 0;
}

ol li { margin: 0.3em 0; } /* margin: .5em 0 .5em 1em; */
ul li { margin: .20em; } /* margin: .5em 0 .5em 1em; */

pre[class^="example"], pre[class^="lisp"], pre[class^="display"] {
  /* padding: 1em 2.5%; */
  padding: 0.3em 0.3em;
}

dt { margin: .2em 0; }  /* margin: .5em 0; */
dd { margin: .2em 0 0.2em 3%; }  /* margin: .5em 0 1em 3%; */
dd p { margin: .1em 0; } /* margin: .5em 0; */
dl { margin: 0.2em 0; } /* margin: 1em 0; */

hr { margin: 0.5em 0; } /* margin: 2em 0; */
p, pre { margin: 0.3em 0; }   /* margin: 1em 0; */

div[class*="example"], div[class*="lisp"], div[class*="display"], table.cartouche {
  /* margin: 1.2em 0 1.5em; */
  margin: 0.3em 0 0.3em;
}

/* Inline #4 | https://guix.gnu.org/manual/devel/en/guix.html#Home-Configuration */

code { line-height: 1.0em; }

/* code { line-height: 1.0em; color:purple; }
var.var { color: blueviolet} */

pre { line-height: 1.4em; }

/* manual.css | https://www.gnu.org/software/gnulib/manual.css */

p, pre, li, dt, dd, table, code, address { line-height: 1.0em; }  /* line-height: 1.5em; */

/* userContent.css | file:///home/dc/.mozilla/firefox/agb7m7p6.default-release/chrome/userContent.css */

domain("guix.gnu.org") {
  dl.def p code {
    /* color: orange; */
    color: purple;
  }
}

domain("guix.gnu.org") {
  dl.def dt span > code {
    /* color: orange; */
    color: green;
  }
}

/* manual.css | https://guix.gnu.org/themes/initial/css/manual.css */

div.settitle, div.top, div.chapter, div.section, div.subsection, div.subsubsection, div.unnumberedsec, div.unnumberedsubsec {
  font-size: 12px;   /* font-size: 18px; */
}

div.lisp > pre.lisp { padding: 0 0 0.3em; }   /* padding: 0 0 .4em; */
div.lisp, pre.lisp { margin: 0.1em 0 0.1em 0; }  /* margin: 1em 0 1em 3%; */
div.lisp { padding: 0.2em 0.5em .2em; }  /* padding: .8em 1.2em .4em; */

/* code.css | https://guix.gnu.org/themes/initial/css/code.css */

.symbol-definition + dd { padding: .1em 0% 0.1em 1%; }  /* padding: .5em 3% 1em 3%; */

  /* padding: .5em 0; */
.symbol-definition { padding: .1em 0; }
.lisp { line-height: 1.25em; }
samp { color: indianred; }

/*   background-color: papayawhip; */
pre.example { background-color: lavender; }
#+end_example

**** Tweaks on MathJAX

Save your highlighters, ride ya readermode.

#+begin_src js
mj = Array.from(document.querySelectorAll("span[id^=MathJax-Element-]"));

// this fails content security policy
mj.forEach(el => el.setAttribute("style", "color:blueViolet"))

// this doesn't
mj.forEach(el => el.setAttribute("class", 'foob'))
#+end_src

Now make simple changes to foo styling which do not character sizes/positions.

#+begin_src css
span.foob { color:darkgreen; background-color:blanchedAlmond; border-radius:0.4em; }
#+end_src

**** Make manpage HTML exports more printable

Can render the page directly to the browser with =man -H= or to pdf with =man
-Tpdf=. It's easier with a file. If you want to use emacs/etc to quickly edit,
save it to =htmlout=$(mktemp)=.

Generate with the following, which eliminates some quick stuff.

#+begin_src sh
manhtml() {
    [[ -z "$1" ]] && echo "Requires man page name" && return 1
    man -Thtml "$1" \
        | sed -e 's/margin-top: 1em//g' \
        | sed -E 's/(<br>|<hr>)//g' \
        | sed -E 's/<a href="#.*>//g'
}
#+end_src

Then add the following rules to the inline CSS:

#+begin_src css
h2 { font-size: 1.0em; }
h1 { font-size: 1.2em; }
h2 { margin: 0.2em; }
h3 { font-size: 0.9em; margin: 0.1em; }
b { color: darkgreen; }
i { color: indigo; }
p { font-size: 0.9em; line-height: 1.1em; }
#+end_src

Edit the DOM a bit and print

* Projects

** GNU Plot

*** Docs
+ cheatsheet

*** Resources
+ [[Org-babel-gnuplot][org-babel-gnuplot]]
+ [[https://github.com/dfeich/org-babel-examples][dfeich/org-babel-examples]]

** GNU Parallels

*** Docs

+ [[https://doi.org/10.5281/zenodo.1146014][GNU Parallel 2018: doi.org/10.5281/zenodo.1146014]]
+ [[https://www.gnu.org/software/parallel/parallel.html#examples][Variables doc]]
+ [[https://www.gnu.org/software/parallel/parallel_options_map.pdf][Relations map for parallel options]]
  - pointers to other PDFs via [[https://aur.archlinux.org/cgit/aur.git/tree/parallel-skip-rst-pdf-generation.patch?h=parallel-git][AUR package]]. They're these [[https://git.savannah.gnu.org/cgit/parallel.git/tree/src][.pod files]] that
    get built by CMake

**** Variables

**** Quoting

+ [[https://superuser.com/questions/1674776/passing-a-piped-variable-to-a-sub-command-called-within-gnu-parallel][Passing pipped variable to a subcommand called within GNU Parallel]]

*** Issues



**** Redirection

Can use =-a <(fdsa)= as an extra input source?

**** Heredoc

**** Awk

From [[https://stackoverflow.com/a/21549836][s/o on Cat with Heredoc]]

parallel requires =-a arg=. see [[https://www.highonscience.com/blog/2021/03/21/parallel-grep/][Parallel Grep and Awk]]

#+begin_src sh
awkp=$(cat <<EOF
BEGIN { count=0 }
{print $0}
{++count}
EOF
    )

# (count % MYMOD == 0) { print $1 count }

# file descriptors need something extra
# parallel 'awk -f <(echo $awkp) -v MYMOD=2' ::: foo bar baz qux ::: 1 2 3 4 5 6

myawk='{print $0}'
parallel "echo awk \"$my_awk\"" ::: foo bar baz qux ::: 1 2 3 4 5 6
# parallel 'echo {} | echo awk -v MYMOD=2 "$awkp"' ::: foo bar baz qux ::: 1 2 3 4 5 6

# parallel 'echo {.} | awk -v MYMOD=2 "$awkp"' ::: foo bar baz qux ::: 1 2 3 4 5 6
# parallel "awk -v MYMOD=2 '$awkp'" ::: foo bar baz qux ::: 1 2 3 4 5 6

#+end_src

** GNU [[https://www.gnu.org/software/recutils/][Recutils]]

This can be used to filter =guix package -s= output and other guix commands.

#+begin_quote
Recutils is a collection of tools, like recfmt, recsel, and rec2csv used to work
with recfile databases. Various software libraries support the format.
#+end_quote

Example: search guix for all =emacs-org= packages.

#+begin_src shell
guix search emacs-org |\
    recsel -p name |\
    cut -d' ' -f2 |\
    sort | uniq | head -n5
#+end_src

#+RESULTS:
|                  |
| emacs-org        |
| emacs-org2web    |
| emacs-orgalist   |
| emacs-org-appear |

*** Docs
+ [[https://www.gnu.org/software/recutils/manual/][manual]]

*** Resources
+ [[https://gist.github.com/gmolveau/6be062d9b9005cf985cda98dabdf0baa][tutorial]]
+ [[https://github.com/maninya/python-recutils][python bindings]] (2015)

*** Topics

**** To S-Expression

Early on, when technical data was digitized, it was fairly common to put data it
into s-expressions (electronics)

**** Guix

***** Convert to Flat YAML

okay...

#+begin_src sh :results output
guix package -s "emacs-ob-.*" |\
    recsel -p name,version |\
    sed -e 's/^$/---/' |\
    yq -sy '.[] | @text "\(.name) \(.version)"' |\
    sed -e 's/--- //'
#+end_src

#+RESULTS:
: emacs-ob-sclang 0.1-1.cd3f3c8
: emacs-ob-restclient 0.02-3.1b021ce
: emacs-ob-ipython 20180224
: emacs-ob-go 0.02-0.2067ed5
: emacs-ob-erlang 20210321-1.a029c23
: emacs-ob-elm 0.0-0.d3a9fbc
: emacs-ob-async 1.0.0
: emacs-ob-asymptote 1.0
: ...

hmmm... just generally easier with JSON

#+begin_src sh
guix package -s "emacs-ob-.*" |\
    recsel -p name,version |\
    recfmt 'name: {{name}}
version: {{version}}
---
'
#+end_src

#+RESULTS:
| name:    | emacs-ob-sclang     |
| version: | 0.1-1.cd3f3c8       |
| ---      |                     |
| name:    | emacs-ob-restclient |
| version: | 0.02-3.1b021ce      |
| ---      |                     |
| name:    | emacs-ob-ipython    |
| version: | 20180224            |
| ---      |                     |
| name:    | emacs-ob-go         |
| version: | 0.02-0.2067ed5      |
| ---      |                     |
| name:    | emacs-ob-erlang     |
| version: | 20210321-1.a029c23  |
| ---      |                     |
| name:    | emacs-ob-elm        |
| version: | 0.0-0.d3a9fbc       |
| ---      |                     |
| name:    | emacs-ob-async      |
| version: | 1.0.0               |
| ---      |                     |
| name:    | emacs-ob-asymptote  |
| version: | 1.0                 |
| ---      |                     |


**** Commands

Manage

| Type      | Command | Description                                                      |
|-----------+---------+------------------------------------------------------------------|
| Create    | recins  | Insert new records in a rec database                             |
| Read      | recsel  | Select and print rec data                                        |
| Update    | recset  | Alter or delete fields in records                                |
| Delete    | recdel  | Remove (or comment out) records from a rec file                  |
|-----------+---------+------------------------------------------------------------------|
| Transform | recfmt  | Apply a template to records read from standard input             |
| Meta      | recinf  | Print information about the types of records stored in the input |
|-----------+---------+------------------------------------------------------------------|
| Manage    | recfix  | Check and fix rec files                                          |
| Convert   | rec2csv | Convert rec into data csv data                                   |
| Convert   | csv2rec | Convert csv data into rec data                                   |


**** Emacs: rec-mode and ob-rec

A separate project contains =rec-mode.el= and =ob-rec.el=.

** Gnu Radio
*** Docs

+ Beginner Tutorials:
  + [[https://wiki.gnuradio.org/index.php?title=InstallingGR][Installing GR]] (probably where one should start)
  + [[https://wiki.gnuradio.org/index.php?title=Python_Block_with_Vectors][Python Block with Vectors]] (you get python for free)
+ [[https://wiki.gnuradio.org/index.php?title=Category:Guided_Tutorials][Guided Tutorials]]: [[https://wiki.gnuradio.org/index.php?title=Guided_Tutorial_GRC#My_First_Flowgraph][Guided Tutorial: GRC]]: includes a overview of flowcharts,
  which may be good code to see
+ [[https://wiki.gnuradio.org/index.php/Understanding_ZMQ_Blocks][Understanding ZMQ Blocks]]

*** Resources


* Info
