:PROPERTIES:
:ID:       265a53db-5aac-4be0-9395-85e02027e512
:END:
#+TITLE: PFSense and OPNSense
#+DESCRIPTION: The Firewall
#+TAGS:

Being kind of an idiot ... it's a bit hard to distinguish these two things. The
commit frequency charts are misleading. They look about the same ... but when
the red correlates strongly to the green -- that's a refactor. You can't scale
the Github charts, so it's a bit hard to judge the activity on either.

Hardened BSD Kernel sounds sexy and all, but ... migrate my firewall for a
plugin? Nope. Still, this is perhaps just a [[https://github.com/zerotier/ZeroTierOne/blob/dev/LICENSE.txt][sad, sad casualty of licensing]] (BSL).

By the way, Github, a more useful chart on some projects would identify the
anti-correlation between positive/negative Commit SLOC and then subtract the
scaled magnitude of SLOC anticorrelation from the signal. The difficulties:
finding a window function to run on any arbitrary repository and also deciding
how to renormalize the anticorrelated signal. I think that's what
anticorrelation is for. Not really a practical feature though...

* PFSense
** Docs
+ [[https://github.com/pfsense/pfsense][pfsense/pfsense]]
+ [[github:pfsense/FreeBSD-Ports][pfsense/FreeBSD-Ports]]

*** Package Development

+ [[https://docs.netgate.com/pfsense/en/latest/development/develop-packages.html][Developing Packages]]
+ [[Package Port Directory Structure][Package Port Directory Structure]]
+ [[https://docs.netgate.com/pfsense/en/latest/development/package-port-list.html][FreeBSD Ports Used For Packages]]
+ [[https://docs.netgate.com/pfsense/en/latest/development/compile-software.html][Compiling Software On The Firewall]] (don't)
+ [[https://docs.netgate.com/pfsense/en/latest/development/branches.html][Development Branch Names]]

*** Systems

+ [[https://github.com/pfsense/FreeBSD-ports/blob/devel/GIDs][GIDs]] and [[https://github.com/pfsense/FreeBSD-ports/blob/devel/UIDs][UIDs]] (from packages)

** Resources

+ [[https://www.openbsdhandbook.com/pf/cheat_sheet/][pfctl cheatsheet]]

*** Automation

+ PFSensible [[https://github.com/pfsensible/core/tree/master/examples][examples]]
+ PFSensible [[https://github.com/pfsensible/core/blob/master/openvpn.yml][openvpn.yml]]


*** BSD
+ [[https://optionkey.blogspot.com/2022/03/restore-pfsense-backup-using-cli.html][Restore a PFSense Backup using the CLI]]

** Topics

*** Terminal

Setting your terminal to something funny like =TERM=alacritty= before =ssh= will
prevent you from editing files ... though I'm not sure why I set my term to
that.

*** SR-IOV

Apparently this isn't that great for latency on the firewall, but it will turn two
nic's into four or more. [[https://forum.netgate.com/topic/120383/pfsense-with-sr-iov-virtual-function-nic/3][PFsense with SR-IOV]]

*** Automation

**** Network Automation Challenges

in addition to the typical challenges with network automation, you also need to
deal with:

- ensuring firewall rules are in order. this usually means that you choose GUI
  or scripting. if you use both, you need to plan out how you update and backup
  often.
- knowing which configs contain secrets
- detecting drift in your firewall's configuration state
- flushing PFSense's firewall states during deployment

***** Deterministic In-Place Updates Firewall Rules

if you want to replace firewall rules, you may need to hash a unique set of
attributes with yaml/jinja.

#+begin_src yaml
tasks:
  - name: the tracker is usually set to a timestamp
    pfsensible.core.pfsense_aggregate:
      aggregated_rules:
        - tracker: "{{ "uniq-string-from-rule-propertiees" | hash("SHA1") }}"
```
#+end_src

Tthe point is to track firewall rules deployed on devices. This is difficult on
any system/network, but particularly with iptables. The above should work with
ansible/pfsense, but is probably unnecessary if you choose between GUI config or
plain-text config. it also may be overkill to use ansible for firewall rules,
but that's one area resulting in the most GUI-related overhead for me.

also, this paper discusses a non-cryptographic hashing algorithm used to track
packets related to a session

[[https://doi.org/10.1109/TrustCom.2014.20][Stateful Mechanism for the Tree-Rule Firewall]]

it's more of a data structure though and only tangentially related. the paper
gives you an idea of how stateful firewall rules track sessions and where the
problems are. Because of the domain similarity, the data structures are thus
similar in nature to what would need to be hashed for firewall rule/sets to be
tracked across updates with Ansible. it's paywalled on IEEE, but can actually
read it on [[https://www.researchgate.net/publication/266319157_A_Stateful_Mechanism_for_the_Tree-Rule_Firewall][ResearchGate]]

**** Ansible Collections

Yay [[https://galaxy.ansible.com/pfsensible/core][declarative configuration]]

.... i can haz declarative configuration? Well technically it's just XML, but
you don't see any that in the manual because too risky for business model. So
now it's realllly risky. It beats the hell out of MikroTik or so I've heard, but
if you're willing to reconsider, I'd like to introduce you to my friends
=Ctrl-F= and =libxml2=.

Sorry if my criticism sounds harsh, but trying to manage the firewall is verrry
slow in the GUI. Also, my working memory does not get along with 24 browser
tabs. Nice GUI though. The features are nice, but it's hard to experiment with
them while controlling variables if you can't diff configs, grok config
changesets or script things easily.

I guess I just don't know enough BSD. I did customize the shell prompt though.

***** Automating the PFSense FreeBSD

FreeBSD can be automated using some of the generic tools Ansible provides.

None of these BSD systems are going to automate FreeBSD package
installation. Pfsensible & collection_opnsense will allow you to add packages
their builds support, but not those out of tree. you could theoretically use
Ansible to do this -- [[https://github.com/pfsensible/core/blob/master/examples/roles/pfsense_setup/tasks/main.yml][using file/copy and other basics to manage configs]],
but if you don't already know this, you're probably in over your head for
package configuration. you need to ensure that FreeBSD packages are absolutely
devoid of dependencies unless you are intermediate/advanced with BSD: if you're
lucky, your system will outright crash; otherwise, you may deal with vague
errors. and you won't get help with it.

*** FreeBSD Packages

**** Quirks

+ Requires login/logout after installing for bin's to be found in path.
+ Enable emacs shortcuts in terminal by using =sh=, but I'd rather not.

**** GNU Screen

=pkg install screen=

This one is recommended by the docs as an example ... it has no dependencies.


**** Pkg Repos

Man is not included (is this foreshadowing?)

***** TLDR:

I should probably finish reading the cheatsheet: =pkg config REPOS_DIR=

#+begin_quote
/etc/pkg/
/usr/local/etc/pkg/repos/
#+end_quote

In which case, we see the content

#+begin_quote
FreeBSD: { enabled: no }

pfSense-core: {
  url: "pkg+https://pkg.pfsense.org/pfSense_v2_6_0_amd64-core",
  mirror_type: "srv",
  signature_type: "fingerprints",
  fingerprints: "/usr/local/share/pfSense/keys/pkg",
  enabled: yes
}

pfSense: {
  url: "pkg+https://pkg.pfsense.org/pfSense_v2_6_0_amd64-pfSense_v2_6_0",
  mirror_type: "srv",
  signature_type: "fingerprints",
  fingerprints: "/usr/local/share/pfSense/keys/pkg",
  enabled: yes
}
#+end_quote


***** Adding the pfsense/FreeBSD-Ports repo

One potential solution is here [[https://forum.netgate.com/topic/130832/solution-posted-dns-tls-getdns-stubby-from-pfsense-freebsd-ports][getdns-stubby-from-pfsense-freebsd-ports]] (2018)
but it's hard to validate whether running stuff like =pkg install git= will
result in a stable system. The package dependencies seem to match the system
... for now, but they definitely overlap.

|------------------+---------------------------+----------|
| name             | origin                    |  version |
|------------------+---------------------------+----------|
| expat            | textproc/expat2           |    2.4.1 |
| p5-IO-Socket-SSL | security/p5-IO-Socket-SSL |    2.072 |
| p5-Authen-SASL   | security/p5-Authen-SASL   |   2.16_1 |
| perl5            | lang/perl5.32             | 5.32.1_1 |
| p5-Error         | lang/p5-Error             |  0.17029 |
| curl             | ftp/curl                  |   7.80.0 |
| pcre2            | devel/pcre2               |    10.39 |
| gettext-runtime  | devel/gettext-runtime     |    0.21" |
|------------------+---------------------------+----------|

... it seems that =pkg install git= is safe-ish: [[https://docs.netgate.com/pfsense/en/latest/development/gitsync.html?highlight=pkg%20git#troubleshooting][Using gitsync [to update PHP
files w/o Binary Updates)]]

***** Trying to find pkg.conf

There is =/etc/pkg/FreeBSD.conf=, but it looks like nothing's there and it tells
you to enable the wrong repository.

#+begin_quote
[2.6.0-RELEASE][user@pf.com]/root: find /etc/ -type f -exec grep -re  "FreeBSD-ports" \{\} +

/etc/inc/pkg-utils.inc:             "https://github.com/pfsense/FreeBSD-ports/commits/devel/" .

[2.6.0-RELEASE][user@pf.com]/root: find /usr/local/etc/ -name "*conf" -type f -exec grep -re "FreeBSD-ports" \{\} +

[2.6.0-RELEASE][user@pf.com]/root: find /usr/local/etc/ -type f -exec grep -re "FreeBSD-ports" \{\} +

[2.6.0-RELEASE][user@pf.com]/root: find /etc/ -type f -exec grep -re "FreeBSD-ports" \{\} +

/etc/inc/pkg-utils.inc:             "https://github.com/pfsense/FreeBSD-ports/commits/devel/" .
#+end_quote

Tracing the =pkg-utils.inc= leads to these maintainance scripts, so it looks
like I already have the repository, but it's just not enabled by a config
file. I already tried searching =/tmp= ... since I've scripted DDWRT by =nvram=
before I know how runtime state is setup there.

#+begin_quote
[2.6.0-RELEASE][user@pf.com]/root: find /etc/ -type f -exec grep -re "pkg-utils.inc" \{\} +

/etc/rc.update_pkg_metadata:    && /usr/local/bin/php -r 'require_once("pkg-utils.inc");update_repos();' \
/etc/rc.stop_packages:require_once("pkg-utils.inc");
/etc/rc.start_packages:require_once("pkg-utils.inc");
/etc/inc/pkg-utils.inc: * pkg-utils.inc
/etc/inc/pkg-utils.inc: require_once("pkg-utils.inc");
/etc/inc/system.inc:    require_once("pkg-utils.inc");
/etc/phpshellsessions/uninstallpkg:require_once("pkg-utils.inc");
/etc/phpshellsessions/installpkg:require_once("pkg-utils.inc");
/etc/phpshellsessions/gitsync:  require_once("pkg-utils.inc");
/etc/rc.packages:require_once("pkg-utils.inc");
/etc/rc.initial.defaults:require_once("pkg-utils.inc");
/etc/mtree/etc.dist:    pkg-utils.inc \
/etc/rc.bootup:require_once("pkg-utils.inc");
/etc/rc.package_reinstall_all:require_once("pkg-utils.inc");
#+end_quote


*** ZeroTier

Zerotier has no runtime dependencies which is fantastic. It only has the
buildtime deps: =as= for gas and =gmake= for making things.

+ [[https://docs.opnsense.org/manual/how-tos/zerotier.html][OPNSense: ZeroTier Configuration]]
+ [[https://docs.zerotier.com/devices/opnsense/][ZeroTier: Configuration for OPNSense]]

**** Update to the beta pfSense

Start by upgrading to the devel channel of pfsense, which is =12.7-beta= for
me. This should avoid kernel mismatch problems when installing the latest
zerotier packages.

When the system comes back online, you may need to update/refresh some packages
and restart some services. DNS and the WebConfigurator were not running properly
at first.

**** Manual install

Then install these. The grungier the system, the more essential =screen= is...

#+begin_src shell
pkg install screen
pkg install git
#+end_src

Then add the FreeBSD package tree: Edit the
=/usr/local/etc/pkg/repos/{FreeBSD,pfSense}.conf= files and change ={ enabled no
}= to =yes=.

+Run pkg upgrade and reboot+ nevermind: don't do this unless necessary. it wants
to upgrade too many packages.

Run =pkg install zerotier= and if you're running on pfSense 12.7 it will still
complain about differences in the kernel version, but they will be minimal. You
should see output like the following.

This apparently includes instructions on how to start zerotier as a service,
which was one point where I was a bit confused.

#+begin_quote
To ignore this error set IGNORE_OSVERSION=yes
- package: 1400090
- running kernel: 1400085
Ignore the mismatch and continue? [y/N]: y
Processing entries: 100%
FreeBSD repository update completed. 32316 packages processed.
Updating pfSense-core repository catalogue...
pfSense-core repository is up to date.
Updating pfSense repository catalogue...
pfSense repository is up to date.
All repositories are up to date.
The following 1 package(s) will be affected (of 0 checked):

New packages to be INSTALLED:
        zerotier: 1.10.6 [FreeBSD]

Number of packages to be installed: 1

The process will require 2 MiB more space.
551 KiB to be downloaded.

Proceed with this action? [y/N]: y
[1/1] Fetching zerotier-1.10.6.pkg: 100%  551 KiB 564.2kB/s    00:01
Checking integrity... done (0 conflicting)
[1/1] Installing zerotier-1.10.6...
[1/1] Extracting zerotier-1.10.6: 100%
=====
Message from zerotier-1.10.6:

--
Note that ZeroTier 1.4.6+ has a *new* license prohibiting commercial SaaS
style usage, as well as excluding government organisations. Read the
license details carefully to ensure your compliance.

First start the zerotier service:

service zerotier start

To connect to a zerotier network:

zerotier-cli join <network>

If you are running other daemons or require firewall rules to depend on
zerotier interfaces being available at startup, you may need to enable
the following sysctl in /etc/sysctl.conf:

net.link.tap.up_on_open=1

This avoids a race condition where zerotier interfaces are created, but
not up, prior to firewalls and services trying to use them.

You can place optional configuration in /var/db/zerotier-one/local.conf
as required, see documentation at https://www.zerotier.com/manual.shtml

If your system boots from DHCP (such as a laptop), there is a new rc.conf
flag that will require that system startup will wait until the zerotier
network is established before proceeding. Note that this flag *does not*
work for systems configured with statically assigned IP addresses, and
these will hang indefinitely due to an irreducible loop in rc(8) startup
files. This flag is disabled by default.
#+end_quote

**** Testing the service

+ Config??
+ run =zerotier -d=

**** Binding the service to an interface

**** Autostarting the service


**** Other Resources

+ [[https://forum-netgate-com.translate.goog/topic/178751/pfsense-plus-23-01%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEzerotier?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en-US&_x_tr_hist=true][Forum Post on installing ZeroTier from pkg.freebsd.org]] ... but how do I get it
  from the pfsense/FreeBSD-ports repository? They say [[https://forum.netgate.com/topic/174951/pfsense-pkg-from-freebsd-ports-or-repo/11][don't do it]], but I already
  figured that out.

*** IPSec Tunnels

Interesting things can be done with these, but the routing/firewalls can be complicated.

It may be smart to configure IPSec-over-ZeroTier. Maybe unnecessary and it maybe
won't help if the ZT endpoints are vulnerable.

** Issues

*** ZeroTier on PFSense

+ [[https://discuss.zerotier.com/t/sharing-my-experience-to-setup-zerotier-in-opnsense-and-pfsense-with-ospf/6740/17][Sharing my experience to setup Zerotier in OPNsense and PFsense with OSPF]]
+ [[https://forum.netgate.com/topic/173470/tailscale-package-now-available-on-pfsense-software][Tailscale Package Now Available on pfSense Router]] But no ZeroTier... ?
  Tailscale isn't revolutionary, it's likely brittle since it's not "the thing
  in itself."

[[https://forum.netgate.com/topic/91683/zerotier-one-as-a-package-100usd][$1000+ Bounty Stands For ZeroTier GUI in PFSense]] (see thread)

...? is this legit? a few lines of PHP?

**** Old Notes

Now that I'm really getting into this ... it would be difficult to control
access if ZeroTier isn't coming through the front door.

According to [[https://www.reddit.com/r/PFSENSE/comments/tskpkl/official_zerotier_pfsense_package/][r/PFSense]], this feature isn't being implemented, while being
available on OPNSense. There are mentions of [[https://github.com/ChanceM/pfSense-pkg-zerotier][ChanceM/pfSense-pkg-zerotier]], a
custom package implementing the FreeBSD ZeroTier 1.8.6, but it doesn't seem to
be very active.

However, there are [[https://github.com/search?q=repo%3Apfsense%2FFreeBSD-ports+zerotier&type=commits][recent commits]] to PFSense indicating the package is coming
(1.10+), but it requires installing directly from the [[https://github.com/pfsense/FreeBSD-ports/blob/main/net/zerotier/Makefile][FreeBSD "ports tree"]]. The
main difference here is that the custom package modifies the PHP and installs as
a bundle ... while also being incompatible with the fresh ports version.

The OPNSense package, which sources an older ZeroTier package comes with this
[[https://github.com/opnsense/ports/blob/87bbf9d6d93faceee98816de7f86989405f323d5/net/zerotier/pkg-message#L16-L23][important caveat]] addressing a potential race condition, which is mentioned as a
problem for the custom PFSense package. The following "sysctl" should be enabled
=net.link.tap.up_on_open=1= to address the problem (on OPNSense)


* OPNSense

** Docs

** Resources


*** Automation

[[https://github.com/ansibleguy/collection_opnsense][ansibleguy/collection_opnsense]]

There are basically no downloads. That's sad. However, it looks like this
collection is actually pretty good and, because of the OPNSense API, would adopt
features more quickly.

*** ZeroTier

OPNSense has a native plugin

+ [[https://docs.opnsense.org/manual/how-tos/zerotier.html][OPNSense: ZeroTier Configuration]]
+ [[https://docs.zerotier.com/devices/opnsense/][ZeroTier: Configuration for OPNSense]]

** Topics

*** Backups

**** Restoring to new hardware

See [[https://homenetworkguy.com/how-to/migrate-opnsense-to-new-hardware/][Migrate OPNsense to New Hardware using Config Importer]]


+ Also you can [[https://www.reddit.com/r/OPNsenseFirewall/comments/y5v40d/how_can_i_setup_opnsense_in_a_vm_and_then/isn82zt/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][set up HA for another node]] and sync config over
+ If moving from VM to Hardware, you can pass through real disk/network devices,
  which will make things easier. One issue is the interface naming.

*** DHCP and Static DNS Registration

**** Unbound + ISC

[[http://reddit.com/r/opnsense/comments/1ij3qsq/automatic_dhcp_client_dns_registration/][Automatic DHCP client DNS registration]]

+ Set "Flush DNS Cache during reload"
+ Set "Register DHCP Leases"
+ Check domain set in "System: General". Override in "Unbound General"
+ Maybe set up MAC Reservations
  - Maybe ARP static entries... though this doesn't help much and is maybe
    worse. Can definitely be difficult to maintain and you need physical
    security, though layers 3-5,7 should have independent security perimeters
    (encryption, permissions, logging, and/or logshipping + event hooks)

*** Installation/Bootstrap

+ [[https://github.com/opnsense/tools/tree/master/config][default configs]]

  The [[https://github.com/opnsense/update/blob/master/src/bootstrap/opnsense-bootstrap.sh.in][bootstrap script]] will keep config in tact unless

  + -b :: set for a bare install
  + -f :: set for factory reset
** Issues


* OPNsense vs PFsense

** API

OPNsense natively supports an API. It's likely that no version of PFSense before
v3.0 will support an API (or other features), though this is personal
speculation. It's unclear when this would occur.

** Firewall

*** Floating Rules

Both support floating rules

**** TODO note differences in both

*** Identifying and Ordering Rules

For both, you have to ensure you always you set this to a deterministically
generated ID.

+ OPNsense provides a =uuid= for firewall rules.
+ To get the same functionality, PFsensible would hook into the firewall
  =tracker= field.

** Automation

*** ansibleguy/collection_opnsense

**** Quirks

+ Firewall rule interfaces must match the BSD interface name
+ Firewall rule ports cannot be aliases

*** pfsensible/core

**** Interface

This has worked fairly well, though my configuration wasn't too advanced. One
issue is in how pfsensible interfaces with PFsense:

#+begin_quote
Modules in the collection work by editing /cf/conf/config.xml using
xml.etree.ElementTree, then calling the appropriate PHP update function via the
pfSense PHP developer shell.

Some formatting is lost, and CDATA items are converted to normal entries, but so
far no problems with that have been noted.
#+end_quote

I didn't experience any problems, but this approach seems brittle. It is what it
is though (and it's the simplest way to get this to work).


* BSD

** Docs

** Resources
+ [[https://difyel.com/cheatsheet/freebsd-pkg-cheat-sheet/index.html][Freebsd Pkg Cheatsheet]]



** Topics
*** Boot

**** Multiboot from grub

FreeBSD forum post: [[https://forums.freebsd.org/threads/can-anyone-help-me-with-booting-freebsd-from-grub.68620/][Can anyone help me with booting FreeBSD?]]

+ PFSense is fairly straightforward to get working, according to the it's
  [[github:aguslr/multibootusb][aguslr/multibootusb]] configuration file anyways. I didn't test that.
+ It's unclear whether OPNsense supports multiboot from Grub. Using a loop
  method, I either get an error for something related to the kernel or ELF
  compatibility. It also doesn't chainload.

*** Networking

+ [[https://klarasystems.com/articles/freebsd-vs-linux-networking/][Networking in FreeBSD vs. Linux]]

**** SR-IOV

***** SR-IOV is a First-Class BSD Feature

[[https://freebsdfoundation.org/sr-iov-is-a-first-class-freebsd-feature/][Source]] (see [[https://markmcb.com/freebsd/vs_linux/sriov_is_first_class/][alt-link]] with better formatting)

Author mentions these cards as being SR-IOV compat in =FreeBSD 14.0=

|----------------------------------+--------------------+--------------------------|
| Card                             | Type               | Notes                    |
|----------------------------------+--------------------+--------------------------|
| Intel i350-T4V2 Ethernet Adapter |                    |                          |
| Mellanox ConnectX-4 Lx           | Fiber (PCIe avail) | Up to 25 Gbps apparently |
| Chelsio T520-SO-CR               | Fiber              |                          |
| Intel X710-DA2                   | Fiber              |                          |
|----------------------------------+--------------------+--------------------------|

This writeup includes useful block diagrams of a specific motherboard ... to
help you identify which PCIe slots connect via PCH and which directly to CPU

+ PCH :: [[https://en.wikipedia.org/wiki/Platform_Controller_Hub][Platform Controller Hub]]; probably relevant when designing a workstation
  build.

BSD people are crazy like that.

***** iovctl

See above article. =iovctl= will show you VF's on your system -- provided that
your motherboard and BIOS configurations enable them.


*** Hardware

**** PCIe

+ =pciconf= and =pciutils= to [[https://unix.stackexchange.com/questions/541688/how-to-see-pcie-device-info-on-freebsd][check PCIe device info on FreeBSD]]
* Roam
+ [[id:ea11e6b1-6fb8-40e7-a40c-89e42697c9c4][Networking]]
+ [[id:ac2a1ae4-a695-4226-91f0-8386dc4d9b07][Devops]]
