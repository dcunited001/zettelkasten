:PROPERTIES:
:ID:       49373db0-532d-4b0f-b8ec-3f9a3f897895
:END:
#+TITLE: StepCA
#+DESCRIPTION:
#+TAGS:

* Resources

It's a bit sad how long I was confused about SAN's and how their policies are
enforced. The [[https://www.amazon.com/Bulletproof-SSL-TLS-Understanding-Applications/dp/1907117040][Bulletproof SSL and TLS (2014)]] book helped alot, but after I
bought it ($50+) they instantly released a 2nd edition (2022). This single thing
-- designing how you will use CN's for a custom CA and how they relate to S and
SAN's -- has like literally cost me I don't know how much time. Let's Encrypt
just delivers the certs with SANs on them.

** Step CLI

*** [[https://smallstep.com/docs/step-cli/basic-crypto-operations/index.html#generate-json-web-tokens-jwts-and-json-web-keys-jwks][Basic Crypto Operations Using =step=]]

+ The =step ca= commands are not necessary to create a Root CA. In this case,
  you won't have provisioners, but you can use templates.
+ Root CA certs can be installed into a system's local trust store with =step
  certificate install=

*** [[https://smallstep.com/blog/command-line-secrets/][How to Handle Secrets on the Command Line]]

+ The Linux kernel apparently has a per-process/thread keyring accessible via the
  =keyctl= command or system calls.
+ I also had no idea that curl accepted =.netrc= files.

It's pretty clear that the reason no one mentions this is because of the shear
amount of work required compared to simply using environment files.

** Step CA

+ [[https://smallstep.com/docs/step-ca/certificate-authority-server-production/#overview][Production considerations when running a CA Server]]

*** Guides

**** [[https://smallstep.com/blog/access-your-homelab-anywhere/][Access your homelab from anywhere with a Yubikey and mutual TLS]].

This uses the =step ca acme-da= provisioner and requires using =step ca policy=
to restrict trust of the Yubico Root CA by device ID.

**** Kubernetes The Hard Way (with Step CA)

See these commits for changes to [[github:kelseyhightower/kubernetes-the-hard-way][hightower/kubernetes-the-hard-way]] to set up [[https://github.com/smallstep/kubernetes-the-hard-way/pull/1/files#diff-8c85cd43851bef8fb146c4296dc9296ef3bf15a2133f4607b25d43397be2f369R1][TLS
renewal for a K8S cluster]] (see diff)

*** Integrations

**** PostgreSQL TLS Config

[[https://smallstep.com/practical-zero-trust/postgresql-tls?deployment=linux][Using Step CA for TLS certs for PostgreSQL]] see the =pg_hba.conf= at the end.

+ You should be using the =cert= method if the data is extremely sensitive. I
  don't really mean everything ... but network automation, PKI related things,
  maybe metrics.
+ You should never run PostgreSQL without =hostssl=. The client configured to
  validate server certs, including your =python= or =ruby= client (probably). If
  you don't explicity configure your client to do this, I hope you trust the IP
  Routes in between...
+ Local auth method uses sockets, so this needs SELinux setup.
+ You should also probably have more than one user per application ... but that
  basically never happens.

** Yubikey

+ [[https://github.com/samngms/yubikey-ca/blob/master/Dockerfile][samngms/yubikey-ca]] A Yubikey CA example that runs in a docker container. This
  shows how to get an image to play nice with =libykcs11=, though I think the
  typical =pkcs11= lib is sufficient.



* Signing Certs with Keys in Yubikey PIV Slots

You need something like =step kms=.

AFAIK, you can't sign certs using =ykman= or =yubico-piv-tool= CLI with a key
stored in the Yubikey's slots. Though the latter affords some functionality,
interaction with a PCKS11 client lib is necessary for all functions, which means
you need a binary built to the specific purpose. All the guides online are for
signing software in a windows environment ... go figure.

/I think/ that all you can get out of =ykman= is a self-signed cert.

** With =step certificate sign=

With these vars

#+begin_src sh
leaf_id=foo
leaf_san="fdsa.local"
ca="My CA"
ca_id="myca"
#+end_src

Create an openssl ecdsa key

#+begin_src sh
# This is a shortcut, but `step` needs the params removed from the PEM
# openssl ecparam -name P-384 -genkey

openssl genpkey -algorithm EC \
        -pkeyopt ec_paramgen_curve:P-384 \
        -pkeyopt ec_param_enc:named_curve > /tmp/teststep/$leaf_id.key
#+end_src

Create a CSR using an existing private key:

#+begin_src sh
# --ca $ca --ca-key <(echo my-ca-secret-key-PEM) \

step certificate create --csr \
     --san $leaf_san --key <(cat /tmp/teststep/$leaf_id.key) \
     $leaf_id $leaf_id.csr
#+end_src

From here, you can sign with your CA.

** Signing with =step-kms-plugin= outside of =step ca=

TL;DR: ... it doesn't work.

#+begin_quote
Most of the guides I read don't really 100% fit my
use-cases or goals -- for anything homelab, not just step or yubikey or x509. To
be fair, the docs from smallstep are generally some of the best on x509/etc
... and also, sometimes my design goals don't make too much sense. I had
previously read that the Yubikey can only generate leaf certificates ... esp if
it's going to attest them, but I thought this was an x509 extension and i didn't
see it in emacs' =x509.el=.

It could be that I could do the full =step ca init= flow and provide it the
... secret keys ... in the yubikey (nevermind).
#+end_quote

With these vars:

#+begin_src sh
yubi_slot=82
yubi_uri="yubikey:slot-id=$yubi_slot"
yubi_device=12345678
PKCS11_LIB=/usr/lib/opensc-pkcs11.so
# --kms 'pkcs11:module-path='$PKCS11_LIB';token=smallstep?pin-value=password' \
#+end_src

Overwrite the key in =slot 82=.

#+begin_src sh
step kms create --json 'yubikey:slot-id=82'

# {
# "name": "yubikey:slot-id=82",
# "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEH9Hl19X1A09jf/4O2rFZ0HSB/bkp\n1RFCyDgvdNFWOp1xNu+jmESy0ZrsNgmggkiePiGDqGJ3zvFEhAJ50K575Q==\n-----END PUBLIC KEY-----\n"
# }
#+end_src

Export the public key

#+begin_src sh
ykman --device $yubi_device piv keys export $yubi_slot $ca_id.pem
#+end_src

Create a cert in that slot

#+begin_src sh
_output=$ca_id.pem
_numdays=30
ykman --device $yubi_device piv certificates \
      generate --subject "$ca" -d $_numdays \
      -a SHA512 $yubi_slot $ca_id.crt

# can export:
ykman --device $yubi_device piv certificates \
      export $yubi_slot $ca_id.crt
#+end_src

Sign a CSR using step-kms-plugin

#+begin_src sh
step certificate sign \
     --kms 'yubikey:' \
     $leaf_id.csr $ca_id.crt $yubi_uri
#+end_src

From which I get the response:

#+begin_quote
issuer certificate is not a certificate authority
#+end_quote

This is one of those confusing things about x509 that's not well advertised: the
yubikey generates leaf certificates. I think you need to abuse the signing
functionality on the key to trick the yubikey into appending the signed bytes
for it's signature onto a modified CSR.

* SOPS

Keep secrets in =./vars/*.sops.yml= and other config in =./vars/*.vars.yml= for
now.

** Config

#+begin_src yaml
---
stores:
  yaml:
    indent: 2
creation_rules:
  - pgp: >-
      9E013E9459081C7D2C10DEB69FCE9B3064CED760
#+end_src

*** mac_only_encrypted

If you want to edit unecrypted values in =*.sops.yml= files, then You'll want to
set =mac_only_encrypted=true= in the SOPS =creation_rules=.

*** TODO add =age= and plan to distribute secrets without GPG


** Basic Usage

*** Encrypt from stdin

+ You need to encrypt the =/dev/stdin= file.
+ Since the default =--input-type= is determined from the file extension, this
  needs specification.
+ Use =--output= or redirect =stdout= to write the file.

#+begin_src sh :results output code :wrap src yaml
printf "foo:\n  bar:\n    private_key: baz" \
    | sops -e --encrypted-regex "^(private_key)" \
           --input-type yaml \
           --output-type yaml \
           /dev/stdin
#+end_src

#+RESULTS:
#+begin_src yaml
foo:
    bar:
        private_key: ENC[AES256_GCM,data:fFK0,iv:rY5eAQAB8ysCacHQ+9TPw5OUnNpi9qVf153tq+AosRY=,tag:m/TsymzFGhsMTwW/m30xpQ==,type:str]
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age: []
    lastmodified: "2023-12-18T07:20:20Z"
    mac: ENC[AES256_GCM,data:86ULj/fX8wy+wO1vdXcFIvMjHd6iPhXo/7nD4qUmMN/t+ot9XKI2WqeK7xJ6yAGh3UL5F5brtHmxpJWqvJYmnUERKyBmCf5yVGLnybjhmj1qZkcEFcv8sgMOo4Ow0TQeqIqHrqLm8EfS7y8IoJewUc0fCcYKrBsy9qlbGxw3Pxc=,iv:Lv3zpI/3slcTk4X7PW669n7ibzCD6CK5RaOshSS4JWg=,tag:26rJkfxjQmIdYZnengq8xg==,type:str]
    pgp:
        - created_at: "2023-12-18T07:20:20Z"
          enc: |-
            -----BEGIN PGP MESSAGE-----

            hQIMAwAAAAAAAAAAAQ/8DwAPfK/YsvP4fVO7LSZRdrrxoN8Ewy0IHThETqJ8ZMw1
            W69V40yK6BJO02J4t527CHg6PCFEPgqGBYuvmg+NEB3zfBKhPEGReNUqObQRL/mg
            /gG85uewxBu40EnlGiAFEf+6n1IGMU4dDxQNrVPQnnc99qUbob/1h+rXYVv3bT0v
            ufIM8J6N+Gatuq1mXLRLR6ETYcQ81mRPbh3H8t3faKtdNLS1IEKXQFOHpywLUp0C
            S/3H3yU1PNWcfAr/HHJc8MQCqbdvJbMKZ8q0LtgerF7P9oX9FT8FOMHKK7F/TMmw
            OgxbzZtFvMa8tOoX9oiOnAw3SRs1iJ5KIpDXQR3++7F8NjiAdvFuKKUKEWWoAMgS
            WhE03HZ+nFgXrE7iTpxL2FPhoaPSATExg6pLWdlWsx6GeEbclWS9UQTOdQf3mO12
            5JEMOKOiyehawEPejjKbsLC33zkaT5HonEjHIoOuc3k0n6e+UzDkqbQz0/PQGimh
            jqCs7G0Z424IAskCw6cA9b+im/nIww69Xd7yxOx791f/ViCQdjbI1hEFh8+ysPTy
            FvFTsDH8/eMJ+o1HeTH1bp8ZLt6o6cWKFk4oVZOm+ypW8UQxZfdG/zeUbDCk9lsK
            Vpm6Y17a9YQvsmnJkdLkWd/dB05y6+PR6K0Qp40vIdOJZQLr+4NR3Yv9AxTH5uTS
            XgHZvZQgJPOrc9ZXY2ZYOwgkBtDPYoUzfw5Br8T+YDwRU5DemGaSekhJjyDYfj6y
            ZMNR5bB86urq3N/OqOD9ez8v0H5+OwBDLIngmNd3cde4MX4Ln5NxLuvv6Z6w4bw=
            =akdO
            -----END PGP MESSAGE-----
          fp: 9E013E9459081C7D2C10DEB69FCE9B3064CED760
    encrypted_regex: ^(private_key)
    version: 3.8.1
#+end_src

** Ansible Usage

There's an example of openssl key/cert/csr here: [[https://docs.ansible.com/ansible/latest/collections/community/sops/docsite/guide.html][Protecting Ansible Secrets with
Mozilla SOPS]]

*** Loading as vars

Configure the =community.sops.sops= plugin. Dynamically loading the =*.sops.yml=
using the =community.sops.load_vars= is not "safe."

#+begin_src conf
[defaults]
vars_plugins_enabled = host_group_vars,community.sops.sops
#+end_src

Also, Ansible "doesn't really let you" modify vault files from playbooks. So
GLHF, it also "doesn't really let you" get the =pwd= for =.sops.yml= and =$PWD=
will be set to the playbook's directory, which is what it is ... but it is not
clear.

Also, the "search box" on the Ansible docs is mostly ironic since it does not
whatsoever place predence on ansible keywords. So just use Google magicks and
why would you ever not on any site?

**** Playbook

Goddammit, gluing these things together is fucking frustrating as hell.
Basically, no one is doing this if the infrastructure is not paid for by their
job.

#+begin_quote
NOTE: it would be possible to use a second set of inventory for certificates.
#+end_quote

The problem with placing it in =group_vars= is that it will always be part of
any group's execution environment that an ansible playbook is running in. And
certificates aren't necessarily bound to inventory: they map to applications,
services and contexts. And unless you just get a single wildcard cert from Let's
Encrypt and call it a day. Great! Just put that little file on every server you
have. You're done!

And see above: YOU CAN'T EASILY WRITE TO ANSIBLE VAULT FILES. So you can't
automate this _without bash scripts_ .... unless you ansible tower bro. And
again: see above. You have to PAY for ansible tower. You have to PAY for
hashicorp vault. You have to PAY for clusters in k8s clusters. The cloud
providers will let you shoehorn certs into their secrets managers, but then you
can't treat those objects as the actual fucking objects that they are.

#+begin_src yaml
---
- name: Try encrypting and decrypting a file with suboptions
  hosts: localhost
  gather_facts: false
  vars:
    pwd: "{{ lookup('config', 'ANSIBLE_HOME') }}"

  # ==================================
  # this doesn't work! only placing it in group_vars will work!

  # vars_files:
  #   - "../tmp/foo.sops.yml"

  # foo.bar.private_key: ENC[AES256_GCM,data:mudt,iv:7Bjmrpts63IlDe5rJXDft4pD9OubUfDGZq/A1IFZixc=,tag:K3F/Xf83RnldtFiVjttpyw==,type:str]

  tasks:
    - name: "Try reading with community.sops.load_vars"
      debug:
        var: foo.bar.private_key

    # a block is only needed for the "always" callback
    # - block:

    - name: Try encrypting foo.bar
      community.sops.sops_encrypt:
        path: "{{ pwd }}/tmp/foo.sops.yml"
        config_path: "{{ pwd }}/.sops.yml"
        force: true # must force or it will decrypt and won't update
        encrypted_regex: '^(private_key)$'
        content_yaml:
          foo:
            bar:
              private_key: "baz"
      delegate_to: localhost
#+end_src

You're welcome, by the way.

** Misc

*** Passing in with =docker exec=

Running your =step-ca= in docker should be fine, as long as you don't bind the
web API ports. I don't plan on doing it forever, but I need a container running
continuously, so i can pass in content via =docker exec=.

**** Testing

Just need something random

#+begin_src sh :var me=(identity user-mail-address) :results silent
STEPPATH=foo
cfg=$STEPPATH/config/ca.json

cat $cfg | tr '\n' 'x' \
    | sha256sum | cut -b1-32 \
    | gpg -aer $me > /tmp/asecret.asc
#+end_src

** PIV

*** Setup

If resetting the entire PIV application is needed:

#+begin_example sh
# do not eval
ykman piv reset
#+end_example

Reset management key (change to AES256 from TDES)

#+begin_example sh
# this generates a new random AES256 key and protects it with a MGMT pin
ykman piv change-management-key -a AES256 -pg
#+end_example

Rotate the PIN for PIV

#+begin_example sh
ykman piv access change-pin
#+end_example

*** Regenerate Keys

*** Troubleshooting

**** pcscd device exclusivity errors

Also, I'm consistently getting =pscsd= device exclusivity errors. These require
=systemctl restart pcscd=

#+begin_quote
Error: error opening yubikey: connecting to smart card: the smart card cannot be
accessed because of other connections outstanding
#+end_quote

*** PIV device in container

Share the device with =--device $dev= when running the container.

+ Use =lsusb | grep Yubico= to get the USB number
+ Use =lsusb -t= to get the USB device tree or use =udevadm info -t=

With one yubiky, get the bus & device id's

#+begin_src sh
vendor=1050
device=
busid="$(lsusb | grep Yubico | sed -E 's/^Bus ([0-9]+).*$/\1/g')"
devid="$(lsusb | grep Yubico | sed -E 's/^Bus.*Device ([0-9]+).*$/\1/g')"
devpath="/dev/bus/usb/$busid/$devid"
#+end_src


Then run =ls -al $devpath= and note the major/minor number for the driver. It's
needed for =--device-cgroup-rule=.

+ The =usb_device= driver will always load with =189= -- see =/proc/devices=.
+ Along with =--device= then the major number will suffice unless you want to
  block access to devices on the same USB hub.
+ The =rwm= in the cgroup rule: read, write, mknod.
+ The container/host permissions/groups may need to be adjusted to access some
  devices. TTY access requires =dialout= group membership in & out of the
  container.

Then start with:

#+begin_src sh
docker container run -it --rm \
       -v /tmp/step:/home/step \
       --device $devpath \
       --device-cgroup-rule="c 189:* rwm" \
       smallstep/step-ca:hsm
#+end_src

**** Troubleshooting

***** Build yubikey tools onto smallstep/step-ca:hsm

This adds yubikey-specific env/pkgs to help figure out what's up. Not sure what
the best way to do this is ... probably run an airgapped image using =step-ca=
bins built in docker containers.

#+begin_src dockerfile
FROM smallstep/step-ca:hsm

USER root

RUN apt-get update && apt-get install -y --no-install-recommends \
    usbutils ykcs11 opensc libccid libengine-pkcs11-openssl \
    yubikey-manager yubico-piv-tool

# root runs `service pcscd restart && bash` in this container, but step can
#    restart pcscd. https://github.com/samngms/yubikey-ca/blob/master/Dockerfile

# ENV PKCS11_MODULE_PATH=/usr/lib/x86_64-linux-gnu/libykcs11.so

# TODO assign user the rights to access the device
USER step

ENV PKCS11_MODULE_PATH=/usr/lib/x86_64-linux-gnu/libykcs11.so

ENTRYPOINT service pcscd restart && /bin/bash
#+end_src

Build and run with something like:

#+begin_src sh
docker container run -it --rm \
       --device=/dev/bus/usb/001/012 \
       -v /tmp/step:/home/step  dc/stepyk:latest /bin/bash
#+end_src

I'm not sure if =--privileged= may be required. The =lsusb= output shows all the
devices regardless.... but only root can access them in the container.

***** Using the [[https://github.com/go-piv/piv-go][go-piv/piv-go]] library

The [[https://github.com/go-piv/go-ykpiv][go-piv/go-ykpiv]] library has a [[https://github.com/go-piv/go-ykpiv/blob/master/Dockerfile][Dockerfile]] where you should be able to run its
tests. It's not on hub.docker.com; clone the repo

+ Change =stretch-slim= to =bullseye-slim=. The release file changed hosts.
+ Add =pkg-config= to packages
+ And =libssl-dev= to the packages to fix complaints about libcrypto.pc

The dockerfile should look like this:

#+begin_src dockerfile
FROM debian:bullseye-slim

RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
		ca-certificates pkg-config gcc git golang-any libc6-dev libssl-dev \
		libykpiv-dev yubico-piv-tool \
	&& rm -rf /var/lib/apt/lists/*

ENV GOPATH /go
WORKDIR $GOPATH/src/pault.ag/go/ykpiv
COPY . .

RUN go get -v -t ./...
#+end_src

The tests will fail early if you don't specify =--wipe-yubikey=


Instead, you just need to learn to build a go script that runs.

** PIV CA

*** TODO Root Certificate (edit or delete)

Download the PIV root attestation CA

#+begin_src sh
yubico_ca_url=https://developers.yubico.com/PIV/Introduction/piv-attestation-ca.pem
curl -so yk/yubico-piv.pem $yubico_ca_url
#+end_src

Export the yubikey's intermediate cert

#+begin_src sh
ykman piv certificates export
#+end_src

* Step CLI

** Building the CGO

The =step kms= plugin is req. for Yubikey PIV and it requires =CGO= extensions

** Commands

*** Certificate

=step certificate=

| bundle        | bundle a certificate with intermediate certificate(s) needed for certificate path validation |
| create        | create a certificate or certificate signing request                                          |
| format        | reformat certificate                                                                         |
| inspect       | print certificate or CSR details in human readable format                                    |
| fingerprint   | print the fingerprint of a certificate                                                       |
| lint          | lint certificate details                                                                     |
| needs-renewal | Check if a certificate needs to be renewed                                                   |
| sign          | sign a certificate signing request (CSR)                                                     |
| verify        | verify a certificate                                                                         |
| key           | print public key embedded in a certificate                                                   |
| install       | install a root certificate in the supported trust stores                                     |
| uninstall     | uninstall a root certificate from the supported trust stores                                 |
| p12           | package a certificate and keys into a .p12 file                                              |

Key options from the =step create -h=. I'm assuming the same terms/options are
used in other subcommands. The arguments are specified in the table as a
personal reminder, but all of these require args.

| Issued Cert     | Issuer             | Crypto           | Templates                  |
|-----------------+--------------------+------------------+----------------------------|
| --san           | --ca               | --kty=EC,OKP,RSA | --template=template.tpl    |
| --kms           | --ca-kms           | --size=bits      | --set="key=value"          |
| --key           | --ca-key           | --curve=P-384    | --set-file=tpl-values.json |
| --password-file | --ca-password-file |                  |                            |

The =--san=$subject_alt_name= can be used multiple times.

When using =--profile=$profile=, there are four main values (though I think
others are possible using the =step context= feature or using configuration).

| leaf            | x509 leaf cert for TLS               |
| intermediate-ca |                                      |
| root-ca         |                                      |
| self-signed     | self-signed leaf (requires --subtle) |

These options do not require args:

| --bundle             | Bundle the new leaf cert with the signing cert |
| --skip-csr-signature | Skip the CSR. Go straight to cert.             |
| --subtle             | For delicate things                            |

**** Create

This generates a cert with a password-protected private key (all in one go)

#+begin_src sh
step certificate create $subject $crt-file $key-file \
     --password-file <(sops ...) \
     --ca-password-file <(sops ...)
#+end_src

*** Context

The =step context= subcommand helps manage/switch contexts when working with
multiple CA's. When using contexts with =step ca=, the relevant files are
created with the =step ca bootstrap= command, which typically creates the file
structure under =$STEPPATH=

| current | current returns the name of the current context   |
| list    | list available certificate authority contexts     |
| remove  | remove a context and all associated configuration |
| select  | select the default certificate authority context  |

*** Crypto

=step crypto=

| change-pass | change password of an encrypted private key (PEM or JWK format)   |
| keypair     | generate a public / private keypair in PEM format                 |
| jwk         | create JWKs (JSON Web Keys) and manage JWK Key Sets               |
| jwt         | sign and verify data using JSON Web Tokens (JWT)                  |
| jwe         | encrypt and decrypt data and keys using JSON Web Encryption (JWE) |
| jws         | sign and verify data using JSON Web Signature (JWS)               |
| jose        | collection of JOSE utilities                                      |
| hash        | generate and check hashes of files and directories                |
| kdf         | key derivation functions for password hashing and verification    |
| key         | manage keys                                                       |
| nacl        | easy-to-use high-speed tools for encryption and signing           |
| otp         | generate and verify one-time passwords                            |
| rand        | generate random strings                                           |
| winpe       | extract certificates and verify Windows Portable Executable files |

*** KMS

This plugin bundles access to the yubikey and pcks11 dynamic libs.

=step kms=

| attest      | create an attestation certificate                          |
| certificate | print or import a certificate in a KMS                     |
| completion  | Generate the autocompletion script for the specified shell |
| create      | generates a key pair in the KMS                            |
| decrypt     | decrypt the given input with an RSA key                    |
| encrypt     | encrypt a given input with an RSA public key               |
| help        | Help about any command                                     |
| key         | print the public key in a KMS                              |
| sign        | sign the given digest using the kms                        |
| version     | print the current version                                  |

**** Yubikey PIV

Using =step kms create= generates a key in a Yubikey PIV slot. After the
certificates are experted, you can point =ca.json= to them and update the =kms=
values to the Yubikey URI's.

At this point, Smallstep interfaces with the Yubikey using the PCKS#11
specification/protocol.

***** TODO Test yubikey device access for KMS in docker

Try =step kms create 'yubikey:slot-id=82'=

(does it require configuring 'kms' first? this creates the key in the slot)


* Step CA

The =step ca= subcommands uses the HTTP API.

** Commands

The =--offline= flag is documented for the following =step ca= subcommands:
token, certificate, rekey, revoke, proxycommand.

*** Init

+ --pki :: this suppresses the creation of =config/ca.json=, as its assumed you
  won't be running the server (afaik)
+ --remote-management :: This stores the provisioner configuration in a
  database, instead of =ca.json=. It also sets up an =Admin JWK= provisioner and
  a few other things. See [[https://smallstep.com/docs/step-ca/provisioners/#remote-provisioner-management][Remote Provisioner Management]]
+ --provisioner :: This is the initial provisioner id, defaulting to JWK.
+ --helm :: This generates =--helm= values for [[https://github.com/smallstep/helm-charts/tree/master/step-certificates][smallstep/helm-charts]] (handy!)

*** Bootstrap

This prepares a (new & possibly clean) local environment for interacting with
the CA. You will need to supply the =--ca-url= option and others.

It's not 100% necessary for a homelab. According to the docs:

#+begin_quote
Bootstrap will:

+ store the root certificate in $STEPPATH/certs/root_ca.crt
+ and create a configuration file in $STEPPATH/configs/defaults.json with the CA
  url, the root certificate location and its fingerprint.

After the bootstrap, ca commands do not need to specify the flags --ca-url,
--root or --fingerprint if we want to use the same environment.
#+end_quote

** Server

*** Handling the secrets

Use =--password-file <(process substitution)=

**** TODO similar process for handling the Yubikey PIN

** Database

The =step-ca= needs a NoSQL backend. The following two are embedded into the
=step-ca= binary. Their CLI tools are not available in the Docker image by
default.

+ [[github:dgraph-io/badger][dgraph-io/badger]] is the default
+ An alternative, BoltDB, is an =etcd= fork.

The db is a key/value store -- and totally flat, i think, without structure.
Thus, as long as badger's crypto features are enabled, then I believe it's a bit
hard to pull info out of the DB. I'm not sure about BoltDB, though I assume it
has similar features built-in, since it's an =etcd= fork.

From what I see, it's just important to know the DB is there.

#+begin_quote
If i'm going through the trouble of interfacing with SOPS "homomorphically"
without writing to disk... then I'd like to know that nothing else is writing to
disk either.
#+end_quote

If you're using MySQL or Postgres, then you're going to want to lock that down.

** Config

Though a few of the guides direct you to edit =ca.json=, they recommend to use
the =step= and =step ca= CLI to edit the config where possible.

*** Provisioners

See [[https://smallstep.com/docs/step-ca/provisioners/#choosing-a-provisioner][Choosing a Provisioner]]

+ Set both =--password-file= and =--provisioner-password-file=

**** JWK (JSON Web Key)

Fields:

| key.*        | JWK public key (used to validate signed tokens)                            |
| encryptedKey | The encrypted JWK key that signs tokens, not necessary for some operations |

***** Interacting with JWK from the CLI

The encryptedKey is published on the =/provisioners= endpoint if the Step CA is
running remotely. This is recommended (I think?) so you don't need to keep up
with the key locally.

To remove the JKW =encryptedKey=, run:

#+begin_src sh
step ca provisioner update $provisioner_id --private-key ""
#+end_src


*** Templates

See [[https://smallstep.com/docs/step-ca/templates][docs on templates]], which also contains examples and links to more advanced
use cases.

There are at two types. These templates are set in the list under
=authority.provisioners= in =options=

| Type | Json         | Code            | Desc              |
|------+--------------+-----------------+-------------------|
| x509 | options.x509 | crypto/x509util | x509 Certificates |
| SSH  | options.ssh  | crypto/sshutil  | SSH Certificates  |

In both the source directories above, files of interest are:

+ certificate.go
+ templates.go
+ options.go

**** x509

**** SSH

+ Can assign a principle for the =step= OIDC & Cloud provisioners

* Guix

** Packaging =step=,  =step-ca= and =step-kms-plugin=

Just as a proof-of-concept,

+ I hacked my way around packaging these by exporting their builds from a docker
  container. I literally put these in a gzip'd tarball on my system and used a
  =file:///= URL ... LMAO heresy (it's a proof of concept)
+ If found that the =(nonguix build-system binary)= module handles simple
  scenarios requiring =patchelf=.

Still, whatever is needed is going to be a bit more complicated.

+ The major versions match and the three binaries were all built in the
  =smallstep/step-ca:hsm= docker container.
+ However, after a few setbacks, I got the binaries past the =RUNPATH= issues by
  getting =patchelf= to modify the =rpath=. Still, there are segfaults, so the
  =dylib= versions they were built against -- or maybe the =glib2=, =gcc= or
  other deps -- do not quite match. Here, I think the early segfault means that
  the addressing in the binaries do not "agree".
+ If they need to be relinked or something.... that's way out of my league.

* StepCA: Yubikey


* StepCA: Cert Manager

Run StepCA with the guix binary package

** Deployment

Plan to run StepCA in =docker= or on =k0s=

* Roam
