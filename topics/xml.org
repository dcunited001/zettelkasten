:PROPERTIES:
:ID:       e0880f60-63db-4f34-b478-c3b733f1ab96
:END:
#+TITLE: XML
#+DESCRIPTION:
#+TAGS:

* Docs

** XSD

+ [[https://download.eclipse.org/modeling/mdt/xsd/javadoc/2.3.0/org/eclipse/xsd/package-summary.html][org.eclipse.xsd]] hmm great diagrams!

** RelaxNG

Just see [[https://github.com/VladimirAlexiev/rnc][VladimirAlexiev/rnc]] for examples of schemas. As a precocious emacs
user, he was mining dataset schemas for archival art and conservation research
from way before JSON was SOAP.

* Resources

+ [[https://www.baeldung.com/linux/evaluate-xpath][parsing XML at command line]]

** Topics

*** [[https://download.eclipse.org/modeling/mdt/xsd/javadoc/2.3.0/org/eclipse/xsd/package-summary.html][org.eclipse.xsd]]

| Connector       | Relation                  | Desc                                                                                         |
|-----------------+---------------------------+----------------------------------------------------------------------------------------------|
| Black Diamond   | Containment               | These form the basis for the concrete tree structure of the model                            |
| White Diamond** | Shared Pseudo-Containment | Relations defined directly in XML Schema spec; typically computed (access through interface) |

/Shared Pseudo-Containmen should be accessed through interface, _except_ for
relations involving types: base-type, member-type, item-type, element- or
attribute-type./

*** TODO crawl directory of websites (from vanilla X-HTML)

This may be done via org-babel

+ [ ] for each root domain, fetch the sitemap
+ [ ] parse the sitemap. collect some data on pages like
  rootsite.com/afterfirstslash/
+ [ ] voila, an impromptu ontology (less thinking, more doing)

** Contexts


*** Qt

+ Qt5: [[https://doc.qt.io/qt-5/xmlprocessing.html][XQuery (1.0) and XPath (2.0) in Qt]]
  - [[https://doc.qt.io/qt-5/qxmlschema.html#details][QXmlSchemaValidator]]
  - Qt uses XQuery, not akin to =xq= but its scripts use =.xq= extensions
+ [[https://www.w3.org/TR/xquery-31/#id-variable-declarations][XQuery specification]] (3.1 ... not much support for newer XML querying in
  almost any language/framework except Java)

* Issues
** Conversion from DTD
+ Trang ([[https://relaxng.org/jclark/trang-manual.html][manual]])

* SGML

** Docs
** Resources
** Tools
+ openjade :: standard DSSSL implementation.
+ opensp

*** opensp

* XML (tÃ¤gs)
** Docs
** Resources
+ [[https://www.red-gate.com/simple-talk/development/dotnet-development/xpath-css-dom-and-selenium-the-rosetta-stone/][Rosetta Stone for XPath, CSS, Dom and Selenium]]

** Tools
+ [[https://github.com/sputnick-dev/saxon-lint][sputnick-dev/saxon-lint]]
+ [[https://github.com/benibela/xidel][benibela/xidel]]
+ [[https://github.com/talwrii/clixpath?tab=readme-ov-file][talrwii/clixpath]]

*** xidel

+Much simpler selectors, but results aren't merged and can't easily be queried
without an =xq= sandwich.+

+ Run XQuery3 queries with =--xquery=
+ Xidel will also =curl https://you.a.sandwich=.

Without =--xquery=

#+begin_example sh
cat components/accordion/accordion-always-open-example.html |\
    tidy -iq --tidy-mark no -w 0 --show-body-only auto --doctype omit -xml |\
    xq -x "${jqRemoveSVG}" |\
    xidel -s --html --xquery "$q" --data=- |\
    xq -y
#+end_example

With =--xquery=

#+headers: :var jqRemoveSVG=jqRemoveSVG
#+begin_src sh :results output code :wrap src yaml
q="//*[contains(concat(' ', @class, ' '), 'flex')]"
f='components/accordion/accordion-always-open-example.html'

cat $f | xidel -s --html --xquery "$q" --data=- |\
    xq -y "${jqRemoveSVG}"
#+end_src

Without =xq= (can't quite get =except= to work)

#+headers: :var jqRemoveSVG=jqRemoveSVG
#+begin_src sh :results output code :wrap src yaml
q="//span[contains(concat(' ', @class, ' '), 'flex')] except svg"
f='components/accordion/accordion-always-open-example.html'

cat $f | xidel -s --html --xquery "$q" --data=- |\
    xq -y "${jqRemoveSVG}"
#+end_src

*** saxon

+ [[https://www.saxonica.com/html/documentation12/about/whatis.html][docs]]


*** libxml2
+ xmllint :: fix XML so you don't have to squint =>.<= at tags
+ xmlcatalog :: not really sure what a catalog is.
** Issues

* XSD (schemata)
** Docs
** Resources
** Issues

* XSLT (transformations)

Illustrates why CSS is actually difficult and fairly mathy.

** Docs
** Resources
** Issues

* Phylogeny
+ GML
  + SGML
    + HTML
      + "X" HTML
    + XML
