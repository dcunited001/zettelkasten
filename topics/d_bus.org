:PROPERTIES:
:ID:       6bb5bd07-0a63-4a8b-ac9e-0b5c285175d3
:END:
#+TITLE: D-Bus
#+DESCRIPTION:
#+TAGS:

* Roam
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]

* Docs

+ [[https://dbus.freedesktop.org/doc/dbus-specification.html][D-Bus Specification]]
+ [[https://dbus.freedesktop.org/doc/dbus-api-design.html][D-Bus API Design Guidelines]]

* Resources
+ [[https://rtfm.co.ua/en/what-is-linux-keyring-gnome-keyring-secret-service-and-d-bus/][What is: Linux keyring, gnome-keyring, Secret Service and D-Bus]]

** GUI

(from "what is")

+ qdbusviewer (qt, kde)
+ d-feet (gtk, gnome)
+ [[https://gitlab.freedesktop.org/bustle/bustle][bustle]] (rust) this helps visualize bus interactions (methods, signals)

CLI: qdbus (KDE automation), dbus-monitor, dbus-send

* Topics

** Libsecret

+ [[https://flatpak.github.io/xdg-desktop-portal/docs/doc-org.freedesktop.portal.Secret.html][Flatpak Secret Portal]]

** Configuration

On Arch/Garuda, dbus configs and service defauts are here.

#+begin_src sh :results output verbatim :wrap quote
tree -d /usr/share/dbus-1
#+end_src

#+RESULTS:
#+begin_quote
/usr/share/dbus-1
├── accessibility-services
├── interfaces
├── services
├── session.d
├── system.d
└── system-services

7 directories
#+end_quote

They can be overwritten at =/etc/dbus-1= or whatever directories are listed in
=.busconfig.include=:


*** Inspecting Config

**** Output with =xq=

Probably don't share this

#+begin_src sh
for q in (".busconfig.include" ".busconfig.limit")
#+end_src


** Tools

*** D-Feet

Introspection of D-Bus (session & system bus).

+ Reflects across bus addresses to autodiscover
+ Allows manual interaction

*** busctl

+ Writes the output in [[https://github.com/pcapng/pcapng/][pcapng/pcapng]] format
+ [[https://github.com/systemd/systemd/blob/599750eb513fa8645e85214646d37d9a3913e342/man/busctl.xml#L89][busctl.xml]] interface specification
+ [[https://github.com/systemd/systemd/blob/main/src/busctl/busctl.c][busctl.c]] c implementation
+ a bunch of =*.in= templates

*** openbmc-tools

openbmc/openbmc-tools contains [[https://github.com/openbmc/openbmc-tools/tree/master/dbus-pcap][dbus-pcap]] definitions

+ afaik, in pcap, not pcapng
+ it will dump pcaps to json with =dbus-pcap --json $dotpcapfile | jq -n2=

This contains

*** Bustle

+ Source on freedesktop:[[https://gitlab.freedesktop.org/bustle/bustle][bustle/bustle]]
+ Recently revamped: [[https://summerofcode.withgoogle.com/archive/2023/projects/EfijCNWY][Rust & GTK4 Bustle Rewrite]] (GSoC 2023)
+ Blog detailing the nitty gritty: [[https://seadve.github.io/blog/9-gsoc-2023-final-overview/][GSoC 2023 (final overview)]]

**** Features

+ Connect to other D-Bus sockets by =unix:= url
+ Records to the *.pcap format (same as wireshark)

**** Rust deps

+ [[github:dbus2/zbus][dbus2/zbus]]
+ [[github:gtk-rs/gtk4-rs][gtk-rs/gtk4-rs]]
+ [[github:courvoif/pcap-file][courvoif/pcap-file]]
  - PcapReader :: Pcap
  - PcapNgReader :: PcapNg
** rtkit

*** What Processes is it supervising?

This script was suggested in this [[https://unix.stackexchange.com/a/750856][s/o answer]], but the d-bus interface doesn't
include the =RealtimeKit1= service (it mostly matches the CLI parameters)

#+begin_src shell
#!/bin/bash

# Get the list of processes managed by rtkit
processes=$(dbus-send --system --dest=org.freedesktop.RealtimeKit1 --print-reply /org/freedesktop/RealtimeKit1 org.freedesktop.RealtimeKit1.GetManagedProcesses | awk '/array/ {flag=1; next} flag')

# Loop through each process and extract the process ID and thread count
while read -r line; do
    if [[ $line =~ uint32\ ([0-9]+) ]]; then
        pid="${BASH_REMATCH[1]}"
    elif [[ $line =~ uint32\ ([0-9]+) ]]; then
        threads="${BASH_REMATCH[1]}"
        echo "Process ID: $pid, Supervised Threads: $threads"
    fi
done <<< "$processes"
#+end_src

** Integration

It's nice when people spoonfeed you all the tooling necessary for d-bus code
generation...

*** Scripting

**** Yubikey widget

So basically, i want to have an [[https://elkowar.github.io/eww/widgets.html?highlight=sys#systray][eww widget]] that reports the current status of
=pcscd=, GnuPG =scdaemon= cards, yubikey devices, =gpg-agent= and a few other things
... it can be a PITA to track down the exact problem when there is one.

This is a bit sensitive though, so it's important that a single [authorized]
source of truth "throws data over the fence" towards the user-level widgets.

The scripts these widgets rely on could ask for some themselves ... but that
requires:

+ argument handling and CLI cleansing
+ staged output filtering
+ constant polling and/or temporary files

There is also [[https://wiki.ffpy.org/getting-started/client-and-cli/#_top][Fabric-Development/fabric]] which offers a more direct interface to
D-Bus events and a more direct interface to [[https://wiki.ffpy.org/api/fabric/][Hyprland's .socket2.sock]]. I like
lisp though and eww's =yuck= language is lisp. It's script-based flow is simple.

***** Example of event-driven flow

[[https://codeberg.org/JustineSmithies/hyprland-dotfiles/src/branch/master/.config/eww/eww.yuck#L1-L39][JustineSmithies/hyprland-dotfiles .config/eww/eww.yuck]] and
[[https://codeberg.org/JustineSmithies/hyprland-dotfiles/src/branch/master/.config/eww/scripts/workspace.sh][.config/eww/scripts/workspace.sh]] listen to the hyprland socket

This is fairly simple.

****** The difference from my =yubikey widget= and the above:

Hyprland manages its =.socket2.sock= lifecycle. the socket needs to exist to write
to it and processes need to exit gracefully ... or else. the socket's state is
tied to the sender's memory address space (or smthn idk)

Here, I need to manage the lifecycle and maybe have this run on another
distribution. yeh idk... something fairly agnostic that retransmits data on
D-Bus sounds much easier.

#+begin_quote
yes, I remember killing the shepherd service manager and refreshing the socket,
this is the only way that I would ever know anything about a socket ... (i'm not
complaining; I would nave NEVER encountered anything like this on arch)
#+end_quote

+ this would involve quite a bit of logic whose responsibility is spread over
  various bash scripts & systemd units.
  - a small number of bash scripts with functions and a simple interface to be
    called by a chain of SystemD units would manage alright (it's at least
    mostly a single programming language.)
+ still, i'd rather implement some stream-processing: fan-in from d-bus events
 specified by args and then write to a single socket,
  - perhaps doing additional stages of filtering
  - ultimately there should be a minimal number of consumers that can easily
    construct the entire state of Eww widget value widget -- or whatever's
    needed to receive a value in Eww's =(deflisten ...)=
+ An alternative: using state-deltas instead of whole values, which can be
  somewhat seen in the D-Bus =PropertiesChanged= signal.
  - this is convoluted: (1) the data format is necessarily more complex than
    the schema of the value it's updated (2) interruptions can cause undefined
    behavior or require error handling (3) D-Bus event sources need to
    communicate upstream information (e.g. who asked, message id, response id,
    etc) and then address it to other event receivers
  - thus, D-Bus event sources/sinks are having a conversation: negotiating the
    addressing/handling/etc and persisting/destructuring data so it can be
    retransmitted is complex.

***** Write to socket when yubikey un/plugged

.......

***** Create unit that writes to a socket/file when the =smartcard.target= state changes

=systemctl --user list-dependencies --reverse smartcard.target=

***** Discover d-bus information

List any dependencies of the smartcard target

#+begin_src shell
dbus-monitor --session --profile "type='signal',interface='org.freedesktop.DBus.Properties'"
# can also filter by also sender='org.freedesktop.systemd1'
#+end_src

When pluggin in, the =org.freedesktop.DBus{,.Properties}= interfaces light up

+ _2d :: is a =/= in hex: this is a device path
+ _2dxxx_2dxxx :: would then be the =/dev/bus/usb/xxx/xxx= device path
  - no indication here of what type of device it is
+ _2e :: is =.= in hex :: so this signaling so =smartcard.target='s dependents get
  activated potentially. d-bus has done most of the work for me here. I just
  need to create something downstream from that target.

| type |         timestamp |     serial | sender               | destination | path                                                                        | interface                       | member            | in_reply_to |
|------+-------------------+------------+----------------------+-------------+-----------------------------------------------------------------------------+---------------------------------+-------------------+-------------|
| sig  | 1754670158.038870 | 4294967295 | org.freedesktop.DBus | :1.1894     | /org/freedesktop/DBus                                                       | org.freedesktop.DBus            | NameAcquired      |             |
| sig  | 1754670158.038879 | 4294967295 | org.freedesktop.DBus | :1.1894     | /org/freedesktop/DBus                                                       | org.freedesktop.DBus            | NameLost          |             |
| sig  | 1754670162.921810 |       1643 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/shutdown_2etarget                            | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.921888 |       1646 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.921897 |       1647 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.921924 |       1649 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964258 |       1650 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2dxxx_2dxxx_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964269 |       1651 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2dxxx_2dxxx_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964274 |       1652 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964278 |       1653 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964337 |       1654 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964344 |       1659 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964354 |       1660 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964362 |       1661 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2d001_2d020_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670162.964395 |       1662 | :1.1217              | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2d001_2d020_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |

Unplug and events are broadcast reporting the tear down of the device

| type |         timestamp | serial | sender  | destination | path                                                                        | interface                       | member            | in_reply_to |
|------+-------------------+--------+---------+-------------+-----------------------------------------------------------------------------+---------------------------------+-------------------+-------------|
| sig  | 1754670167.221148 |   1663 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221165 |   1664 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221176 |   1665 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/sys_2ddevices_2dpci0000_3a00_2d0000......... | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221185 |   1666 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2dxxx_2dxxx_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221253 |   1667 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/dev_2dbus_2dusb_2dxxx_2dxxx_2edevice         | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221260 |   1671 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221269 |   1672 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |
| sig  | 1754670167.221276 |   1674 | :1.1217 | <none>      | /org/freedesktop/systemd1/unit/smartcard_2etarget                           | org.freedesktop.DBus.Properties | PropertiesChanged |             |


+ more information can be found using =--monitor= instead of =--profile=
  - or using =qdbusviewer=, finding an =org.freedesktop.DBus.Properties=
  - there are a million created by reflection, but it needs to be under the
    correct path
  - then rightclick and =Connect...=

=qdbusviewer= shows: Connected to:...

+ service org.freedesktop.systemd1
+ path /org/freedesktop/systemd1/unit/smartcard_2etarget
+ interface org.freedesktop.DBus.Properties
+ signal PropertiesChanged

These are likely the same arguments to supply =dbus-monitor= which is great
because I hate GUI applications that reset the treeview/gridview (regardless of
how unbelievably useful =qdbusviewer= was when I first found it)

#+begin_quote
Have I never mentioned how seriously upside down the world is and how I feel like
the entire world conspired to prevent me from learning this stuff? It's
literally soooooo easy. I'm not 100% serious... but seriously? it feels like
people basically lie to me, knowing exactly what to say to prevent me from
learning things that would dramatically increase my level of knowledge and/or
access to experience. That's gotta be impossible right?

fucking epistemic games... am i right?
#+end_quote

* Issues


* org.freedesktop.Notifications

** Docs

+ [[https://specifications.freedesktop.org/notification-spec/latest/][Specification]]
+ Implementation at [[https://gitlab.gnome.org/GNOME/libnotify][gitlab.gnome.org:GNOME/libnotify]]
+ Implementation via Portal at [[https://github.com/flatpak/xdg-desktop-portal/blob/main/data/org.freedesktop.portal.Notification.xml][flatpak/xdg-desktop-portal]]


** Topics

*** MQTT

+ [[github:fabaff/mqtt-panel][fabaff/mqtt-panel]] and [[github:fabaff/mqtt-notify][fabaff/mqtt-notify]]. this guy was working with
  mqtt-notify over 12 years ago and his power level is only 9,000 (lol, j/k he
  uses NixOS)


**** D-Bus Service Specification

***** Categories

Sourced from [[https://specifications.freedesktop.org/notification-spec/latest/categories.html][§6 Categories]]

#+begin_src js
Array.from(document.querySelectorAll('#id-1\\.7\\.7 tbody tr > td'))
    .filter((el,i) => {if (i%2==1) return; else return el;})
    .map((el) => el.innerText)
    .join("| \n |")
#+end_src

The column headers are valid generic categories.

|----------------------+-----------------+----------------+---------------+-------------+------------------+-------------------|
| network              | call            | device         | email         | im          | presence         | transfer          |
|----------------------+-----------------+----------------+---------------+-------------+------------------+-------------------|
| network.connected    | call.ended      | device.added   | email.arrived | im.error    | presence.offline | transfer.complete |
| network.disconnected | call.incoming   | device.error   | email.bounced | im.received | presence.online  | transfer.error'   |
| network.error        | call.unanswered | device.removed |               |             |                  |                   |
|----------------------+-----------------+----------------+---------------+-------------+------------------+-------------------|

**** org.freedesktop.portal.Notification

***** Spec

#+name: curlmespecs
#+begin_src restclient :results value file :file img/org.freedesktop.portal.Notification.xml
:curl-me-url = https://raw.githubusercontent.com/flatpak/xdg-desktop-portal/refs/heads/main/data/org.freedesktop.portal.Notification.xml

GET :curl-me-url

# nope, just use :jq and :jq-args above.
# -> jq-set-var :repo-sizes map(.owner)
# -> jq-set-var :repo-sizes map(. | "(.owner.login)")
#+end_src

#+RESULTS: curlmespecs
[[file:img/org.freedesktop.portal.Notification.xml]]

Honestly probably easier to read as slimmed down XML

#+name: orgFreedesktopPortalNotificationYaml
#+begin_src shell :results output :var curlresult=curlmespecs :wrap example yaml
xq -x . < $curlresult
#+end_src

#+RESULTS: orgFreedesktopPortalNotificationYaml
#+begin_example yaml
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <interface name="org.freedesktop.portal.Notification">
    <method name="AddNotification">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="true"></annotation>
      <annotation name="org.qtproject.QtDBus.QtTypeName.In1" value="QVariantMap"></annotation>
      <arg type="s" name="id" direction="in"></arg>
      <arg type="a{sv}" name="notification" direction="in"></arg>
    </method>
    <method name="RemoveNotification">
      <arg type="s" name="id" direction="in"></arg>
    </method>
    <property name="SupportedOptions" type="a{sv}" access="read">
      <annotation name="org.qtproject.QtDBus.QtTypeName" value="QVariantMap"></annotation>
    </property>
    <property name="version" type="u" access="read"></property>
    <signal name="ActionInvoked">
      <arg type="s" name="id"></arg>
      <arg type="s" name="action"></arg>
      <arg type="av" name="parameter"></arg>
    </signal>
  </interface>
</node>
#+end_example

Look at that shit right there. it's 22 lines.

Here's the same thing in YAML

#+name: orgFreedesktopPortalNotificationYaml
#+begin_src shell :results output :var curlresult=curlmespecs :wrap example yaml
xq -y . < $curlresult
#+end_src

#+RESULTS: orgFreedesktopPortalNotification
#+begin_example yaml
node:
  '@name': /
  '@xmlns:doc': http://www.freedesktop.org/dbus/1.0/doc.dtd
  interface:
    '@name': org.freedesktop.portal.Notification
    method:
      - '@name': AddNotification
        annotation:
          - '@name': org.gtk.GDBus.C.UnixFD
            '@value': 'true'
          - '@name': org.qtproject.QtDBus.QtTypeName.In1
            '@value': QVariantMap
        arg:
          - '@type': s
            '@name': id
            '@direction': in
          - '@type': a{sv}
            '@name': notification
            '@direction': in
      - '@name': RemoveNotification
        arg:
          '@type': s
          '@name': id
          '@direction': in
    property:
      - '@name': SupportedOptions
        '@type': a{sv}
        '@access': read
        annotation:
          '@name': org.qtproject.QtDBus.QtTypeName
          '@value': QVariantMap
      - '@name': version
        '@type': u
        '@access': read
    signal:
      '@name': ActionInvoked
      arg:
        - '@type': s
          '@name': id
        - '@type': s
          '@name': action
        - '@type': av
          '@name': parameter
#+end_example
