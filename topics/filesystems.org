:PROPERTIES:
:ID:       d7cc15ac-db8c-4eff-9a1e-f6de0eefe638
:END:
#+title: File Systems

* Docs

+ [[https://wiki.archlinux.org/title/Extended_attributes][Extended Attributes]]

* Resources

* Topics

** Extended Attributes =xattr=

+ Attributes may be defined/undefined
+ Attribute instances may be empty/nonempty.

*** Persistence

Mainly preserved when copying directly between disks on a Linux system. Most
standard utilities don't [[https://wiki.archlinux.org/title/Extended_attributes#Preserving_extended_attributes][preserve xattr's]] by default. Hmmm... that's interesting

*** File Systems

+ Linux docs: [[https://www.kernel.org/doc/Documentation/filesystems/ext4/ondisk/attributes.rst][filesystems/ext4/ondisk/attributes]]
+ The implementation for xattr's vary per file-system
  - =btrfs= has no limits, =ext4= allocates

*** SE Linux

+ SELinux stores data/labels in ACL's -- see RHEL 9 docs on [[https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html-single/using_selinux/index#changing-selinux-modes_changing-selinux-states-and-modes][one page]] (is nice:
  Ctrl+f on recent docs beats Redhat's search)

*** Namespaces

**** =security= namespace requires =CAP_SYS_ADMIN=

See [[https://man.archlinux.org/man/xattr.7][xattr.7]]

* BTRFS
:PROPERTIES:
:ID:       d8216961-cd6a-47cd-b82a-8cd67fe7190f
:END:

** Docs
+ [[https://btrfs.readthedocs.io/en/latest/][Main]]
+ [[https://github.com/btrfs/btrfs-dev-docs][Dev Docs]]
+ [[https://docs.docker.com/engine/storage/drivers/btrfs-driver/#ssd-performance][Docker BTRFS Storage Driver]] good insights on BTRFS performance/applications


*** Maintainence
+ [[https://btrfs.readthedocs.io/en/latest/Scrub.html][Scrub]]
+ [[https://btrfs.readthedocs.io/en/latest/Resize.html][Resize]]

*** Advanced
+ [[https://btrfs.readthedocs.io/en/latest/Seeding-device.html][Seeding device]]: extend read-only FS with another that captures all writes

** Resources
+ [[https://linuxhint.com/resize_a_btrfs_filesystem/][Resizing BTRFS]]

** Topics
*** Snapshots
*** Defrag
This relates to compression and CoW, so it is relevant to SSD's

+ There is an =autodefrag= mount option.
*** Compression

** In Linux

*** In Garuda

*** In Guix

* EXTFS
:PROPERTIES:
:ID:       faa7e444-6171-4225-9220-1b7f70ce6303
:END:

** Docs

** Issues
*** Repair
+ dumpe2fs $device | grep -i superblock :: find alternate superblocks
+

* LUKS
:PROPERTIES:
:ID:       80ccbcbb-a244-418f-be86-47e8969928a5
:END:

** Docs
+ [[11. Encrypting block devices using LUKS][Red Hat: Encrypting Block Devices with Luks]]

** Resources


** Topics

*** Shred

idk what the default random source is. in case it's =/dev/random=, then you
definitely want =/dev/urandom=

#+begin_src shell :eval never
# :eval never! for babel; lol just in case
# sudo shred -vn1 --random-source=/dev/urandom $theDisk
#+end_src

*** Decryption Software

+ [[https://diverto.github.io/2019/11/18/Cracking-LUKS-passphrases][Cracking LUKS passphrases]] and the [[https://news.ycombinator.com/item?id=21791785][HackerNews post]]
+ [[https://mjg59.dreamwidth.org/66429.html?thread=2120573][PSA: upgrade your LUKS key derivation function]]

**** John the Ripper


**** Hashcat


**** Elcomsoft

See post on [[https://blog.elcomsoft.com/2020/08/breaking-luks-encryption/][Breaking LUKS Encryption]]: mostly brute force, but with some tricks
... "supports" LUKS2, proprietary, no guarantees, runs a distributed decryption
service that will distill your tears of sweet irony for a price.
*** Unlocking on boot

See [[https://github.com/fernandoenzo/luks-unlocker-pro][fernandoenzo/luks-unlocker-pro]] and [[https://mjg59.dreamwidth.org/66429.html?thread=2120573#cmt2120573][source post]]

*** Security at rest

Don't put your secrets on a LUKS drive. Either vault, ansible-vault, pass or
some other means is much more secure.

+ Vault requires certificate deployment, but integrates nicely in k3s or K8S.
+ Ansible Vault permits retrieval of secrets GPG-encrypted at rest.

Unless you restrict the mount to a namespace accessible by your user, the second
you mount on it on a network ... well it's there. Your opinion on this I guess
depends on whether you trust your own user account and ... unless you're running
in =vty= I wouldn't.  It is strange though, how people rely on "opsec"
(i.e. don't publicly host dotfiles like what we don't see is somehow black arts)
while simultaneously defaulting to fairly WM standard configurations. The apps
aren't jailed, not that I know what that means other than zomfg ZFS.

I'm pretty sure that the lack of awareness/accountability on secure
configurations creates a fairly weak baseline by default. You can only count so
much on the network to protect you if you know how to use it & how it's
configured ... and only then if you never trust a WiFi that isn't a hassle.

It is quite a relief to trust GPG on a smartcard though.

*** LUKS2

This issue explains the LUKS2+Grub mounting process in full: [[https://issues.guix.gnu.org/55723][Full disk
encryption with grub-efi and LUKS2]]
