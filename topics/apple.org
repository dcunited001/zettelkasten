:PROPERTIES:
:ID:       b6d2c374-bdd0-4034-a27f-c44af23c5d9e
:END:
#+TITLE: Apple
#+DESCRIPTION: Apple
#+TAGS:

* Roam
* Docs
* Resources
* Issues

* OSX
** Docs
** Docs

+ [[https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/booting/booting.html][MacOS Kernel Programming Guide]]
  - [[https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/Architecture/Architecture.html#//apple_ref/doc/uid/TP30000905-CH1g-CACDAEDC][Kernel Architecture Overview]]

** Resources
+ [[2011 MacBook Pro & OSX][updating EFI vars to disable a discrete GPU]]
* Topics
** App Store

*** Categories

... dammit.

# +begin_src restclient :jq "map([.owner.login, .name, .size])[] | @csv" :results table :jq-args "--raw-output"
#+begin_src restclient
:api-url-base = https://api.appstoreconnect.apple.com
:api-path = "v1/appCategories"
:api-query = "include=subcategories"

# :gh-token := (auth-source-pass-get 'secret "api.github.com/dcunited001^ghub")
# Authorization: Bearer :gh-token

:headers = <<
Accept: application/vnd.github+json
User-Agent: Emacs
#

GET :api-url-base/:api-url-path?:api-query
:headers

# nope, just use :jq and :jq-args above.
# -> jq-set-var :repo-sizes map(.owner)
# -> jq-set-var :repo-sizes map(. | "(.owner.login)")
#+end_src

#+RESULTS:
#+BEGIN_SRC js
{
  "errors": [
    {
      "status": "401",
      "code": "NOT_AUTHORIZED",
      "title": "Authentication credentials are missing or invalid.",
      "detail": "Provide a properly configured and signed bearer token, and make sure that it has not expired. Learn more about Generating Tokens for API Requests https://developer.apple.com/go/?id=api-generating-tokens"
    }
  ]
}
// GET https://api.appstoreconnect.apple.com/:api-url-path?"include=subcategories"
// HTTP/1.1 401 Unauthorized
// Server: daiquiri/5
// Date: Thu, 23 Jan 2025 17:31:29 GMT
// Content-Type: application/json
// Content-Length: 350
// Connection: keep-alive
// Strict-Transport-Security: max-age=31536000; includeSubDomains
// X-Apple-Jingle-Correlation-Key: YN4DGE2AKSTQZFUTTCD75RPIZM
// x-daiquiri-instance: daiquiri:18493002:mr85p00it-hyhk04114201:7987:24RELEASE242:daiquiri-amp-all-shared-ext-001-mr
// Request duration: 0.518119s
#+END_SRC

**** Luckily

The example API request apparently has all the categories. And there are a
shitton of sticker categories for all you happy ass people to share to each
other -- meanwhile, most of those features are absolutely meaningless to me:
I've never used almost any new, non-technical features since about 2015. The
social features? almost zero.

#+begin_src jq :in-file ./data/appstoreconnect.appCategories.json :results table :cmd-line "-r"
.data | map(select(.relationships.parent.data == null))
  | sort_by(.id)
  | map([.id, (.attributes.platforms | join(","))])
  | @text
#+end_src

#+RESULTS:
| BOOKS                    | IOS,MAC_OS,TV_OS |
| BUSINESS                 | IOS,MAC_OS,TV_OS |
| DEVELOPER_TOOLS          | IOS,MAC_OS,TV_OS |
| EDUCATION                | IOS,MAC_OS,TV_OS |
| ENTERTAINMENT            | IOS,MAC_OS,TV_OS |
| FINANCE                  | IOS,MAC_OS,TV_OS |
| FOOD_AND_DRINK           | IOS,MAC_OS,TV_OS |
| GAMES                    | IOS,MAC_OS,TV_OS |
| GRAPHICS_AND_DESIGN      | IOS,MAC_OS,TV_OS |
| HEALTH_AND_FITNESS       | IOS,MAC_OS,TV_OS |
| LIFESTYLE                | IOS,MAC_OS,TV_OS |
| MAGAZINES_AND_NEWSPAPERS | IOS,MAC_OS,TV_OS |
| MEDICAL                  | IOS,MAC_OS,TV_OS |
| MUSIC                    | IOS,MAC_OS,TV_OS |
| NAVIGATION               | IOS,MAC_OS,TV_OS |
| NEWS                     | IOS,MAC_OS,TV_OS |
| PHOTO_AND_VIDEO          | IOS,MAC_OS,TV_OS |
| PRODUCTIVITY             | IOS,MAC_OS,TV_OS |
| REFERENCE                | IOS,MAC_OS,TV_OS |
| SHOPPING                 | IOS,MAC_OS,TV_OS |
| SOCIAL_NETWORKING        | IOS,MAC_OS,TV_OS |
| SPORTS                   | IOS,MAC_OS,TV_OS |
| STICKERS                 | IOS              |
| TRAVEL                   | IOS,MAC_OS,TV_OS |
| UTILITIES                | IOS,MAC_OS,TV_OS |
| WEATHER                  | IOS,MAC_OS,TV_OS |


** Software

*** How to make your opinionated-isms matter

GCD is one of the engineering decisions Apple made and enforced throughout
their software which would not be possible without Steve Jobs' occasional
enforcement of opinionated design patterns.

It's not that putting Steve Jobs in front of a computer would give you software
projects utilizing code like this. Instead (IMO) he probably had advisors who
had rigorously evaluated/debated the usage of sofware design patterns like this.

#+begin_quote
This is similar to how your great Programming Language pioneers like Matz &
Guido would've needed to write/rewrite hundreds or thousands of test programs to
evaluate the impact of small changes to their languages (on the order of
dialect). So, beside your langauge's codebase, you have a list of versioned
programs, with filenames in parameterized form -- a version number plus a few
hints on the changes to the lexer/parser which significantly change the
functioning of this example program. Hopefully, as you change branch/tag then at
least one program of each version lexes, parses and runs. This helps you
simplify the truly difficult problem of programming language design: how small
changes to grammar produce large changes in how we think about programs.

This is how I've imagined that I would produce a composite optimization funciton
to guide the design decisions I was making
#+end_quote

Objective-C itself is another one of these decisions which were obstinant and a
bit tyranical actually, but whose ubiquity in the Apple software ecosystem are
kinda responsible for a ton of downstream benefits.

So by evaluating the long-term consequences of decisions like this, Apple (and
to some extent Steve Jobs, the Decider) could envision the long-term
consequences of seemingly minor design patterns or those which they needed to
tyranically enforce ... by encouraging their community of employees & software
developers to utilize. They made decisions competitors either couldn't make or
couldn't benefit from -- who suffered from several tragedies of the commons.
Apple also had the control over hardware required to make these decisions matter
the most.

*** Grand Central Dispatch

iOS and MacOS provide [[https://en.wikipedia.org/wiki/Grand_Central_Dispatch][The semaphore pattern via Grand Central Dispatch]].

#+begin_quote
It is an implementation of task parallelism based on the thread pool pattern.
The fundamental idea is to move the management of the thread pool out of the
hands of the developer, and closer to the operating system.
#+end_quote

The "sleak and fast/smooth" feel of iOS and many of the sleek graphical features
of Mac OSX around 2005-2010 were possible (or even easy) because of these
lower-level architectural design decisions

GCD would be possible elsewhere, but you get the most benefits out of it when
almost/everything utilizes it. I don't remember all the details actually... but
it shows up pretty much everywhere.


* Hardware

** Macbook Pro 2011

*** System Time

If the battery's been empty for long periods of time, the =LocalRTC= time
resets/drifts. To fix this:

+ use a Linux ISO and connect NTP to update time in the booted Linux.
+ check with =date= and =timedatectl show=
+ when it's correct, use =timedatectl --adjust-system-clock= to be sure (i don't
  think this writes)
  

*** Kernel Panic Issues

It's probably bad RAM, but it's cost me an unbelievable amount of time. It
doesn't display the error unless you're in a terminal.

**** SMART Status

***** Where is the SMS (Sudden Motion Sensor)?

[[https://support.apple.com/en-us/HT201666][Mac notebooks: About the Sudden Motion Sensor]]

- SMS events are logged in smartctl as "Free Fall", which shows more than 4,000
  events ... I've dropped this laptop like twice.

***** High Load_Cycle_Count (857372)

[[https://unix.stackexchange.com/questions/504245/s-m-a-r-t-shows-high-load-cycle-count-why-and-how-to-prevent-the-number-from][S/O post]] answers that this is results from a technique Western Digital (and
other manufacturers use).

**** Testing RAM
Ram tests fine

** Macbook Pro Late 2013 (fully loaded)

Screen is broken. Go figure. The keyboard bounced -- long time ago... lesson
learned. Anyways . . . It's usable & worth salvaging, but the display damage is
refractory: gets worse, doesn't get better.

Options:

+ use as server ... but literally anything touching this makes the display
  worse, though it's boot menus are operable without it.
  - however, the unibody frame is necessary for cooling to work
+ use as scrap, buy a nearly identical MBP, same year/model -- but without the
  massive surcharge that someone would add for a fully loaded (which mine was)
  - move the logic board to the new body and just use as is.

*** Issues

**** Touchpad on Guix

Sometimes it's necessary to blacklist the =usbmouse= module because it

**** AHCI SSD

So I have a 500GB SSD which is difficult to integrate into any system. (details
on [[https://forums.macrumors.com/threads/upgrading-2013-2014-macbook-pro-ssd-to-m-2-nvme.2034976/][macrumors]])

**** Linux GPU support is meh on arch

- arch briefly had the 4xx nVidia drivers ...

**** Converting the MBP into a slaptop

This computer has better hardware than most of what I'm using. Can I convert it
into a server?

Maybe: [[https://www.theverge.com/22965732/macbook-decapitation-slabtop-mod-mac-studio-event-rumor-keyboard-computer-diy][Honey, I decapitated the MacBook (Macbook 2009)]]

The article covers how to drive a headless 2009 and +the problems you encounter+
the valuable life lessons you learn along the way.

+ You will lose display/webcam on most models
+ You may lose WiFi on older models

Also:

+ You can't easily change BIOS settings if you're not running MacOS.
+ Attempting to install MacOS to do various things may be complicated if the
  hardware is in a wierd state.

I would definitely not recommend doing this to anyone else.

But .... the laptop is actually spec'd out to coordinate Spark/Kafka compute
tasks or be a K3S master node (with rigged elections) ... and ideally, if I can
use it like that, it will run hot from time to time. Also:

+ The laptop won't cool properly with the lid closed -- kinda important!
+ The laptop will generally cool better without the display AFAIK.
+ I can't reuse its 500GB NVMe SSD, since it's not exactly portable.
+ The display is broken and the liquid crystal drained from the working
  half. The display costs more than the laptop ... used. And it's unlikely to
  find one that's a exact match, even if it's late 2013.
+ I already borked a fragile WiFi antenna and I hate WiFi anyways.
+ Servers don't need webcams.

... what else could possibly go wrong?

***** TBD: Does the slaptop server work?

If it works, I know someone who wants to buy 2014/2015 macbooks with broken
displays ... since these laptops are designed with good hardware that is
well-documented, but since they're generally worthless when you need to replace
the display.

[[https://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Retina+Display+Late+2013+Display+Assembly+Replacement/27666][MacBook Pro 13" Retina Display Late 2013 Display Assembly Replacement]]

#+begin_quote
Down here along X-axis, we have "fuck around."

And over here on the Y-axis, we have "find out."
#+end_quote

I kinda want to examine the Laptop's hardware state in Linux /before/ I
decapitate it and plan on ... ummm recapitating it if I gotta find out.
