:PROPERTIES:
:ID:       c2afa949-0d1c-4703-b69c-02ffa854d4f4
:END:
#+TITLE: Cryptography
#+DESCRIPTION: Crypto
#+TAGS:
* Docs

There is more info about [[https://github.com/dcunited001/ellipsis/blob/master/SSH.org][SSH]] and [[https://github.com/dcunited001/ellipsis/blob/master/GPG.org][GPG]] in my dotfiles: [[github:dcunited001/ellipsis][dcunited001/ellipsis]]. I
know enough to know I don't know much.

* Resources

* Topics

* Issues


* SSH

** Docs

** Resources
+ [[https://access.redhat.com/discussions/2143791#comment-1288511][List supported ciphers for client/server]]

*** JumpProxy

+ OpenSSH Cookbook: [[OpenSSH/Cookbook/Proxies and Jump Hosts][Proxies and Jump Hosts]]
+ [[SSH ProxyCommand example][SSH Proxy Command]] for compatibility with older clients

** Topics

*** SSH =JumpProxy= and =ProxyCommand=

Okay wow this is a thing now. Nice to know.

*** SSH Agent Forwarding

+ [[https://security.stackexchange.com/questions/92479/security-of-nested-ssh][Security of Nested SSH]]: Why not using agent forwarding might be a bad idea
+ [[Why using SSH agent-forwarding is a Bad Idea][Why using SSH Agent Forwarding is a bad idea]]: also explains

*** Canonicalization

The following options affect how DNS names specified in =ssh_config= are either
rewritten or redirected via CNAME's. The =ProxyJump= method needs to be aware of
an available DNS host you want to connect to (e.g. it won't have access to IP's
in hosts configured in your local =/etc/hosts=.

+ CanonicalDomains :: Restrict =CanonicalizeHostname= to these upper-level
  domains.
+ CanonicalizeFallbackLocal  ::
+ CanonicalizeMaxDots (1) :: These are processed from the left. The =man
  ssh_config= says: "The default, 1, allows a single dot: hostname.subdomain..."
+ CanonicalizePermittedCNAMEs (none) :: rules DNS names with CNAME redirects
+ CanonicalizeHostname (no) :: set to =always= to canonicalize the
  jumped-to-host when using =ProxyJump=.
  - I believe this means the local ssh does the CNAME lookup/rewrite before any
    connection and thus the request to proxy sent to the the jump-host is
    encapsulated as canonicalized.

**** Configure Why?

This mainly helps you ensure that your delegated SSH connections are taking the
right path to reach the right host. Like when:

+ A DNS name resolves to a different IP address outside the internal network
+ A firewall would reject your connection if your traffic takes the wrong route
+ Or a load-balancer would behave differently when forwarding your connections'
  traffic depending on the DNS name.

This would be relevant for:

+ Hardening SSH connections against DNS-based MitM attacks, somewhat
+ Working on networks with split-horizon DNS, the internal records for which are
  not usually publicly available outside the network.
+ When Hairpin NAT does Hairpin NAT things (or so I've heard)
+ Relying on port-forwarding, while ensure connection is redirected to an
  internally available hostname.
+ Ensuring the ProxyJump is jumping you to the right host and taking the
  expected path.
+ You're on a VPN, but you don't have DNS configured right on your local host
  (or maybe it is... since this relies on DNS)
+ You want to connect to specific server doing "GeoIP things" or that is
  abstracted behind a VIP -- [[https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/expand-the-edge][global anycast, regional anycast, unicast]] -- but
  you want to connect to it using the public-facing DNS name it expects (maybe
  this describes a rational or valid situation... maybe not)

See [[https://sleeplessbeastie.eu/2020/08/24/how-to-perform-hostname-canonicalization/][this blog]] for a walkthrough.

The minimum configuration is something like:

#+begin_example ssh-config
CanonicalizeHostname yes
CanonicalDomains example.org example.com
#+end_example

Another example from the blog would work (I think...) when =*.redis.example.org=
would take send your traffic outside the network or hit a load-balancer with the
invalid parameters.

#+begin_example ssh-config
CanonicalizeHostname yes
CanonicalDomains example.org example.com
CanonicalizeMaxDots 1
CanonicalizeFallbackLocal yes
CanonicalizePermittedCNAMEs *.redis.example.org:redis.internal.example.com
#+end_example


** Issues

*** Configure key exchange

Not all daemons support all algorithms, not all clients are built with all key exchange algs.

#+begin_src ssh-config
KexAlgorithms foobar-123, ... # in order of priority
#+end_src

* GPG

** Docs

** Resources

** Topics

** Issues


* Certificates

** Cloud

See [[https://datatracker.ietf.org/doc/html/rfc8555#section-7.3.4][RFC 8555 section on EAB]], which "associates an ACME account with an existing
account in a non-ACME system, such as a CA customer database."

*** GCP

Certificate Manager: [[https://cloud.google.com/certificate-manager/docs/overview][overview]]

+ See [[https://cloud.google.com/certificate-manager/docs/overview#limitations][limitations]]: this only creates certs to be deployed to GCP products. Other
  certs can be uploaded, but it mostly manages certs deployed to LB's and
  Proxies (the things I can't afford)

[[https://cloud.google.com/certificate-manager/docs/reference/public-ca/rest][Public Certificate Authority API]]

+ The ACME client must support EAB
+ Google-provided client libs are recommended

*** AWS


** Certmagic

Caddy's [[https://caddyserver.com/docs/automatic-https][automagic TLS features]]. By default it will use =HTTP-01= and
=TLS-ALPN-01= at random, unless they're disabled. It can use =DNS-01= as well.

*** Resources

**** Backends

+ [[github:grafana/certmagic-gcs][grafana/certmagic-gcs]] this does offer to encrypt the secrets it stores
+ [[github:trea/caddy-gcp-secret-manager][trea/caddy-gcp-secret-manager]] few stars, four commits and I don't know go

** Let's Encrypt

*** Docs
+ [[https://community.letsencrypt.org/t/dns-providers-who-easily-integrate-with-lets-encrypt-dns-validation/86438][Let's Encrypt offerings by DNS provider]]

*** Resources


*** Topics

**** TLS-ALPN-01

+ via [[https://caddy.community/t/caddy-supports-the-acme-tls-alpn-challenge/4860][caddy]]

**** Wildcard Certs

This is probably noted in another zettel specifically on wildcard certs, but
Let's Encrypt /only/ allows =DNS-01= challenges for these -- which must be why I
haven't considered any of the other methods until I figured out what
=TLS-ALPN-01= is.

***** Damit

I can't ever do the research /AND/ complete something quickly enough for the
information to be ready-at-hand ... which means I can't easily repeat what I've
almost completed in order to reinforce it.

Thanks a lot for assassinating my career, America. I'm sure I'll forget about it
sometime soon. What's wrong with this combinatorial explosion right here?

#+begin_quote
(script-like and caddy-like ACME clients)

$\otimes$

(acme servers and their wiley rules)

$\otimes$

(certificate storage intermediaries and backends)

$\otimes$

(client-specific idiosyncracies: how does ansible start a server for
TLS-ALPN-01? can i do this with a GCP Cloud Workflow? does cloudflare allow more
than 2 subdomains? NO)
#+end_quote

Dealing with all that is much easier when:

+ 10 people you know can talk to
+ 10 people they know who have accumulated knowledge from
+ 10 people they know
+ all integrating that random trivia for a continuous period of 10 years

Wow I must be so incompetent. No wonder I have zero social connections. What do
those do anyways? Nope, if I didn't search it on Google or read it in a source
repository or see it on a youtube video, it doesn't exist to me. I've been
robbed of $500,000 in income and that's me being reasonable about it.


* [[https://github.com/hashicorp/vault][Vault]]

** Docs

** Resources

** Topics

*** Kubernetes
+ [[https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-external-vault][Integrate a Kubernetes Cluster with an External Vault]]
+ [[https://www.hashicorp.com/products/vault/kubernetes][Running Vault on Kubernetes]]

** Issues

* Roam
+ [[id:d0d5896c-0cf5-4fa7-bf37-a2e3499c69d2][Red Team]]
+ [[id:29d8222b-618f-454e-8a76-6fa38f8ff1f6][Blue Team]]
+ [[id:013f2a46-ac4a-4881-a25a-ef0beb9d8290][Yubikey]]
+ [[id:a3a83227-d12f-4fd4-aa7b-700d7c51fc89][TPM]]
