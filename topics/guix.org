:PROPERTIES:
:ID:       b82627bf-a0de-45c5-8ff4-229936549942
:END:
#+title: Guix

+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]]

* Docs
+ [[https://guix.gnu.org/en/manual/devel/en/html_node/][Reference Manual]] (devel)
+ [[https://guix.gnu.org/cookbook/en/guix-cookbook.html][Cookbook]]
+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]] (roam)

* Resources

** Community
*** GNU
+ [[https://debbugs.gnu.org/db/ix/full.html][debbugs]] (debian bugs)

*** IRC

** Channels
+ [[https://www.fosskers.ca/en/blog/contributing-to-emacs][flatwhatson/guix-channel]]

** Articles

+ [[https://gexp.no/blog/hacking-anything-with-gnu-guix.html][Guix for Development]]
+ [[https://the-dam.org/docs/explanations/GarbageCollection.html][Aggressive Guix Grbage Collection On The Dam]]

*** [[Six Months of Guix-ery]]
What this article does very well: describes first and second-order responses to
using Guix for 6+ months -- i.e. it assumes you can find the "how" elsewhere and
gives an honest look at the "why". Almost entirely positive. High-level
discussion of actual problems encountered and solutions found.

+ differentiates Guix from Nix
+ describes ecosystem, potential installation pitfalls, packaging
+ describes =guix.scm= vs =manifest.scm=
+ describes packaging
*** [[https://write.trees.st/juliana/setting-up-a-guix-channel][Setting Up A Guix Channel]]
Another good article (from same author as Six Months of Guix-ery)
*** [[https://peterloleungyau.github.io/post/more_guix_private_channel/][More Guix: Private Channel and Internal Package]]
Another good writeup on running a Guix Channel. [[https://peterloleungyau.github.io/tags/guix/][Other posts on Guix]]

* Platforms

** Embedded
*** Resources
+ [[https://guix.gnu.org/en/blog/2023/building-toolchains-with-guix/][Building Toolchains with Guix]] embedded build pipelines with [[https://docs.zephyrproject.org/latest/introduction/index.html][Zephyr]] (RTOS for
  embedded, plus tooling; github [[https://github.com/zephyrproject-rtos][org]]) and [[https://docs.zephyrproject.org/latest/introduction/index.html][West]] (similar to repo for spec'ing out
  build deps & structure)

*** TODO probably move the iot/embedded elsewhere 

* Build Systems

See [[id:bd7dd6c8-7035-4e7a-b730-0d7f9c61ef9f][DC Guix]] or the backlinks.

* Topics

** Docs

The =texi= build calls into =./doc/build.scm=. This file leverages a lot of
scheme-fu and tricks from =./guix/gexp.scm=.

It would be nice to give some of the subordinate Guix channels some of the same
treatment as the main Guix channel. For now, this mostly means that you'd get 10
levels of rainbow parens in the HTML docs, but that beats the snot out of the
Texinfo PDFs, which do not utilize any syntax highlighting. This is alright, but
... it really helps me to grok things.

This is really a non-issue, as (at least in the next few years) the smaller
channels outside of Guix proper will usually contribute their source code into
Guix (e.g. =gocix= has patches in the works for its =oci= contributions)

However, later on, it may make sense to do something with
=guile-syntax-highlighting= and =wasm=, considering there's a considerable amount of
work going into Guile's support for wasm. Thus, such work would be more a
contribution towards Guile than Guix.

*** Syntax Highlighting

The scheme in the Guix docs is highlighted via =guile-syntax-highlight= in
[[https://git.savannah.gnu.org/cgit/guix.git/tree/doc/build.scm][doc/build.scm]]:

+ [[https://git.savannah.gnu.org/cgit/guix.git/tree/doc/build.scm?h=master#n792][html-manual]] calls [[https://git.savannah.gnu.org/cgit/guix.git/tree/doc/build.scm?h=master#n884][syntax-highlighted-html]] which is defined [[https://git.savannah.gnu.org/cgit/guix.git/tree/doc/build.scm?h=master#n354][here]]
+ This uses =with-extensions= (defined in [[https://git.savannah.gnu.org/cgit/guix.git/tree/guix/gexp.scm?h=master#n1458][guix/gexp.scm]]) which basically decorates
  =body= with =extensions= so that the guile scheme can locate definitions for code
  without necessarily containing their definitions in the global scheme
  environment.

*** build.scm structure

This is a script and not a module itself:

+ There is no =(define-module ...)= form
+ So umm ... nothing is exported

After defining some =%top-level-identifiers=, the =./doc/build.scm= has these
top-level entry points:

+ =(define (tex-manual-images source) ...)=
+ =(define* (tex-manual-source source #:key ...) ...)=
+ =(define (normalize-language-code language) ...)=
+ =(define* (html-manual-identifier-index manual base-url #:key ...) ...)=
+ =(define* (html-identifier-indexes manual directory-suffix #:key ...) ...)=
+ =(define* (syntax-highlighted-html input #:key ...) ...)=
+ =(define* (stylized-html source input #:key ...) ...)=
+ =(define* (html-manual source #:key (languages %languages) #:key ...) ...)=
+ =(define* (pdf-manual source #:key (languages %languages) #:key ...) ...)=
+ =(define* (guix-manual-text-domain source #:optional ...) ...)=
+ =(define* (localization-helper-module source #:optional ...) ...)=
+ =(define* (html-manual-indexes source #:key ...) ...)=
+ =(define* (pdf+html-manual source) #:key ...) ...)=
+ =(define (latest-commit+date directory) ...)=
+ =(define guile-manual ...)=
+ =(define (for-all-languages index) (map ... ) %languages)=
+ =(define guile-mono-node-indexes (for-all-languages ...))=
+ =(define guile-split-node-indexes (for-all-languages ...))=
+ =(define (merge-index-alists alist1 alist2) ...)=

And =%languages= refers to human langauges  

The final top-level sexp calls into these definitions:

#+begin_src scheme
(let* ((root (canonicalize-path
              (string-append (current-source-directory) "/..")))
       (commit date (latest-commit+date root))
       (version (or (getenv "GUIX_MANUAL_VERSION")
                    (string-take commit 7)))
       (select? (let ((vcs? (git-predicate root)))
                  (lambda (file stat)
                    (and (vcs? file stat)
                         ;; Filter out this file.
                         (not (string=? (basename file) "build.scm"))))))
       (source (local-file root "guix" #:recursive? #t
                           #:select? select?)))

  (define guix-manual
    (html-manual source
                 #:manual "guix"
                 #:version version
                 #:date date))

  (define guix-mono-node-indexes
    ;; Alist of indexes for GUIX-MANUAL, where each key is a language code and
    ;; each value is a file-like object containing the identifier index.
    (html-identifier-indexes guix-manual ""
                             #:manual-name "guix"
                             #:base-url (if (string=? %manual "guix")
                                            (const "")
                                            (cut string-append
                                              "/manual/devel/" <>))
                             #:languages %languages))

  (define guix-split-node-indexes
    ;; Likewise for the split-node variant of GUIX-MANUAL.
    (html-identifier-indexes guix-manual "/html_node"
                             #:manual-name "guix"
                             #:base-url (if (string=? %manual "guix")
                                            (const "")
                                            (cut string-append
                                              "/manual/devel/" <>
                                              "/html_node"))
                             #:languages %languages))

  (define mono-node-indexes
    (merge-index-alists guix-mono-node-indexes guile-mono-node-indexes))

  (define split-node-indexes
    (merge-index-alists guix-split-node-indexes guile-split-node-indexes))

  (format (current-error-port)
          "building manual from work tree around commit ~a, ~a~%"
          commit
          (let* ((time (make-time time-utc 0 date))
                 (date (time-utc->date time)))
            (date->string date "~e ~B ~Y")))

  (pdf+html-manual source
                   ;; Always use the identifier indexes of GUIX-MANUAL and
                   ;; GUILE-MANUAL.  Both "guix" and "guix-cookbook" can
                   ;; contain links to definitions that appear in either of
                   ;; these two manuals.
                   #:mono-node-indexes mono-node-indexes
                   #:split-node-indexes split-node-indexes
                   #:version version
                   #:date date))
#+end_src

** Programming Langauges
** CWT: [[https://www.commonwl.org/][Common Workflow Language]]

"An open standard for describing analysis workflows."

**** TODO dig into CWT tools for data science/analysis



** Scripting
*** Completion

+ Guix =bash= completion is found at =./etc/completion/bash/guix=
+ The =zsh= completion is far more complete
*** Check hash

See [[https://git.sr.ht/~unmatched-paren/conf/tree/root/item/hashrepo.fish][hashrepo.fish in ~unmatched-paren/conf]] via [[https://www.youtube.com/watch?v=8m8igXrKaqU&t=2022s&pp=ygULZ3VpeCBzb2NpbGE%3D][Guix Patch Reviews Using Mumi by jgart]]



** Channels


*** Viability

**** Running your own channel

TL;DR; for community channels to be viable, they all need to upgrade at a
relatively regular pace or users will begin to remove their packages.

Any issues resulting from inter-channel package specification compatability
should be simple for a user to /at least/ identify and decide how to react.

#+begin_quote
Basically, this is one reason the Guix Manual sorta warns you about starting
your own channel. The community is better served if a small channel is instead a
small set of package recipes.

Then your package recipes (1) are always mostly flat within minimal deps (2) and
didn't require you to move the world to develop, so if one channel rejects
something, it's not that big of a deal.

The organization overhead should encourage you to find a channel (probably Guix
or Non-Guix) to submit the patches. Being lightweight, the total maintainence
burden for the channel is somewhat minimal because changing one thing isn't
going to break a lot of other packages (the package graph makes this easier to
spot).

Having less dependencies is generally better, since if the scope of packages
affected by some "Deep-Kansas" project, then if it has 15,001 dependant
packages, then it's just unlikely it would ever change.
#+end_quote

**** Rhythm of updates

One practical concern with non-official channel is that, once a user subscribes
to it, they may receive errors when running =guix pull= -- this depending on the
dependencies that community channels are themselves pinned to (see the
[[https://github.com/guix-science/guix-bioc/blob/master/.guix-channel][.guix-channel]] file, i believe).

For channels truly concerned about reproducibility -- like Guix HPC or Guix
Bioinformatics -- they were pinned to a specific commit SHA of the main Guix
channel, which caused issues for software that required packages not available
in newer versions of the main Guix channel (AFAIK...).

For Guix HPC, This looks like it's no longer the case though, but for me
prevented upgrades at various points. It may have silently kept some software at
lower versions (without me realizing it). I wanted Julia something-or-other, but
truly didn't need it, so it was simple enough to identify the problem ... but I
have pretty good intuition about fairly technical complications.

*** Reproducibility

Whether one has true "'reproducibility'" of software used for "academic
research" must withstand some assertions on the =guix time-machine=
functionality when a dependenency graph of channels are involved. More clearly
stated:

For some set of channels & sha's that your academic software dependends on --
specified by [[https://github.com/abcdw/guix-clojure/blob/main/channels-lock.scm][channels-lock.scm]] and requiring [[https://github.com/abcdw/guix-clojure/blob/main/Makefile][guix time-machine]] -- can you always:

1. download & reconstruct each Guix Channel's state for it's set of commit SHA's
   from multiple remotes
2. AND validate that commit's signature, which requires PGP key and a chain of
   valid signatures (AFAIK, every commit in the repository must have a valid PGP
   signature AND will have a different commit SHA, which is impossible to rebase
   without cracking the SHA algo.
3. AND then build the software, whose own Guix Base32 SHA's should also
   validate.



** [[https://guixwl.org/tutorial][Guix Workflow]]

*** TODO look into building profiles/containers/environments
+ [ ] see =Emacs.org= and =.config/guix/manifests/emacs.scm= from daviwil's
  dotfiles. the =activate-profiles= command builds these
+ [ ] how to build something with guix and run it where guix isn't available?
*** TODO restrict guix commands sent to guix-daemon to a group

** Development Environments
+ [[https://rednosehacker.com/how-to-setup-a-remote-pair-programming-environment-with-gnu-guix][How to setup a remote pair-programming environment with GNU Guix]]
  - using [[https://issues.guix.gnu.org/47608][lockstep.el]] for pairing within an emacs session

** Build Farms

+ 5.3 [[https://guix.gnu.org/en/manual/en/html_node/Substitutes.html][Substitutes]]

** Shepherd

+ [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjE8d2ZuIL_AhVqEVkFHRRnADQQFnoECAgQAQ&url=https%3A%2F%2Fguix.gnu.org%2Fen%2Fblog%2F2020%2Fgnu-shepherd-user-services%2F&usg=AOvVaw3vWxXmUbtNdfkqDsvsL8xB][GNU Shepherd User Services]]

*** Podman

+ [[https://github.com/abcdw/notes/blob/21b4dda/notes/20240618072954-using_rootless_podman_instead_docker_feat_guix.org?plain=1#L7][abcdw notes on rootless podman]] and [[https://git.sr.ht/~abcdw/rde/tree/master/item/src/rde/features/containers.scm][./src/rde/features/containers.scm]]

*** Logging
+ [ ] logging commands/interface/filtering

** Security
*** [[https://unix.stackexchange.com/questions/222999/installing-nix-or-guix-without-root-permissions][Guix and Sudo]]: =--with-store-dir=
*** GNU Guix [[https://github.com/pjotrp/guix-notes/blob/master/GUIX-NO-ROOT.org][without root access]]
*** [[https://nvd.nist.gov/vuln/detail/CVE-2021-27851][CVE-2021-27851]]: Guix-daemon build escalation
- what limits are there on who can ask guix-daemon to do what?

** Reporoducibility
+ [[https://mfelsoci.gitlabpages.inria.fr/thesis/environment.html][Reproducible Thesis using GNU Guix & Org Mode]]
+ Guix HPC [[https://gitlab.inria.fr/guix-hpc/website/-/blob/master/drafts/activity-report-2021.md][Activity Report 2021]]

***** Parameterized Packages

GSoC 2023:
+ [[https://summerofcode.withgoogle.com/archive/2023/projects/heQYLzrz][GSoC link]]
+ [[https://github.com/matchcase/parameterized-packages.org][matchcase/parameterized-packages.org]]
+ Most recent version: [[https://notabug.org/cel7t/guix-parameters][cel7t/guix-parameters]]


** Thunks

The =(guix records)= module introduces a thunkable record syntax, in addition to
several other syntaxes. This style of record is apparently inspired by =(srfi
srfi-35)= which we'll all have to admit is probably one of the better srfi's.

+ map-fields :: a syntax meaning "you can't do this" ... map-fields call
+ record-error :: meaning you maybe could do this, but ask nicely
+ this-record :: if you thunked a field on a record, it knows what thunked it
+ make-syntactic-constructor :: generate constructor for guix records
  - this handles delayed, thunked, sanitized or innate fields
+ define-field-property-predicate :: evaluate a predicate and return the field name
  - used to ensure fields are: delayed, thunked, sanitized or innate
+ define-record-type* :: define otherwise unthunkable record with thunkability.
+ lookup-field :: used in =match-record-inner= helps abstract the "offset in the record" ... ?
+ match-record-inner :: recursive syntax that run queries on records
+ match-record :: interface to the above. basically just "active record" and so
  now maybe that name makes a bit more sense.
  - lacks implementation for queries on thunked/delayed fields.

Only =define-record-type*= and =match-record=

** Dynamically Linked Lib64

+ [[https://www.draketo.de/software/guix-work.html][One developer's list of workarounds for proprietary software]]

*** Background

When an ELF binary is compiled/linked, glibc makes a lot of metadata available
to the process by building it into the binary. This includes =rpath= and etc.

These commands from the [[id:7edab00d-1a52-4a27-b83a-f64639e84a77][Guix: installing matlab]] note give more info. Some of
this includes paths to dyn. loaded libaries (of compatible interface).

#+begin_src sh :eval no
# print useful elf data from main bin
patchelf --print-interpreter $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-rpath $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-soname $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-needed $MATLAB_PATH/$MATLAB_INSTALLER

# find all dynlibs without execute bit
find . -name "*.so*" ! -perm -u+x -exec ls -al \{\} +

# print entry points for dynlibs
find . -name "*.so*" ! -perm -u+x -exec readelf --segments \{\} +

# read the RPATH from the ELF header
readelf -d $MATLAB_PATH/$MW_INSTALLER | grep 'R.*PATH'
#+end_src


**** Build

+ wrap resulting derivation within BuildFHS to retarget


*** One proposed solution
[[https://www.reddit.com/r/GUIX/comments/11iaov9/comment/jbh8u04/?context=3][This reddit comment]] recommends:

#+begin_src scheme
(extra-special-file "/lib64/ld-linux-x86-64.so.2"
                    (file-append glibc "/lib/ld-linux-x64-64.so.2")
#+end_src

And then set =LD_LIBRARY_PATH= as needed.

#+begin_src shell :eval no
if [[ $- == *i* ]]
then
  export LD_LIBRARY_PATH=$LIBRARY_PATH
fi
#+end_src

I'm not sure about setting it in =.bashrc= like that.



** Notes on installer images


*** Installer ISO References In Guix Source

**** [[https://github.com/guix-mirror/guix/tree/master/gnu/installer][./gnu/installer/]]

 provides code mostly referenced by loaded by ./gnu/installer.scm

 - notes on [[https://github.com/guix-mirror/guix/blob/master/gnu/installer.scm#L246-L254][adapting keymap configuration]]

**** ./gnu/install.scm

defines installation images.

Contains quite a few definitions for [[https://github.com/guix-mirror/guix/blob/master/gnu/system/install.scm#L585-L680][embedded installations]], which serve as
great documentation for getting bootloaders to run on esoteric hardware or in
weird/custom conditions (that ... maybe could be experimental enough to break
something, depending on the program you load and whether it has drivers.)


* Code

Apparently you can create a uboot image that runs on NES.

** Bootloader

*** ./gnu/bootloader.scm
+ all-modules
+ bootloader-modules
+ efi-bootloader-chain
  - assembles the final-bootloader
  - can include files
  -
+ efi-bootloader-profile
  - derivations built into a profile

+ records:
  - bootloader
  - bootloader-configuration

*** ./gnu/bootloader/*.scm
Contains code that processes bootloader packages to prepare for installation
after derivation.

*** Bootloader Packages
**** ./gun/packages/bootloaders.scm
Packages that build bins for bootloaders to install

+ make-grub-efi-netboot
  - this demonstrates a gexp derivation that operates on a =grub-efi= package to
    produce netboot *.efi artifacts.

*** Making a diskless netboot image

There are several points where boot/network could fail:

+ inconsistencies in the handoff between boot stages
+ [[https://wiki.gentoo.org/wiki/Diskless_nodes#Configure_diskless_networking][reconfiguration of network]] (without killing NFS connection)
+ inconsistent fstab or disk state

Several artifacts would be produced:

+ potentially a iPXE/gPXE like config to instruct the client to run a binary
  (and/or to provide m)
+ an image to serve via TFTP
+ a squashfs filesystem to serve via NFS

This would require:

+ requires tweaking make-grub-efi-netboot or reimplementing a similar process to
  produce the net variant of a bootloader.
+ if possible use squashfs instead of initramfs?
  - this requires kernel modules & args
  - this compresses as content is needed
    - problems with hardlinked files?
+ at this point, device state needs to be persisted
+ a separate squashfs will need to be pulled from a server
  - something besides NFS... though TFTP has size limitations
  - The new RFC bumps the block size to 65464 from 512-8192, but getting these
    sizes [[https://www.compuphase.com/tftp.htm][requires adjusting MTU]]. In theory, this would extend up to 4GB, but in
    practice ~100MB is practical (from MTU-overhead=1468).
  - gPXE supports HTTPS, but there's no Guix package for it
  - a syslinux package exists, but there are similar problems. NFS may be necessary.
+ to assemble the filesystem image served from NFS(? i don't like NFS)
+ something like busybox =switch_root= is needed to create a new fileroot
  - this will happen twice during boot, but the configuration to do so is split
    into pieces.
+ device state needs to be checked/persisted

  The [[https://forums.gentoo.org/viewtopic-p-8740753.html?sid=027c05e0bb657a0e26c7c0d2f74586e0][gentoo thread]] has many answers

* Issues
** Kernel Builds

*** Blowups on =/tmp= out of space (and limiting iso size)

The =/tmp= mount usually consumes half ram, so you may run the following. Using
75% for =/tmp= is probably excessive, lesser increases are probably safer.

#+begin_src shell
# for 16G => 24G,
sudo mount -o remount,size=24G,noatime,mode=1777 /tmp
#+end_src

*** Kernel+Firmware builds

The firmware packages all build on each other: the specific =*-firmware= packages
inherit =linux-firmware=, then filter out the firmware.

#+begin_example scheme
(define (select-firmware keep)
  "Modify linux-firmware copy list to retain only files matching KEEP regex."
  #~(lambda _
      (use-modules (ice-9 regex))
      (substitute* "WHENCE"
        (("^(File|RawFile|Link): *([^ ]*)(.*)" _ type file rest)
         (string-append (if (string-match #$keep file) type "Skip") ": " file rest)))))

(define-public amdgpu-firmware
  (package
    (inherit linux-firmware)
    (name "amdgpu-firmware")
    (arguments
     (cons* #:license-file-regexp "LICENSE.amdgpu"
            (substitute-keyword-arguments (package-arguments linux-firmware)
              ((#:phases phases #~%standard-phases)
               #~(modify-phases #$phases
                   (add-after 'unpack 'select-firmware
                     #$(select-firmware "^amdgpu/")))))))
    (home-page "http://support.amd.com/en-us/download/linux")
    (synopsis "Nonfree firmware for AMD graphics chips")
    (description "Nonfree firmware for AMD graphics chips.  While most AMD
graphics cards can be run with the free Mesa, many modern cards require a
nonfree kernel module to run properly and support features like hibernation and
advanced 3D.")
    (license
     (nonfree
      (string-append
       "https://git.kernel.org/pub/scm/linux/kernel/git/firmware"
       "/linux-firmware.git/plain/LICENSE.amdgpu")))))
#+end_example

I'm not really sure how this affects the structure of the builds. I'm trying to
determine, specifically, how this changes the structure of builds sent to the
guix-daemon. (either way, my kernel build was blowing up on =/tmp= out of space,
even when running =guix build linux= with no firmware)


** Locale

*** Unicode Normalization

[[https://stackoverflow.com/a/7934397][Everything you never wanted to know about unicode normalization]]
** Development Environments
*** Customizations to a project's =guix.scm= or =manifest.scm= for =guix shell=
This is a similar approach, but done with [[https://discourse.nixos.org/t/local-personal-development-tools-with-flakes/22714/6][nix flakes]].

+ a file =extra/nix.flake= is created that inherits from the root =nix.flake=
+ it's added to the git index, but not visible to the git commits ... (didn't
  know this was possible)
+ [[https://nixos.wiki/wiki/Flakes][nix flakes]]

** Nonfree Software

** OS with custom locale and XKB keyboard
** .guix-profile vs .config/guix/current (s/o link)
** Setting an alternate =/gnu/store=
** [[https://unix.stackexchange.com/questions/561093/what-is-the-difference-between-guix-profile-and-config-guix-current][Difference b/w guix profiles]]
** Emacs Guix
*** Can't get a guix repl up from within doom emacs (11/2022)
+ initially, it seemed there was a conflict between the geiser and emacs-guix
  sourced by doom-emacs and the emacs-native-comp manifest i use
  - doom emacs was pulling down emacs-guix and geiser.
  - removed =(scheme +guile)= from init.el, assuming that
  - resynced the emacs-native-comp, deleted all =*.elc= files, updated doom, ran
    =doom build=, waited and restarted the server.
  - here, it worked.

after restarting, it doesn't work:

#+begin_example
in procedure package0name: Wrong type argument: #<package abduco@0.6, gnu/packages/abduco.scm>""
#+end_example

it seems to crash pretty early

*** DONE Getting the guile environment working for emacs-native-comp on arch
CLOSED: [2022-12-04 Sun 08:01]
+ there are inconsistencies between the emacs build for arch and the one for
  guix. to simplify, i'm simply using the one from guix on both systems.
  - emacs-guix has never worked properly on arch, which is a matter of
    reconciling the system's guile config. on guix, I can just count on the
    system guile being ready to go and i haven't messed with it much. on arch,
    guile is required for quite a few things (gdb, kde error reports)

**** Resolution:

Emacs guix needs a consistent guile environment (See [[https://github.com/alezost/guix.el#important-note-for-non-guix-system-users][this note]]).

- also, running =doom purge= when moving emacs packages between guix and
  doom's straight is essential. any shared dependencies will likely be brought
  in from doom (not guix)
- in other words ... you kinda must pick a team (or micromanage your
  =EMACSLOADPATH=)

And nothing I was doing while rebuilding guix manifests and upgrading/rebuilding
doom emacs was actually doing anything (on either arch or guix...)

** GDK pixbuf issues

Can't seem to load =virt-manager=, getting pixbuf failures. [[https://issues.guix.gnu.org/63427][Issue #63427]] seems to
indicate that I can add =gdk-pixbuf= to the problematic profiles, which should
fix things by providing a =GDK_PIXBUF_MODULE_FILE=

* Installations
** Arch

**** Run the initial =guix pull=
+ =guix describe= doesn't work
+ Authorize guix substitutes from main Guix channel
+ Run =systemctl enable/start guix-daemon.service= then =guix pull=

**** Setup SystemD
+ The AUR package has set up systemd to launch under root.
  - The systemd service files will need to be updated
+ The =guix-daemon-latest.service= needs a path to be edited.
  - In =/usr/lib/systemd/system/guix-daemon-latest.service=, edit the
    =Service.ExecStart= variable: set the correct path for the user that
    installed Guix.
+ Disable/stop =guix-daemon= and switch over to =guix-daemon-latest=
  - This daemon runs a profile that was constructed via =guix pull=
  - When this profile is active
    - =.config/guix/current/bin/guix describe= should work properly

**** Configure =$PATH=
+ Set path to point =guix= binary to the one in =.config/guix/current/bin/=

**** Add custom channels

**** Tune Guix configuration
+ refine options for =guix-daemon=
+ configure substitutes for various packages

**** TODO Hack on a package within an isolated environment
[[https://www.reddit.com/r/GUIX/comments/p6x0cg/guix_environmentsworkflow_for_programming/][guix/direnv config]]
