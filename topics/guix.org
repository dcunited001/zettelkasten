:PROPERTIES:
:ID:       b82627bf-a0de-45c5-8ff4-229936549942
:END:
#+title: Guix

+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]]

* Docs
+ [[https://guix.gnu.org/en/manual/devel/en/html_node/][Reference Manual]] (devel)
+ [[https://guix.gnu.org/cookbook/en/guix-cookbook.html][Cookbook]]
+ [[id:87c43128-92c2-49ed-b76c-0d3c2d6182ec][Scheme]] (roam)

* Resources

** Community
*** GNU
+ [[https://debbugs.gnu.org/db/ix/full.html][debbugs]] (debian bugs)

*** IRC

** Channels
+ [[https://www.fosskers.ca/en/blog/contributing-to-emacs][flatwhatson/guix-channel]]

** Articles

+ [[https://gexp.no/blog/hacking-anything-with-gnu-guix.html][Guix for Development]]

*** [[Six Months of Guix-ery]]
What this article does very well: describes first and second-order responses to
using Guix for 6+ months -- i.e. it assumes you can find the "how" elsewhere and
gives an honest look at the "why". Almost entirely positive. High-level
discussion of actual problems encountered and solutions found.

+ differentiates Guix from Nix
+ describes ecosystem, potential installation pitfalls, packaging
+ describes =guix.scm= vs =manifest.scm=
+ describes packaging
*** [[https://write.trees.st/juliana/setting-up-a-guix-channel][Setting Up A Guix Channel]]
Another good article (from same author as Six Months of Guix-ery)

* Topics

** CWT: [[https://www.commonwl.org/][Common Workflow Language]]

"An open standard for describing analysis workflows."

**** TODO dig into CWT tools for data science/analysis



** [[https://guixwl.org/tutorial][Guix Workflow]]

*** TODO look into building profiles/containers/environments
+ [ ] see =Emacs.org= and =.config/guix/manifests/emacs.scm= from daviwil's
  dotfiles. the =activate-profiles= command builds these
+ [ ] how to build something with guix and run it where guix isn't available?
*** TODO restrict guix commands sent to guix-daemon to a group

** Development Environments
+ [[https://rednosehacker.com/how-to-setup-a-remote-pair-programming-environment-with-gnu-guix][How to setup a remote pair-programming environment with GNU Guix]]
  - using [[https://issues.guix.gnu.org/47608][lockstep.el]] for pairing within an emacs session

** Build Farms

+ 5.3 [[https://guix.gnu.org/en/manual/en/html_node/Substitutes.html][Substitutes]]

** Shepherd

+ [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjE8d2ZuIL_AhVqEVkFHRRnADQQFnoECAgQAQ&url=https%3A%2F%2Fguix.gnu.org%2Fen%2Fblog%2F2020%2Fgnu-shepherd-user-services%2F&usg=AOvVaw3vWxXmUbtNdfkqDsvsL8xB][GNU Shepherd User Services]]

*** Logging
+ [ ] logging commands/interface/filtering

** Security
*** [[https://unix.stackexchange.com/questions/222999/installing-nix-or-guix-without-root-permissions][Guix and Sudo]]: =--with-store-dir=
*** GNU Guix [[https://github.com/pjotrp/guix-notes/blob/master/GUIX-NO-ROOT.org][without root access]]
*** [[https://nvd.nist.gov/vuln/detail/CVE-2021-27851][CVE-2021-27851]]: Guix-daemon build escalation
- what limits are there on who can ask guix-daemon to do what?

** Reporoducibility
+ [[https://mfelsoci.gitlabpages.inria.fr/thesis/environment.html][Reproducible Thesis using GNU Guix & Org Mode]]
+ Guix HPC [[https://gitlab.inria.fr/guix-hpc/website/-/blob/master/drafts/activity-report-2021.md][Activity Report 2021]]

** Thunks

The =(guix records)= module introduces a thunkable record syntax, in addition to
several other syntaxes. This style of record is apparently inspired by =(srfi
srfi-35)= which we'll all have to admit is probably one of the better srfi's.

+ map-fields :: a syntax meaning "you can't do this" ... map-fields call
+ record-error :: meaning you maybe could do this, but ask nicely
+ this-record :: if you thunked a field on a record, it knows what thunked it
+ make-syntactic-constructor :: generate constructor for guix records
  - this handles delayed, thunked, sanitized or innate fields
+ define-field-property-predicate :: evaluate a predicate and return the field name
  - used to ensure fields are: delayed, thunked, sanitized or innate
+ define-record-type* :: define otherwise unthunkable record with thunkability.
+ lookup-field :: used in =match-record-inner= helps abstract the "offset in the record" ... ?
+ match-record-inner :: recursive syntax that run queries on records
+ match-record :: interface to the above. basically just "active record" and so
  now maybe that name makes a bit more sense.
  - lacks implementation for queries on thunked/delayed fields.

Only =define-record-type*= and =match-record=

** Dynamically Linked Lib64
*** Background

When an ELF binary is compiled/linked, glibc makes a lot of metadata available
to the process by building it into the binary. This includes =rpath= and etc.

These commands from the [[id:7edab00d-1a52-4a27-b83a-f64639e84a77][Guix: installing matlab]] note give more info. Some of
this includes paths to dyn. loaded libaries (of compatible interface).

#+begin_src sh :eval no
# print useful elf data from main bin
patchelf --print-interpreter $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-rpath $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-soname $MATLAB_PATH/$MATLAB_INSTALLER
patchelf --print-needed $MATLAB_PATH/$MATLAB_INSTALLER

# find all dynlibs without execute bit
find . -name "*.so*" ! -perm -u+x -exec ls -al \{\} +

# print entry points for dynlibs
find . -name "*.so*" ! -perm -u+x -exec readelf --segments \{\} +

# read the RPATH from the ELF header
readelf -d $MATLAB_PATH/$MW_INSTALLER | grep 'R.*PATH'
#+end_src


**** Build

+ wrap resulting derivation within BuildFHS to retarget


*** One proposed solution
[[https://www.reddit.com/r/GUIX/comments/11iaov9/comment/jbh8u04/?context=3][This reddit comment]] recommends:

#+begin_src scheme
(extra-special-file "/lib64/ld-linux-x86-64.so.2"
                    (file-append glibc "/lib/ld-linux-x64-64.so.2")
#+end_src

And then set =LD_LIBRARY_PATH= as needed.

#+begin_src shell :eval no
if [[ $- == *i* ]]
then
  export LD_LIBRARY_PATH=$LIBRARY_PATH
fi
#+end_src

I'm not sure about setting it in =.bashrc= like that.

* Code

Apparently you can create a uboot image that runs on NES.

** Bootloader

*** ./gnu/bootloader.scm
+ all-modules
+ bootloader-modules
+ efi-bootloader-chain
  - assembles the final-bootloader
  - can include files
  -
+ efi-bootloader-profile
  - derivations built into a profile

+ records:
  - bootloader
  - bootloader-configuration

*** ./gnu/bootloader/*.scm
Contains code that processes bootloader packages to prepare for installation
after derivation.

*** Bootloader Packages
**** ./gun/packages/bootloaders.scm
Packages that build bins for bootloaders to install

+ make-grub-efi-netboot
  - this demonstrates a gexp derivation that operates on a =grub-efi= package to
    produce netboot *.efi artifacts.

*** Making a diskless netboot image

There are several points where boot/network could fail:

+ inconsistencies in the handoff between boot stages
+ [[https://wiki.gentoo.org/wiki/Diskless_nodes#Configure_diskless_networking][reconfiguration of network]] (without killing NFS connection)
+ inconsistent fstab or disk state

Several artifacts would be produced:

+ potentially a iPXE/gPXE like config to instruct the client to run a binary
  (and/or to provide m)
+ an image to serve via TFTP
+ a squashfs filesystem to serve via NFS

This would require:

+ requires tweaking make-grub-efi-netboot or reimplementing a similar process to
  produce the net variant of a bootloader.
+ if possible use squashfs instead of initramfs?
  - this requires kernel modules & args
  - this compresses as content is needed
    - problems with hardlinked files?
+ at this point, device state needs to be persisted
+ a separate squashfs will need to be pulled from a server
  - something besides NFS... though TFTP has size limitations
  - The new RFC bumps the block size to 65464 from 512-8192, but getting these
    sizes [[https://www.compuphase.com/tftp.htm][requires adjusting MTU]]. In theory, this would extend up to 4GB, but in
    practice ~100MB is practical (from MTU-overhead=1468).
  - gPXE supports HTTPS, but there's no Guix package for it
  - a syslinux package exists, but there are similar problems. NFS may be necessary.
+ to assemble the filesystem image served from NFS(? i don't like NFS)
+ something like busybox =switch_root= is needed to create a new fileroot
  - this will happen twice during boot, but the configuration to do so is split
    into pieces.
+ device state needs to be checked/persisted

  The [[https://forums.gentoo.org/viewtopic-p-8740753.html?sid=027c05e0bb657a0e26c7c0d2f74586e0][gentoo thread]] has many answers

* Issues
** Locale

*** Unicode Normalization

[[https://stackoverflow.com/a/7934397][Everything you never wanted to know about unicode normalization]]


** Development Environments
*** Customizations to a project's =guix.scm= or =manifest.scm= for =guix shell=
This is a similar approach, but done with [[https://discourse.nixos.org/t/local-personal-development-tools-with-flakes/22714/6][nix flakes]].

+ a file =extra/nix.flake= is created that inherits from the root =nix.flake=
+ it's added to the git index, but not visible to the git commits ... (didn't
  know this was possible)
+ [[https://nixos.wiki/wiki/Flakes][nix flakes]]

** Nonfree Software

** OS with custom locale and XKB keyboard
** .guix-profile vs .config/guix/current (s/o link)
** Setting an alternate =/gnu/store=
** [[https://unix.stackexchange.com/questions/561093/what-is-the-difference-between-guix-profile-and-config-guix-current][Difference b/w guix profiles]]
** Emacs Guix
*** Can't get a guix repl up from within doom emacs (11/2022)
+ initially, it seemed there was a conflict between the geiser and emacs-guix
  sourced by doom-emacs and the emacs-native-comp manifest i use
  - doom emacs was pulling down emacs-guix and geiser.
  - removed =(scheme +guile)= from init.el, assuming that
  - resynced the emacs-native-comp, deleted all =*.elc= files, updated doom, ran
    =doom build=, waited and restarted the server.
  - here, it worked.

after restarting, it doesn't work:

#+begin_example
in procedure package0name: Wrong type argument: #<package abduco@0.6, gnu/packages/abduco.scm>""
#+end_example

it seems to crash pretty early

*** DONE Getting the guile environment working for emacs-native-comp on arch
CLOSED: [2022-12-04 Sun 08:01]
+ there are inconsistencies between the emacs build for arch and the one for
  guix. to simplify, i'm simply using the one from guix on both systems.
  - emacs-guix has never worked properly on arch, which is a matter of
    reconciling the system's guile config. on guix, I can just count on the
    system guile being ready to go and i haven't messed with it much. on arch,
    guile is required for quite a few things (gdb, kde error reports)

**** Resolution:

Emacs guix needs a consistent guile environment (See [[https://github.com/alezost/guix.el#important-note-for-non-guix-system-users][this note]]).

- also, running =doom purge= when moving emacs packages between guix and
  doom's straight is essential. any shared dependencies will likely be brought
  in from doom (not guix)
- in other words ... you kinda must pick a team (or micromanage your
  =EMACSLOADPATH=)

And nothing I was doing while rebuilding guix manifests and upgrading/rebuilding
doom emacs was actually doing anything (on either arch or guix...)

** GDK pixbuf issues

Can't seem to load =virt-manager=, getting pixbuf failures. [[https://issues.guix.gnu.org/63427][Issue #63427]] seems to
indicate that I can add =gdk-pixbuf= to the problematic profiles, which should
fix things by providing a =GDK_PIXBUF_MODULE_FILE=

* Installations
** Arch

**** Run the initial =guix pull=
+ =guix describe= doesn't work
+ Authorize guix substitutes from main Guix channel
+ Run =systemctl enable/start guix-daemon.service= then =guix pull=

**** Setup SystemD
+ The AUR package has set up systemd to launch under root.
  - The systemd service files will need to be updated
+ The =guix-daemon-latest.service= needs a path to be edited.
  - In =/usr/lib/systemd/system/guix-daemon-latest.service=, edit the
    =Service.ExecStart= variable: set the correct path for the user that
    installed Guix.
+ Disable/stop =guix-daemon= and switch over to =guix-daemon-latest=
  - This daemon runs a profile that was constructed via =guix pull=
  - When this profile is active
    - =.config/guix/current/bin/guix describe= should work properly

**** Configure =$PATH=
+ Set path to point =guix= binary to the one in =.config/guix/current/bin/=

**** Add custom channels

**** Tune Guix configuration
+ refine options for =guix-daemon=
+ configure substitutes for various packages

**** TODO Hack on a package within an isolated environment
[[https://www.reddit.com/r/GUIX/comments/p6x0cg/guix_environmentsworkflow_for_programming/][guix/direnv config]]
