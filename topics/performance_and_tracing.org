:PROPERTIES:
:ID:       c753ea9f-0b37-4db1-9c2b-17528f2f5b3d
:END:
#+TITLE: Tracing
#+DESCRIPTION: Profiling and Performance
#+TAGS:

* Roam
+ [[id:79d41758-7ad5-426a-9964-d3e4f5685e7e][Compute]]
+ [[id:4cdfd5a2-08db-4816-ab24-c044f2ff1dd9][Programming]]
+ [[id:a6c90236-e3a9-4223-8afa-d02da892c676][Debug]]

* Docs

* Resources
** Formats

*** Flame Graphs

*** Chromium Catapult

** Instrumentation

** Analysis
*** Perfetto
[[https://github.com/google/perfetto][google/perfetto]] Traces Linux, Chromium, Android and others

+ [[https://perfetto.dev/docs/analysis/perfetto-sql-syntax][Perfetto SQL Syntax]]
  - [[https://perfetto.dev/docs/analysis/sql-tables][Perfetto Prelude Tables]], automatically included
  - [[https://perfetto.dev/docs/quickstart/trace-analysis][Quickstart: SQL-based analysis and trace-based metrics]]
  - The schema is a "direct descendent of sqlite", but is intended to run with
    keywords that sqlite interprets as custom extensions

Perfetto SQL Schema

+ [[https://github.com/google/perfetto/tree/main/src/trace_processor/perfetto_sql/stdlib][./src/trace_processor/perfetto_sql/stdlib]]
+ [[https://github.com/google/perfetto/tree/main/src/trace_processor/metrics/sql][./src/trace_processor/metrics/sql]]

Perfetto Proto Schema (compiles =.proto= to =.pbzero.{cc,h}=)

+ [[https://github.com/google/perfetto/tree/main/protos/perfetto][./protos/perfetto]]
+ [[https://github.com/google/perfetto/tree/main/protos/third_party][./protos/third_party]] not much in here

** Languages
*** Python
+ [[https://github.com/gaogaotiantian/viztracer][Viztracer]]

* Topics
** Flame Graphs

** Chromium Catapult

** Perfetto

+ Build is ninja/bazel with wasm... so there's no great way to package for Guix.
+ The docs cover SDK redistribution, so ideally it's fairly universal.

*** Data
**** Proto

Emits serialized protobuf using ProtoZero

*** Instrumentation
**** Configuration

#+begin_quote
"Tracing sessions are started by invoking the perfetto command-line client
with a configuration file that specifies the data sources to record."
#+end_quote

In the proto docs, see [[https://perfetto.dev/docs/reference/trace-config-proto][TraceConfig]] for data model and [[https://perfetto.dev/docs/reference/trace-config-proto][TracePacket]] for the root
proto object ([[https://github.com/google/perfetto/blob/main/protos/perfetto/trace/trace_packet.proto][./protos/perfetto/trace/trace_packet.proto]])


*** Misc

+ Docs cover Java Heap Dumps: reports all managed objects, but not call
  stacks... I'm guessing this is useful but a little more difficult to
  reconstruct application state bc of GC
+ [[https://perfetto.dev/docs/data-sources/previous-boot-trace][Tracing across reboot (Linux)]] add an "ftrace persistent ring buffer" which the
  kernel will write to before crash, subject to some conditions [in addition to
  KASLR(?), which is mentioned in docs.] Mainly, in order to ensure this occurs,
  kernel must have some ability to schedule the write (and memory while useful
  can't be guaranteed to be in a great state)
* Issues
