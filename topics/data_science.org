:PROPERTIES:
:ID:       4ab045b9-ea4b-489d-b49e-8431b70dd0a5
:END:
#+TITLE: Data Science

* Resources

** Cheatsheets
+ [[https://startupsventurecapital.com/essential-cheat-sheets-for-machine-learning-and-deep-learning-researchers-efb6a8ebd2e5][Essential Cheatsheets for machine learning]]
  - also [[https://github.com/kailashahirwar/cheatsheets-ai][kailashahirwar/cheatsheets-ai]]
  -
+ [[https://www.theinsaneapp.com/2020/12/machine-learning-and-data-science-cheat-sheets-pdf.html][Insane App: ML Cheatsheets]] (kinda crazy, but a lot of them)
+ [[github:mavam/stat-cookbook][mavam/stat-cookbook]]
+ [[https://github.com/rstudio/cheatsheets][rstudio/cheatsheets]]
+ [[https://github.com/aaronwangy/Data-Science-Cheatsheet][aaronwangy/Data-Science-Cheatsheet]]
  - inspired by [[https://github.com/ml874/Data-Science-Cheatsheet][ml874/Data-Science-Cheatsheet]]
  - inspired by [[github:wzchen/probability_cheatsheet][wzchen/probability_cheatsheet]]

* Languages

** R

** Matlab

** Julia

Works quite a lot better if you figure out how to forego python dependencies
(e.g. use Flux.jl instead of tensorflow/etc). It's amazing how few lines you can
implement a simple gradient descent problem in.

*** Flux.jl

+ Flux.jl example  [[id:3a7412c7-f75b-4772-85d9-015da383efbc][Attempt to solve a statics problem with Flux.jl]]


* Frameworks

** Torch


* Multimedia
** Mediapipe

*** Resources

+ [[https://google.github.io/mediapipe/solutions/pose.html][Mediapipe Pose]]

*** References
+ [[https://doi.org/10.3390/app13042700][Human Pose Estimation Using MediaPipe Pose and Optimization Method Based on a
  Humanoid Model]]
+ [[https://arxiv.org/abs/2304.01555][Real-time Driver Monitoring Systems on Edge AI Device]]

* Docker Images

** AMD [[https://hub.docker.com/u/rocm][ROCm]]

I think I need /both/ pytorch /and/ tensorflow on a Jupyter image. Otherwise,
I'mma stop and start that shit every five seconds. It is what it is.

*** [[https://hub.docker.com/r/rocm/pytorch][rocm/pytorch]]

The Dockerfile for rocm/pytorch:latest should set the =PYTORCH_ROCM_ARCH=
variable. There are no code references for this variable in the
[[github:ROCmSoftwarePlatform/pytorch][ROCmSoftwarePlatform/pytorch]] fork, but it does show up in the [[https://github.com/ROCmSoftwarePlatform/pytorch/wiki/Building-PyTorch-for-ROCm][Building PyTorch
for ROCm]] wiki page:

See README.md notes on [[https://github.com/ROCmSoftwarePlatform/pytorch#docker-image][Docker Image]] ... nevermind, this dockerfile receives
upstream updates, but still builds for nvidia.

*** [[https://hub.docker.com/r/rocm/tensorflow][rocm/tensorflow]]

The [[https://github.com/ROCmSoftwarePlatform/tensorflow-upstream/tree/develop-upstream/tensorflow/tools/ci_build][tensorflow dockerfiles]] are found in the =tools/ci_build= directory of the
[[github.com:ROCmSoftwarePlatform/tensorflow-upstream][ROCmSoftwarePlatform/tensorflow-upstream]] fork.

+ Look for recently updated dockerfiles.
+ It would seem that the main rocm/tensorflow:latest is in [[https://github.com/ROCmSoftwarePlatform/tensorflow-upstream/blob/develop-upstream/tensorflow/tools/ci_build/Dockerfile.rocm][Dockerfile.rocm]]

* Data Sets

** ASL

*** [[https://huggingface.co/datasets/ncslgr][ncslgr]]

TF: [[https://www.tensorflow.org/datasets/community_catalog/huggingface/ncslgr][huggingface:ncslgr/entire_dataset]]



** Language

*** [[https://universaldependencies.org][Universal Dependencies]]

TF: [[https://www.tensorflow.org/datasets/catalog/universal_dependencies][tfds.datasets.universal_dependencies]]. Load with Builder:
=tfds.datasets.universal_dependencies.Builder=


* In-Memory Reps
** Pandas
v2.0.0 includes datatypes backed by Apache Arrow.

*** Topics
**** Using pyarrow
Using a pyarrow backend enables integer representations alongside nullable
data. Before v2.0.0, these would automatically convert the column to a float,
requiring more memory or more intensive CPU ops.

** Apache Arrow

** Polars

* Workflows

** Common Workflow Language

* Tools

** Google Colab

Cloud notebooks

** Data Visualization

*** Meshplot

Visualize 3D data from Jupyter with pythreejs (repo: [[https://skoch9.github.io/meshplot/tutorial/][scotch9/meshplot]])



* Optimizers

** Resources
+ [[https://www.ruder.io/optimizing-gradient-descent][ruder.io/optimizing-gradient-descent]]
