:PROPERTIES:
:ID:       73aee8fe-b894-4bda-a9b9-c1685d3249c2
:END:
#+TITLE: SQL

* Roam

It took me forever to find these videos again, since I couldn't even recall the
name ... but TL;DW; it goes from high-brow category theory...

+ [[https://youtu.be/auIuhRjMokQ][Paolo Perrone: Probability Monads and Stochastic Dominance]]
+ [[https://youtu.be/BhKaHAY8Ec8][Evan Patterson: The Algebra of Statistical Theories and Models]]

... to SQL, more or less. I never saw that coming. I wish I could sustain
momentum, but there's really no overcoming the friction, especially when 99% of
the energy is sourced internally. There's no visibility thus no potential for
feedback.

* SQLite

** Docs
+ [[https://sqlite.org/docs.html][main]]
+ [[https://sqlite.org/doclist.html][index]]
+ [[https://sqlite.org/cli.html][cli]]
+ [[https://www.sqlite.org/arch.html][architecture]]
+ [[https://sqlite.org/opcode.html][bytecode]] (this stuff is in here /because/ i don't know it well)

** Resources
+ [[https://csrc.nist.gov/publications/detail/fips/202/final][SHA-3 Standard]]: used in =.sha3sum= command
  - it comes in 224, 256, 384, and 512 flavors
  - =sha256sum= implements [[https://csrc.nist.gov/publications/detail/fips/180/2/archive/2002-08-01][FIPS-180-2]] whereas =sha-3= implements [[https://csrc.nist.gov/publications/detail/fips/202/final][FIPS-202]]
+ [[https://github.com/nalgeon/sqlean][nalgeon/sqlean]] collection of sqlite extensions

** Topics
*** Schemas
**** log2timeline/plaso
The [[https://github.com/log2timeline/plaso/tree/main/plaso/parsers/sqlite_plugins][./plaso/parsers/sqlite_plugins]] file in Plaso has a ton of code that extracts
from SQLite database schemas. It supports creating a unified view of user
activity across many applications.

*** [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html][ob-sqlite]]

*** Shell Scripting

**** Input handling

***** sqlitepipe

[[https://github.com/icetan/sqlitepipe][icetan/sqlitepipe]], a dynamic extension to allow you run commands from within
sqlite3. Nice to use occasionally, but not worth it if the dynamic extension is
always loaded/loadable. Build configuration is needed to enable/disable.. A
nix/guix custom environment

*** Extensions

**** Loading

+ run-time loadable :: compiles into SQL
+ persistent loadable :: the extension remains in process memory, but isn't
  automatically loaded by new db connections from the same process (which is a
  lot of subtle distinctions for a DB that doesn't do connection
  management/pooling)
+ statically linked :: run-time

*** Connections

See [[https://sqlite.org/uri.html][docs on Connection URI's]]. The CLI interface options don't quite line up with
the query parameter names.

**** ATTACH

Command used to manage connections within the REPL.

**** Multiplexing in scripts

***** TODO determine whether mkfifo or sockets allow circumventing locks

Attempting to use pipes still requires splitting lines. This would maybe work with =mkfifo=

#+begin_example sh
sqlite3 $qdb .tables \
  | sed -E 's/\s+\b/\n/g' \
  | xargs -I'{}' sqlite3 $qdb 'select * from {};'
  | grep $astring
#+end_example

To circumvent locks while piping

+ for simple & one-shot queries, with easy logical flow, just concat a sql query
+ [ ] does =mkfifo= work? how do you send to the =STDIN= otherwise?
+ [ ] for simple filtering from all tables (without care for schema), can i



*** Locking

**** WAL: write-ahead logging

See [[https://sqlite.org/wal.html][sqlite WAL docs]] and [[https://sqlite.org/walformat.html][WAL Format docs]]

Used instead of a rollback journal to manage atomicity (transactions, rollbacks
& locking)

***** VACUUM

This is needed to clean up physical arrangement of data (defrag)

*** In-Memory Database

[[https://sqlite.org/inmemorydb.html][Docs]]

**** Shared Cache

A shared cache is mostly deprecated elsewhere ([[https://sqlite.org/sharedcache.html][doc]], includes overview on
locking), but AFAIK is used when the same process opens two connections that
either should/not share the cache

Either run via =sqlite.h= specified functions or the =ATTACH= command

+ =file::memory:?cache=shared"= :: shared cache
+ =file:memdb1?mode=memory&cache=shared= :: non-shared cache

*** Prepared Statements


A [[https://www.sqlite.org/c3ref/stmt.html][Prepared Statement Object]] or =sqlite3_stmt= "... represents a single SQL statement that has been
compiled into binary form and is ready to be evaluated."

#+begin_quote
The life-cycle of a prepared statement object usually goes like this:

1. Create the prepared statement object using =sqlite3_prepare_v2()=.

2. Bind values to parameters using the =sqlite3_bind_*()= interfaces.

3. Run the SQL by calling =sqlite3_step()= one or more times.

4. Reset the prepared statement using =sqlite3_reset()= then go back to step 2. Do this zero or more times.

5. Destroy the object using =sqlite3_finalize()=.
#+end_quote

The =prepare= phase tokenizes and parses the statement, which iteratively
generates/optimizes machine code (see the [[https://en.wikipedia.org/wiki/Finite-state_machine][FSA]] in [[https://sqlite.org/queryplanner-ng.html#_a_difficult_case][queryplanner-ng]]). This is
passed to the =step= phase, a virtual machine for running the query plan.

Image via docs.

#+begin_export html
<svg xmlns="http://www.w3.org/2000/svg" class="pikchr" width="367" height="453" viewBox="0 0 490.32 605.52">
<path d="M2,293L236,293L236,2L2,2Z" style="fill:rgb(216,236,208);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M2,603L236,603L236,311L2,311Z" style="fill:rgb(208,236,232);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M254,347L488,347L488,2L254,2Z" style="fill:rgb(232,216,208);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M254,603L488,603L488,394L254,394Z" style="fill:rgb(224,236,200);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,92L200,92L200,38L38,38Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="65" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Interface</text>
<polygon points="119,120 114,109 123,109" style="fill:rgb(0,0,0)"></polygon>
<path d="M119,92L119,115" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,174L200,174L200,120L38,120Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="135" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">SQL&nbsp;Command</text>
<text x="119" y="160" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Processor</text>
<polygon points="119,203 114,192 123,192" style="fill:rgb(0,0,0)"></polygon>
<path d="M119,174L119,198" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,257L200,257L200,203L38,203Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="230" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Virtual&nbsp;Machine</text>
<polygon points="119,347 114,336 123,336" style="fill:rgb(0,0,0)"></polygon>
<path d="M119,257L119,342" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,401L200,401L200,347L38,347Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="374" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">B-Tree</text>
<polygon points="119,430 114,419 123,419" style="fill:rgb(0,0,0)"></polygon>
<path d="M119,401L119,424" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,484L200,484L200,430L38,430Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="457" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Pager</text>
<polygon points="119,513 114,501 123,501" style="fill:rgb(0,0,0)"></polygon>
<path d="M119,484L119,507" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M38,567L200,567L200,513L38,513Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="119" y="540" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">OS&nbsp;Interface</text>
<path d="M290,92L452,92L452,38L290,38Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="371" y="65" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Tokenizer</text>
<polygon points="371,120 366,109 375,109" style="fill:rgb(0,0,0)"></polygon>
<path d="M371,92L371,115" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M290,174L452,174L452,120L290,120Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="371" y="147" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Parser</text>
<polygon points="371,203 366,192 375,192" style="fill:rgb(0,0,0)"></polygon>
<path d="M371,174L371,198" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<path d="M290,311L452,311L452,203L290,203Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="371" y="245" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Code</text>
<text x="371" y="270" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Generator</text>
<path d="M290,484L452,484L452,430L290,430Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="371" y="457" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Utilities</text>
<path d="M290,567L452,567L452,513L290,513Z" style="fill:rgb(255,255,255);stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="371" y="540" text-anchor="middle" fill="rgb(0,0,0)" font-size="110%" dominant-baseline="central">Test&nbsp;Code</text>
<polygon points="290,78 281,87 277,79" style="fill:rgb(0,0,0)"></polygon>
<path d="M200,120L284,81" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<polygon points="200,174 212,178 206,185" style="fill:rgb(0,0,0)"></polygon>
<path d="M290,239L204,178" style="fill:none;stroke-width:2.16;stroke:rgb(0,0,0);"></path>
<text x="20" y="147" text-anchor="middle" font-style="italic" fill="rgb(0,0,0)" font-size="110%" transform="rotate(-90 20,147)" dominant-baseline="central">Core</text>
<text x="20" y="457" text-anchor="middle" font-style="italic" fill="rgb(0,0,0)" font-size="110%" transform="rotate(-90 20,457)" dominant-baseline="central">Backend</text>
<text x="470" y="174" text-anchor="middle" font-style="italic" fill="rgb(0,0,0)" font-size="110%" transform="rotate(-90 470,174)" dominant-baseline="central">SQL&nbsp;Compiler</text>
<text x="470" y="498" text-anchor="middle" font-style="italic" fill="rgb(0,0,0)" font-size="110%" transform="rotate(-90 470,498)" dominant-baseline="central">Accessories</text>
</svg>
#+end_export


*** Query Planning

+ [[https://www2.sqlite.org/queryplanner-ng.html][Next Generation Query Optimizer]]
  - [[https://www.sqlite.org/optoverview.html][Query Optimizer Overview]] before 3.8.0
+ [[https://www2.sqlite.org/queryplanner.html][Query Planning]]
  - [[https://www.sqlite.org/eqp.html][Explain Query Plan]]
+ [[https://www.sqlite.org/c3ref/exec.html][One-Step Query Execution Interface]]

*** Authorizor Callbacks

[[https://sqlite.org/c3ref/set_authorizer.html][Authorization Callbacks]] are performed in [[https://www.sqlite.org/c3ref/prepare.html][sqlite3_prepare_v{2,3}()]]. Both links,
at least to me, were a bit cryptic. Skimming the above links & quote helped to
grok it.

Some interesting note at the end of the [[https://sqlite.org/c3ref/set_authorizer.html][set_authorizer doc]]:

+ only one authorizer can be active per db-connection and it's behavior can't
  modify the database connection.
+ if the schema changes after a statements is prepared by
  =sqlite3_prepare_v2()=, then =sqlite3_step()= may reprepare it... which sounds
  like bad news
+ "the authorizer callback is invoked only during =sqlite3_prepare()= or its
  variants. Authorization is not performed during statement evaluation in
  =sqlite3_step()="

*** Virtual File System

See [[https://sqlite.org/vfs.html][sqlite VPS docs]]

SQLite's interface to the OS (& file system).

+ This is SQLite's bottom turtle
+ Establishes how it expects to manage access, connections, locking
+ May handle specific aspects during failure of database/process/system
+ VFS Shims just wrap some other VFS
+ See VFS Examples for tests of various failure modes, etc.

**** Encryption

Custom VFS implementations of this enable transparent encryption/compression in
the underlying filestore.

+ [[https://github.com/techrah/sqlite3-compression-encryption-vfs][CEVFS]], [[https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki][ZIPVFS]] and [[http://www.sqlite.org/cerod/doc/trunk/www/index.wiki][CEROD]] are examples. It's not clear whether all of these
  encrypt along actual page boundaries, though that's what the SQLIte docs
  imply.
+ It should probably involve a custom build and the presence/absence of
  compression/crypto libs limits the options ... which probably makes
  configuration a pain.
+ The builds need verification. I don't know anything, but I would assume that
  handling journaling, esp during/after a crash without persisting data may be a
  problem ... or maybe not.
+ The SQLite source includes several test/example implementations.


*** REPL

For commands, see [[https://github.com/sqlite/sqlite/blob/master/src/shell.c.in][sqlite/src/shell.c.in]] and search =azArg[0]=. The table was
mostly sourced from [[https://cheatography.com/taotao/cheat-sheets/sqlite-and-java/][SQLite and Java Cheat Sheet (taotao)]]

|----------+-------------+------------------------------------------------------|
| category | command     | description                                          |
|----------+-------------+------------------------------------------------------|
| shell    | .auth       | Show authorizor callbacks                            |
|          | .cd         |                                                      |
|          | .dbconfig   |                                                      |
|          | .exit       |                                                      |
|          | .help       |                                                      |
|          | .prompt     |                                                      |
|          | .quit       |                                                      |
|          | .shell      |                                                      |
|          | .show       |                                                      |
|          | .stats      |                                                      |
|          | .system     |                                                      |
|          | .vfsinfo    | info about the top-level VFS (virtual file-system)   |
|----------+-------------+------------------------------------------------------|
| etl      | .archive    |                                                      |
|          | .backup     |                                                      |
|          | .clone      |                                                      |
|          | .dump       |                                                      |
|          | .import     | Import from file into table                          |
|          | .load       |                                                      |
|          | .once       | For next query, output to file                       |
|          | .open       | close current db & attempt connection with db @ file |
|          | .output     |                                                      |
|          | .read       | Read input from file                                 |
|          | .restore    | restore content from file                            |
|          | .save       |                                                      |
|          | .sha3sum    | compute sha-3 of database content                    |
|----------+-------------+------------------------------------------------------|
| debug    | .bail       | exit on first error                                  |
|          | .databases  |                                                      |
|          | .dbinfo     |                                                      |
|          | .eqp        | toggle auto-explain                                  |
|          | .expert     | index hinting                                        |
|          | .explain    |                                                      |
|          | .scanstats  | toggle =sqlite3_stmt_scanstatus()= output              |
|          | .trace      |                                                      |
|----------+-------------+------------------------------------------------------|
| format   | .binary     |                                                      |
|          | .changes    |                                                      |
|          | .echo       |                                                      |
|          | .excel      |                                                      |
|          | .headers    |                                                      |
|          | .limit      |                                                      |
|          | .log        |                                                      |
|          | .mode       | Output mode, including org/markdown tables           |
|          | .nullvalue  |                                                      |
|          | .print      |                                                      |
|          | .separator  |                                                      |
|----------+-------------+------------------------------------------------------|
| test     | .check      |                                                      |
|          | .imposter   |                                                      |
|          | .lint       |                                                      |
|          | .selftest   | Run tests in the =SELFTEST= table                      |
|          | .testcase   |                                                      |
|          | .timer      |                                                      |
|----------+-------------+------------------------------------------------------|
| schema   | .fullschema |                                                      |
|          | .indexes    |                                                      |
|          | .schema     |                                                      |
|          | .tables     |                                                      |
|----------+-------------+------------------------------------------------------|
| dbd      | .parameter  |                                                      |
|          | .progress   |                                                      |
|          | .timeout    |                                                      |
|----------+-------------+------------------------------------------------------|


* Datalog

Subset of Prolog. Apparently inspiration for many databases, modeling tools,
querying tools and game description languages

** Topics

*** Games

*** Bitemporality

A database whose schema and featureset allows for continuous reconstruction of
record addition/mutation.

+ Bitemporal :: you can query records according to ① the create/update timestamps
  on the records ② the reconstructed database at a point in time
+ [[https://bitemporal-visualizer.github.io/][Bitemporal Visualizer]] highlights the rows in a dataset/table along with the
  blocks of =(t,τ)= which correspond to the two axes: application time and system
  time.

**** XTDB

Clojure implementation of a bitemporal database. Queried using SQL or using the
clojure [[https://docs.xtdb.com/xtql/tutorials/introducing-xtql.html][XTQL]] query DSL

+ [[https://docs.xtdb.com/tutorials/immutability-walkthrough/part-1.html][XTDB Immutability Walkthrough]]
+ Industry Use-cases: [[https://docs.xtdb.com/tutorials/financial-usecase/time-in-finance.html][Time in Finance]], P&L and Risk, trade adjustments (and
  audits), counterparty risk, backtesting

Schemaless with [[https://docs.xtdb.com/reference/main/data-types.html][types]]

+ an explicit schema isn't require before insertion, though there is some
  structure behind the scenes.
+ since the same tables need to enable some queries' relational algebra
  predicates to match across blocks of time, this comes with some caveats, no
  doubt (idk wut they are)

....
