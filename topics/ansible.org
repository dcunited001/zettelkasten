:PROPERTIES:
:ID:       28e75534-cb99-4273-9d74-d3e7ff3a0eaf
:END:
#+TITLE: Ansible

* Roam

* Docs
+ [[https://www.ansiblefordevops.com/][Ansible For DevOps]]
+ [[https://docs.ansible.com/ansible-core/devel/index.html][Ansible Core]] ([[https://docs.ansible.com/ansible-core/2.12_ja/index.html][jp]])
+ [[https://docs.ansible.com/ansible/latest/galaxy/user_guide.html][Galaxy Docs]]
+ [[https://docs.ansible.com/ansible_community.html][Community Docs]]
+ Ansible [[https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html][Builtin Docs]]
+ Ansible [[github:ansible/ansible-examples][example projects]]
+ Ansible [[https://docs.ansible.com/ansible/latest/user_guide/vault.html#playbooks-vault][Vault]] (password management)
+ Ansible [[https://docs.ansible.com/ansible/latest/collections/community/general/index.html][Community Modules]]

** Ansible Versions

The latest in [[https://www.ansiblepilot.com/articles/ansible-news-ansible-core-2.14.4-and-ansible-7.4.0/][ansible versions]] says

* Resources

Commands like: =ansible-doc -t connection ssh=

** Start Here:
  + [[https://docs.ansible.com/ansible/latest/user_guide/playbooks.html][Working With Playbooks]] (from ansible docs)

** Configuration
+ Example [[https://github.com/ansible/ansible/blob/devel/examples/ansible.cfg][ansible.cfg]]
+ Ansible [[https://docs.ansible.com/ansible-core/devel/reference_appendices/config.html#ansible-configuration-settings][Environment Vars]]

*** Intro
+ [[https://people.redhat.com/grieger/summit2020_labs/ansible-tower-advanced/10-structured-content/][Ansible Tower Advanced: Well Structured Content Repositories]]
  - (more recent) [[https://ansible-labs-crew.github.io/][Ansible Labs Crew]]

** Editor Support
+ [[https://www.ansible.com/blog/deep-dive-on-ansible-vscode-extension][Deep Dive on VSCode and Ansible LSP]]
+ [[https://github.com/ansible/ansible-language-server/pull/522/files][Dockerfile for ansible-language-server]] (#522)

** _calvinr
+ Ansible AWX/Tower [[https://gitlab.com/_calvinr/networking/automation_examples/ansible/ansible-tower-awx-cheat-sheet][deploy cheatsheet]]
+ Migration: [[https://gitlab.com/_calvinr/networking/automation_examples/nornir/SNMP_migration][SNMPv2 to SNMPv3]]
+ [[https://gitlab.com/_calvinr/networking][_calvinr/networking]] examples of automating Juniper gear
  - Follows along with these videos from [[https://www.youtube.com/c/CalvinRemsburg0][Calvin Remsburg]]
  - Firewall Configs: [[https://gitlab.com/_calvinr/networking/ansible-firewall-configuration/-/blob/master/files/ansible/config/complete/alderaan.conf][alderaan.conf]] and [[https://gitlab.com/_calvinr/networking/ansible-firewall-configuration/-/blob/master/files/ansible/config/complete/jakku.conf][jakku.conf]]
+ _calvinr: [[https://gitlab.com/_calvinr/networking/automation_examples/ansible?sort=latest_activity_desc][ansible projects]]

** Vault
+ using the =-e@vault.yml= method for ansible-vault: [[https://stackoverflow.com/a/37300030][stack-overflow]]
+ [[https://github.com/ansible-community/contrib-scripts/blob/main/vault/vault-keyring-client.py][vault_keyring_client.py]]: using the native keyring for vault passwords
+ an example of [[https://theorangeone.net/posts/ansible-vault-bitwarden/][storing ansible vault passwords in Bitwarden]]

*** [[for ][using Unix pass to retrieve vault password]]

This is a good idea, but recommends a style of password management by inserting
={{ some_var }}= into =inventory.yml= ... that seems to cripple ansible's
ability to provide decent error messages.

** Projects
*** Route/Switch
+ [[https://github.com/sfloess-archives/scripts/tree/master/ansible][sfloess-archives/scripts]] (ansible scripts)
  - [[https://github.com/FlossWare-Archives/scripts/tree/master/ansible/redhat][Flossware]]: project to build OpenWRT and DD-WRT on Redhat servers
+ [[https://github.com/varunpalekar/ansible-structure][varunpalekar/ansible-structure]] (example project structure)
*** Vault
+ [[github:konstruktoid/ansible-hvault-inventory][konstructoid/ansible-hvault-inventory]]
*** VM/Proxmox
+ [[https://vectops.com/2020/01/provision-proxmox-vms-with-ansible-quick-and-easy/][Provision proxmox vm's with ansible]]
+ Ansible Community [[https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html][Proxmox Module]]
  - use guix to create images
  - use proxmox to create VM/Container Templates
  - use ansible as a =make= or =rake= tool
    * mostly for its configuration management
    * and infrastructure-as-code capacity for documentation

* Issues
+ [[https://k21academy.com/ansible/roles/][Creating Ansible Roles]]

** PXE Boot Install via Ansible
+ [[https://www.youtube.com/watch?v=o8xN9XRTYT0][Dell PowerEdge PXE Boot and RHEL 8 Install (with Ansible)]]
  - [[https://github.com/eanylin/ansible-lab/tree/master/dell_emc_demo][eanylin/ansible-lab]]

** Facts

+ [[https://www.redhat.com/sysadmin/playing-ansible-facts][Intro to Ansible Facts (redhat)]]

*** Cisco Devices

[[https://aap2.demoredhat.com/exercises/ansible_network/3-facts/][Gather facts from non-linux hosts]] This requires a module and disabling
=gather_facts=

*** PFSense

See the source for =./core/plugins/lookup/pfsense.py= in the pfsensible repo:



** Emacs

Most of the packages support =ansible~=2.9= as far as I can see.

Instead, use [[https://als.readthedocs.io/][Ansible LSP]] with [[https://emacs-lsp.github.io/lsp-mode/page/lsp-ansible/][lsp-ansible]]. This is a node.js app. This can be
used remotely with [[https://emacs-lsp.github.io/lsp-mode/page/remote/][lsp-tramp-connection]], but the remote connection has to run
Ansible LSP. This could be in Docker and I'm probably connecting to a server to
run Ansible playbooks anyways.


* Topics

** Roles

+ [[https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html][Playbooks: Roles]]

*** Role Polymorphism

You're encouraged to break out functionality into roles. They're easy to
develop, but it gets messy since you don't necessarily want to include
everything in =roles/a_role/tasks/main.yml=.  Almost as quickly, you'd like to
have something like polymorphism for roles.

**** Examples in Repo's

There are a few repos with examples for packaging code consumed as a library
where polymorphism is needed.

***** ansible-collections.google

[[https://github.com/ansible-collections/google.cloud/blob/master/roles/gcloud/tasks/main.yml][This]] seems like a more standard way of getting polymorphism. The playbook
switches the tasks included for Debian/RPM-based Linux on
=gcloud_install_type=. This is also how Greerling and other users are doing
it. It's not exactly intuitive until you've seen enough of these =YAnsiML= projects.

#+begin_src yaml
---

- name: Gcloud | Load Distro and OS specific variables
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "os/{{ ansible_distribution | lower }}.yml"
        - "os/{{ ansible_os_family | lower }}.yml"
        - main.yml
      paths:
        - 'vars'

- name: Gcloud | Install the google-cloud-sdk from {{ gcloud_install_type }}
  ansible.builtin.include_tasks: "{{ gcloud_install_type }}/main.yml"
#+end_src

***** [[https://github.com/ansible-network/cisco_ios/tree/devel][ansible-nework.cisco_ios]]

This lib is distributed as a role, not a collection and it uses =function= as a
variable checked against =ios_functions= to run other tasks defined in the
role. However, the lib is about 5 years old.

The task to include the subtasks on demand is defined [[https://github.com/ansible-network/cisco_ios/blob/246ac29cc0bd25059314f99382ef9bd7e7658966/tasks/main.yml#L18][here]] like:

#+begin_src yaml
- name: include function specific tasks and run
  include_tasks: "{{ function  | default('noop') }}.yaml"
#+end_src

And the subtasks are specified from the consumer's playbook like:

#+begin_src yaml
- hosts: cisco_ios

  roles:
    - name: ansible-network.cisco_ios
      function: config_manager/get
      source: startup
#+end_src

I thought this was ={{ function | default('noop') }}= actually a language
feature. It's not, which I guess is why it isn't documented or easily found.

*** Arguments

Role vars can be validated [[https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#sample-specification][according to a spec]] defined in
=meta/argument_specs.yml=


** Jinja Templates

Why the =map= can't pass functions? And where is the API?

+ [[https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters][Jinja Filters]] oh here's the API. ok great. this should probably be the only
  thing on the internet for Jinja.
+ [[https://blog.networktocode.com/post/jinja-map-review/][Manipulating Data with Jinja Map and Selectattr]] trying to do the reverse of
  what's in this article is crazy.


*** Issues

**** Filtering keys on objects

selectattr: you can't map that. kind of a lot of the validation for ansible
modules will fail if objects include keys that it's not expecting. if you can't
_easily_ select keys from objects ...

the second that ={% fdsa %}= comes out of the keyboard, you have lost the war.

** Variables

Variable load order from the ansible docs repo

#+begin_quote
I should try searching for =dot= files more often.
#+end_quote

[[file:img/ansible-variables.png]]

** Performance

See [[https://www.redhat.com/sysadmin/faster-ansible-playbook-execution][8 Ways to increase your Ansible Playbooks]]

Even though you may run playbooks in parallel, several issues can affect how
quickly your playbooks run:

+ you =gather_facts= too often: this leads to a lot of overhead
+ bundling your code improperly: too much on a single role/playbook
+ alternating tasks between hosts: either your yaml doesn't lend itself to
  "control flow" where tasks can be chunked per host or you've specified too
  many dependencies between tasks and Ansible can't proceed.
  - here, I'm assuming that ansible may share the same SSH connection or at
    least reuse some state when running a sequence of tasks on a single host
    before running other tasks afterwards. however, this could affect the
    transactionality which would be difficult to address.

*** Executing too many tasks

It should be a bit of a "code smell" if your =ansible= and =ansible-playbook=
invocations don't include many =--options=, since using these is essential to
speeding things up.

**** Create a Playbook/Role to Invoke Slow Roles/Tasks

A better division of functionality than tags may be the playbook. They're cheap
to write, once you know what you're doing with the domain vocabulary that
configures various collections/role.

**Problem**

Updating the list of package repositories for a Centos host AND running =dnf
upgrade= at the same time. For some reason, even updating the
=/etc/yum.repos.d/*= files here takes forever. It's broken into about 8 or so
tasks (to transfer files one at a time....) that run a loops. The file transfer
task would be better. When nothing changes, it's just a little frustrating to
wait for this to complete to see new changes in your roles

**Solution**

+ Move the tasks for Centos mirrors to another playbook/role.
+ Gather facts on DNF once, early on. Then, don't run it if the DNF metadata
  isn't stale. Configuring this with an override so you can force it to run is a
  bit of a drag and bloats your code.

**** Specify Filters on the Tasks

Use command line options or conditionals like when =when:=.

**** Narrow Execution Scope with Tags

Greerling covers this in videos and in Ansible for Devops.

You really don't want to overuse tags: they're are a feature meant for the
end-consumer. Do a ripgrep for =tags:= in ALL of the =ansible-collections=
repositories and you'll see: there aren't many hits in playbooks. However, there
are a lot of hits for =tags:= in the test playbooks for these
=ansible-collections= repositories ... so it really does help.

Generally, tags as metadata are pointless when they return too many results and
the end-user needs to specify these. Sadly for me ... I guess I need to google
around to determine how to limit the execution of individual tasks included by
roles.

*** Gathering Facts

*** Using slow crypto

SSH Connection Setup with RSA keys seems slow, esp on older hardware.
Unfortunately for now, I can't set =ecdsa= as my daily driver.

**Problem**

Cisco SSH connections are slow to negotiate on older devices. Even on my local
network, other SSH connections seem to be slow because the playbook execution is
"bursty"

**Solution**

According to the Redhat article, I could use whats listed below.

+ SSH ControlMaster :: This and =ControlPersist= are totally safe to use and
  somewhat helpful in detaling with connection setup overhead.
+ pipelining :: this speeds up SSH by avoiding file transfers (somehow), but
  requires =/etc/sudoers= disable =requiretty= which sounds ... like I have no
  idea what that means beyond using =socat= to talk to myself on the other tty.
  Pipelining is disabled by default and the implementation varies for each
  connection plugin ... which means you get to read more docs.
  - Here's some docs on [[https://www.baeldung.com/linux/sudo-requiretty-option][why requiretty is bad]], which seems to convey why you
    trust nothing on the internet but everything on TV. Here's another to
    disabmiguate [[https://www.baeldung.com/linux/pty-vs-tty#introduction][tty/pty/vty]] which also serves as a touching reminder of why we
    owe it to carriage return to remember that shit forever.
+ async tasks :: these could get dicey when you filtered the plays by tag and
  now they're running in some ad hoc order -- or when the tasks get refactored
  into roles and you forgot to update the =async= when the dependency relations
  changed for those tasks.

Pipelining has security particularly bad security implications outside of
development and maybe staging, depending on what the connection plugin uses. But
not as bad as for security as the =keep_remote_files= config option useful for
debugging. The digital footprint Ansible leaves behind is one particular "thing"
that Ansible does well that's earned its trust. It's fairly simple, compared to
agent-based approaches. It wouldn't be at RedHat or so widespread if there was
much of a question on this.

And in case you've forgotten, [[https://en.wikipedia.org/wiki/Teleprinter][teletype]] has been around for a while.

[[file:img/teletype.jpg]]

It has a fucking music stand lol.

*** Running Slow Pre/Post-Task Operations Without Realizing It

Some things be slow.

**Problem**

On older cisco devices, =copy run start= takes about 10 seconds to complete. To
invoke this in Ansible, you need to explicitly pass =save: yes= or =save_when:=
to an [[https://docs.ansible.com/archive/ansible/2.5/modules/ios_config_module.html][ios_config]] task, so it's just an example.

So, determining when this happens should get your playbooks to run a lot faster,
esp considering that, for SDN, transactionality is not only difficult but
essential. You'll process a playbook for a transition between stages, then need
to validate state before invoking a playbook for the next set of changes .. at
least with my limited tools/infrastructure, that's how it its

**Solution**

+ Defer things like =copy run start= until the end.
+ Use the =free= execution strategy. But you shouldn't script this into a
  network automation playbook, esp. for code someone else needs to
  run/maintain.
  - Async resembles the =free= strategy, but limited by blocks & control flow.

If the playbook is structured without many inter-host dependencies, then =free=
should be available as =ansible-playbook -e "strategy=free"= or using some
similar CLI. Again, not using the CLI options in ansible is a bad sign. There
are a lot of them you need to know & use ad hoc.

** [[https://docs.ansible.com/ansible/latest/collections/community/docker/index.html][Docker]]

*** Misc
+ community.docker.[[https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_exec_module.html#ansible-collections-community-docker-docker-container-exec-module][docker_container_exec]]

*** Registry

collections:

+ [[github:bodsch/ansible-registry][bodsch/ansible-registry]] set up a [[github:distribution/distribution][distribution/distribution]] registry

** Managing dotfiles

*** [[https://docs.ansible.com/ansible/latest/collections/community/general/homectl_module.html][community.general.homectl]]

See the =skeleton= option, which defaults to =/etc/skel=, though it's unclear
whether this is on the server or not ... it's pointless if it's on the server.

* Integrations

** Hashicorp Vault?
+ Opens up Two Factor Auth.
+ Requires some metal to run services.
  - may require consul/salt
    - in which case, the configuration management overhead & exposure means ...
      it's probably not worth it

** StepCA?

* Ansible Galaxy

Two services:

+ [[https://hub.docker.com/r/pulp/pulp-galaxy-ng][pulp/pulp_galaxy]] (dockerhub)
+ [[https://hub.docker.com/r/pulp/pulp][pulp/pulp]] (dockerhub)

** Docs
+ [[https://galaxy.ansible.com/dzervas/router][Ansible Role for Linux Router]]
+ [[https://galaxy.ansible.com/docs/finding/search.html#finding-ansible-content][Finding Ansible Content]] (search, community, partners)

** Resources

** Topics

*** Galaxy from behind a firewall

+ [[https://www.redhat.com/sysadmin/install-ansible-disconnected-node][Install Ansible Collections on a disconnected ansible control node]]

**** ansible.module_utils.urls

Ansible Galaxy uses [[https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/urls.py][ansible.module_utils.urls]] to download content which is a
wrapper around Python's =urllib=.

+ You might not [[https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/urls.py#L188-L195][HAS_CRYPTOGRAPHY]] (x509)
  - in [[https://github.com/ansible/ansible/blob/devel/lib/ansible/module_utils/urls.py#L256-L259][get_channel_binding_cert_hash]] (see RFC for [[https://www.rfc-editor.org/rfc/rfc5929][Channel
    Bindings for TLS]]). This is skipped on OSX and when you has not crypto.
  - this is relevant when =www-authenticate= headers are set for
    Negotiate/Kerberos. It applies to GSSAPI only. No idea what this is per se
    other than kerberos is cert-based auth: see [[https://github.com/pythongssapi/httpx-gssapi][pythongssapi/HTTPX]] for the
    python implementation.
  - In other redhat contexts (see [[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/pdf/using_ansible_to_install_and_manage_identity_management/red_hat_enterprise_linux-9-using_ansible_to_install_and_manage_identity_management-en-us.pdf][Ch 20 in Giant Redhat IDM via Ansible PDF]]),
    this referes to IDM and securely delegating sudo rights via GSSAPI (The Unix
    means fo interacting with Kerberos)

**** [[https://www.youtube.com/watch?v=GjrWYMfjGrs&t=1550s][Host your own on-premise Ansible Galaxy]] 2021
+ [[https://pulpproject.org/pulp-in-one-container/https://pulpproject.org/pulp-in-one-container/][Pulp in one container]] (another guide)

+ ensure =ca_cert= is configured

***** Outline

+ create user/group, enable container services
+ determine port, dns, and firewall rules
+ create volumes
  - check space, create paths
  - chown to owner/etc
  - check for selinux issues/support
  - in the video, the volumes need =:Z= for selinux
+ setup pods
  - pull images
  - try creating with appropriate flags and see if UI supports req's
+ run galaxy-ng
  - sync to galaxy
  - define a collection(?) with a =requirements.txt=
    - all dependencies must be specified.
  - create some minimal users/groups
  - assign permissions for imports/approval
+ install the =pulp_installer= (using ansible collection)
  - to access roles, you need =pip install pulp_cli=
  - generate Galaxy-NG token, update =ansible.cfg= and include it
+ Pulp (via API after install)
  - create repo
  - create remote (ca_cert pops up)
  - create distribution, assoc to repo
+ Later
  - connect Ansible AWX to local NG
  - ensure sync is automated
  -

** Docker/Podman Install

* AWX

** Docs

** Resources

* Horribly Wrongnotes

This is (AFAIK) basically completely wrong.

** Ansible is confusing

The =guix= profile will set up =ansible 2.9=, which is the last version of
ansible before the platform integrated [[https://galaxy.ansible.com][Ansible Galaxy]].

#+begin_quote
Ansible :: the device from Ender's game that communicated faster than light with zero infrastructure. It didn't require internet or subscriptions from Red Hat.
#+end_quote

This can be extremely confusing (e.g. if you used ansible once in 2014 and then again in like 2018). There is still a decent use case for =v2.9= and earlier.

*** Version 2.9: for ad hoc stuff, airgapped networks or boostrapping

These versions of ansible a set of devops tools requiring no internet access and a minimal set of dependencies

- SSH on host/target systems
- Minimal dependencies on extra pip packages (still not sure on this point)
- No external web/network services -- i.e. ansible 2.9 and earlier is like
  peer-to-peer in that any system can configure any other system without a
  need to check in to anything else.

*** Version 2.10: for more functionality, modularity or collaborative devops (with AWX)

For a firewalled environment, you'll need to set up:

+ your own Ansible Galaxy
+ probably your own docker registry
+ a small kubernetes cluster for AWX and its workers. This can fit on one small
  server
