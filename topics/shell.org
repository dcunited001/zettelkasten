:PROPERTIES:
:ID:       cf847bc5-31f7-4bb8-8324-7680a8f2953d
:END:
#+TITLE:     Shell
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Ideas
** Profile Injection
+ Several options to achieve this:
  - templates (yuck)
  - profile builds (deploys .. yuck)
+ But some kind of portable dependency injection would be convenient
  - input/output redirection with =tee=
  - socket-oriented methods like =socat=

**** Examples of similar techniques
+ metasploit and pen-testing should probably use some of the same tricks:
  - for dynamic config mgmt, decentralization or obfuscation: one must handle
    data streams containing config pieces for other data streams
+ tricks from orchestration frameworks, esp if transmission or routing of
  config/state from =etcd= (or elsewhere) needs to be handed off indirectly to
  scripts/processes.
+ these techs would probably be found in orchestration of serverless functions



* POSIX

** Docs
+ Google [[https://google.github.io/styleguide/shellguide.html][Shell Style Guide]]

** Resources

** Issues

*** Bashisms
+ [[https://linux.die.net/man/1/checkbashisms][Check Bashisms]] script
+ [[https://betterprogramming.pub/24-bashism-to-avoid-for-posix-compliant-shell-scripts-8e7c09e0f49a][24 Bashism To Avoid for POSIX-Compliant Shell Scripts]]

*** Script injection
+ hmmm

* Direnv
** Docs
+ [[https://github.com/direnv/direnv/wiki][Direnv integrations]]

** Resources
+ [[https://www.pinnsg.com/direnv-take-control-of-your-development-environment/][direnv â€” Take Control of your Development Environment]] examples using direnv
  for five different types of projects: python (virtualenv), python (pyenv),
  ruby, node, go.

+ [[https://github.com/direnv/direnv/wiki/PS1][Setting shell prompt]]

** Topics

*** Pros/Cons

For modern programming/devops workflows, =direnv= is one of those hard & early
decisions you should make because it will resolve a lot of complexity later on
-- viz. probably don't use it!

I really like the tool, but it's a bit sad that i only started using it around
the time that i became unemployed (2014ish)

Direnv was gold back in the day, but now you have:

+ Docker/Compose :: already 12-factor; better management of volumes, tons of
  reference images & Containerfiles. Cons: ship-in-a-bottle.
+ Local K8S :: good. but cons: ship in a bottle; still works-on-my-machine &
  also what-about-that-cluster.
+ KubeVirt :: better VM orchestration, volume/disk management;
+ Guix/Nix :: direnv will usually create these as one-off profiles, unless you
  put some work into it. This can cause your SSD to accumulate wear (req. running =guix gc=)
+ The =.envrc= for =direnv= can't easily be distributed via =git=, since it's
  usually fairly personal.
+ Terminal Profiles ::  This is basically the same thing, but with less
  portability (& longevity of personal project configuration)
+ Screen/TMux Profiles :: Also basically identical.

*Direnv and VSCode are like oil and water.* The issue is mainly environment setup
and Process invocation in VSCode (which actually gives you an empty bash shell
instead of the default process that inherits environment)

+ VSCode designed to be multiplatform and run on Windows, with or without WSL2
+ implemented in electron/node and must run in a browser (and no one cares about
  BSD or Nix)
+ difficult to get LSP to run on host when project runs on Container/VM (and
  vice versa)
+ VSCode prefers to avoid =pyenv= (read above at "empty bash") and similar tools

*Direnv caveats you should know AoT:*

+ transferability of =.envrc= between paths/hosts
+ you should not evaluate/configure secrets to be available in its environment:
  env. vars, functions, logs and other implementation details (not vulns.)
+ does not do aliases; will not run under another user
+ The =.envrc= may go stale, but not via updates to Direnv plugins (it seems
  well thought out and maintained) ... you actually need to solve this same
  problem on your =~/.config/direnv= scripts -- when you change/alter a script,
  others may break

**** When to use direnv?

On traditional Linux distros, using =direnv= with tools like =pyenv= is fairly
easy. But Fedora/Arch may require different parameters than Nix/Guix or entirely
different implementations in your =~/.config/direnv= ... (see above for why to
not make arbitrary changes here)

Basically, use it when you need:

+ light automation/setup :: you could also
+ native performance or NUMA :: you don't
+ IPC :: just easier than forwarding sockets, esp if you need a repeatable
  process to be quick/dirty.
+ bare-metal hardware :: much easier, definitely simpler, but actually less
  reproducible than isolated devices (virsh + xml) with proper labeling (mgmt of
  content)
+ bare-metal networking :: you shouldn't, but they just don't give you SR-IOV in
  consumer anything
+ management of processes :: i'm not sure how the runtime for Kind is set up to
  fork processes (or whatever) from inside the container

Easier but sometimes more difficult to manage:

+ permissions
+ sprawl (files, data)
+ services & service management

Usually more complex

+ SELinux/AppArmor

PITA

+ namespacing

** Issues


*** TODO Direnv needs to be in =.bashrc= but what about automated tasks?

* Utilities

** Script

This allows you to record input/output streams in a terminal or command. See
=man script=. This command is a little hard to Google.

Log the output of a session. For escape codes (colors/etc) you'll need to =cat
test.typescript= or otherwise specify how to handle them for logged content.

#+begin_example shell
script -q test.typescript
#+end_example

Or run for a particular command

#+begin_example shell
script -qc "ansible -i my.server.local, -m setup my.server.local" ansible.typescript
#+end_example

** Directory Listing
*** Tree

# :results output verbatim

#+begin_src sh :results output none :dir ./jekyll/jekyll-theme-basically-basic
tree -I "vendor" ./_sass
#+end_src

Also possible to write to HTML output using:

#+begin_src sh :results output verbatim :dir ./jekyll/jekyll-theme-basically-basic
# the ignore patterns don't work well. just use a single subdir component...
# use -P $pattern to include and -a to consider hidden files.
tree -I "vendor"
     -H "file:///the/file/path/for/links" > ../theme-sass-files.html
#+end_src


** Awk

*** Resources
+ [[https://jherrlin.github.io/posts/learn-awk/][Learn AWK with Emacs]]

*** Issues
+ [[https://stackoverflow.com/questions/26343823/writing-to-multiple-files-with-awk][Writing to multiple files]]: Awk supports redirection with =>= and =>>= ... just
  track state with a filename var.

+ Org Babel: call awk with loop?

* Bash

** Docs
+ [[https://linuxcommandlibrary.com/basic/oneliners][LinuxCommandLibrary: One Liners]]


** Resources
+ [[https://www.cs.cmu.edu/~15131/f15/topics/bash/][Practical Ideas for Bash]] (CMU)
+ [[Bash Programming (intro/howto)][Bash Programming (intro/howto)]]

*** Advanced Bash-Scripting Guide
+ [[https://tldp.org/LDP/abs/html/bash2.html][Contains high-level changelog for Bash v2.0 to v4.2]]

*** [[https://web.archive.org/web/20000824170847/http://www.ssc.com/ssc/bash/][SSC Bash Reference]]

Nigh impossible to find on the nets. It was fairly common at some point.  A
little tough to print: a =4x1= page layout works though.

Now nearly disappeared from the internet except for a university link. before
2004 because authors wanted $4.95 CoD for it ... which is honestly fair. But
most other bash cheatsheets are inferior.

The webarchive link probably covers Bash v2.0, but I would imagine any newer
Bash versions are a superset of the v2.0 functionality:

#+begin_quote
If you break the build in 1999 ... I want to imagine that every gets a CD in the
mail, but I guess UseNET?

Regardless, version pinning is ... not ... Nevermind, pinning isn't relevant.

Let's ask Slackware/pkgtools(?) ... wiki history on that page only goes back to [[https://docs.slackware.com/slackware:package_management?rev=1356846847][2012]]

Can you pin a patchset? But =patchwork= doesn't exist yet (not that I know what
it does).

Final answer, Regis. Bash v3.0 and v4.0 are supersets of v2.0
#+end_quote

I'm not sure really, but ChatGPT would be no fun here, since "[[https://te.xel.io/posts/2017-10-30-speed-of-thought-sociophysical-postulates-1-to-11.html#emulation-of-ancient-thought-penultimate-metacognition][Emulation of
Ancient Thought Is Penultimate Metacognition]]." Obviously the correct answer is
important, but it is not necessarily the most valuable product of a question.

** Security
+ [[https://unix.stackexchange.com/a/322821][Finding where bash functions are defined]] (and the obfuscation thereof)

** Topics
*** Arithmetic

With =bc=, calculate the size of all the Kanji SVG's

#+begin_src sh
# git clone https://github.com/wsgac/kanji-mode && cd kanji-mode
ls -al ./kanji | cut -b21-26 \
    | xargs | sed -e 's/ /+/g' \
    | bc
#+end_src

The good news is that this library probably doesn't need many updates, so it's
size in a Guix/Nix store doesn't matter much -- as long as there's an extant
link from a top-level user profile in the store (also potentially a downside)

*** Argument Handling

**** Getopts

+ [[https://www.golinuxcloud.com/bash-getopts/#getopt_vs_getopts][Beginners Guide to Use Getopts]]

Emacs has =sh-insert-getopts= so now I don't need to write a snippet.


**** Getopt

This allows providing short and long options with default values. It's a bit
simpler, but the syntax is more complicated.

+ [[https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options][Using getopts to process long and short cmd line options]]

*** Substitution
**** Arrays

#+begin_src bash
echo "# args: $#"
echo "@ args: $@"
echo "* args: $*"

# same symbols in arrays/hashes
foo=("'1'" "'2'" a$'\t'bc)
echo "${#foo} ${#foo[@]} ${#foo[*]}"
bar="${foo[@]}" && echo $bar
bar="${foo[*]}" && echo $bar
#+end_src

#+RESULTS:
| #   | args: | 0 |    |
| @   | args: |   |    |
| *   | args: |   |    |
| 3   | 3     | 3 |    |
| '1' | '2'   | a | bc |
| '1' | '2'   | a | bc |

*** History
+ [[https://www.cherryservers.com/blog/a-complete-guide-to-linux-bash-history][A complete guix to linux bash history]]

** Issues
*** Gargarsgs (things that be hard that should not be)

**** Read multiline var into array (or variable)

See this [[https://serverfault.com/questions/72476/clean-way-to-write-complex-multi-line-string-to-a-variable][stack overfault]]

#+begin_example sh
#!/bin/bash

mapfile Pattern <<-eof
        <?xml version="1.0" encoding='UTF-8'?>
        <painting>
          <img src="%s" alt='%s'/>
          <caption>%s, painted in
          <date>%s</date>-<date>%s</date>.</caption>
        </painting>
        eof

while IFS=";" read file alt caption start end ;do
    printf "${Pattern[*]}" "$file" "$alt" "$caption" "$start" "$end"
  done <<-eof
        madonna.jpg;Foligno Madonna, by Raphael;This is Raphael's "Foligno" Madonna;1511;1512
        eof

#+end_example

And the rationale:

#+begin_quote
mapfile read entire here document in an array.

the syntaxe "${Pattern[*]}" do cast this array into a string.

I use IFS=";" because there is no ; in required strings

The syntaxe while IFS=";" read file ... prevent IFS to be modified for the rest of the script. In this, only read do use the modified IFS.

no fork.
#+end_quote

Holy shit, that's a time saver right there.

***** This hack right here...

LOL... it almost works (still no line breaks)

#+begin_example sh
while IFS='' read -r -d '' _usage; do
    _usage=$_usage
done<<EOF
  muh FOE
EOF

echo $_usage
#+end_example

* Zsh


* Fish
