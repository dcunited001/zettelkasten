:PROPERTIES:
:ID:       cf847bc5-31f7-4bb8-8324-7680a8f2953d
:END:
#+TITLE:     Shell
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Ideas
** Profile Injection
+ Several options to achieve this:
  - templates (yuck)
  - profile builds (deploys .. yuck)
+ But some kind of portable dependency injection would be convenient
  - input/output redirection with =tee=
  - socket-oriented methods like =socat=

**** Examples of similar techniques
+ metasploit and pen-testing should probably use some of the same tricks:
  - for dynamic config mgmt, decentralization or obfuscation: one must handle
    data streams containing config pieces for other data streams
+ tricks from orchestration frameworks, esp if transmission or routing of
  config/state from =etcd= (or elsewhere) needs to be handed off indirectly to
  scripts/processes.
+ these techs would probably be found in orchestration of serverless functions


* POSIX

** Docs
+ Google [[https://google.github.io/styleguide/shellguide.html][Shell Style Guide]]

** Resources

** Issues

*** Bashisms
+ [[https://linux.die.net/man/1/checkbashisms][Check Bashisms]] script
+ [[https://betterprogramming.pub/24-bashism-to-avoid-for-posix-compliant-shell-scripts-8e7c09e0f49a][24 Bashism To Avoid for POSIX-Compliant Shell Scripts]]

*** Script injection
+ hmmm

* Bash

** Docs

** Resources
+ [[https://www.cs.cmu.edu/~15131/f15/topics/bash/][Practical Ideas for Bash]] (CMU)
+ [[Bash Programming (intro/howto)][Bash Programming (intro/howto)]]

*** Advanced Bash-Scripting Guide
+ [[https://tldp.org/LDP/abs/html/bash2.html][Contains high-level changelog for Bash v2.0 to v4.2]]

*** [[https://web.archive.org/web/20000824170847/http://www.ssc.com/ssc/bash/][SSC Bash Reference]]

Nigh impossible to find on the nets. It was fairly common at some point.  A
little tough to print: a =4x1= page layout works though.

Now nearly disappeared from the internet except for a university link. before
2004 because authors wanted $4.95 CoD for it ... which is honestly fair. But
most other bash cheatsheets are inferior.

The webarchive link probably covers Bash v2.0, but I would imagine any newer
Bash versions are a superset of the v2.0 functionality:

#+begin_quote
If you break the build in 1999 ... I want to imagine that every gets a CD in the
mail, but I guess UseNET?

Regardless, version pinning is ... not ... Nevermind, pinning isn't relevant.

Let's ask Slackware/pkgtools(?) ... wiki history on that page only goes back to [[https://docs.slackware.com/slackware:package_management?rev=1356846847][2012]]

Can you pin a patchset? But =patchwork= doesn't exist yet (not that I know what
it does).

Final answer, Regis. Bash v3.0 and v4.0 are supersets of v2.0
#+end_quote

I'm not sure really, but ChatGPT would be no fun here, since "[[https://te.xel.io/posts/2017-10-30-speed-of-thought-sociophysical-postulates-1-to-11.html#emulation-of-ancient-thought-penultimate-metacognition][Emulation of
Ancient Thought Is Penultimate Metacognition]]." Obviously the correct answer is
important, but it is not necessarily the most valuable product of a question.

** Security
+ [[https://unix.stackexchange.com/a/322821][Finding where bash functions are defined]] (and the obfuscation thereof)

** Issues

* Zsh


* Fish
