:PROPERTIES:
:ID:       aeff1aef-4321-4666-8a70-a81025c5c01b
:END:
#+TITLE: Lisp
#+DESCRIPTION:
#+TAGS:

* Roam

* Docs

* Resources

** Game Development

*** Lisp Game Jam

Via [[https://flexiana.com/2024/05/lisp-game-jam-2024-a-starter-guide-for-clojure-devs][Lisp Game Jam 2024: A Starter Guide for Clojure Devs]]

[[file:img/flexiana-lisp-game-jam-2024.svg]]

* Common Lisp

** Docs



** Resources

+ [[https://sellout.github.io/2012/03/03/common-lisp-type-hierarchy][Common Lisp Type Hierarchy]]
+ [[https://lispcookbook.github.io/cl-cookbook/#download-in-epub][CL Cookbook]]
  - [[https://lispcookbook.github.io/cl-cookbook/clos.html][Fundamentals of CLOS]]
+ [[https://cl-community-spec.github.io/pages/Glossary.html#defined-name][CL Glossary]]

*** Cliki
*** ECL

+ [[https://www.reddit.com/r/Common_Lisp/comments/x78aha/comment/inbwpxj/][what is ECL and "why is it unpopular?" (not my words)]]
  - [[https://gitlab.com/eql/lqml][LQML: lightweight QML-only ECL bindings to Qt5/Qt6]] via [[https://www.reddit.com/r/Common_Lisp/comments/xe3pmt/has_anyone_used_lqml_qml_ecl_binding_for_qt56/][reddit]]


*** Editors

+ Emacs/Slime/Slynk
+

*** Tooling

+ CLPM
+ [[https://github.com/ocicl/ocicl][ocicl/ocicl]]: OCI-based ASDF system distribution/mgmt tool

**** Packaging

+ [[https://www.lispworks.com/documentation/HyperSpec/Body/11_a.htm][Common Lisp Packages]] (?? conflicts with CPLM/ASDF pkg?)
+ System: ASDF System

***** TODO Place asdf/uiop/sbcl/etc



*** Reference Projects

**** CLWEB

https://github.com/plotnick/clweb



** Libraries

Maybe start putting together an repo XML.

Some of these are older projects, but lisp is a bit different in how logic and
functionality are specified. Scheme has $R^nRS$ and its SRFIs. Common lisp has a
similar system (see [[https://gitlab.com/jpellegrini/spartns/-/blob/master/benchmark.lisp?ref_type=heads][benchmark.lisp]] in the spartns project). In clojure, it was
said "once a library is done & done well, it doesn't need to be changed." That's
higher-order logic for you.

*** Test

**** Lisp Unit

+ The test harness [[https://gitlab.com/jpellegrini/spartns/-/blob/master/lisp-unit.lisp?ref_type=heads][lisp-unit.lisp is included jpellegrini/spartns]]

*** Core

*** Data Structures

+ [[https://github.com/vy/avl-tree][vy/avl-tree]] self-balancing btrees used for search. the AVL structure was used
  in the spartns project ... somehow, though not this library. Only dep is
  [[https://www.cliki.net/demacs][demacs]].

#+begin_quote
There's an AVL implementation in emacs from 1991. Some arcives of the older docs
ask users to fetch it from an anonymous =.se= FTP).

run =M-x find-library 'avl-tree'=. I still don't really know what it does.
#+end_quote

*** Math

**** Arbitrary Precision

The [[github:stylewarning/computable-reals][stylewarning/computable-reals]]

[[https://github.com/stylewarning/computable-reals/blob/master/get-approximations.lisp#L8-L23][get-approximations.lisp]] shows how the library is intended to be used. +most+ of
the functions are recursively computed.

+ this is one way that I would imagine arbitrary precision in functional
  languages. A more interesting approach uses rules of arithmetic & etc to shift
  around arguments where precision is bundled together with each argument. only
  at points where you explicitly want to force valuation do problematic
  computations occur.
  + i.e. you create definitions for =+ - x รท= which transform
    computations such that some parts are delayed.
  + e.g. when /multiplying/ large numbers, you find common bases & then shift some
    of the computation to /exponential/ relations;

**** Spartns

[[gitlab:jpellegrini/spartns][jpellegrini/spartns]] sparse tensor representations.

+ =defscheme= is interesting.
+ Everything in the library culminates with

the author also wrote:

+ [[https://gitlab.com/jpellegrini/pll][jpelligrini/pll]]: prolog in scheme and I think back to prolog again? idk
+ [[github:jpellegrini/gnu-apl-refcard][jpellegrini/gnu-apl-refcard]]: refcard for APL, which requires either a
  space cadet keyboard or most of the eight modifier key levels


*** Networking

** Topics

*** Type System

CommonLisp's type system is a [[https://en.wikipedia.org/wiki/Complemented_lattice][complemented lattice]], according to [[https://alhassy.com/TypedLisp#terse-types-tutorial][Al Hassy]]

**** MOP: Meta Object Protocol

+ [[https://www.cliki.net/MOP][CLiki: MOP]]

*** Terminology

+ [[https://cl-community-spec.github.io/pages/Glossary.html#conforming-implementation][Conforming Implementation]]
+ [[https://cl-community-spec.github.io/pages/Glossary.html#constant-form][Constant Form]] an interesting type of form which defines "change" in the
  technical sense: to change and to be changed.

**** System

From CL Glossary:

#+begin_quote

+ system class :: n. a class that may be of type built-in-class in a conforming
  implementation and hence cannot be inherited by classes defined by conforming
  programs.

+ system code :: n. code supplied by the implementation to implement this
  specification (e.g., the definition of mapcar) or generated automatically in
  support of this specification (e.g., during method combination); that is, code
  that is not programmer code.

#+end_quote




*** CLPM: Manage Projects

+ [[https://www.clpm.dev/tutorial/tutorial.html][CLPM Tutorial]]

*** OCICL

#+begin_quote
An OCI-based ASDF system distribution and management tool for Common Lisp.
#+end_quote

An alternative to =quicklisp=, builts OCI-compliant artifacts. =ocicl-runtime=
is embedded in lisp image. it finds/loads ASDF systems managed with =ocicl=.

+ works with abcl, ecl, sbcl
+ generates change summaries for dependency delta
+ relies on =ORAS= to distribute OCI images

** Issues
