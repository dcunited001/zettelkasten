:PROPERTIES:
:ID:       aef34489-3943-4c2f-bf88-828f5ea39e16
:END:
#+TITLE: Tree-sitter
#+DESCRIPTION:
#+TAGS:

* Docs

+ [[https://dcreager.net/2021/06/tree-sitter-map/][Treesitter ecosystem]] (Dec 2021)

* Resources

* Topics

** Querying

+ [[https://tree-sitter.github.io/tree-sitter/using-parsers#pattern-matching-with-queries][Pattern matching with queries]]

** Indexing

*** Stack Graphs



*** Semantic

+ Run on a [[https://github.com/github/semantic/blob/main/Dockerfile][container]] or set up =ghcup=
+ Definitely use the [[https://downloads.haskell.org/ghc/latest/docs/users_guide/ghci.html][GHCi repl]]

**** Using =codex= for a =ctags= index

The [[https://github.com/github/semantic/blob/main/docs/%F0%9F%92%A1ProTip!.md][ProTip]] doc indicates you can use [[https://github.com/aloiscochard/codex][aloiscochard/codex]] to generate a database
of ctags for projects.

***** TODO how useful are ctags for semantic

It generates haskell types for tree-sitter grammers, which can the be located in
a project, but when semantic applies these types to scan/index source code, can
you capture useful intermediate types?

+ The GHCi repl would help

** Editors

** Grammars

* Issues

* Ideas

** Well I tried

You may not need [[https://docs.rs/tree-sitter-stack-graphs/0.7.0/tree_sitter_stack_graphs/][tree_sitter_stack_graphs]] to get good insights on code. What do
you do with tree sitter stack graphs anyways?

  #+begin_quote
"Yo dawg...

you're going to need a Tree-sitter grammer for your Tree-sitter Query DSL, so
you can traverse the DSL trees while you reconstruct graphs from subgraphs you
glued together with the other Tree sitter trees."

That sounds hard. We should ask chatgpt.
  #+end_quote

And yeh =The following example resolves an import relative to the current file.=

*** Type Theory

Queries on AST's are hard (I still think in "ASTs" ... still can't fully unpack
the stack/scope graphs). A query with a single parameter would be like a 1-type,
more or less.

+ [[https://www.youtube.com/watch?v=K7tQsKxC2I8&list=PLEJEA9mYfeKip2P9v2MRCJjcBbX-prgt0][The Derivative of a Regular Type is its Type of One-Hole]] I watched this a long
  time ago. Apparently, I was excited enough to start a Math playlist. I had
  thought about this quite a bit.
+ And a sequel: [[https://paperswelove.org/2017/video/gershom-bazerman-homological-computations/][Homological Computations for Term Rewriting Systems]]

But isn't everything a string? Any tree can be thought of as a string: as an
example, this basically what compression does, but there are other uses. Strings
are overrated though. The stack graphs must have different representation in
hyperbolic space, since they definitively have a root node, even with
recursion. That's probably not entirely useful after looking into it.

I'd like to extract snippets from codebases by using a suffix trie to search for
parameterized AST fragments. One suffix trie would be oriented down the tree and
another data structure would provide a similar view up the tree. The value would
be that you could identify when specific function calls were called a loop
construct, macro or higher order function. It wouldn't work in well in languages
logic is fragmented across many files/functions. You do need to convert the tree
to a string-like representation if the typical trie data structure is to work as
people expect.

This would answer questions like: index a large collection of Ansible YAML and
show me =test:= that

* Roam
+ [[id:4cdfd5a2-08db-4816-ab24-c044f2ff1dd9][Programming]]
