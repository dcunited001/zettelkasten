:PROPERTIES:
:ID:       95146708-4046-4cdb-a5df-e15594f17733
:END:
#+TITLE: Bootloader
#+DESCRIPTION: Grub, Systemd boot
#+TAGS:

* Docs
* Resources
+ [[https://www.youtube.com/watch?v=MRqfPmPaNgE&t=1239s][LinuxBoot: Firmware Tools & a Busybox in Go!]] pretty amazing video

** initramfs

*** [[github:csmart/custom-initramfs][csmart/custom-initramfs]]

+ This guy wrote a bunch of custom roles/examples for virt/openstack
+ And there's also [[https://github.com/csmart/hellolinuxworld][csmart/hellolinuxworld]] for a demo on writing linux modules


* Multiboot
Handoff from BIOS to initial bootloader

** Resources
+ [[https://alex.dzyoba.com/blog/multiboot/][Multiboot kernel]] minimal kernel example to demonstrate multiboot
  - see ./guix/gnu/bootloader.scm#menu-entry->sexp

* Devicetree
Standard for exposing device metadata to bootloader.

** Docs
+ linux: [[https://docs.kernel.org/devicetree/usage-model.html#id2][devicetree/usage-model.html]]
+ [[https://www.devicetree.org/specifications/][devicetree-org/devicetree-specification]]

* Grub
** Docs
+ archwiki: [[https://wiki.archlinux.org/title/Dm-crypt/System_Configuration][Dm-Crypt/System_Configuration]]
+ archwiki: [[https://wiki.archlinux.org/title/Persistent_block_device_naming][Persistent Block Device Naming]]

** Resources

** Topics

*** Multiboot

+ aguslr/multibootusb essentially automates much of the loopback GRUB described
  in [[https://wiki.archlinux.org/wiki/title/Multiboot_USB_drive][archwiki:Multiboot_USB_drive]]
+ There are alternative tools like ventoy, Yumi. Other alternatives listed on
  aguslr/multibootusb's site.

**** aguslr/multibootusb

This is pretty straightforward, easy to grok and easy to extend with additional
images.

+ Requires Syslinux/MEMDISK (more info on [[https://wiki.archlinux.org/title/Multiboot_USB_drive#Using_Syslinux_and_memdisk][archwiki]])

#+begin_src sh
wget -qO - 'https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.gz' \
    | tar -xz -C $mntusb/boot/grub/ --no-same-owner --strip-components 3 'syslinux-6.03/bios/memdisk/memdisk'
#+end_src

***** Usage

+ Create a partition table on your USB disk. Multiboot expects
  =$mntusb/boot/{grub/mbusb.d/,isos}= to exist on the boot partition.
+ Partition layout/flags different for the =makeUSB.sh -b= Hybrid MBR/EFI
  layout. GPT doesn't need flags.

Instead of copying all the =mbusb.d/*.d= files, you can just copy the configs
you're interested in and tweak them, but you may not be able to easily rsync
them. This gives you more control over what could load.

**** Guix

The [[https://guix.gnu.org/manual/devel/en/guix.html#Bootloader-Configuration][bootloader-configuration]] record needs to support GRUB's =loopback= option in
order to reimplement aguslr/multibootusb approach. There are other options,
including chainloading, etc.





** Issues

* U-Boot

** Docs
+ [[https://source.denx.de/u-boot/u-boot][u-boot/u-boot]] (git [[https://source.denx.de/u-boot/u-boot/tree/master/doc][docs]])
+ [[https://u-boot.readthedocs.io/en/latests/index.html][u-boot.readthedocs.io]]

** Resources
+ [[https://www.emcraft.com/som/stm32mp1/loading-linux-images-via-ethernet-and-tftp][Loading Linux Kernel Images via Ethernet and TFTP]]
+ [[https://yuhei1-horibe.medium.com/booting-linux-with-ramdisk-f6f2d59780dc][Booting Linux with Ramdisk]]: xilinx, hdi (device tree)
+ [[https://arxiv.org/pdf/2206.12751.pdf][Implementation of SquashFS Support in U-Boot]]
+ [[https://serhack.me/articles/os-embedded-booting-phase-uboot/][Booting an Embedded OS: the Booting and U-Boot Phase]]

* Netboot.xyz

Handy for quick stuff or for troublehooting devices (no sneakernet required)

** [[can ][linuxserver/netboot.xyz]]:

*** Run temporary instance from podman
+ Router interface needs some DHCP config
+ two volumes needed for podman
  - /config :: store netboot config's here
  - /assets :: store iso's here
+ ports :: container[:host]
  - map 80: http (nginx for assets)
  - map 69: tftp (udp)300
  - map 6969:3000: https (web interface)
  - map 30000-30010: tftp transfer
+ environment
  - UMASK=022

*** DHCP
+ set TFTP server IP
+ set bios file name and UEFI 32/64-bit file name


* PXE Booting
** Docs
+ netboot
+ pxe
  - [[https://sipb.mit.edu/iap/netboot/netboot-handout.pdf][PXE chainloading]]
+ ipxe
+ etherboot
+ [[https://wiki.archlinux.org/title/syslinux#UEFI_Systems][syslinux]] (archwiki)

** Resources
+ [[https://sipb.mit.edu/iap/netboot/netboot-handout.pdf][Gentoo Diskless Nodes]]
+ [[https://forums.gentoo.org/viewtopic-p-8740753.html?sid=027c05e0bb657a0e26c7c0d2f74586e0][Running gentoo entirely from RAM]] (gentoo forums)
+ [[https://sipb.mit.edu/iap/netboot/netboot-handout.pdf][MIT netboot slides]]
+ [[https://leo.leung.xyz/wiki/Tails][Update Tails to PXE Boot]]
+ [[https://linuxhit.com/raspberry-pi-pxe-boot-netbooting-a-pi-4-without-an-sd-card/][Netboot Raspberry Pi 4 without SD Card]]
+ [[https://robferguson.org/blog/2022/04/15/how-to-pxe-boot-your-rpi/][PXE Boot RPi]]
+ [[https://github.com/SerialVelocity/coreos-pxe-images/blob/4c1e8461c7225cbf7a0cc39cb0e4ca88ddc22fd9/.circleci/config.yml#L82-L83][extracting =root.squashfs= for CoreOS PXE boot]]
  - from [[https://github.com/coreos/fedora-coreos-tracker/issues/390][coreos/fedora-coreos-tracker#390]]

** Netboot to RAM

... because my management terminal's BTRFS disk decided to corrupt a week ago
... immediately as I actually have time to do this. No BTRFS tools could put
humpty dumpty back together again. Verifying the checksums failed, no matter how
I went about it.

And I guess I need to put this disk to better use if possible.

+ [[https://forums.gentoo.org/viewtopic-p-8740753.html?sid=027c05e0bb657a0e26c7c0d2f74586e0][Running gentoo entirely from RAM]]

** Issues

* SystemD Boot
* Roam
+ [[id:bdae77b1-d9f0-4d3a-a2fb-2ecdab5fd531][Linux]]
+ [[id:d7cc15ac-db8c-4eff-9a1e-f6de0eefe638][File Systems]]
+ [[id:80ccbcbb-a244-418f-be86-47e8969928a5][LUKS]]

