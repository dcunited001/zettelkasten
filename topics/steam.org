:PROPERTIES:
:ID:       e2b80b87-a52c-4bc7-8132-8e391e3bce3a
:END:
#+TITLE:     Steam
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

#+begin_quote
jesus !@#$'ing christ I just need to buy a Steam Deck.

oh right, i forgot. my career was assassinated. I almost forgot, but there it is
again to remind me.
#+end_quote

* Docs
+ [[github:ValveSoftware/Proton][Proton Github]]

* Resources
** Tweaking
+ Mesa [[https://github.com/mesa3d/mesa/blob/main/docs/envvars.rst][Environment Variables]]
+ Steam [[https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/03d00bbce1d43089bedd5e22a52cf56810ab4d4e/docs/steam-compat-tool-interface.md#user-content-environment][Environment Variables]]
  - 2018: [[https://www.ctrl.blog/entry/flatpak-steamcloud-xdg.html][Flatpak, Steam Cloud, XDG & why Linux doesn’t sync progress]]
    - probably resolved
  - [[https://www.pcgamingwiki.com/wiki/Glossary:Game_data][PC Gaming Wiki]]
+ Valve [[https://developer.valvesoftware.com/wiki/Command_Line_Options][Command Line Wiki]]

** Tools
+ ProtonupQT install/manage extra versions of Proton
+ [[github:Matoking/protontricks][Matoking/protontricks]]
+ Steam [[https://developer.valvesoftware.com/wiki/Developer_Console][Developer Console]]
  - Source [[https://developer.valvesoftware.com/wiki/Category:Source_SDK_FAQ][FAQ]]

* Topics

** Config

*** VDF Files

**** Reconciling multiple Steam Libraries

Steam stores +json+ =BML= in =.vdf= files. BML stands for =butts markup language=

#+begin_src shell :results output verbatim
find /flatpak/steam/SteamLibrary/ -name '*.vdf' -printf '%p\n'  | tree --fromfile .
#+end_src

#+RESULTS:
#+begin_example
.
└── flatpak
    └── steam
        └── SteamLibrary
            ├── compatibilitytools.d
            │   ├── GE-Proton7-24
            │   │   ├── compatibilitytool.vdf
            │   │   └── toolmanifest.vdf
            │   └── GE-Proton7-29
            │       ├── compatibilitytool.vdf
            │       └── toolmanifest.vdf
            ├── libraryfolder.vdf
            └── steamapps
                ├── common
                │   ├── Proton - Experimental
                │   │   └── toolmanifest.vdf
                │   ├── SteamLinuxRuntime_sniper
                │   │   └── toolmanifest.vdf
                │   └── SteamLinuxRuntime_soldier
                │       └── toolmanifest.vdf
                └── compatdata
                    ├── 1091500
                    │   └── pfx
                    │       └── drive_c
                    │           ├── Program Files (x86)
                    │           │   └── Steam
                    │           │       └── steamapps
                    │           │           └── libraryfolders.vdf
                    │           └── users
                    │               └── steamuser
                    │                   └── Saved Games
                    │                       └── CD Projekt Red
                    │                           └── Cyberpunk 2077
                    │                               └── steam_autocloud.vdf
                    ├── 948740
                    │   └── pfx
                    │       └── drive_c
                    │           ├── Program Files (x86)
                    │           │   └── Steam
                    │           │       └── steamapps
                    │           │           └── libraryfolders.vdf
                    │           └── users
                    │               └── steamuser
                    │                   └── AppData
                    │                       └── Local
                    │                           └── SpikeChunsoft
                    │                               └── AI The Somnium Files
                    │                                   └── steam_autocloud.vdf
                    └── 990050
                        └── pfx
                            └── drive_c
                                └── Program Files (x86)
                                    └── Steam
                                        └── steamapps
                                            └── libraryfolders.vdf

42 directories, 13 files
#+end_example

**** Locate All of them

#+begin_src shell :results output verbatim
locate '*.vdf' |\
    sort | grep -v 'snapshots' |\
    sed -e 's/^/"/' -e 's/$/"/' |\
    xargs ls -al
#+end_src

**** Check config for extra Library Folders

I'm not sure whether this is sufficient. For some reason =guix shell steam --
steam= ignores the extra library folders without reporting errors.

It's likely the links between them.

In =/flatpak/steam/SteamLibrary/libraryfolder.vdf=, this is the correct ID

#+begin_example
"libraryfolder"
{
        "contentid"             "9095460516004925508"
        "label"         ""
}
#+end_example

Which is registered elsewhere in =~/.local/share/Steam/config/libraryfolders.vdf=.
It does show the total size, though

#+begin_example
"libraryfolders"
{
        "0"
        {
                "path"          "/home/dc/.local/share/Steam"
                "label"         ""
                "contentid"             "25607871668136630"
                "totalsize"             "0"
                "update_clean_bytes_tally"              "331908100"
                "time_last_update_corruption"           "0"
                "apps"
                {
                        "228980"                "331908100"
                }
        }
        "1"
        {
                "path"          "/flatpak/steam/SteamLibrary"
                "label"         ""
                "contentid"             "9095460516004925508"
                "totalsize"             "527297421312"
                "update_clean_bytes_tally"              "3375503746"
                "time_last_update_corruption"           "0"
                "apps"
                {
                        "20920"         "20784013148"
                        "948740"                "11587615786"
                        "990050"                "11114356102"
                        "1091500"               "66043436302"
                        "1391110"               "649883581"
                        "1493710"               "1339837812"
                        "1628350"               "779166851"
                }
        }
}
#+end_example

** Guix

Nonguix has a container for game clients that installs as a package

+ Some interesting things done in =./nongnu/packages/game-client.scm= that
  demonstrate how to get most headaches to go away (VS Code, etc.)
+ Probably the structure of links/references to =STEAM_DUR= will not work without
  some shimming. Also, probably issues with some anti-cheat stuff.

*** Container

The code in [[https://gitlab.com/nonguix/nonguix/-/blob/master/nonguix/multiarch-container.scm][nonguix/multiarch-container.scm]] helps a ton.

**** Launch Wrapper Script

#+begin_src scheme
#!/gnu/store/n87px1cazqkav83npg80ccp1n777j08s-guile-3.0.9/bin/guile --no-auto-compile
!#
(eval-when
    (expand load eval)
  (let ((extensions '())
        (prepend (lambda (items lst)
                   (let loop ((items items) (lst lst))
                     (if (null? items)
                         lst
                         (loop (cdr items) (cons (car items) (delete (car items) lst))))))))
    (set!
     %load-path
     (prepend
      (cons "/gnu/store/jsxgc979x79h81kzqz9n6cpf5pk4z262-module-import"
            (map (lambda (extension) (string-append extension "/share/guile/site/" (effective-version)))
                 extensions))
      %load-path))
    (set!
     %load-compiled-path
     (prepend
      (cons "/gnu/store/pfy8pzcqc2a0dcaxk0njb9s21h0p29xc-module-import-compiled"
            (map (lambda (extension) (string-append extension "/lib/guile/" (effective-version) "/site-ccache"))
             extensions))
      %load-compiled-path))))

(begin
  (use-modules (guix build utils))
  (define (preserve-var var) (string-append "--preserve=" var))
  (define* (add-path path #:key writable?)
    (let ((opt (if writable? "--share=" "--expose=")))
      (if (pair? path)
          (string-append opt (car path) "=" (cdr path))
          (string-append opt path))))
  (define (exists-> file) (if (and file (file-exists? file)) (quasiquote ((unquote file))) '()))

  (let* ((run "/gnu/store/ql9166p999yskf0plgd6z7z4yh023lym-fhs-internal-1.0.0.78/bin/fhs-internal")
         (manifest-file "/gnu/store/7mxfz9q3x7aqj6a21i1xfi1jrxs8z0c6-nonguix-container-manifest.scm")
         (xdg-runtime (getenv "XDG_RUNTIME_DIR"))
         (home (getenv "HOME"))
         (sandbox-home (or (getenv "GUIX_SANDBOX_HOME")
                           (string-append home "/" ".local/share/guix-sandbox-home")))
         (wayland-display (or (getenv "WAYLAND_DISPLAY") "wayland-0"))
         (preserved-env '("^DBUS_"
                          "^DRI_PRIME$"
                          "^GDK_SCALE$" "^QT_X11_NO_MITSHM$"
                          "^GUIX_LOCPATH$" "^LD_LIBRARY_PATH$" "^LD_DEBUG$"
                          "^LIBGL_DEBUG$" "^LIBVA_DRIVERS_PATH$"
                          "^MANGOHUD" "^PRESSURE_VESSEL_"
                          "_PROXY$" "_proxy$" "^SDL_" "^STEAM_" "^SSL_" "^TZ"
                          "^XAUTHORITY$" "^(WAYLAND_)?DISPLAY$"
                          "^XDG_CURRENT_DESKTOP$" "^XDG_DATA_HOME$" "^XDG_RUNTIME_DIR$" "^XDG_SESSION_(CLASS|TYPE)$"
                          "^CAPSULE_DEBUG$" "^G_MESSAGES_DEBUG$"))
         (expose (quasiquote ("/dev/bus/usb" "/dev/dri" "/dev/input" "/dev/uinput"
                              (unquote-splicing (exists-> "/dev/nvidia0"))
                              (unquote-splicing (exists-> "/dev/nvidiactl"))
                              (unquote-splicing (exists-> "/dev/nvidia-modeset"))
                              (unquote-splicing (exists-> "/etc/machine-id"))
                              "/etc/localtime" "/etc/os-release" "/sys/class/drm"
                              "/sys/class/hwmon" "/sys/class/hidraw" "/sys/class/input"
                              (unquote-splicing (exists-> "/sys/class/power_supply"))
                              (unquote-splicing (exists-> "/sys/class/powercap"))
                              "/sys/dev" "/sys/devices"
                              (unquote-splicing (exists-> "/var/run/dbus")))))
         (share (quasiquote ((unquote-splicing (find-files "/dev" "hidraw"))
                             "/dev/shm" "/tmp"
                             (unquote (string-append sandbox-home "=" home))
                             (unquote-splicing (exists-> (string-append home "/.config/pulse")))
                             (unquote-splicing (exists-> (string-append xdg-runtime "/pulse")))
                             (unquote-splicing (exists-> (string-append xdg-runtime "/bus")))
                             (unquote-splicing (exists-> (string-append xdg-runtime "/" wayland-display)))
                             (unquote-splicing (exists-> (getenv "XAUTHORITY"))))))
         (DEBUG (equal? (getenv "DEBUG") "1"))
         (extra-shares-env (getenv "GUIX_SANDBOX_EXTRA_SHARES"))
         (extra-shares (if (and extra-shares-env (not (string= extra-shares-env ""))) (string-split extra-shares-env #\:) #f))
         (args (cdr (command-line)))
         (command (if DEBUG '() (quasiquote ("--" (unquote run) (unquote-splicing args))))))
    (setenv "GUIX_LOCPATH" "/usr/lib/locale")
    (setenv "LIBVA_DRIVERS_PATH" "/lib64/dri:/lib/dri")
    (format #t "\n* Launching ~a in sandbox: ~a.\n\n" "steam-client" sandbox-home)
    (when DEBUG
      (format #t "* DEBUG set to 1: Starting shell. Launch application manually with: ~a.\n\n" "fhs-internal"))
    (mkdir-p sandbox-home)
    (apply invoke (quasiquote
                   ("guix" "shell" "--container" "--no-cwd" "--network"
                    (unquote-splicing (map preserve-var preserved-env))
                    (unquote-splicing (map add-path expose))
                    (unquote-splicing (map (lambda (item) (add-path item #:writable? #t))
                                           (if extra-shares (append share extra-shares) share)))
                    "-m"
                    (unquote manifest-file)
                    (unquote-splicing command))))))
#+end_src

** Custom =STEAM_DIR= location (OLD, probably wrong)

+ [[https://www.pcgamingwiki.com/wiki/Glossary:Game_data][PC Gaming Wiki]] describes Steam Library & Game Data locations

#+begin_src sh :tangle .config/sh/profile.d/steam.sh :shebang #!/bin/sh
export STEAM_DIR=$_STEAM/.var/app/com.valvesoftware.Steam/.steam
export FLATPAK_STEAM_VAR=/flatpak/steam/.var

# log with PROTON_LOG=1
export PROTON_LOG_DIR=$_STEAM/log/proton
export PROTON_CRASH_REPORT_DIR=$_STEAM/log/proton-crash

alias run_steam="flatpak --installation=steam run com.valvesoftware.Steam"
#+end_src

Run with =FLATPAK_CONFIG_DIR=/etc/flatpak flatpak --installation=steam run com.valvesoftware.Steam=

Or simply =flatpak --installation=steam run com.valvesoftware.Steam=

*** Setup

+ Add =steam.sh= to =~/.config/sh/_load_profile.sh=

#+begin_src sh :tangle no :eval no
mkdir -p $_STEAM $FLATPAK_STEAM_VAR/com.valvesoftware.Steam

# because flatpak steam will try to symlink /flatpak/dc/.var/com.valvesoftware.Steam/.var to ~/.var (which is very confusing)
ln -s /flatpak/steam/.var/app/com.valvesoftware.Steam /flatpak/dc/.var/com.valvesoftware.Steam

# ensure that FLATPAK_CONFIG_DIR is defined and that the steam flatpak install exists
flatpak --installations

flatpak --installation=steam remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak --installation=steam remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo

flatpak --installation=steam install flathub com.valvesoftware.Steam
flatpak --installation=steam install flathub com.valvesoftware.Steam.CompatibilityTool.Proton
#+end_src


*** Issues

+ After invoking for the first time, if this link shows up, remove it
  - =rm /flatpak/steam/.var/app/com.valvesoftware.Steam/.var=
+ Flatpak steam will ignore =STEAM_DIR= anyways...
  - it will put the steam library within the steam install under
    =/flatpak/steam/.var/app/com.valvesoftware.Steam/.var=


***** TODO consider creating ./flatpak/installations.d/steam.conf

** Troubleshooting

Running Garuda from within a Proxmox VM.

+ ProtonDB: Improving Performance

*** Defaults For Launching Proton

**** Vulkan

*Always* prefer vulkan where possible.

**** Mesa ACO

Set =RADV_PERFTEST=aco= to benefit from ACO.

+ You *always* want pre-compiled/cached shaders.
+ DXVK cache is not related to the ACO cache

#+begin_quote
NOTE: ACO is now included in the standard mesa package.
#+end_quote

Run =yay -Syu mesa-aco-git= to ensure that your version of Mesa includes ACO for
shader caching.


**** DXVK Async

****** TODO figureout whether applying this patch is still necessary (alot of people use it)

**** ESYNC/FSYNC

+ *Always* prefer fsync where possible
+ Force with =

****** TODO ensure this is compatible with current CPU config for Proxmox VM

**** Gamemoded

Ensure =gamemoderun %command%= is included in the launch flags

+ =yay -Syu gamemoded= if running non-gaming Garuda.


*** Logging

*** Fixes

**** Shader Caching

=yay -Syu mesa-aco-git=

**** Feral Gamemode

=yay -Syu gamemode lib32-gamemode=

***

*** Protontricks
xx

** Games

*** Death end re;Quest

A story-driven isekai-based game.

Works well for the Manga OCR flow where rect-based screengrabs are copied to
clipboard:

+ Subtitles can be paused and there's a feature with backlog of text.
+ Works in combined Wayland/XWayland session on KDE

**** Performance

There are performance issues though. Most reviews on protondb mention:

+ setting =WINE_CPU_TOPOLOGY= to lock the CPU cores that should be used
+ locking the framerate between 30-60
+ locking the proton version to below the current release.

Some reviewers have very similar hardware, but are getting much better
results. The game is basically unplayable for me. The PC Controls were also a
bit tough to figure out -- see [[https://steamcommunity.com/sharedfiles/filedetails/?id=1746900339][the guide on Steam]].. The UI references console buttons and/or expects a
controller.

Basically, it seems that the game was primarily written for PS4/console. It
would probably work alright for Windows PC? But i'm getting extreme jitter in
framerate. So it's probably not making the best use of whatever resources it
does have.
