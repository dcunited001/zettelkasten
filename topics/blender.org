:PROPERTIES:
:ID:       b3826464-5132-4a77-9707-93a72bd1d4a3
:END:

#+TITLE:     Blender
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes


* Docs
+ [[https://docs.blender.org/][Official]]
+ [[https://developer.blender.org/tag/documentation/][Developer Docs]]

** Scripting
+ API

* Resources
** 3D Printing
*** Guides
+ [[https://daler.github.io/blender-for-3d-printing/contents.html][daler.github.io/blender-for-3d-printing]]
  - STL: [[https://daler.github.io/blender-for-3d-printing/printing/export-stl.html][Exporting and Importing]]
** Python Scripting
*** Guides
+ [[https://docs.blender.org/api/current/info_quickstart.html][Quickstart]]
+ [[https://docs.blender.org/api/current/info_tips_and_tricks.html][Scripting Tips and Tricks]]

*** IPython
+ [[https://www.blendernation.com/2014/11/24/using-ipython-with-blender/][Using IPython (jupyter) with Blender]]
+ [[https://github.com/panzi/blender_ipython][panzi/blender_ipython]] (2014)
+ [[https://github.com/gabrielmontagne/blender-addon-run-ipython][gabrielmontagne/blender-addon-run-python]] (2020, Run IPython from Blender)

*** Jupyter

+ [[https://github.com/cheng-chi/blender_notebook][cheng-chi/blender_notebook]] (based on [[https://github.com/cameronfr/BlenderKernel][cameronfr/BlenderKernel]])
  - [[https://github.com/cheng-chi/blender_notebook/issues/8][issue 8]] indicates that it's necessary to fork to change the python version
+ [[ https://github.com/mamut-m/blender_notebook][mamut-m/blender_notebook]] is still being maintained

**** On Arch
+ Install jupyter with =pip install jupyter-lab notebook=
+ install kernel with =pip install -e git+git://github.com/mamut-m/blender_notebook.git@master#egg=blender_notebook=
  - This really needs to be done in the same context as Blender's python. On
    arch, this seems to be the system python. Unfortunately, there's no way to
    use =pipenv= without building python modules
    - it can be installed under user modules though
    - however =pip install -e= really wants a local copy of the source. the
      wheels will break if it doesn't have it.
  - I'm not sure which option I don't have time for: corrupting system python
    (eventually) or editing a =PKGBUILD= to build from source (not hard ... but
    slow feedback loop)
+ Create the new kernel: =blender_notebook install --blender-exec=/usr/bin/blender=
  - =$HOME/.local/share/jupyter/kernels/blender= w/ default jupyter ... things?
    - ... i donno... I NEVER HAD A GPU FOR TENSORFLOW. kaggle competitions would
      just be a cruel joke.
+ The package doesn't seem to work for blender 3.5 for now. no time to debug.
  - some deprecation or another. =/tmp/tmpox4vu6p4/kernel.py:44: DeprecationWarning: There is no current event loop
    loop = asyncio.get_event_loop()=
+ I really just wanted a nice place to put my code without figuring out how to
  build this for 5 platforms.

** Mesh Processing

*** CGAL

Wow so [[https://scholar.google.com/citations?user=pImSVwoAAAAJ&hl=en][this Justin Solomon guy's Google Scholar]] wins "best illustrations" ...
whatever that "computational geometry" is IDK, but man the pictures are amazing.
Also, the math is like your tools from calculus become colors to paint with,
making this math more art than science. Very creative derivatives/integrals,
emphasis on vector fields, manifolds, covariant derivatives (+ killing fields,
but not in GR) and optimization.

Oh, so I do understand this ... kinda.

*** Meshlab

Built on cgal. Not sure if there's dependencies on CUDA.

**** On Arch

Some dependencies should be installed before it's built. I believe this software
is built for windows as well. It's definitely free as in beer.

=yay -Syu openctm lib3ds muparser meshlab-git=

* Issues
** Hardware
+ Archlinux: [[https://wiki.archlinux.org/title/3D_Mouse][3D Connexion with Blender]]

** Scripting
*** Initial Setup
+ Enable =Developer Extra= and =Python Tooltips=
  - This give you Python API hints when hovering on UI elements

*** Tips
+ Use "info editor" to see python code for UI interactions
+ The Text Editor has templates/examples
+ Use ActionRecorder addon to convert actions/macros to python
+ Scripting Examples from [[github:blender/blender][blender/blender]]
  - ./blender/release/scripts/startup/bl_operators
  - ./blender/release/scripts/startup/bl_ui
+ Addons code [[github:blender/blender-addons][blender/blender-addons]]

cd
** Keys
+ F3 :: Command Search
+ S-F3 :: Main 3D Object Viewport
+ S-F4 :: Python Console
+ S-F11 :: Edit Blender Scripts

** Printing Projects
+ Enable =Auto Depth= and =Rotate Around Selection=
+ Add the [[https://all3dp.com/blender-3d-print-toolbox-simply-explained/][3D Print Toolbox]] addon
  - Press =N= to find the tools via Information pop-out
+ Set scene scaling
  - Scene -> Units -> Length :: Millimeters
  - Scene -> Units -> Unit Scale :: 1.000 (default)
+ Export with scale of 1.00

**** TODO validate that this allows you to reimport without trouble

** Building

*** CUDA
+ AMD users can install an add-on (not found in flatpak search)
+ Another route is setting =CUDA_TOOLKIT_ROOT_DIR= during build

*** As Python Module On Arch

+ Reference [[https://aur.archlinux.org/packages/blender-git][blender-git]] for things like =yay -S blender-git --mflags "CUDA_ARCH=sm_92"=
+ If Blender's =pip= installs ipython/jupyter, then it can be called from
+ On Arch, blender's python references the system python by default. This can be
  changed in the package build

*** Python
+ To import the blender =bpy= python modules from another environment, then
  [[https://wiki.blender.org/wiki/Building_Blender/Other/BlenderAsPyModule][Build Blender as a Python Module]]


* Ecosystem

** Modeling
*** Meshes
  - Primitives
*** Curves (bezier/etc) and Surfaces (b-spline)
+ [[https://behreajj.medium.com/scripting-curves-in-blender-with-python-c487097efd13][Scripting Curves in Blender with Python]] (nurbs)
+ [[https://readthedocs.org/projects/nurbs-python/downloads/pdf/latest/][Three Hundred Twenty-Two (322) Pages on NURBS-Python]] (pagedown x50)
  - Will do from CSV ( . . . )
+ Matlab also does NURBS ([[https://www.mathworks.com/help/curvefit/nurbs-and-other-rational-splines.html#f5-21536][CurveFit]])

*** Metaball (sculpting)
  - fluid-like

*** Volumes (OpenVDB voxels)

*** Modifiers (composable operations on models)

*** Geometry Nodes (geomoetry shaders)
  - convert between point/curve/mesh/surface
  - lift a type to another or cross object types

** Addons
*** CAD Transform
*** 3D Print Toolbox

*** Add Mesh
+ Extra Objects
  - Gears
  - 3D Function
+ Bolt Factory
+ Geodesic Domes
+ Archimesh (architecture generator)
+ ANT Landscape
*** Add Curve
+ Extra Objects
  - torus
  - many others
*** Mesh
+ Tissue (tesselation)
+ Edit Mesh Tools
  - select random verticies
  - fillets/chamfers

*** UV
+ Magic UV (adv. manipulation of uv's & normal's)

*** Interface
+ Amaranth (productivity for 3d video)


