:PROPERTIES:
:ID:       8df9a1d3-798f-4f89-a355-a0eb0c22b321
:END:
#+TITLE: FreeCAD
#+DESCRIPTION: FreeCAD
#+TAGS: CAD

+ CAD
+ FreeCAD
+ OpenCascade OCCT

* Overview

Emacs integration for OCC (occ-mode, ob-occ)

OCCT's codebase includes quite a lot of TCL code. This code uses a first-party
interface and is simpler than the alternative libraries.

** CAD Software/Process interoperability

Most CAD applications integrate as much of the workflow as possible into a
single app/interface. If you pick a new tool, you kinda have to swallow the
whole pill, otherwise you're stuck halfway dealing with problems related to
integrating assets/workflows/projects between the applications you use.

Areas where these problems are encountered:

+ Large-scale industrial design projects
+ Projects requiring analysis by external tools fluid-flow
+ Projects with AI-driven design (these are really amenable to open formats)
+ Electronics components integrated into inventor/solidworks/fusion projects. It
  doesn't matter which software vender your organization primarily uses. It
  doesn't matter whether you're combining Inventor/Fusion with EagleCAD or
  FreeCAD with KiCAD, you're going to encounter problems.
+Projects involving multiple teams, whether internal or external. Your software
  shouldn't be a primary factor in deciding who you partner with -- this makes
  your business tactics too transparent. You should have many options, not a
  few, and other factors enter your decision calculus first.

** Why does the primarily Windows-based, proprietary software fail?

Lack of support for open formats

+ This contributes to vendor lock-in
+ Critically, it strongly dampens uptake of third-party or open tools

Installation/Configuration:

+ There are network license servers and libraries of assets/extensions.
+ Installations could take hours
+ Getting an installation to a known state -- where all extensions or assets
  installed/accessble -- takes a long time, unless you're upsold on something
  like Autodesk Vault.
+ If a user's installation or configuration drifts, this can cost a ton of time.
  The measures to diagnose the problems may be out of their wheelhouse (though
  engineers are smart), but may also require network/domain priviledges to
  diagnose.

  Managing user/software configuration:

+ Preventing configuration drift invites solutions like PXE booting or loading a
  from known image. Still, every Windows session that loads (perhaps with a
  roaming profile) needs to set up access to cloud/intranet resources.
+ Managing per-user complexity can also be difficult in Linux. Since the
  complexity here emerges from several sources that collide to produce more
  complexity:
  - From networking/OS concerns
  - CAD  asset/extension/configuration concerns
  - file storage/distribution/versioning/security concerns
  - CAD software environment concerns, esp. when using shared definitions of
    iParts with Visual Basic -- LMAO you had AutoLISP, holy crap! To be fair,
    the Inventor VB interface is very nice. AutoCAD itself resembles Emacs and
    Inventor ensures that everyone starts out with more than enough
    /snippets/. If it weren't for that, I really can't imagine engineers using
    those features -- but you've just imitated Emacs (and /well-configured/
    IDE's).

+ Potential solutions: vendor's could support package manager repositories
  that enforce licensing -- but Windows-based package managers are not secure
  for some environments.

With Fusion, your projects become locked into the system and then you become
locked into the system. This makes sense for their business models.

+ There are security concerns here because, unless you configure the
  installation in ways I don't understand, then you can't control where the data
  lives. You also can't control whether your data is used to train: machine
  learning, industry trends analysis, economic analysis, UI/UX analysis, etc.
+ Preprocessors and configurations for machines are not easily shared unless
  everyone's using the same software. It's a chore to pull the configurations to
  a file system ... where they will become out of sync.
+You will prefer to use the software you designed a part with to generate the
  toolpaths, unless you're sending it off to be manufactured. Once you generate
  the toolpaths specify manufacturing details (which often involves revisiting
  the design phase), then if you change software systems, you may be limited in
  manufacturing old products built in a cloud system.
+ If how you feel about being locked into a system changes later ... it's too
  late. If you don't approve of how your data is used later on, it's too late.

Trials are limited to just enough time for you to notice problems, but they
aren't long enough for you to experience the new systems when you've ironed out
the wrinkles. You won't


** Applying the Unix-philosophy to CAD workflow

So I'm not saying that this workflow would solve all of the above problems. I
also don't think it's realistic to expect CAD users or engineers to adopt a
system like this. But I think it should be given a fair shot. Very few people,
even Linux users, understand what the Unix philosophy looks like when it's
applied -- this is because of Microsoft & Apple domination of
desktop/laptop/workstation installations and software ecosystems.


+ Low-level tasks that support parameterization and automation
+

**** TODO complete

* Inbox

* Tasks

** PROJ

occ-mode:

+ [ ] how to handle an assets library?
+ [ ] inherit from tcl-mode?
+ commands
  + [ ] generate BREP files
  + [ ] find generated BREP assets corresponding to buffer/file
  + [ ] transform STEP file into a script to generate it

occ-library:

+ [ ] list assets
+ [ ] support for global/relative projects
+ [ ] export assets to various CAD formats

ob-occ:

+ [ ] loading parameters via CSV or a table?
  - Inventor CSV parameter compatibility?
+ [ ] global parameters
+ [ ] org-mode headers =#+OCC_LIBRARY=fdsa=

boilerplate:

+ [ ] git repos
+ [ ] test framework
+ [ ] package structure

Misc:

+ [[https://wiki.freecad.org/FreeCAD-BRLCAD_integration][FreeCAD/OpenBRL integration]]
+ Step Files [[https://en.wikipedia.org/wiki/ISO_10303-21][ISO 10303-21]]
+ BREP ([[https://en.wikipedia.org/wiki/Boundary_representation][wiki]], ...)
+ [[https://dev.opencascade.org][dev.opencascade.org]]
  - [[https://dev.opencascade.org/doc/overview/html/][full docs]]
  - [[https://dev.opencascade.org/doc/refman/html/][manual]] (doxygen)
+ git repo
  - [[https://git.dev.opencascade.org/gitweb/?p=occt.git;a=tree;f=samples/tcl;h=a6578a94fd140c5898868a4c5520ad6b5e900c36;hb=HEAD][./samples/tcl]] (TCL)
  - [[https://git.dev.opencascade.org/gitweb/?p=occt.git;a=tree;f=tests;h=a6578a94fd140c5898868a4c5520ad6b5e900c36;hb=HEAD][./tests]]
