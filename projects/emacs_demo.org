:PROPERTIES:
:ID:       d499b4e5-4ac0-4b86-a907-dc2af2e99c00
:END:
#+TITLE: Emacs Demo
#+DESCRIPTION: Ideas for an emacs demo

* Demo Ideas

** Transform PFSense backups from XML/YAML

* Vanilla Emacs

** Emacs Docs

** Monitoring IPC start/stop

**** TODO find a way to cover this with vanilla emacs

Also note that org-babel doesn't seem to mesh well with the workflow
required to start/stop IPC

** Command Docs

Great for learning bash. Also, many of the basic emacs shortcuts are the same as
the shortcuts for bash. This is because GNU wrote Bash and Emacs.

+ C-u :: kill to the beginning of line
+ C-k :: kill to the end of line
+ C-y :: paste anything you've deleted (killed). Doesn't use the clipboard.

*** Man Pages & TLDR

** Learning Emacs

*** Menus

These are essential (don't desable them if you're new)

*** Help

*** Backtrace

** Dired

*** Transparent Encryption

*** Speedbar

No need for neotree or treemacs. These introduce too many dependencies anyways.

** History

Most minibuffer prompts have separate history. Use =C-r= to access it. The
history should just automagically work using the =completing-read= interface.

** Tramp

This is perhaps one of the most useful tools offered by vanilla emacs. If you
dig into the source for many, many packages, you'll see how much effort it takes
to make remote file actions transparent.

** Inserting output from commands

For any =emacs-lisp= or =shell= command, you can easily insert the command
output into the buffer. This also works for almost any language that evaluates
to a REPL, like python or clojure or scheme. Just prefix the evaluation command
with the universal argument: =C-u=

*** Reformatting command output

You can use =C-M-mouse-1= to drag a rectangle selection and I think =C-x r= as a
prefix for the defaults to paste rectangular regions of text. This is a bit more
intuitive to use than

From here you can usually insert these in =text-mode= org-babel source blocks
and then use =#+name= to specify a name to use them as input to other org-babel
source blocks. This is often a better workflow for building up shell scripts
examples than digging through your history, though babel doesn't work for
everything.

** Manipulating files with regexp

*** Scratch Buffer

**** Changing Modes

*** Control Characters

Encoded with the same character that it's listed as

+ also works in bash. again, this is great for learning bash

*** Convert from conf -> yaml

** Graphical Interface to Diff

*** Diffing Files/Directories

Diffing from dired isn't straightforward for directories, which is exceedingly
useful when files are outside of Git.

Workaround for diffing directories involves using Org-Babel blocks formatted by
=diff-mode=. These are rendered in when transformed by github into markdown.

** Org Babel
*** Emacs Lisp

*** Shell

*** Other Languages

To run various languages with org babel, you'll need at least a few lines of
configuration.


* Features Requiring Configuration/Dependencies

** Magit
*** Forge

**** Pull Requests

**** Forge Database

** Using Straight.el
*** How to contribute to =straight.el= packages

** Troubleshooting Emacs Configs

*** Using the =-q= and =-Q= options

*** Using =plexus/chemacs2=

If you use Doom Emacs, I would highly recommend this.

** Running Doom Emacs
*** How =straight.el= builds your dependencies

** Generating Latex Documents

I probably lack sufficient time to cover this
