:PROPERTIES:
:ID:       c75cd36b-4d43-42e6-806e-450433a0c3f9
:END:
#+TITLE: FRC
#+DESCRIPTION:

Some generic notes about the FRC community/ecosystem

* Docs

** [[https://docs.wpilib.org/en/stable/index.html][WPI Lib]]

+ Zero to Robot
+ [[https://docs.wpilib.org/en/stable/docs/software/frc-glossary.html][FRC Glossary]]

*** WPI Lib API Docs

+ [[https://robotpy.readthedocs.io/projects/robotpy/en/latest/][Python]]
+ [[https://github.wpilib.org/allwpilib/docs/beta/java/index.html][Java]]
+ [[https://github.wpilib.org/allwpilib/docs/beta/cpp/index.html][C/C++]]

[[https://docs.wpilib.org/en/stable/docs/software/hardware-apis/index.html][FRC Hardware APIs]]

*** Programming

+ [[https://docs.wpilib.org/en/stable/docs/software/vscode-overview/index.html][VSCode Overview]]
+ [[https://docs.wpilib.org/en/stable/docs/yearly-overview/index.html][2024 Overview]] (including new features/etc)

*** Control System

+ Hardware Component Overview
+ Software Component Overview

*** Projects

+ [[https://docs.wpilib.org/en/stable/docs/software/examples-tutorials/third-party-examples.html][Third Party Example Projects]]
+ [[https://docs.wpilib.org/en/stable/docs/software/examples-tutorials/wpilib-examples.html][WPILib Example Projects]]


*** Software Tools

+ Driver Station
+ RobotBuilder
+ Robot Simulation
+ OutlineViewer

* Resources

** Code

*** git-repo

[[https://github.com/ectorepo/ectorepo/tree/master/frc][FRC related repositories]] in [[https://github.com/ectorepo/ectorepo][ectorepo/ectorepo]]

Clone/update FRC-related repositories in one go. Mostly useful for reference or
to search repositories.

* Topics


* Issues


** Quick notes on using git-repo (for reference)

Repo is a tool that Google created for Android & Chromium. It's intended to
manage builds for projects that need to check out sets of branches for
subprojects.

Whenever I'm learning a new language or framework, I use =repo= to clone many
projects into a directory tree with consistent paths. There are probably better
solutions, but this makes it so much easier to search code. Compared to a
handful of projects cloned to random directories (or to /tmp/), it's easier to
remember where projects are and to refer to project paths when communicating to
other team members.

Git-repo is a fairly advanced tool. Resolving issues may require a lot of
knowledge about git. You're on your own if you encounter issues. The XML
manifest that defines the git repositories is intended to be used as reference
only.

*** Installing Repo

Create a place for the FRC repos.

#+begin_example sh
export FRC_REPOS=/some/lang/project
mkdir -p $FRC_REPOS && cd $FRC_REPOS
mkdir $FRC_REPOS/frc && cd frc # redundant
#+end_example

Install repo

#+begin_example sh
# or use dnf/yay
sudo apt-get install repo
#+end_example

Initialize the repo metadata

#+begin_example sh
#specify the manifest
REPO_MANIFEST=frc/default.xml

# run inside the directory you want to sync to
repo init -u https://github.com/ectorepo/ectorepo -m $REPO_MANIFEST
#+end_example

Sync to the latest version

#+begin_example sh
# then sync the repositories and directory structure
repo sync -u
#+end_example

To list all projects

#+begin_src sh
repo forall -c pwd
#+end_src

*** Merge Conflicts

You shouldn't change the files in these projects...

Changing the files may create issues later similar to git merge conflicts. To
resolve this, you can iterate across the projects and stash the changes.

#+begin_src sh
# Usage: repo forall [<project>...] -c <command> [<arg>...]
# repo forall -r 'regex' [project] ... -c <command> [<arg>...]
repo forall -c git stash

# then sync
repo sync

# and if you care about the changes, pop the stashes
repo forall -c git stash pop

# it's better to pop stashs one at a time. using forall when you pop the stashes
# is a great way to encounter merge conflicts (for accidental changes to
# projects)
_project_path=some/project
cd $_project_path && git stash pop

# If there's any conflicts, they should show up in VSCode

# find merge conflict with grep (quick, but error prone)
grep -re "^<<<<<" .

# better, but still incorrect
git diff --check

# a better way to find merge conflicts
git diff --name-only --diff-filter=U --relative

cd ..
#+end_src

It's better to avoid the need to do that, unless you plan on managing
branches. Repo overlaps with git, so there is duplication of concepts:
e.g. there are repo branches and git branches. This is confusing, but it's still
useful to have a list of projects checked out and current.

* Roam

+ [[id:4630e006-124c-4b66-97ad-b35e9b29ae0b][Robotics]]
