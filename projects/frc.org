:PROPERTIES:
:ID:       c75cd36b-4d43-42e6-806e-450433a0c3f9
:END:
#+TITLE: FRC
#+DESCRIPTION:

Some generic notes about the FRC community/ecosystem

* Roam

+ [[id:4630e006-124c-4b66-97ad-b35e9b29ae0b][Robotics]]

* Docs

+ [[https://github.com/andrewda/awesome-frc][andrewda/awesome-frc]]

** Programming & Design

+ [[https://github.com/Emory-Robotics/FRC-Programming-Guide][Emory-Robotics/FRC-Programming-Guide]]
+ [[https://github.com/bovle/frc-tips][bovle/frc-tips]]

** [[https://docs.wpilib.org/en/stable/index.html][WPI Lib]]

+ Zero to Robot
+ [[https://docs.wpilib.org/en/stable/docs/software/frc-glossary.html][FRC Glossary]]

*** WPI Lib API Docs

+ [[https://robotpy.readthedocs.io/projects/robotpy/en/latest/][Python]]
+ [[https://github.wpilib.org/allwpilib/docs/beta/java/index.html][Java]]
+ [[https://github.wpilib.org/allwpilib/docs/beta/cpp/index.html][C/C++]]

[[https://docs.wpilib.org/en/stable/docs/software/hardware-apis/index.html][FRC Hardware APIs]]

*** Programming

+ [[https://docs.wpilib.org/en/stable/docs/software/vscode-overview/index.html][VSCode Overview]]
+ [[https://docs.wpilib.org/en/stable/docs/yearly-overview/index.html][2024 Overview]] (including new features/etc)

*** Control System

+ Hardware Component Overview
+ Software Component Overview

*** Projects

+ [[https://docs.wpilib.org/en/stable/docs/software/examples-tutorials/third-party-examples.html][Third Party Example Projects]]
+ [[https://docs.wpilib.org/en/stable/docs/software/examples-tutorials/wpilib-examples.html][WPILib Example Projects]]


*** Software Tools

+ Driver Station
+ RobotBuilder
+ Robot Simulation
+ OutlineViewer
+ cscore :: camera access & streaming

**** Third Party

+ 3015rangerrobotics/pathplannerlib :: path planning
  - [[https://pietroglyph.github.io/trajectory-presentation][pietroglyph.github.io/trajectory-presentation]]

*** OpenCV

+ Original paper on [[https://docs.wpilib.org/en/stable/_downloads/cba1039fecb1731ad4e233f7638b9fd0/wang2016iros.pdf][AprilTag 2]]

*** Doxygen

The Java and C/C++ docs are accessible via VSCode
* Resources

** First Teams
+ [[https://firstmap.github.io][First Map]]
+ [[https://github.com/jonahsnider/frc-colors.com][jonahsnider/frc-colors.com]] FRC Colors: get colors used by FRC teams

** Misc


+ [[https://www.youtube.com/watch?v=dihfA7Ol6Mw&t=605s][Set up ROS with VS Code Dev Containers]]

** Code

+ Github org [[https://github.com/orgs/Virtual-FTC/repositories][Virtual-FTC]]: this is a simulator for FTC robots.

*** git-repo

[[https://github.com/ectorepo/ectorepo/tree/master/frc][FRC related repositories]] in [[https://github.com/ectorepo/ectorepo][ectorepo/ectorepo]]

Clone/update FRC-related repositories in one go. Mostly useful for reference or
to search repositories.

*** Libraries

*** Frameworks


** Formats

It's not clear whether FRC has frameworks for describing robot mechanics.

** Papers

*** Texts

+ [[github:jsimpso81/FRC_Secret_Book_Of_FRC_LabVIEW_2][jsimpso81/FRC_Secret_Book_Of_FRC_LabVIEW_2]]


**** [[https://motion.cs.illinois.edu/RoboticSystems/][Robotic Systems]] (from Urbana-Champaign)

Open source textbook ([[https://github.com/krishauser/RoboticSystemsBook][krishauser/RoboticSystemsBook]]) that's actually generated
from Jupyter Notebook sources. It includes [[https://github.com/krishauser/RoboticSystemsBook/tree/master/rsbook_code][example python libs]] and [[https://github.com/krishauser/RoboticSystemsBook/tree/master/figures][many pictures]]
(i like pictures)

+ [[github:krishauser/Klampt][krishauser/Klampt]] the motion planning toolkit ([[https://github.com/krishauser/Klampt#comparison-to-related-packages][comparison]] to other frameworks)

*** Motion

+ [[https://www.youtube.com/watch?v=8319J1BEHwM][Motion Planning and Control in FRC]] (and [[https://www.chiefdelphi.com/uploads/default/original/3X/a/b/ab808bbf5f212c6deba8565dac83852bbd9b4394.pdf][slides]])

**** Advanced

+ [[https://arxiv.org/abs/2203.07761][Reactive Motion Generation on Learned Riemannian Manifolds]]

** Other Teams

*** Team 302

[[https://team302.org/Resources/Resources.html][Resources]] Page

+ Uses C/C++
+ Teaches Design Patterns and UML (several PDF's)

*** Team 254

[[https://www.team254.com/resources/#][Resources]] page

+ Has a parts management system: [[https://www.team254.com/documents/partnumbers/][Part Numbering and Nomenclature]]
+ Uses Java. Past codebases on the [[https://github.com/Team254][Team254 github]]
+ Hosts off-season events. Wrote [[https://github.com/Team254/cheesy-arena][Team254/cheesy-arena]] in Go. This webapp is a
  field management system. This includes PLC automation for elements on the
  field.
+ Also, [[https://github.com/Team254/cheesy-parts][Team254/cheesy-parts]]: a parts-management system, written in Ruby with
  Sinata (hey, I remember that)


** Environments

*** Docker

+ [[https://hub.docker.com/r/wpilib/ubuntu-minimal-base][wpilib/ubuntu-minimal-base]] and Dockerfile
+ [[nyxt:][wpilib/ubuntu-base]] and [[https://github.com/wpilibsuite/docker-images/tree/main/ubuntu-base][Dockerfile]]
+ [[https://hub.docker.com/r/wpilib/opensdk-ubuntu][wpilib/opensdk-ubuntu]]

**** Using Docker



**** Dockerfiles in source:

|-------------+----------------+----------------------------------------------------------------|
| repo group  | project        | path                                                           |
|-------------+----------------+----------------------------------------------------------------|
| wpilibsuite | Axon           | Dockerfile                                                     |
| wpilibsuite | Axon           | containers/mobilenet/base/Dockerfile                           |
| wpilibsuite | Axon           | containers/mobilenet/test/Dockerfile                           |
| wpilibsuite | Axon           | containers/mobilenet/tflite/Dockerfile                         |
| wpilibsuite | Axon           | containers/mobilenet/dataset/Dockerfile                        |
| wpilibsuite | Axon           | containers/mobilenet/metrics/Dockerfile                        |
| wpilibsuite | Axon           | containers/mobilenet/training/Dockerfile                       |
| robotpy     | build-actions  | ping-rtd/Dockerfile                                            |
| wpilibsuite | DetectCoral    | mobilenet/base/Dockerfile                                      |
| wpilibsuite | DetectCoral    | mobilenet/test/Dockerfile                                      |
| wpilibsuite | DetectCoral    | mobilenet/tflite/Dockerfile                                    |
| wpilibsuite | DetectCoral    | mobilenet/dataset/Dockerfile                                   |
| wpilibsuite | DetectCoral    | mobilenet/metrics/Dockerfile                                   |
| wpilibsuite | DetectCoral    | mobilenet/training/Dockerfile                                  |
| wpilibsuite | docker-images  | gazebo-ubuntu/Dockerfile                                       |
| wpilibsuite | docker-images  | opensdk/ubuntu/Dockerfile                                      |
| wpilibsuite | docker-images  | ubuntu-base/Dockerfile.22.04                                   |
| wpilibsuite | docker-images  | cross-ubuntu-py/Dockerfile.py38                                |
| wpilibsuite | docker-images  | cross-ubuntu-py/Dockerfile.py39                                |
| wpilibsuite | docker-images  | cross-ubuntu-py/Dockerfile.py310                               |
| wpilibsuite | docker-images  | cross-ubuntu-py/Dockerfile.py311                               |
| wpilibsuite | docker-images  | cross-ubuntu-py/Dockerfile.py312                               |
| wpilibsuite | docker-images  | roborio-cross-ubuntu/Dockerfile.2024                           |
| wpilibsuite | docker-images  | ubuntu-minimal-base/Dockerfile.22.04                           |
| wpilibsuite | docker-images  | aarch64-cross-ubuntu/Dockerfile.bullseye                       |
| wpilibsuite | docker-images  | raspbian-cross-ubuntu/Dockerfile.bullseye                      |
| wpilibsuite | opencv         | modules/videoio/misc/plugin_gstreamer/Dockerfile               |
| wpilibsuite | opencv         | modules/videoio/misc/plugin_ffmpeg/Dockerfile-ffmpeg           |
| wpilibsuite | opencv         | modules/videoio/misc/plugin_ffmpeg/Dockerfile-ubuntu           |
| wpilibsuite | opencv         | modules/highgui/misc/plugins/plugin_gtk/Dockerfile-ubuntu-gtk2 |
| wpilibsuite | opencv         | modules/highgui/misc/plugins/plugin_gtk/Dockerfile-ubuntu-gtk3 |
| robotpy     | roborio-docker | Dockerfile.base                                                |
| robotpy     | roborio-docker | Dockerfile.build                                               |
| wpilibsuite | WPILibPi       | Dockerfile                                                     |
| wpilibsuite | WPILibPi       | azure-docker/Dockerfile                                        |
|-------------+----------------+----------------------------------------------------------------|


* Topics

** CAN Devices

+ Daisy chained, more data via CAN than PWM, bidirectional
*** VCAN and VxCAN Devices

+ See [[https://forum.proxmox.com/threads/network-support-for-socket-can.129937/][Network Support for Socket CAN]] ()
+ [[https://www.systec-electronic.com/en/blog/article/news-socketcan-docker-the-solution][SocketCAN + Docker = The Solution]]

*** 3rd Party

+ [[Third-Party CAN Devices][3rd party CAN devices]]
+ [[https://docs.wpilib.org/en/stable/docs/software/can-devices/can-addressing.html][FRC CAN Device Specifications]]
** Control Systems

+ [[https://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-intro.html][State Space Control]]

** Robotpy

*** Projects



*** MostRobotPy

The classes are autogenerated from C/C++ headers by robotpy/robotpy-build (see
[[https://robotpy-build.readthedocs.io/][docs]]) using [[github:pybind/pybind11][pybind11]].


*** robotpy-build

Hoping to generate some class diagrams for these, though maybe doing so would be
simpler using the raw C/C++ doxygen.

More info on robotpy-build can be found by cloning [[github:robotpy/robotpy-build-talk][robotpy/robotpy-build-talk]].
Although this is a fairly advanced/risky thing to use, it can help mix custom
C/C++ to be consumed by robotpy python (in theory). That's not what I'm
imagining though.

**** YAML Format

#+headers: :results output code :wrap src yaml
#+begin_src sh :dir (expand-file-name "frc/robotpy/mostrobotpy" (getenv "_ECTO"))
WPILIB="subprojects/robotpy-wpilib"
yq -y '. | keys' $WPILIB/gen/*.yml \
   $WPILIB/gen/**/*.yml \
    | sort | uniq
#+end_src

#+RESULTS:
#+begin_src yaml
---
- attributes
- classes
- enums
- extra_includes
- functions
- inline_code
- templates
#+end_src


** Protobufs

*** allwpilib/wpimath

#+begin_src sh :results output verbatim
locate /data/ecto/frc/wpilibsuite/allwpilib/*.proto
#+end_src

#+RESULTS:
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/controller.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/geometry2d.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/geometry3d.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/kinematics.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/plant.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/spline.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/system.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/trajectory.proto
: /data/ecto/frc/wpilibsuite/allwpilib/wpimath/src/main/proto/wpimath.proto


** Printing docs

*** Vivid hosting


/* ad878b8b081d3878.css | https://static-2v.gitbook.com/_next/static/css/ad878b8b081d3878.css */

#+begin_src css
@layer theme {
  :host, :root {
    --text-base: 0.75rem;
    --text-lg: 0.90rem;
    --text-xl: 1.00rem;
    --text-2xl: 1.10rem;
    --text-3xl: 1.25rem;
    --text-4xl: 1.5rem;
  }
}

@layer utilities {
  .\[\&\>\*\+\*\]\:mt-5 > * + * {
    /* margin-top: calc(var(--spacing)*5); */
    margin-top: calc(var(--spacing)*1);
  }
  .pl-4 {
    /* padding-left: calc(var(--spacing)*4); */
  }
  .pl-3 {
    /* padding-left: calc(var(--spacing)*3); */
  }
  .p-4 {
    /* padding: calc(var(--spacing)*4); */
  }
}

/* Inline | https://frc-radio.vivid-hosting.net/overview/practicing-at-home */

p {
  \31 \.10rem: ;
  font-size: 0.75rem;
}
#+end_src

* Issues


** Quick notes on using git-repo (for reference)

Repo is a tool that Google created for Android & Chromium. It's intended to
manage builds for projects that need to check out sets of branches for
subprojects.

Whenever I'm learning a new language or framework, I use =repo= to clone many
projects into a directory tree with consistent paths. There are probably better
solutions, but this makes it so much easier to search code. Compared to a
handful of projects cloned to random directories (or to /tmp/), it's easier to
remember where projects are and to refer to project paths when communicating to
other team members.

Git-repo is a fairly advanced tool. Resolving issues may require a lot of
knowledge about git. You're on your own if you encounter issues. The XML
manifest that defines the git repositories is intended to be used as reference
only.

*** Installing Repo

Create a place for the FRC repos.

#+begin_example sh
export FRC_REPOS=/some/lang/project
mkdir -p $FRC_REPOS && cd $FRC_REPOS
mkdir $FRC_REPOS/frc && cd frc # redundant
#+end_example

Install repo

#+begin_example sh
# or use dnf/yay
sudo apt-get install repo
#+end_example

Initialize the repo metadata

#+begin_example sh
#specify the manifest
REPO_MANIFEST=frc/default.xml

# run inside the directory you want to sync to
repo init -u https://github.com/ectorepo/ectorepo -m $REPO_MANIFEST
#+end_example

Sync to the latest version

#+begin_example sh
# then sync the repositories and directory structure
repo sync -u
#+end_example

To list all projects

#+begin_src sh
repo forall -c pwd
#+end_src

*** Merge Conflicts

You shouldn't change the files in these projects...

Changing the files may create issues later similar to git merge conflicts. To
resolve this, you can iterate across the projects and stash the changes.

#+begin_src sh
# Usage: repo forall [<project>...] -c <command> [<arg>...]
# repo forall -r 'regex' [project] ... -c <command> [<arg>...]
repo forall -c git stash

# then sync
repo sync

# and if you care about the changes, pop the stashes
repo forall -c git stash pop

# it's better to pop stashs one at a time. using forall when you pop the stashes
# is a great way to encounter merge conflicts (for accidental changes to
# projects)
_project_path=some/project
cd $_project_path && git stash pop

# If there's any conflicts, they should show up in VSCode

# find merge conflict with grep (quick, but error prone)
grep -re "^<<<<<" .

# better, but still incorrect
git diff --check

# a better way to find merge conflicts
git diff --name-only --diff-filter=U --relative

cd ..
#+end_src

It's better to avoid the need to do that, unless you plan on managing
branches. Repo overlaps with git, so there is duplication of concepts:
e.g. there are repo branches and git branches. This is confusing, but it's still
useful to have a list of projects checked out and current.
** Apps

*** Run Audodesk Synthesis (guix)

+ Download robots/fields, unzip, then move to
  =automira=$HOME/.config/Autodesk/Synthesis/Mira/=
+ mkdir -p $automira/fields
+ cp robots/* $automira
+ cp fields/* $automira/Fields

#+begin_src shell
#!/bin/sh
synth=/data/mr/frc/software/Synthesis
manifest=~/.dotfiles/.config/guix/manifests/raise3d.scm

cd $synth && guix shell -CNF -m $manifest \
  --preserve='^QT_DEBUG_' --preserve='^QT_QPA_PLATFORM' --preserve='^XDG_CONFIG_HOME' \
  --preserve='^DISPLAY$' --preserve='^XAUTHORITY$' --preserve='^DBUS_'     \
  --share="$HOME/.config/Autodesk" --share=/run/user/1000/gdm/Xauthority \
  --share=/sys/dev --share=/sys/devices --share=/tmp     \
  --expose=/dev/dri --expose=/var/run/dbus \
  -- usr/bin/Synthesis.x86_64
# can't exec here... hmmm
#+end_src

From dotfiles

