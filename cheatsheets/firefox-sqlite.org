:PROPERTIES:
:ID:       c13684bd-77e7-46c6-98c6-a6486c2232d8
:END:
#+TITLE:     Firefox SQLite Schemas
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

* FF Vars                                                          :noexport:

Clone [[https://gitlab.com/Screwtapello/sqlite-schema-diagram][Screwtapello/sqlite-schema-diagram]] to =/tmp/=

#+begin_src emacs-lisp
(setq-local firefox-profile "foobar-baz.default")
#+end_src

#+name: firefoxProfile
#+begin_src emacs-lisp :results value silent
;; OOOOF (one of the +rare?+ times i meant to NOT commit something)
;;
;; - and my firefox did immediately crash on restart
;;
;; - firefox/chrome make this a bit hard get via scripting ... for a reason!

firefox-profile
#+end_src

#+name: ffroot
#+begin_src emacs-lisp
(expand-file-name ".mozilla/firefox" (getenv "HOME"))
#+end_src

#+name: sqliteSchemaTool
#+begin_src emacs-lisp
"/tmp/sqlite-schema-diagram"
#+end_src

#+name: ffdbfiles
#+headers: :results output table :var ffroot=ffroot ffprofile=firefoxProfile
#+begin_src bash
ffprofile=$ffroot/$ffprofile
find $ffprofile -name "*.sqlite" ! -wholename '*+++*' ! -wholename '*idb*' \
    | sed -e 's/\/home.*default-release\///g' \
    | sort
#+end_src

#+RESULTS: ffdbfiles
| content-prefs.sqlite        |
| cookies.sqlite              |
| credentialstate.sqlite      |
| domain_to_categories.sqlite |
| favicons.sqlite             |
| formhistory.sqlite          |
| permissions.sqlite          |
| places.sqlite               |
| protections.sqlite          |
| storage/ls-archive.sqlite   |
| storage.sqlite              |
| storage-sync-v2.sqlite      |
| weave/bookmarks.sqlite      |
| webappsstore.sqlite         |

#+name: ffSchemaDiagram
#+headers: :var ffroot=ffroot ffprofile=firefoxProfile ffdb="bookmarks.sqlite" sqltool=sqliteSchemaTool
#+begin_src sh :results output file link
## (f-dirname "/tmp/bookmarks.svg")
ffprofile=$ffroot/$ffprofile

diagramType=png

dbDot="${ffprofile}/$ffdb.dot"
dbDiagram="${ffprofile}/$ffdb.$diagramType"
# dbSql="${ffprofile}/$ffdb.sql"

sqlite3 "$ffprofile/$ffdb" -init "$sqltool/sqlite-schema-diagram.sql" "" > $dbDot 2>/dev/null
dot -T${diagramType} -Kdot -G"rankdir='LR'" $dbDot > $dbDiagram

output="img/firefox-$(basename $dbDiagram)"
cp $dbDiagram $output
echo -n $output
#+end_src

#+RESULTS: ffSchemaDiagram
[[file:img/firefox-bookmarks.sqlite.svg]]

* Summary                                                          :noexport:

** Resources

I'm mostly curious about the digital footprint left behind by a browser.

+ [[https://mozilla.github.io/firefox-browser-architecture/text/0010-firefox-data-stores.html][This post]] links to a Firefox Data Stores repository from 2017 which has better
  images of the schemas. It's somewhat old, but these data models should be
  fairly fixed, since so much code rides on top (& migrations are hard to
  maintain with such extensive application adoption)
+ [[https://github.com/obsidianforensics/hindsight][obsidianforensics/hindsight]] is faster for quick analysis of common tasks, but
  is otherwise somewhat limited.
+ This [[https://www.sans.org/blog/google-chrome-forensics/][SANS blog]] covers the equivalent sqlite databases for Chrome sqlite

* Firefox

** Schemas

*** bookmarks.sqlite

The =bookmarks.sqlite= database returns an empty result for me.

#+name: ffBookmarks
#+call: ffSchemaDiagram(ffdb="bookmarks.sqlite") :results output file link :exports none

#+RESULTS: ffBookmarks
[[file:img/firefox-bookmarks.sqlite.png]]

[[file:img/firefox-bookmarks.sqlite.png]]

*** content-prefs.sqlite

#+name: ffContentPrefs
#+call: ffSchemaDiagram(ffdb="content-prefs.sqlite") :results output file link :exports none

#+RESULTS: ffContentPrefs
[[file:img/firefox-content-prefs.sqlite.png]]

[[file:img/firefox-content-prefs.sqlite.png]]

*** cookies.sqlite

#+name: ffCookies
#+call: ffSchemaDiagram(ffdb="cookies.sqlite") :results output file link :exports none

#+RESULTS: ffCookies
[[file:img/firefox-cookies.sqlite.png]]

[[file:img/firefox-cookies.sqlite.png]]

*** credentialstate.sqlite

#+name: ffCredentialState
#+call: ffSchemaDiagram(ffdb="credentialstate.sqlite") :results output file link :exports none

#+RESULTS: ffCredentialState
[[file:img/firefox-credentialstate.sqlite.png]]

[[file:img/firefox-credentialstate.sqlite.png]]

*** domain_to_categories.sqlite

#+name: ffDomainToCategories
#+call: ffSchemaDiagram(ffdb="domain_to_categories.sqlite") :results output file link :exports none

#+RESULTS: ffDomainToCategories
[[file:img/firefox-domain_to_categories.sqlite.png]]

[[file:img/firefox-domain_to_categories.sqlite.png]]

*** favicons.sqlite

#+name: ffFavicons
#+call: ffSchemaDiagram(ffdb="favicons.sqlite") :results output file link :exports none

#+RESULTS: ffFavicons
[[file:img/firefox-favicons.sqlite.png]]

[[file:img/firefox-favicons.sqlite.png]]

*** formhistory.sqlite

#+name: ffFormHistory
#+call: ffSchemaDiagram(ffdb="formhistory.sqlite") :results output file link :exports none

#+RESULTS: ffFormHistory
[[file:img/firefox-formhistory.sqlite.png]]

[[file:img/firefox-formhistory.sqlite.png]]

*** storage/ls-archive.sqlite

#+name: ffLsArchive
#+call: ffSchemaDiagram(ffdb="storage/ls-archive.sqlite") :results output file link :exports none

#+RESULTS: ffLsArchive
[[file:img/firefox-ls-archive.sqlite.png]]

[[file:img/firefox-ls-archive.sqlite.png]]

*** permissions.sqlite

#+name: ffPermissions
#+call: ffSchemaDiagram(ffdb="permissions.sqlite") :results output file link :exports none

#+RESULTS: ffPermissions
[[file:img/firefox-permissions.sqlite.png]]

[[file:img/firefox-permissions.sqlite.png]]

*** places.sqlite

#+name: ffPlaces
#+call: ffSchemaDiagram(ffdb="places.sqlite") :results output file link :exports none

#+RESULTS: ffPlaces
[[file:img/firefox-places.sqlite.png]]

[[file:img/firefox-places.sqlite.png]]

*** protections.sqlite

#+name: ffProtections
#+call: ffSchemaDiagram(ffdb="protections.sqlite") :results output file link :exports none

#+RESULTS: ffProtections
[[file:img/firefox-protections.sqlite.png]]

[[file:img/firefox-protections.sqlite.png]]

*** storage.sqlite

#+name: ffStorage
#+call: ffSchemaDiagram(ffdb="storage.sqlite") :results output file link :exports none

#+RESULTS: ffStorage
[[file:img/firefox-storage.sqlite.png]]

[[file:img/firefox-storage.sqlite.png]]

*** storage-sync-v2.sqlite

#+name: ffStorageSyncV2
#+call: ffSchemaDiagram(ffdb="storage-sync-v2.sqlite") :results output file link :exports none

#+RESULTS: ffStorageSyncV2
[[file:img/firefox-storage-sync-v2.sqlite.png]]

[[file:img/firefox-storage-sync-v2.sqlite.png]]

*** webappsstore.sqlite

#+name: ffWebAppsStore
#+call: ffSchemaDiagram(ffdb="webappsstore.sqlite") :results output file link :exports none

#+RESULTS: ffWebAppsStore
[[file:img/firefox-webappsstore.sqlite.png]]

[[file:img/firefox-webappsstore.sqlite.png]]

** Extension Schemas

*** ¯\_(ツ)_/¯.sqlite

The schema for the =ffMozExtension=

# +name: ffMozExtension
# +call: ffSchemaDiagram(ffdb="storage/default/moz-extension/idb/bpla.sqlite") :results output file link :exports none

# +RESULTS: ffMozExtension
# [[file:img/firefox-bpla.sqlite.png]]

[[file:img/firefox-bpla.sqlite.png]]

And the actual schema:

#+begin_src sh :results output code :wrap src sql :var firefoxProfile=firefoxProfile
ffExtensionDb='moz-extension+++ ... /idb/ ... bpla.sqlite'
ffdb=~/.mozilla/firefox/$firefoxProfile/storage/default/$ffExtensionDb.sqlite
sqlite3 $ffdb '.schema'
#+end_src

#+RESULTS:
#+begin_src sql
CREATE TABLE database( name TEXT PRIMARY KEY, origin TEXT NOT NULL, version INTEGER NOT NULL DEFAULT 0, last_vacuum_time INTEGER NOT NULL DEFAULT 0, last_analyze_time INTEGER NOT NULL DEFAULT 0, last_vacuum_size INTEGER NOT NULL DEFAULT 0) WITHOUT ROWID;
CREATE TABLE object_store( id INTEGER PRIMARY KEY, auto_increment INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL, key_path TEXT);
CREATE TABLE object_store_index( id INTEGER PRIMARY KEY, object_store_id INTEGER NOT NULL, name TEXT NOT NULL, key_path TEXT NOT NULL, unique_index INTEGER NOT NULL, multientry INTEGER NOT NULL, locale TEXT, is_auto_locale BOOLEAN NOT NULL, FOREIGN KEY (object_store_id) REFERENCES object_store(id) );
CREATE TABLE object_data( object_store_id INTEGER NOT NULL, key BLOB NOT NULL, index_data_values BLOB DEFAULT NULL, file_ids TEXT, data BLOB NOT NULL, PRIMARY KEY (object_store_id, key), FOREIGN KEY (object_store_id) REFERENCES object_store(id) ) WITHOUT ROWID;
CREATE TABLE index_data( index_id INTEGER NOT NULL, value BLOB NOT NULL, object_data_key BLOB NOT NULL, object_store_id INTEGER NOT NULL, value_locale BLOB, PRIMARY KEY (index_id, value, object_data_key), FOREIGN KEY (index_id) REFERENCES object_store_index(id) , FOREIGN KEY (object_store_id, object_data_key) REFERENCES object_data(object_store_id, key) ) WITHOUT ROWID;
CREATE TABLE unique_index_data( index_id INTEGER NOT NULL, value BLOB NOT NULL, object_store_id INTEGER NOT NULL, object_data_key BLOB NOT NULL, value_locale BLOB, PRIMARY KEY (index_id, value), FOREIGN KEY (index_id) REFERENCES object_store_index(id) , FOREIGN KEY (object_store_id, object_data_key) REFERENCES object_data(object_store_id, key) ) WITHOUT ROWID;
CREATE TABLE file (id INTEGER PRIMARY KEY, refcount INTEGER NOT NULL);
CREATE INDEX index_data_value_locale_index ON index_data (index_id, value_locale, object_data_key, value) WHERE value_locale IS NOT NULL;
CREATE INDEX unique_index_data_value_locale_index ON unique_index_data (index_id, value_locale, object_data_key, value) WHERE value_locale IS NOT NULL;
CREATE TRIGGER object_data_insert_trigger AFTER INSERT ON object_data FOR EACH ROW WHEN NEW.file_ids IS NOT NULL BEGIN SELECT update_refcount(NULL, NEW.file_ids); END;
CREATE TRIGGER object_data_update_trigger AFTER UPDATE OF file_ids ON object_data FOR EACH ROW WHEN OLD.file_ids IS NOT NULL OR NEW.file_ids IS NOT NULL BEGIN SELECT update_refcount(OLD.file_ids, NEW.file_ids); END;
CREATE TRIGGER object_data_delete_trigger AFTER DELETE ON object_data FOR EACH ROW WHEN OLD.file_ids IS NOT NULL BEGIN SELECT update_refcount(OLD.file_ids, NULL); END;
CREATE TRIGGER file_update_trigger AFTER UPDATE ON file FOR EACH ROW WHEN NEW.refcount = 0 BEGIN DELETE FROM file WHERE id = OLD.id; END;
#+end_src

*** Extension Databases

List with details on files. There will be multiple groups for profiles.

#+begin_src sh
pattern="*moz-extension*/idb/*.sqlite"
# ffroot=$HOME/.mozilla, etc . . .
find $ffroot/$ffprofile -type f \
    -wholename "$pattern" \
    -exec ls -alt \{\} +
#+end_src

Get the list & pull into a variable

#+begin_src sh
ffprofile=fdsa1234

# shellcheck maybe get mad idk
ffext=(${find $ffroot/$ffprofile -wholename $pattern -type f -print})
#+end_src

Run a query against all databases to select from the "database" table.

#+begin_src sh
for db in ${ffext[@]}; do sqlite3 $db 'select * from database;'; done
#+end_src

it's moderately helpful to sort/filter these. you need at least ad-hoc file
descriptors for that (e.g. =>3= ...)

#+begin_quote
my shellfu's not what i'd like it to be.

hence "what i be not, the more determined i should try to be" ... though it
certainly helps to shorten the feedback loop.

most of life is a social process. try unhooking 99% the wires in a circuit and
see how much energy flows. the network effects are strong even whether the
current flows with you or sweeps you away. you are less the sum of what you have
worked to become and more the product of your interactions with others.
#+end_quote

Anyways, the first two columns:

+ name :: the primary key for most other tables in this "extension" database.
+ origin :: mostly =moz-extension://= urls.
  - Some of the native functionality of the browser is exposed through
    extensions.
  - Some of these don't seem to work though.

Clicking on the link gives you an obfuscated view into a virtual file system
(into which the extension has been loaded.)

For most db's the name is simple =webExtensions-storage-local=, but a few are
descriptive:

| tdsStorage | __dbnames | https | TabFaviconHelper | PermanentStorage |

#+begin_quote
Anyways, a site that should've totally NOT prompted for _something_ did ask about
it. This is super sketchy that it even works like that ... but yeh.

And i'm wondering why a disabled extension is asking for increased permissions,
but idk. I was hoping timestamps would clear things up.

#+end_quote

* Cleanup                                                          :noexport:

** Accidentally Commited the FF Profile?

If you accidentally commit the firefox profile id, probably just nuke your FF
directory and resync, but you may need to backup data for FF extensions.

#+begin_quote
I would typically rebase/revert/squash/etc, which for a single-dev &
single-branch project is ordinarly enough to eliminate secrets (at least in the
remote). But no
#+end_quote

Find files referencing profiles:

#+begin_src sh
grep --exclude="*.json" -Ire "$ff_profile_id" ~/.mozilla/firefox
#+end_src

*** Update Profile References

Completely close firefox, update references to new profile ID, then move the
directory. Update =extensions.json= with references to the new =$ff_profile_id=

#+begin_src sh
ff_root=~/.mozilla/firefox
ff_extensions=$ff_root/$ff_profile_id/extensions.json

sed -e "s/$oldProfile/$newProfile/g" $ff_extensions > $ff_extensions.2
cp $ff_extensions.2 $ff_extensions
#+end_src

.... which was still not sufficient.

*** Update the SQLite References

Binary matches from =grep= also include some sqlite databases

|---------------------------------------------------+--------------------------------------------|
| Profile                                           | Database                                   |
|---------------------------------------------------+--------------------------------------------|
| ~/.mozilla/firefox/$ff_profile_id                 | permissions.sqlite                         |
|                                                   | places.sqlite                              |
|                                                   | favicons.sqlite                            |
|---------------------------------------------------+--------------------------------------------|
| ~/.mozilla/firefox/$ff_profile_id/storage/default | moz-extension+++ ... /idb/ ... bpla.sqlite |
|---------------------------------------------------+--------------------------------------------|

**** Search sqlite refs

Check row count (not my usual profile stats here)

#+headers: :results output table :var ffroot=ffroot ffprofile=firefoxProfile ffdb="places.sqlite"
#+begin_src sh
ffprofile=$ffroot/$ffprofile

tablecount() {
  local db=$1
  local table=$2
  local qcount="select count(*) from $table;"
  sqlite3 "$db" "$qcount"
}

# could also use '.tables' to avoid the pipes, but sqlite3 can only have one client, so pipes don't work
sqlite3 $ffprofile/$ffdb '.schema' | grep TABLE | cut -f3 -d' ' | grep -ve '(.*);$' | while read tbl; do
   nrows=$(tablecount $ffprofile/$ffdb $tbl)
   echo $tbl,$nrows
done
#+end_src

#+RESULTS:
| moz_origins                        | 103 |
| moz_places                         | 829 |
| moz_historyvisits                  | 972 |
| moz_inputhistory                   |   0 |
| moz_bookmarks                      |  23 |
| moz_bookmarks_deleted              |   0 |
| moz_keywords                       |   0 |
| moz_anno_attributes                |   2 |
| moz_annos                          |   4 |
| moz_items_annos                    |   0 |
| moz_meta                           |   4 |
| moz_places_metadata                | 558 |
| moz_places_metadata_search_queries |   0 |
| moz_previews_tombstones            |   0 |
| moz_places_extra                   |   0 |
| moz_historyvisits_extra            |   0 |
Check content for profile name

#+headers: :results output table :var ffroot=ffroot ffprofile=firefoxProfile ffdb="favicons.sqlite"
#+begin_src sh
ffprofilepath=$ffroot/$ffprofile
ffold=old.default

tablecount() {
  local db=$1
  local table=$2
  local qcount="select * from $table;"
  sqlite3 "$db" "$qcount"
}

# could also use '.tables' to avoid the pipes, but sqlite3 can only have one client, so pipes don't work
sqlite3 $ffprofilepath/$ffdb '.schema' | grep TABLE | cut -f3 -d' ' | grep -ve '(.*);$' | while read tbl; do
   # nrows=$(tablecount $ffprofilepath/$ffdb $tbl | grep $ffold | wc -l)
   echo $tbl
   tablecount $ffprofilepath/$ffdb $tbl | grep $ffold
   # echo $tbl,$nrows
done
echo
#echo $ffprofile
#+end_src

**** Update sqlite refs

#+begin_example sh
cd ~/.mozilla/firefox/$ff_profile_id

# get id's with:
sqlite3 $ff_profile_id "select * from moz_perms where origin like '$oldProfile';"
#+end_example

#+begin_example sh
cd ~/.mozilla/firefox/$ff_profile_id

# for id in ids...
sqlite3 $ff_profile_id/permissions.sqlite "update moz_perms set origin='file:///home/dc/.mozilla/firefox/$newProfile/' where id = 7922;"
sqlite3 $ff_profile_id/permissions.sqlite "update moz_perms set origin='file:///home/dc/.mozilla/firefox/$newProfile/bookmarks.sqlite.svg' where id = 7923;"

# ok yeh, that's an svg i just generated
#+end_example

* Roam                                                             :noexport:
+ [[id:38638b3e-e023-460e-9670-84776e61468e][Browser]]
+ [[id:45b0ba21-fb20-44dc-9ee9-c4fed32aba9c][Forensics]]
