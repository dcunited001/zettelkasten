#+TITLE:     Elephant: Cheatsheet
#+AUTHOR:    David Conner
#+DESCRIPTION: notes

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: title:nil author:nil c:nil d:(not "LOGBOOK") date:nil
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t todo:t |:t
#+OPTIONS: toc:nil
#+SELECT_TAGS:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en

#+PROPERTY: header-args :eval never-export
# #+OPTIONS: texht:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,landscape]

#+LATEX_HEADER_EXTRA: \usepackage{lmodern}
# #+LATEX_HEADER_EXTRA: \usepackage{rotfloat}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}
#+LATEX_HEADER_EXTRA: \usepackage[margin=0.25in]{geometry}
#+LATEX_HEADER_EXTRA: \usepackage{units}
#+LATEX_HEADER_EXTRA: \usepackage{comment}
#+LATEX_HEADER_EXTRA: \usepackage{tabularx}
#+LATEX_HEADER_EXTRA: \usepackage{tabu,longtable}
#+LATEX_HEADER_EXTRA: \usepackage{booktabs}
#+LATEX_HEADER_EXTRA: \usepackage{makeidx}
#+LATEX_HEADER_EXTRA: \makeindex
#+LATEX_HEADER_EXTRA: \usepackage{epstopdf}
#+LATEX_HEADER_EXTRA: \epstopdfDeclareGraphicsRule{.gif}{png}{.png}{convert #1 \OutputFile}
#+LATEX_HEADER_EXTRA: \AppendGraphicsExtensions{.gif}

#+LATEX_HEADER: \setlength{\parskip}{0.1em}
#+LATEX_HEADER: \setlength{\parindent}{0em}
#+LATEX_HEADER: \setcounter{secnumdepth}{0}

# colors (requires xcolor)
#+LATEX_HEADER_EXTRA: \usepackage[table]{xcolor}
#+LATEX_HEADER_EXTRA: \definecolor{lightgray}{gray}{0.92}

* Elephant Configuration

A service providing various datasources which can be triggered to perform actions.

Run =elephant -h= to get an overview of the available commandline flags and
actions.

Main Config: =~/.config/elephant/elephant.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                     | Type | Default | Description                                         |
|---------------------------+------+---------+-----------------------------------------------------|
| ~auto_detect_launch_prefix~ | bool | true    | automatically detects uwsm, app2unit or systemd-run |
| ~overload_local_env~        | bool | false   | overloads the local env                             |

* Provider Configuration

** Elephant Providerlist

Lists all installed providers and configured menus.

=~/.config/elephant/providerlist.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type     | Default             | Description                                                         |
|------------------------+----------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string   | depends on provider | icon for provider                                                   |
| ~min_score~              | int32    | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool     | false               | hides a provider from the providerlist provider. provider provider. |
| ~hidden~                 | []string | <empty>             | hidden providers                                                    |

** Elephant Bluetooth

Simple bluetooth management. *Features:* Connect/Disconnect, Pair/Remove,
Trust/Untrust. *Requirements:* =bluetoothctl=

=~/.config/elephant/bluetooth.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                         |
|------------------------+--------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                   |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider. |

** Elephant Calc

Perform calculation and unit-conversions. *Requirements:* =libqalculate=,
=wl-clipboard=. *Features*: Save & Copy Results. *Usage*: Refer to the official
[[https://github.com/Qalculate/libqalculate][libqalculate docs]]

=~/.config/elephant/calc.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                         |
|------------------------+--------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                   |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider. |
| ~max_items~              | int    | 100                 | max amount of calculation history items                             |
| ~placeholder~            | string | calculating...      | placeholder to display for async update                             |
| ~require_number~         | bool   | true                | don't perform if query does not contain a number                    |
| ~min_chars~              | int    | 3                   | don't perform if query is shorter than min_chars                    |
| ~command~                | string | wl-copy             | default command to be executed. supports %VALUE%.                   |
| ~async~                  | bool   | true                | calculation will be send async                                      |


#+begin_export latex
\clearpage
#+end_export

** Elephant Clipboard

Store clipboard history. *Features:* saves images and text history, filter to show
images only, edit saved content *Requirements:* =wl-clipboard=
  
=~/.config/elephant/clipboard.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                                                        |
|------------------------+--------+---------------------+----------------------------------------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                                                  |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                                                            |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider.                                |
| ~max_items~              | int    | 100                 | max amount of clipboard history items                                                              |
| ~image_editor_cmd~       | string |                     | editor to use for images. use '%FILE%' as placeholder for file path.                               |
| ~text_editor_cmd~        | string |                     | editor to use for text, otherwise default for mimetype. use '%FILE%' as placeholder for file path. |
| ~command~                | string | wl-copy             | default command to be executed                                                                     |
| ~recopy~                 | bool   | true                | recopy content to make it persistent after closing a window                                        |
| ~ignore_symbols~         | bool   | true                | ignores symbols/unicode                                                                            |
| ~auto_cleanup~           | int    | 0                   | will automatically cleanup entries every X minutes                                                 |

** Elephant Desktop Applications

Run installed desktop applications. *Features:* history, pin items, alias items,
auto-detect =uwsm= / =app2unit=

=~/.config/elephant/desktopapplications.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                      | Type              | Default             | Description                                                                                 |
|----------------------------+-------------------+---------------------+---------------------------------------------------------------------------------------------|
| ~icon~                       | string            | depends on provider | icon for provider                                                                           |
| ~min_score~                  | int32             | depends on provider | minimum score for items to be displayed                                                     |
| ~hide_from_providerlist~     | bool              | false               | hides a provider from the providerlist provider. provider provider.                         |
| ~launch_prefix~              | string            |                     | overrides the default app2unit or uwsm prefix, if set.                                      |
| ~locale~                     | string            |                     | to override systems locale                                                                  |
| ~action_min_score~           | int               | 20                  | min score for actions to be shown                                                           |
| ~show_actions~               | bool              | false               | include application actions, f.e. 'New Private Window' for Firefox                          |
| ~show_generic~               | bool              | true                | include generic info when show_actions is true                                              |
| ~show_actions_without_query~ | bool              | false               | show application actions, if the search query is empty                                      |
| ~history~                    | bool              | true                | make use of history for sorting                                                             |
| ~history_when_empty~         | bool              | false               | consider history when query is empty                                                        |
| ~only_search_title~          | bool              | false               | ignore keywords, comments etc from desktop file when searching                              |
| ~icon_placeholder~           | string            | applications-other  | placeholder icon for apps without icon                                                      |
| ~aliases~                    | map[string]string |                     | setup aliases for applications.                                                             |
|                            |                   |                     | Matched aliases will always be placed on top of the list. Example: 'ffp' => '<identifier>'. |
|                            |                   |                     | Check elephant log output when activating an item to get its identifier.                    |
| ~blacklist~                  | []string          | <empty>             | blacklist desktop files from being parsed. Regexp.                                          |

#+begin_export latex
\clearpage
#+end_export

** Elephant Files

Find files/folders. *Requirements:* =fd=

*Features:* preview text/images/pdf, open files, folders, drag&drop files into
other programs, copy file/path
 
Example =ignored_dirs=

#+begin_example toml
ignored_dirs = ["/home/andrej/Documents/", "/home/andrej/Videos"]
#+end_example

=~/.config/elephant/files.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type     | Default             | Description                                                         |
|------------------------+----------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string   | depends on provider | icon for provider                                                   |
| ~min_score~              | int32    | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool     | false               | hides a provider from the providerlist provider. provider provider. |
| ~launch_prefix~          | string   |                     | overrides the default app2unit or uwsm prefix, if set.              |
| ~ignored_dirs~           | []string |                     | ignore these directories                                            |

** Elephant Runner

Execute everything installed in your =$PATH=. Finds all executables items in
=$PATH=... or define an explicit list yourself

=~/.config/elephant/runner.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type                | Default             | Description                                                         |
|------------------------+---------------------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string              | depends on provider | icon for provider                                                   |
| ~min_score~              | int32               | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool                | false               | hides a provider from the providerlist provider. provider provider. |
| ~history~                | bool                | true                | make use of history for sorting                                     |
| ~history_when_empty~     | bool                | false               | consider history when query is empty                                |
| ~generic_text~           | string              | run:                | text prefix for generic run-anything entry                          |
| ~explicits~              | []main.ExplicitItem |                     | use this explicit list, instead of searching $PATH                  |

*** ExplicitItem

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field | Type   | Default | Description               |
|-------+--------+---------+---------------------------|
| ~exec~  | string |         | executable/command to run |
| ~alias~ | string |         | alias                     |

** Elephant Symbols

Search for emojis and symbols. *Requirements:* =wl-clipboard=
 
+ =~/.config/elephant/symbols.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                         |
|------------------------+--------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                   |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider. |
| ~locale~                 | string | en                  | locale to use for symbols                                           |
| ~history~                | bool   | true                | make use of history for sorting                                     |
| ~history_when_empty~     | bool   | false               | consider history when query is empty                                |
| ~command~                | string | wl-copy             | default command to be executed. supports %VALUE%.                   |

#+begin_export latex
\clearpage
#+end_export

** Elephant Unicode

Search for unicode symbols. *Requirements:* =wl-clipboard=

=~/.config/elephant/unicode.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                         |
|------------------------+--------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                   |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider. |
| ~locale~                 | string | en                  | locale to use for symbols                                           |
| ~history~                | bool   | true                | make use of history for sorting                                     |
| ~history_when_empty~     | bool   | false               | consider history when query is empty                                |
| ~command~                | string | wl-copy             | default command to be executed. supports %VALUE%.                   |

** Elephant Todo

Basic Todolist. *Requirements:* =notify-send= for notifications

*Features*

- basic time tracking
- create new scheduled items
- notifications for scheduled items
- mark items as: done, active
- urgent items
- clear all done items

=~/.config/elephant/todo.toml=
  
#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type   | Default             | Description                                                                                |
|------------------------+--------+---------------------+--------------------------------------------------------------------------------------------|
| ~icon~                   | string | depends on provider | icon for provider                                                                          |
| ~min_score~              | int32  | depends on provider | minimum score for items to be displayed                                                    |
| ~hide_from_providerlist~ | bool   | false               | hides a provider from the providerlist provider. provider provider.                        |
| ~create_prefix~          | string |                     | prefix used in order to create a new item. will otherwise be based on matches (~min_score~). |
| ~urgent_time_frame~      | int    | 10                  | items that have a due time within this period will be marked as urgent                     |
| ~duck_player_volumes~    | bool   | true                | lowers volume of players when notifying, slowly raises volumes again                       |
| ~title~                  | string | Task Due            | title of the notification                                                                  |
| ~body~                   | string | %TASK%              | body of the notification                                                                   |

*Usage*

Creating a new item:

By default, you can create a new item whenever no items matches the configured
=min_score= threshold. If you want to, you can also configure =create_prefix=,
f.e. =add=. In that case you can do =add:new item=.

If you want to create a schuduled task, you can prefix your item with either =in
5m= or =at 1500=. Possible units are =s=, =m= and =h=.

Adding a =!= suffix will mark an item as urgent.

#+begin_export latex
\clearpage
#+end_export

** Elephant Websearch

Search the web with custom defined search engines. 

=~/.config/elephant/websearch.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                       | Type          | Default             | Description                                                               |
|-----------------------------+---------------+---------------------+---------------------------------------------------------------------------|
| ~icon~                        | string        | depends on provider | icon for provider                                                         |
| ~min_score~                   | int32         | depends on provider | minimum score for items to be displayed                                   |
| ~hide_from_providerlist~      | bool          | false               | hides a provider from the providerlist provider. provider provider.       |
| ~entries~                     | []main.Engine | google              | entries                                                                   |
| ~max_global_items_to_display~ | int           | 1                   | will only show the global websearch entry if there are at most X results. |
| ~history~                     | bool          | true                | make use of history for sorting                                           |
| ~history_when_empty~          | bool          | false               | consider history when query is empty                                      |
| ~engines_as_actions~          | bool          | true                | run engines as actions                                                    |
| ~text_prefix~                 | string        | Search:             | prefix for the entry text                                                 |

*** *Engine*

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field   | Type   | Default | Description                                            | c- |
|---------+--------+---------+--------------------------------------------------------+----|
| ~name~    | string |         | name of the entry                                      |    |
| ~default~ | bool   |         | entry to display when querying multiple providers      |    |
| ~prefix~  | string |         | prefix to actively trigger this entry                  |    |
| ~url~     | string |         | url, example: 'https://www.google.com/search?q=%TERM%' |    |
| ~icon~    | string |         | icon to display, fallsback to global                   |    |

*Example entry*

#+begin_example toml
[[entries]]
default = true
name = "Google"
url = "https://www.google.com/search?q=%TERM%"
#+end_example

#+begin_export latex
\clearpage
#+end_export

** Elephant Menus

Create custom menus: seamless menus, create submenus, define multiple actions
per entry.

*How to create a menu:* Default location for menu definitions is
  =~/.config/elephant/menus/=. Simply place a file in there, see examples below.

*Actions for submenus/dmenus*: Submenus/Dmenus will automatically get an action
=open=.

*MenuConfig* =~/.config/elephant/menus.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type     | Default             | Description                                                         |
|------------------------+----------+---------------------+---------------------------------------------------------------------|
| ~icon~                   | string   | depends on provider | icon for provider                                                   |
| ~min_score~              | int32    | depends on provider | minimum score for items to be displayed                             |
| ~hide_from_providerlist~ | bool     | false               | hides a provider from the providerlist provider. provider provider. |
| ~paths~                  | []string |                     | additional paths to check for menu definitions.                     |

*** *Menu* =~/.config/elephant/menus.toml=

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field                  | Type           | Default             | Description                                                         |
|------------------------+----------------+---------------------+---------------------------------------------------------------------|
| ~hide_from_providerlist~ | bool           | false               | hides a provider from the providerlist provider. provider provider. |
| ~name~                   | string         |                     | name of the menu                                                    |
| ~name_pretty~            | string         |                     | prettier name you usually want to display to the user.              |
| ~description~            | string         |                     | used as a subtext                                                   |
| ~icon~                   | string         |                     | default icon                                                        |
| ~action~                 | string         |                     | default menu action to use                                          |
| ~entries~                | []common.Entry |                     | menu items                                                          |
| ~terminal~               | bool           |                     | execute action in terminal or not                                   |
| ~keywords~               | []string       |                     | searchable keywords                                                 |
| ~fixed_order~            | bool           |                     | don't sort entries alphabetically                                   |
| ~history~                | bool           |                     | make use of history for sorting                                     |
| ~history_when_empty~     | bool           |                     | consider history when query is empty                                |
| ~min_score~              | int32          | depends on provider | minimum score for items to be displayed                             |
| ~parent~                 | string         |                     | defines the parent menu                                             |

*** *Entry*

#+LATEX: \taburowcolors[2]2{lightgray..white}
#+ATTR_LATEX: :environment tabu :center nil :placement [h!] :align |r|l|l|l|
| Field    | Type              | Default | Description                                                      |
|----------+-------------------+---------+------------------------------------------------------------------|
| ~text~     | string            |         | text for entry                                                   |
| ~async~    | string            |         | if the text should be updated asynchronously based on the action |
| ~subtext~  | string            |         | sub text for entry                                               |
| ~value~    | string            |         | value to be used for the action.                                 |
| ~actions~  | map[string]string |         | actions items can use                                            |
| ~terminal~ | bool              |         | runs action in terminal if true                                  |
| ~icon~     | string            |         | icon for entry                                                   |
| ~submenu~  | string            |         | submenu to open, if has prefix 'dmenu:' it'll launch that dmenu  |
| ~preview~  | string            |         | filepath for the preview                                         |
| ~keywords~ | []string          |         | searchable keywords                                              |

*** Examples :noexport:

#+begin_example toml
name = "other"
name_pretty = "Other"
icon = "applications-other"
global_search = true

[[entries]]
text = "Color Picker"
keywords = ["color", "picker", "hypr"]
actions = { "cp_use" = "wl-copy $(hyprpicker)" }
icon = "color-picker"

[[entries]]
icon = "zoom-in"
text = "Zoom Toggle"
actions = { "zoom_use" = "hyprctl -q keyword cursor:zoom_factor $(hyprctl getoption cursor:zoom_factor -j | jq '(.float) | if . > 1 then 1 else 1.5 end')" }

[[entries]]
text = "Volume"
async = "echo $(wpctl get-volume @DEFAULT_AUDIO_SINK@)"
icon = "audio-volume-high"

[entries.actions]
"volume_raise" = "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+"
"volume_lower" = "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1-"
"volume_mute" = "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0"
"volume_unmute" = "wpctl set-volume @DEFAULT_AUDIO_SINK@ 1"
"volume_set" = "wpctl set-volume @DEFAULT_AUDIO_SINK@ %VALUE%"

[[entries]]
keywords = ["disk", "drive", "space"]
text = "Disk"
actions = { "disk_copy" = "wl-copy '%VALUE%'" }
async = """echo $(df -h / | tail -1 | awk '{print "Used: " $3 " - Available: " $4 " - Total: " $2}')"""
icon = "drive-harddisk"

[[entries]]
text = "Mic"
async = "echo $(wpctl get-volume @DEFAULT_AUDIO_SOURCE@)"
icon = "audio-input-microphone"
actions = { "mic_set" = "wpctl set-volume @DEFAULT_AUDIO_SOURCE@ %VALUE%" }

[[entries]]
text = "System"
async = """echo $(echo "Memory: $(free -h | awk '/^Mem:/ {printf "%s/%s", $3, $2}') | CPU: $(top -bn1 | grep 'Cpu(s)' | awk '{printf "%.1f%%", 100 - $8}')")"""
icon = "computer"

[[entries]]
text = "Today"
keywords = ["date", "today", "calendar"]
async = """echo $(date "+%H:%M - %d.%m. %A - KW %V")"""
icon = "clock"
actions = { "open_cal" = "xdg-open https://calendar.google.com" }

[[entries]]
text = "uuctl"
keywords = ["uuctl"]
icon = "applications-system"
submenu = "dmenu:uuctl"
#+end_example

Screenshots

#+begin_example toml
name = "screenshots"
name_pretty = "Screenshots"
icon = "camera-photo"
global_search = true

[[entries]]
text = "View"
actions = { "view" = "vimiv ~/Pictures/" }

[[entries]]
text = "Annotate"
actions = { "annotate" = "wl-paste | satty -f -" }

[[entries]]
text = "Toggle Record"
actions = { "record" = "record" }

[[entries]]
text = "OCR"
keywords = ["ocr", "text recognition", "OCR"]
actions = { "ocr" = "wayfreeze --hide-cursor --after-freeze-cmd 'grim -g \"$(slurp)\" - | tesseract stdin stdout -l deu+eng | wl-copy; killall wayfreeze'" }

[[entries]]
text = "Screenshot Region"
actions = { "region" = "wayfreeze --hide-cursor --after-freeze-cmd 'IMG=~/Pictures/$(date +%Y-%m-%d_%H-%M-%S).png && grim -g \"$(slurp)\" $IMG && wl-copy < $IMG; killall wayfreeze'" }

[[entries]]
text = "Screenshot Window"
actions = { "window" = "wayfreeze --after-freeze-cmd 'IMG=~/Pictures/$(date +%Y-%m-%d_%H-%M-%S).png && grim $IMG && wl-copy < $IMG; killall wayfreeze'" }

[[entries]]
text = "other menu"
submenu = "other"
#+end_example

Bookmarks

#+begin_example toml
name = "bookmarks"
name_pretty = "Bookmarks"
icon = "bookmark"
global_search = true
action = "xdg-open %VALUE%"

[[entries]]
text = "Walker"
value = "https://github.com/abenz1267/walker"

[[entries]]
text = "Elephant"
value = "https://github.com/abenz1267/elephant"

[[entries]]
text = "Drive"
value = "https://drive.google.com"

[[entries]]
text = "Prime"
value = "https://www.amazon.de/gp/video/storefront/"
#+end_example

