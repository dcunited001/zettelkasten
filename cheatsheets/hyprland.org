:PROPERTIES:
:ID:       027166e4-4321-4c75-8990-8198c7a47ae4
:END:
#+title: Cheatsheet: Hyprland

* Hyprctl

** Subcommands

Use =-j= to output in json

Read

| activewindow         | Active window name & properties                     |
| activeworkspace      | Active workspace & properties                       |
| animations           | Config state on animations/beziers                  |
| binds                | List: registered binds                              |
| clients              | List: windows with properties                       |
| configerrors         | List: config parsing errors                         |
| cursorpos            | Cursor position (global layout)                     |
| decorations <win_rx> | List: decorations and their info                    |
| devices              | List:  connected keyboards and mice                 |
| getoption <opt>      | Config option status (values)                       |
| globalshortcuts      | List: global shortcuts                              |
| instances            | List: running instances of Hyprland with their info |
| layers               | List: surface layers                                |
| layouts              | List: layouts available (including plugin'd ones)   |
| monitors             | List: active outputs & properties                   |
| monitors all         | List: active & inactive outputs                     |
| rollinglog           | Tail log. Includes -f/--follow                      |
| splash               | Current splash                                      |
| systeminfo           | System info                                         |
| version              | Version. Includes flags, commit, branch of build.   |
| workspacerules       | List: workspace rules                               |
| workspaces           | List: workspaces & properties                       |

Write

| dismissnotify   |                      | Dismiss all notifications                               |
| dismissnotify   | [amount]             | Dismiss AMOUNT of notifications.                        |
| dispatch        | <disp> [args]        | Call a keybind dispatcher with arguments                |
| hyprpaper       | ...                  | hyprpaper request                                       |
| hyprsunset      | ...                  | hyprsunset request                                      |
| keyword         | <name> <value>       | Call a config keyword dynamically                       |
| kill            |                      | kill to get into a kill mode. exit with escape          |
| notify          | ...                  | Sends notification using Hyprland's notification system |
| plugin          | ...                  | Plugin request                                          |
| reload          |                      | Force config reload                                     |
| reload          | cfg-only             | Force config reload. No monitor reload.                 |
| setcursor       | <theme> <size>       | Cursor theme. Reload cursor manager                     |
| seterror        | <color> <message...> | Set hyprctl error string. Color uses the config format. |
| output          | ...                  | Add/remove fake outputs to preferred backend            |
| setprop         | ...                  | Set window property                                     |
| switchxkblayout | ...                  | Set xkb layout index                                    |

** Bind Flags

(copied and hastily +summarized+ ingested from wiki entry on [[https://wiki.hyprland.org/Configuring/Binds/#bind-flags][bind flags]])

| l | locked        | triggers even with input inhibitor (e.g. lockscreen)           |
| r | release       | on key/button release                                          |
| c | click         | on key/button release (binds:drag_threshold)                   |
| g | drag          | on key/button release (binds:drag_threshold)                   |
| o | longPress     | on long press.                                                 |
| e | repeat        | repeats trigger                                                |
| n | non-consuming | key/mouse events p]ass to active window _and_ trigger dispatcher |
| m | mouse         | [[https://wiki.hyprland.org/Configuring/Binds/#mouse-binds][mouse binds]],                                                   |
| t | transparent   | cannot be shadowed by other binds.                             |
| i | ignore mods   | will ignore modifiers.                                         |
| s | separate      | combine keys (b/w each mod & key)                              |
| d | desc          |                                                                |
| p | (by)passes    | bypass app req. to inhibit keybinds                            |

+ s: separate :: see [[https://wiki.hyprland.org/Configuring/Binds/#keysym-combos][Keysym Combos]]
+ m: mouse :: mouse binds
  - =mouse_{up,down,left,right}= mouse wheel can bind without =bindm=
  - left: =mouse:272= and right: =mouse:273=
+ c: click :: triggers when cursor remains within =binds:drag_threshold=
+ d: drag :: triggers when cursor moves outside =binds:drag_threshold=
** Tags


|          | tagWindow                          | tag                                 |
|----------+------------------------------------+-------------------------------------|
| via      | =dispatcher=                         | =windowrule=                          |
| tag type | static                             | dynamic                             |
| matches  | multiple?                          | single window                       |
| when     | applied to a match                 | applied to invocation of windowrule |
| effect   | clears dynamic tags                |                                     |
| purpose  | apply/group metadata interactively | apply window rules automatically    |

+ =tag= is a dynamic window rule (it updates)
+ =tagWindow= will clear any dynamic tags
  - what if your config is reevaluated?

#+begin_src shell
# script to test
hyprctl clients -j | jq 'map(select(IN(.class; "chromium-browser")))'
hyprctl dispatch tagwindow +chrome class:chromium-browser
#+end_src

* Swaync

+ It's d-bus activatable, but don't kill the app.
  you can also bring it back with =notify-send=
+ d-bus activation starts a systemd service, restart that instead (e.g. to
  reload config/css)

** CLI

Startup

|-------+--------------------|
| -R,   | --reload-config    |
| -rs,  | --reload-css       |
| -sw,  | --skip-wait        |
| -s,   | --subscribe        |
| -swb, | --subscribe-waybar |
|-------+--------------------|
+ --subscribe :: Sub 2 notification add, close events
+ --subscribe-waybar :: Sub 2 notification add, close events with waybar support

*** Basic Usage

|------+----------------|
| -t,  | --toggle-panel |
| -op, | --open-panel   |
| -cp, | --close-panel  |
|------+----------------|
| -c,  | --count        |
|      | --hide-latest  |
|      | --close-latest |
| -C,  | --close-all    |
|------+----------------|
| -d,  | --toggle-dnd   |
| -D,  | --get-dnd      |
| -dn, | --dnd-on       |
| -df, | --dnd-off      |
|------+----------------|
+ CSS Location change requires restart
+ DND CLI always prints
+ =--skip-wait= doesn't wait on =swaync= startup

*** Advanced Usage

Invokes action [ACTION_INDEX] of latest notification

|-----+-------------------------|
| -a, | --action [ACTION_INDEX] |
|-----+-------------------------|
+ =--action= works on latest notification, so use something else for basic UI notifications
  - app needs rebuild to completely disable scripting. probably better off as
    =nixos= overlay or =home-manager= config (can't be edited)

|------+-----------------------------|
| -I,  | --get-inhibited             |
| -In, | --get-num-inhibitors        |
| -Ia, | --inhibitor-add [APP_ID]    |
| -Ir, | --inhibitor-remove [APP_ID] |
| -Ic, | --inhibitors-clear          |
|------+-----------------------------|

+ --get-inhibited :: useful for widget polling
+ inhibiting works with =app-id= selector, but this would inhibit all
  notifications sent by =notify-send='s d-bus target
  - so per-app or per-installation configuration is pretty important.

** Buttons Grid

#+begin_src json

{
  "buttons-grid": {
    "actions": [
      {
        "label": "яки",
        "type": "toggle",
        "active": true,
        "command": "sh -c '[[ \"$SWAYNC_TOGGLE_STATE\" == true ]] && nmcli radio wifi on || nmcli radio wifi off'",
        "update-command": "sh -c '[[ \"$(nmcli radio wifi)\" == \"enabled\" ]] && echo true || echo false'"
      }
    ]
  }
}
#+end_src
* Inputs

** Modifiers

hyprland seems to support mods defined in [[https://github.com/hyprwm/Hyprland/blob/3c6536d9328280b1811a2dbcc4596c1cafb80abd/src/devices/IKeyboard.hpp#L13][IKeyboard.hpp]] and implemented in
[[https://github.com/hyprwm/Hyprland/blob/3c6536d9328280b1811a2dbcc4596c1cafb80abd/src/managers/KeybindManager.cpp#L226][KeybindManager.cpp]].

From =CKeybindManager::stringToModMask= & used in configuration/unbinding. I swear
I saw this list somewhere, but I can't find it.

|-------------------+--------------------------+--------------+--------------------|
| Bit               | Hyprland Config Sym      | XKB          | Desc               |
|-------------------+--------------------------+--------------+--------------------|
| HL_MODIFIER_SHIFT | SHIFT                    |              |                    |
| HL_MODIFIER_CAPS  | CAPS                     |              |                    |
| HL_MODIFIER_CTRL  | CTRL,CONTROL             |              |                    |
| HL_MODIFIER_ALT   | ALT,MOD1                 |              |                    |
| HL_MODIFIER_MOD2  | MOD2                     |              |                    |
| HL_MODIFIER_MOD3  | MOD3                     | LVL5 -> MOD3 | ISO_LEVEL5 ... ish |
| HL_MODIFIER_META  | SUPER,WIN,LOGO,MOD4,META |              |                    |
| HL_MODIFIER_MOD5  | MOD5                     | LVL3 -> MOD5 | AltGr              |
|-------------------+--------------------------+--------------+--------------------|
See required XKB configuration here in notes on [[id:f6af081c-2a1e-4423-9278-da6e0b276aef][Hyprland: XKB Common]]

#+begin_src hyprlang-ts
$mod   = super
$shift = shift
$meta  = alt

$mod3  = mod3
$lvl5  = mod3
bind = $mod3, d, exec, notify-send "fdsa" "asdf"

# .... IT WORKS.
#+end_src

To fully bind all eight levels, I think the =include= here was needed before the
options. The rules don't seem to spec out the =io= keymap/symbols though... but
these are definitely needed in =evdev.xml=

*~/.config/xkb/rules/evdev*

#+begin_src text
! include %S/evdev

! options = symbols
  mylevel5:ins_switch	= +mylevel5(ins_switch)
#+end_src

*~/.config/xkb/symbols/mylevel5*

#+begin_src xkb
// -*- mode: xkb; aphelia-mode: -1 -*-

partial modifier_keys
xkb_symbols "ins_switch" {
  key <INS> {[  ISO_Level5_Shift  ], type[group1]="ONE_LEVEL" };
};
#+end_src


~/.config/xkb/symbols/io

#+begin_src xkb
// modifier keys may be required
// default partial xkb_symbols alphanumeric_keys "basic" {
//   // first define a default layout map
//}
//

xkb_symbols "lvl8-altgr-intl" {
  include "us(altgr-intl)"

  key.type = "EIGHT_LEVEL";
  name[Group1] = "IO Keyboard (AltGr Intl With Dead Keys)";

  key<AE01>{[exclam,		1,	onesuperior,		exclamdown,		1,2,3,4]};
  key<AE02>{[at,			2,	twosuperior,		dead_doubleacute,	1,2,3,4]};
  key<AE03>{[numbersign,		3,	threesuperior,		dead_macron,		1,2,3,4]};
  key<AE04>{[dollar,		4,	currency,		sterling,		1,2,3,4]};
  key<AE05>{[percent,		5,	EuroSign,		dead_cedilla,		1,2,3,4]};
  key<AE06>{[asciicircum,		6,	onequarter,		dead_circumflex,	1,2,3,4]};
  key<AE07>{[ampersand,		7,	onehalf,		dead_horn,		1,2,3,4]};
  key<AE08>{[asterisk,		8,	threequarters,		dead_ogonek,		1,2,3,4]};
  key<AE09>{[parenleft,		9,	leftsinglequotemark,	dead_breve,		1,2,3,4]};
  key<AE10>{[parenright,		0,	rightsinglequotemark,	dead_abovering,	1,2,3,4]};

  // key <AE11> {[     minus, underscore,           yen,    dead_belowdot ] };
  // key <AE12> {[     equal,       plus,      multiply,         division ] };
};
#+end_src


** Devices

*** Active keyboard layout

List =$layout $variant= for the active keyboard input

#+name: hyprDevices
#+begin_src shell :results output silent code :wrap example json
hyprctl devices -j
#+end_src

JQ query

#+name: jqXkbLayout
#+begin_src jq :results output verbatim :stdin hyprDevices :compact yes
.keyboards
  | map(select(.main))
  | first
  | "\(.layout) \(.variant)"
#+end_src

#+RESULTS: jqXkbLayout
: "us altgr-intl"

One-liner

#+begin_src shell
hyprctl devices -j \
    | jq '.keyboards | map(select(.main)) | first | "\(.layout) \(.variant)"'
#+end_src

#+RESULTS:
: us altgr-intl

grep -C5 --include=*.nix -re environment.sessionVariables /data/ecto/x.files
* Rules

** Extracting classes

#+begin_src hyprlang

#+end_src

** Dispatchers
*** Limitations

These are limitations inferred from parameters/selectors on the dispatchers
page. Maybe some of the wiki information is outdated (or I missed something)

+ Window rules or workspace rules may be used to accomplish similar intent as
  tags/groups.
+ Using these features correctly is important anyways, esp if the behavior is
  more complicated.
  - i.e tags/groups are stateful and statefulness is the debil -- all
    applications give you class/title, but you're responsible for ensuring the
    exact state needed in order to utilize tags/groups
+ alternative approaches:
  - the window class or a title prefix may address all windows of a specific
    application ... thus they wouldn't need a tag if you want to address them
    that way
  - a workspace or monitor functions effectively as a tag in specific
    situations, but requires all windows on that ws/monitor to be intended
    targets of what a =tag= would otherwise be used for

There is definitely rationale in not making /everything/ a feature. Big footgun.

**** Tags

The =tagwindow= dispatcher assigns tags, but the only dispatchers that accept a
window param are:

| {close,kill}window | movetoworkspace{,silent} |
| {tag,focus}window  | {resize,move}window      |
| alterzorder        | pin,setprop              |
| moveoutofgroup     |                          |

**** Groups

+ The only way to add a window to a group is to move the active window into it
+ =moveoutofgroup= accepts a window as a parameter
+ The =group= abstraction seems to lack an identifier or name, on which to access
  them from dispatchers/scripts. It's potentially a later feature idk.

* Workspaces

** Special

Special workspaces can show on any monitor (without some strange
non-deterministic =hyprctl dispatch fu=). In the wiki, the "monitorlessness" is
the primary distinguishing feature that is articulated, but =special= workspaces
will also overlay on top of another workspace.

+ =special:$name= is the special workspace's name
  - =workspace = special:$name, name:fdsa, ...= doesn't work
+ special workspaces only work with =movetoworkspace= and =movetoworkspacesilent=
  - which seems somewhat limited (maybe i'm missing the context)

Because you can't control their monitor arrangement, special workspaces:

+ may throw windows around when opened on a monitor with different resolution
+ float:false :: non-float: need controlled window-stack or windows where size/placement
  doesn't matter ... or you should be fine with rearranging window stack ad hoc
  - i.e. after jumping from monitor to monitor or when workspace first opened
+ float:true :: if they're intended to manage floating windows, then
  - you'll eventually want size/placement constraints on their applications
  - you should use percentages if your monitor resolutions are different.
  - you should order your windows from a consistent origin (i.e. from 0x0,
    top/left to bottom/right)
  - otherwise, you need to be okay with the windows being thrown around or
    finding them on alternate workspaces (e.g. when opening a window that
    doesn't quite fit, it sometimes "remembers" the wrong workspace state)

** Persistent

+ Once =persistent:true=, these don't go away easily: ensure they're removed via
  =hyprctl workspaces=. This is a detail to apply later, once your workspaces
  /function/ the way you want.
  - persistent workspaces are created when config is reloaded, but they aren't
    deleted if you remove the config lines.
+ Setting =monitor:$portId= isn't applied until after the workspace is created, so
  it needs to be persistent if this is set...

There are a few other issues with =persistent:t=

+ changing monitor configurations may leave persistent workspaces on a display
  that no longer exists

*** Making workspaces unpersistent

Once special workspaces are created/persistent, I'm having a real hard time
changing them. These all seem to do nothing

+ =hyprctl keyword workspaces '-97,name:newname'=
+ =hyprctl keyword workspaces '-97,persistent=0'=
+ =hyprctl keyword workspaces 'special:irc,name:newname'=
+ =hyprctl keyword workspaces 'special:irc,persistent=0'=

Although i did get the =-1337= id at some point, which means there's been a
problem.

I also wasn't able to get non-special workspaces to change.

*** Making workspaces unpersistent (round 2)

+ [[https://github.com/hyprwm/Hyprland/discussions/11146]] this user:
  - prefixes persistent workspaces with a dot
  - =workspace = n[s:.], persistent=true= adds persistent to workspaces beginning
    with a dot, which is evaluated dynamically.
  - then changes the name to not include the dot in =.wsname=
+ https://github.com/hyprwm/Hyprland/discussions/9879 describes the code that
  defines persistent behavior
+ https://github.com/hyprwm/Hyprland/issues/9879

* Notifications

#+begin_src shell :results output verbatim
delay=1
decay=5
i=-1
while [[ $i -lt 6 ]]; do
  t="$((1000 * ($decay - $i + 1)))"
  #color="rgb(123456) rgb(fcbda0) 45deg"
  color="rgb(123456)"
  font="fontsize:24"
  msg="$(echo asdf | sha256sum | tail -c16)"
  hyprctl notify $i "$t" "$color" "$msg"
  sleep $delay
  ((i++))
done

#for i in (0 1 2 3 4 5); do
#+end_src

#+RESULTS:
: ok
: ok
: ok
: ok
: ok
: ok
: ok


* IPC

** D-Bus

+ Should be preferred over socket where it makes sense, since it can respond to
  D-Bus event sources other than hyprland
+ A single "fan-in" process can subscribe to multiple d-bus events, transform
  their responses and emit to a file/socket. =eww= widgets would connect to this.

*** yubikey-touch-detector

[[https://github.com/maximbaz/yubikey-touch-detector][maximbaz/yubikey-touch-detector]]

Provides a taskbar widget to manage a =com.github.maximbaz.YubikeyTouchDetector=
d-bus interface (defined in code) or to write to a socket.

+ To poll socket, there's a [[https://github.com/maximbaz/dotfiles/blob/main/modules/linux/bin/waybar-yubikey][waybar script]] and others.
+ Watches =$GNUPGHOME/private-keys-v1.d/*= for file open events, but is migrating
  to =proglottis/gpgme= to message sockets via ASSUAN (and can thus be extended)
  - It's also =CGO=. It uses [[https://github.com/nix-community/gomod2nix][Gomod2nix]] -- that build system may issues with CGO,
    potentially leading to problems with packages deriving from =gpgme= or
    =yubikey-touch-detector=)

** Push-based Sockets

The "Polling Sockets" section below is also really push-based, but in a
framework that's centered around polling.

*** GPG/SCDaemon Integration

+ [[https://pkg.go.dev/github.com/proglottis/gpgme][proglottis/gpgme]] contains a CGO implementation of assuan, intended for
  integration with =gpgme=
  - This project was recently updated to include a flake.nix :)
  - It bumped Go to 1.21 :(
+ [[https://github.com/karampok/i3-bar?][karampok/i3-bar]] uses gpgme to provide a [[https://github.com/karampok/i3-bar/blob/master/yubikey/yubikey.go][yubikey status indicator]] for the
  modular i3 widget framework [[https://github.com/soumya92/barista][soumya92/barista]].
  - Barista uses a push-based model for updating widgets instead of polling.
    - There are a ton of examples in here, but the patterns/deps are older.
+ [[https://github.com/greshake/i3status-rust][greshake/i3status-rust]] is similar

** Polling Sockets

*** eww widgets with =.socket2.sock=

**** Example of event-driven flow

[[https://codeberg.org/JustineSmithies/hyprland-dotfiles/src/branch/master/.config/eww/eww.yuck#L1-L39][JustineSmithies/hyprland-dotfiles .config/eww/eww.yuck]] and
[[https://codeberg.org/JustineSmithies/hyprland-dotfiles/src/branch/master/.config/eww/scripts/workspace.sh][.config/eww/scripts/workspace.sh]] listen to the hyprland socket

*** Basics
Should be preferred over one-off bash scripts where possible ... e.g. for =eww= widgets

#+begin_src shell
awkProg='/^(active)?window>>/{print $0}'
hyprsock=$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock

# awk or sed can filter events
socat -u "UNIX-CONNECT:$hyprsock" - \
    | stdbuf -o0 \
      awk -F '>>|,' $awkProg

# this makes it a bit easier to follow events
socat -u "UNIX-CONNECT:$hyprsock" -

# and this emits notifications by wrapping event text in quotes
socat -u "UNIX-CONNECT:$hyprsock" - \
    | xargs -I'{}' notify-send --icon hyprsock '"{}"'

# notify-send -- can't be a builtin like echo
# -I'{} single quotes or \{\} to escape
# '"{}"' xargs eats the single-quotes, but subs {} in any strings.
#   a bit tricky, but it works here
#+end_src

This reverses a list of icons

#+begin_src shell :results output verbatim
iconset=/run/current-system/sw/share/icons/Adwaita/scalable/mimetypes
n=$(ls $iconset | wc -l)
# icons=$(ls $iconset)
icons=$(ls $iconset | sed -E 's/(.+)\.(svg|png|ico)/\1/g')

# modular arithmetic is dumb in awk. NR also can't be known in advance
# -8 % 3 == 2 == 8 % 3 ... when cycles are preserved in Z^3

ls $iconset \
    | tr ' ' '\n' \
    | awk -v arr="$icons" \
    'BEGIN { split(arr,ay," ") }
{ revi=length(ay) - (NR % length(ay));
  print ay[revi], NR, revi;
}' | tee >(xargs -n3 notify-send -i)

# tee reads from stdin, writes to its stdout
#   and broadcasts to xargs stdin

# xargs -I'{}' notify-send -i '{}' '{}' '{}' # broadcasts args 3x
#+end_src

#+RESULTS:
| x-office-spreadsheet-template  |  1 | 26 |
| x-office-spreadsheet           |  2 | 25 |
| x-office-presentation-template |  3 | 24 |
| x-office-presentation          |  4 | 23 |
| x-office-drawing               |  5 | 22 |
| x-office-document-template     |  6 | 21 |
| x-office-document              |  7 | 20 |
| x-office-addressbook           |  8 | 19 |
| video-x-generic                |  9 | 18 |
| text-x-script                  | 10 | 17 |
| text-x-preview                 | 11 | 16 |
| text-x-generic                 | 12 | 15 |
| text-html                      | 13 | 14 |
| package-x-generic              | 14 | 13 |
| model                          | 15 | 12 |
| inode-symlink                  | 16 | 11 |
| inode-directory                | 17 | 10 |
| image-x-generic                | 18 |  9 |
| font-x-generic                 | 19 |  8 |
| audio-x-generic                | 20 |  7 |
| application-x-sharedlib        | 21 |  6 |
| application-x-generic          | 22 |  5 |
| application-x-firmware         | 23 |  4 |
| application-x-executable       | 24 |  3 |
| application-x-addon            | 25 |  2 |
| application-certificate        | 26 |  1 |
| x-package-repository           | 27 | 27 |

This displays a random icon for each notification. =tee= records the output below,
which isn't emitted if =C-g= is used to prematurely kill the =ob-shell= process

#+begin_src shell :var awkprog=awkRandLine :results output verbatim
hyprsock=$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock
iconset=/run/current-system/sw/share/icons/Adwaita/scalable/mimetypes
n=$(ls $iconset | wc -l)
icons=$(ls $iconset | sed -E 's/(.+)\.(svg|png|ico)/\1/g')

socat -u "UNIX-CONNECT:$hyprsock" - \
    | stdbuf -o0 awk -v arr="$icons" $awkprog \
    | tee >(xargs -n3 notify-send -i)

#    | xargs -n3 notify-send -i
#    | xargs -I'{}' notify-send --icon hyprsock '"{}"'
#+end_src

#+RESULTS:
: application-certificate hyprsock 'focusedmon>>DP-2,2'
: application-x-addon hyprsock 'focusedmonv2>>DP-2,2'
: application-certificate hyprsock 'activewindow>>Alacritty,dc@kratos:~'
: application-x-executable hyprsock 'activewindowv2>>3f054490'
: application-x-firmware hyprsock 'activelayout>>hl-virtual-keyboard,English (intl., with AltGr dead keys)'
: application-x-generic hyprsock 'activelayout>>hl-virtual-keyboard,English (intl., with AltGr dead keys)'
: application-x-firmware hyprsock 'openlayer>>swaync-notification-window'
: application-x-executable hyprsock 'closelayer>>swaync-notification-window'
: font-x-generic hyprsock 'openlayer>>swaync-notification-window'

awkprog

#+name: awkRandLine
#+begin_example awk
function randint(n) { return int(n * rand()) }

BEGIN { split(arr,ay," "); }
{
  ico=randint(NR)+1; # a bit weird
  # print NR, ay[ico % length(ay)], "'$0'";
  printf "%s hyprsock '%s'\n", ay[ico % length(ay)], $0;
  next;
}
#+end_example


It works, but it seems to eventually encounter input without all args

* hypr-qtutils

Three bins, all three wrap a QT app with styling and depend on =hyprutils=

+ hyprland-dialog
+ hyprland-donate-screen
+ hyprland-update-screen

*** hyprland-dialog args

args (no man page)

+ --title :: the popup text title
+ --apptitle :: the =title= used by the window manager
+ --text :: some text
+ --buttons :: delimited with =;=

This will simply output text of the clicked button to =STDOUT=

* Printable Wiki :noexport:

Not enough highlighting to be useful

#+begin_src javascript
// remove headers
Array.from(document.querySelectorAll('thead')).forEach(el => el.remove());

// remove nav
Array.from(document.querySelectorAll('nav')).forEach(el => el.remove());
document.querySelector('aside').remove();

// remove timestamp, prev/next from bottom
document.querySelector('main').replaceChildren(document.querySelector('.content'))

// on variables page: these are the [!] important notes ... you should already
// know these. (removes code examples from other pages)
// Array.from(document.querySelectorAll('.content > div')).forEach(el => el.remove());

// i also removed the experimental section and errant <p> tags
#+end_src

Stylesheet (on light mode)

#+begin_src css
table { font-size: 0.7rem !important; margin-top: 0.1rem !important; }
h2 { color: darkblue !important; font-size: 1.3rem !important; margin: 0.1rem !important; }
h3 { color: darkgreen !important; font-size: 1.2rem !important; margin: 0.1rem !important; }
td { padding: 0.1rem 0.3rem !important; }
h4 { color: darkred !important; font-size: 1.0rem !important; margin: 0.1rem !important; }
p { font-size: 0.9rem !important; line-height: 1.1rem !important; margin: 0.1rem !important; }
code { color: darkgreen !important; }
a { color: indigo !important; font-weight: 500 !important; }
ul { margin: 0.3em 1.0em !important; }

/* margin-top: 0.1em !important; margin-left: 1.0em !important; */

li { line-height: 1.2em !important; margin: 0 0em !important; }
li code { font-size: 0.8em !important; line-height: 0.8em !important; }

/* code blocks */
pre.chroma { border-radius: 3px !important; margin: 0.1em !important; padding: 0.2em !important; }

/* picking a light color that's not too light is tough. colors with multiple */
/* dyes are best ... nevermind @media print makes it transparent */
/* background-color: lavenderblush !important; */

.hextra-code-block { line-height: 1em; margin-top: 0.2em; }

/* info box */
.hx-overflow-x-auto { font-size: small; margin-top: 0.2em; }
/* line-height: 1.0em !important; */
.hx-leading-7 { line-height: 1.1em !important; } /* info box text */
.hx-text-xl { font-size: 0.8em; } /* info box: icon text */
#+end_src

... For regions that get cut off while printing (...smh), mostly just change the
font sizes. It's just so much easier to read this offline.

#+begin_src css
h1 { font-size: 1.1rem !important; margin: 0.1rem !important; }

table { font-size: 0.7rem !important; margin-top: 0.1rem !important; }
h2 { color: darkblue !important; font-size: 1.1rem !important; margin: 0.1rem !important; }
h3 { color: darkgreen !important; font-size: 0.9rem !important; margin: 0.1rem !important; }
td { padding: 0.1rem 0.3rem !important; }
h4 { color: darkred !important; font-size: 0.8rem !important; margin: 0.1rem !important; }
p { font-size: 0.7rem !important; line-height: 0.8rem !important; margin: 0.1rem !important; }
code { color: darkgreen !important; }
a { color: indigo !important; font-weight: 500 !important; }
ul { margin: 0.3em 1.0em !important; }
ol { margin: 0.3em 1.0em !important; }

/* margin-top: 0.1em !important; margin-left: 1.0em !important; */

li { line-height: 1.0em !important; font-size: 0.8em; margin: 0 0em !important; }
li code { font-size: 0.7em !important; line-height: 0.8em !important; }

/* code blocks */
pre.chroma { border-radius: 3px !important; margin: 0.1em !important; padding: 0.2em !important; }

/* picking a light color that's not too light is tough. colors with multiple */
/* dyes are best ... nevermind @media print makes it transparent */
/* background-color: lavenderblush !important; */

.hextra-code-block { line-height: 1em; margin-top: 0.2em; }

/* info box */
.hx-overflow-x-auto { font-size: small; margin-top: 0.2em; }
/* line-height: 1.0em !important; */
.hx-leading-7 { line-height: 1.1em !important; } /* info box text */
.hx-text-xl { font-size: 0.8em; } /* info box: icon text */
#+end_src
