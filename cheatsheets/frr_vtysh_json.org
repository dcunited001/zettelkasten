:PROPERTIES:
:ID:       027166e4-fbcc-4c75-8990-8198c7a47ae4
:END:
#+title: Cheatsheet: Frr vtysh commands

* Query the code-base :noexport:
** vtysh commands with json

To dump the following

#+begin_src shell :results output verbatim
frrRepo=/noobafoob-arbac
cd $frrRepo/doc/user
grep -re "^\.\. clicmd::.*json" --include='*.rst' \
    | sed -e 's/:\.\. clicmd:: /: /g'
#+end_src

Yes ... yes, really

* JSON via =vtysh=

#+begin_src shell
vtysh -c 'show ip route json'
# equivalent to: show ip route json
#+end_src

* =vtysh= Subcommands

** zebra

+ show ip nht [vrf NAME] [A.B.C.D|X:X::X:X] [mrib] [json]
+ show ip nht route-map [vrf <NAME|all>] [json]
+ show evpn access-vlan [IFNAME VLAN-ID | detail] [json]
+ show debugging label-table [json]
+ show segment-routing srv6 manager [json]
+ show segment-routing srv6 locator [json]
+ show segment-routing srv6 locator NAME detail [json]
+ show segment-routing srv6 [locator NAME] sid [X:X::X:X] [json]
+ show fpm counters [json]
+ show fpm status [json]
+ show [ip|ipv6] route [vrf NAME|all|table TABLENO]
  [A.B.C.D|A.B.C.D/M|X:X::X:X|X:X::X:X/M] [json] [nexthop-group]
+ show interface [NAME] [{vrf VRF|brief}] [json]
+ show interface [NAME] [{vrf all|brief}] [json]
+ show nexthop-group rib [ID] [vrf NAME] [singleton [ip|ip6]] [type] [json]

** vrrp

+ show vrrp [interface INTERFACE] [(1-255)] [json]

** sharp

+ show sharp ted [verbose|json]
+ show sharp ted [<vertex [A.B.C.D]|edge [A.B.C.D]|subnet [A.B.C.D/M]>]
  [verbose|json]

** rpki
+ show rpki configuration [vrf NAME] [json]
+ show rpki prefix <A.B.C.D/M|X:X::X:X/M> [ASN] [vrf NAME] [json]
+ show rpki as-number ASN [vrf NAME] [json]
+ show rpki prefix-table [vrf NAME] [json]
+ show rpki cache-server [vrf NAME] [json]
+ show rpki cache-connection [vrf NAME] [json]

** routemap


+ show route-map [WORD] [json]

** pimv6

+ show ipv6 pim [vrf NAME] group-type [json]
+ show ipv6 pim [vrf NAME] join [X:X::X:X [X:X::X:X]] [json]
+ show ipv6 pim vrf all join [json]
+ show ipv6 pim [vrf NAME] local-membership [json]
+ show ipv6 pim [vrf NAME] neighbor [detail|WORD] [json]
+ show ipv6 pim vrf all neighbor [detail|WORD] [json]
+ show ipv6 pim [vrf NAME] rp-info [json]
+ show ipv6 pim vrf all rp-info [json]
+ show ipv6 pim [vrf NAME] rpf [json]
+ show ipv6 pim vrf all rpf [json]
+ show ipv6 pim [vrf NAME] state [X:X::X:X [X:X::X:X]] [json]
+ show ipv6 pim vrf all state [X:X::X:X [X:X::X:X]] [json]
+ show ipv6 pim [vrf NAME] upstream [X:X::X:X [Y:Y::Y:Y]] [json]
+ show ipv6 pim vrf all upstream [json]
+ show ipv6 pim [vrf NAME] upstream-join-desired [json]
+ show ipv6 pim [vrf NAME] upstream-rpf [json]
+ show ipv6 pim [vrf NAME] interface traffic [WORD] [json]
+ show ipv6 mld [vrf NAME] interface [IFNAME] [detail|json]
+ show ipv6 mld [vrf NAME] statistics [interface IFNAME] [json]
+ show ipv6 mld [vrf NAME] joins [{interface IFNAME|groups X:X::X:X/M|sources
  X:X::X:X/M|detail}] [json]
+ show ipv6 mld [vrf NAME] groups [json]
+ show ipv6 multicast count [vrf NAME] [json]
+ show ipv6 multicast count vrf all [json]
+ show ipv6 mroute [vrf NAME] [X:X::X:X [X:X::X:X]] [fill] [json]
+ show ipv6 mroute [vrf NAME] count [json]
+ show ipv6 mroute vrf all count [json]
+ show ipv6 mroute [vrf NAME] summary [json]
+ show ipv6 mroute vrf all summary [json]
+ show ipv6 pim bsr [vrf NAME] [json]
+ show ipv6 pim bsr candidate-bsr [vrf NAME] [json]
+ show ipv6 pim bsr candidate-rp [vrf NAME] [json]
+ show ipv6 pim bsr candidate-rp-database [vrf NAME] [json]
+ show ipv6 pim bsr groups [vrf NAME] [json]
+ show ipv6 pim bsr rp-info [vrf NAME] [json]
+ show ipv6 pim bsm-database [vrf NAME] [json]

** pim

+ show ip igmp [vrf NAME] join [json]
+ show ip igmp [vrf NAME] groups [INTERFACE [GROUP]] [detail] [json]
+ show ip igmp [vrf NAME] proxy [json]
+ show ip igmp [vrf NAME] sources [json]
+ show ip mroute [vrf NAME] [A.B.C.D [A.B.C.D]] [fill] [json]
+ show ip mroute [vrf NAME] count [json]
+ show ip mroute vrf all count [json]
+ show ip mroute [vrf NAME] summary [json]
+ show ip mroute vrf all summary [json]
+ show ip pim mlag [vrf NAME|all] interface [detail|WORD] [json]
+ show ip pim mlag summary [json]
+ show ip pim [vrf NAME] rp-info [A.B.C.D/M] [json]
+ show ip pim [vrf NAME] autorp [json]
+ show ip pim [vrf NAME] upstream [A.B.C.D [A.B.C.D]] [json]
+ show ip pim [vrf NAME] mlag upstream [A.B.C.D [A.B.C.D]] [json]
+ show ip pim bsr [vrf NAME] [json]
+ show ip pim bsr candidate-bsr [vrf NAME] [json]
+ show ip pim bsr candidate-rp [vrf NAME] [json]
+ show ip pim bsr candidate-rp-database [vrf NAME] [json]
+ show ip pim bsr groups [vrf NAME] [json]
+ show ip pim bsr rp-info [vrf NAME] [json]
+ show ip pim bsm-database [vrf NAME] [json]
+ show ip multicast count [vrf NAME] [json]
+ show ip multicast count vrf all [json]

** pbr

+ show pbr nexthop-groups [NAME] [json]
+ show pbr map [NAME] [detail] [json]
+ show pbr interface [NAME] [json]

** pathd

+ show sr-te pcep session [NAME] [json]

** OSPF

+ show ip ospf [vrf <NAME|all>] [json]
+ show ip ospf interface [INTERFACE] [json]
+ show ip ospf neighbor [json]
+ show ip ospf [vrf <NAME|all>] neighbor INTERFACE [json]
+ show ip ospf neighbor detail [json]
+ show ip ospf [vrf <NAME|all>] neighbor A.B.C.D [detail] [json]
+ show ip ospf [vrf <NAME|all>] neighbor INTERFACE detail [json]
+ show ip ospf [vrf <NAME|all>] database [self-originate] [json]
+ show ip ospf [vrf <NAME|all>] database max-age [json]
+ show ip ospf [vrf <NAME|all>] database detail [LINK-STATE-ID] [adv-router
  A.B.C.D] [json]
+ show ip ospf [vrf <NAME|all>] database detail [LINK-STATE-ID] [self-originate]
  [json]
+ show ip ospf [vrf <NAME|all>] database
  (asbr-summary|external|network|router|summary|nssa-external|opaque-link|opaque-area|opaque-as)
  [LINK-STATE-ID] [adv-router A.B.C.D] [json]
+ show ip ospf [vrf <NAME|all>] database
  (asbr-summary|external|network|router|summary|nssa-external|opaque-link|opaque-area|opaque-as)
  [LINK-STATE-ID] [self-originate] [json]
+ show ip ospf route [detail] [json]
+ show ip ospf [vrf <NAME|all>] border-routers [json]
+ show ip ospf [{(1-65535)|vrf <NAME|all>}] graceful-restart helper [detail] [json]
+ show ip ospf mpls-te database [verbose|json]
+ show ip ospf mpls-te database vertex [self-originate|adv-router ADV-ROUTER]
  [verbose|json]
+ show ip ospf mpls-te database edge [A.B.C.D] [verbose|json]
+ show ip ospf mpls-te database subnet [A.B.C.D/M] [verbose|json]
+ show ip ospf database segment-routing <adv-router ADVROUTER|self-originate> [json]
+ show ip ospf [vrf <NAME|all>] summary-address [detail] [json]

** ospf6d

+ show ipv6 ospf6 summary-address [detail] [json]
+ show ipv6 ospf6 [vrf <NAME|all>] [json]
+ show ipv6 ospf6 [vrf <NAME|all>] database [<detail|dump|internal>] [json]
+ show ipv6 ospf6 [vrf <NAME|all>] database
  <router|network|inter-prefix|inter-router|as-external|group-membership|type-7|link|intra-prefix>
  [json]
+ show ipv6 ospf6 [vrf <NAME|all>] database adv-router A.B.C.D linkstate-id
  A.B.C.D [json]
+ show ipv6 ospf6 [vrf <NAME|all>] database self-originated [json]
+ show ipv6 ospf6 [vrf <NAME|all>] interface [json]
+ show ipv6 ospf6 [vrf <NAME|all>] neighbor [json]
+ show ipv6 ospf6 [vrf <NAME|all>] interface traffic [json]
+ show ipv6 ospf6 zebra [json]
+ show ipv6 ospf6 [vrf <NAME|all>] redistribute [json]
+ show ipv6 ospf6 [vrf <NAME|all>] route
  [<intra-area|inter-area|external-1|external-2|X:X::X:X|X:X::X:X/M|detail|summary>]
  [json]
+ show ipv6 ospf6 [vrf <NAME|all>] route X:X::X:X/M match [detail] [json]
+ show ipv6 ospf6 [vrf <NAME|all>] interface [IFNAME] prefix
  [detail|<X:X::X:X|X:X::X:X/M> [<match|detail>]] [json]
+ show ipv6 ospf6 [vrf <NAME|all>] spf tree [json]
+ show ipv6 ospf6 graceful-restart helper [detail] [json]
** nhrpd

+ show [ip|ipv6] nhrp cache [json]
+ show [ip|ipv6] nhrp opennhrp [json]
+ show [ip|ipv6] nhrp nhs [json]
+ show dmvpn [json]

** mgmtd

+ show mgmt datastore-contents [candidate|operation|running] [xpath WORD] [file WORD] json|xml

** isisd
+ show isis [vrf <NAME|all>] summary [json]
+ show isis [vrf <NAME|all>] interface [detail] [IFNAME] [json]
+ show isis [vrf <NAME|all>] neighbor [detail] [SYSTEMID] [json]
+ show isis [vrf <NAME|all>] database [detail] [LSPID] [json]
+ show isis [vrf <NAME|all>] mpls-te database [detail|json]
+ show isis [vrf <NAME|all>] mpls-te database vertex [WORD] [detail|json]
+ show isis [vrf <NAME|all>] mpls-te database edge [A.B.C.D|X:X::X:X] [detail|json]
+ show isis [vrf <NAME|all>] mpls-te database subnet
[A.B.C.D/M|X:X::X:X/M] [detail|json]

** filter

+ show <ip|ipv6> access-list [json]
+ show <ip|ipv6> access-list WORD [json]
+ show ip prefix-list [json]
+ show ip prefix-list NAME [json]
+ show ip prefix-list NAME seq NUM [json]
+ show ip prefix-list summary [json]
+ show ip prefix-list summary NAME [json]
+ show ip prefix-list detail [json]
+ show ip prefix-list detail NAME [json]

** evpn
+ show evpn mac vni (1-16777215) detail [json]
+ show vrf [<NAME$vrf_name|all$vrf_all>] vni [json]

** bgp

+ show bgp [<ipv4|ipv6>] [<view|vrf> VRF] neighbors [<A.B.C.D|X:X::X:X|WORD>]
  graceful-restart [json]
+ show bgp <afi> <safi> neighbors WORD bestpath-routes [detail] [json] [wide]
+ show [ip] bgp peer-group [json]
+ show bgp as-path-access-list [json]
+ show bgp as-path-access-list WORD [json]
+ show bgp [afi] [safi] [all] alias WORD [wide|json]
+ show ip bgp [all] [wide|json [detail]]
+ show ip bgp A.B.C.D [json]
+ show bgp [all] [wide|json [detail]]
+ show bgp X:X::X:X [json]
+ show bgp router [json]
+ show [ip] bgp [all] summary [wide] [json]
+ show bgp [afi] [safi] [all] [wide|json]
+ show bgp vrfs [<VRFNAME$vrf_name>] [json]
+ show bgp l2vpn evpn route [detail] [type
  <ead|1|macip|2|multicast|3|es|4|prefix|5>] self-originate [json]
+ show bgp vni <all|VNI> [vtep VTEP] [type <ead|1|macip|2|multicast|3>]
  [<detail|json>]
+ show bgp [afi] [safi] [all] summary [json]
+ show bgp [afi] [safi] [all] summary failed [json]
+ show bgp [afi] [safi] [all] summary established [json]
+ show bgp [afi] [safi] [all] summary neighbor [PEER] [json]
+ show bgp [afi] [safi] [all] summary remote-as <internal|external|ASN> [json]
+ show bgp [afi] [safi] [all] summary terse [json]
+ show bgp [afi] [safi] [neighbor [PEER]
  [routes|advertised-routes|received-routes] [<A.B.C.D/M|X:X::X:X/M> | detail]
  [json]
+ show bgp [<view|vrf> VIEWVRFNAME] [afi] [safi] neighbors PEER received
  prefix-filter [json]
+ show bgp [afi] [safi] [all] dampening dampened-paths [wide|json]
+ show bgp [afi] [safi] [all] dampening flap-statistics [wide|json]
+ show bgp [afi] [safi] [all] dampening parameters [json]
+ show bgp [afi] [safi] [all] version (1-4294967295) [wide|json]
+ show [ip] bgp [afi] [safi] [all] cidr-only [wide|json]
+ show [ip] bgp [afi] [safi] [all] prefix-list WORD [wide|json]
+ show [ip] bgp [afi] [safi] [all] access-list WORD [wide|json]
+ show [ip] bgp [afi] [safi] [all] filter-list WORD [wide|json]
+ show [ip] bgp [afi] [safi] [all] route-map WORD [wide|json]
+ show [ip] bgp [afi] [safi] [all] <A.B.C.D/M|X:X::X:X/M> longer-prefixes
  [wide|json]
+ show [ip] bgp [afi] [safi] [all] self-originate [wide|json]
+ show [ip] bgp [afi] [safi] [all] neighbors A.B.C.D
  [advertised-routes|received-routes|filtered-routes] [<A.B.C.D/M|X:X::X:X/M> |
  detail] [json|wide]
+ show [ip] bgp [<view|vrf> VIEWVRFNAME] [afi] [safi] detail [json]
+ show [ip] bgp <ipv4|ipv6> [all] community [wide|json]
+ show [ip] bgp <ipv4|ipv6> [all] community COMMUNITY [wide|json]
+ show [ip] bgp <ipv4|ipv6> [all] community COMMUNITY exact-match [wide|json]
+ show [ip] bgp <ipv4|ipv6> community-list WORD [json]
+ show [ip] bgp <ipv4|ipv6> community-list WORD exact-match [json]
+ show bgp labelpool <chunks|inuse|ledger|requests|summary> [json]
+ show [ip] bgp <ipv4|ipv6> large-community LARGE-COMMUNITY json
+ show [ip] bgp <ipv4|ipv6> large-community-list WORD json
+ show bgp l2vpn evpn route rd <all|RD> mac <MAC> [ip <MAC>] [json]
+ show [ip] bgp [<view|vrf> VIEWVRFNAME] nexthop ipv4 [A.B.C.D] [detail] [json]
+ show [ip] bgp [<view|vrf> VIEWVRFNAME] nexthop ipv6 [X:X::X:X] [detail] [json]
+ show [ip] bgp [<view|vrf> VIEWVRFNAME] nexthop [<A.B.C.D|X:X::X:X>] [detail] [json]
+ show [ip] bgp <view|vrf> all nexthop [json]
+ show [ip] bgp [<view|vrf> VIEWVRFNAME] import-check-table [detail] [json]
+ show bfd [vrf NAME] peers [json]
+ show bfd [vrf NAME] peer <WORD|<A.B.C.D|X:X::X:X> [{multihop|local-address
  <A.B.C.D|X:X::X:X>|interface IFNAME}]> [json]
+ show bfd [vrf NAME] peers brief [json]
+ show bfd static route [json]

** basic
+ show configuration running [<json|xml> [translate WORD]] [with-defaults]
  DAEMON
+ show yang operational-data XPATH [{format <json|xml>|translate
  TRANSLATOR|with-config}] DAEMON

* FRR Schema

** From =yang=

*** Yang Lint

#+begin_src shell :results output verbatim
guix shell frrouting libyang
export YANGPATH=$GUIX_ENVIRONMENT/share/yang
yanglint -p $YANGPATH -f tree $YANGPATH/frr-staticd.yang
# or XML with -f yin
# yanglint -p $YANGPATH -f yang $YANGPATH/frr-staticd.yang
# yanglint -p $YANGPATH -f yin $YANGPATH/frr-staticd.yang
#+end_src

#+RESULTS:
#+begin_example
module: frr-staticd

  augment /frr-rt:routing/frr-rt:control-plane-protocols/frr-rt:control-plane-protocol:
    +--rw staticd
       +--rw route-list* [prefix src-prefix afi-safi]
       |  +--rw prefix                       inet:ip-prefix
       |  +--rw src-prefix                   inet:ipv6-prefix
       |  +--rw afi-safi                     identityref
       |  +---u staticd-prefix-attributes
       +--rw segment-routing
          +--rw srv6
             +--rw static-sids
                +--rw sid* [sid]
                   +--rw sid             inet:ipv6-prefix
                   +--rw behavior?       srv6-behavior-codepoint
                   +--rw locator-name?   string
                   +--rw vrf-name?       frr-vrf:vrf-ref
#+end_example

Validate an instance

#+begin_src shell :results output verbatim
guix shell frrouting libyang
topoTests=/data/ecto/vyos/frr/tests/topotests
staticJson=$frrPath/$topoTests/bfd_topo3/r3/bfd-static.json
export YANGPATH=$GUIX_ENVIRONMENT/share/yang

echo -e "\n\ninvalid: (top-level not fully-qualified)"
    yanglint -p $YANGPATH -f json $YANGPATH/frr-staticd.yang $staticJson 2>&1

echo -e "\n\nvalid: (no error)"
cat $staticJson | jq '{"frr-staticd:path-list": ."path-list"}' |
    yanglint -p $YANGPATH -f json $YANGPATH/frr-staticd.yang 2>&1

echo -e "\ninvalid: (not even wrong) "
yanglint -p $YANGPATH -f json $YANGPATH/frr-staticd.yang '{}' 2>&1
#+end_src

#+RESULTS:
#+begin_example


invalid: (top-level not fully-qualified)
libyang err : Top-level JSON object member "path-list" must be namespace-qualified. (line 2)
YANGLINT[E]: Failed to parse input data file "//data/ecto/vyos/frr/tests/topotests/bfd_topo3/r3/bfd-static.json".


valid: (no error)

invalid: (not even wrong)
YANGLINT[E]: Input schema format for {} file not recognized.
#+end_example

*** FRR Modules

+idk really what to do with these (something with RelaxNG, I think).+

#+begin_src shell
guix shell frrouting
ls $GUIX_ENVIRONMENT/share/yang/* | sed -e 's/.*share\/yang\///g'
#+end_src

#+RESULTS:
| frr-affinity-map.yang              |
| frr-backend.yang                   |
| frr-bfdd.yang                      |
| frr-bgp-bmp.yang                   |
| frr-bgp-common-multiprotocol.yang  |
| frr-bgp-common-structure.yang      |
| frr-bgp-common.yang                |
| frr-bgp-filter.yang                |
| frr-bgp-neighbor.yang              |
| frr-bgp-peer-group.yang            |
| frr-bgp-route-map.yang             |
| frr-bgp-rpki.yang                  |
| frr-bgp-types.yang                 |
| frr-bgp.yang                       |
| frr-deviations-bgp-datacenter.yang |
| frr-deviations-ietf-key-chain.yang |
| frr-eigrpd.yang                    |
| frr-filter.yang                    |
| frr-gmp.yang                       |
| frr-if-rmap.yang                   |
| frr-interface.yang                 |
| frr-isisd.yang                     |
| frr-module-translator.yang         |
| frr-nexthop.yang                   |
| frr-ospf6-route-map.yang           |
| frr-ospfd.yang                     |
| frr-ospf-route-map.yang            |
| frr-pathd.yang                     |
| frr-pim-candidate.yang             |
| frr-pim-rp.yang                    |
| frr-pim.yang                       |
| frr-ripd.yang                      |
| frr-ripngd.yang                    |
| frr-route-map.yang                 |
| frr-route-types.yang               |
| frr-routing.yang                   |
| frr-staticd.yang                   |
| frr-test-module.yang               |
| frr-vrf.yang                       |
| frr-vrrpd.yang                     |
| frr-zebra-route-map.yang           |
| frr-zebra.yang                     |
| ietf-bgp-types.yang                |
| ietf-interfaces.yang               |
| ietf-key-chain.yang                |
| ietf-netconf-acm.yang              |
| ietf-netconf-with-defaults.yang    |
| ietf-netconf.yang                  |
| ietf-routing-types.yang            |

** Cisco YangSuite

*** Dump =yang= into workdir

#+name: yangSuite
#+begin_src emacs-lisp :eval query
(setq-local -yang-suite- (or (bound-and-true-p yang-suite)
                          (read-string "Yang suite: " (make-temp-file "yang-" t))))
#+end_src

clone yangsuite into =-yang-suite-= or elsewhere

#+begin_src shell :dir (identity -yang-suite-) "/tmp/yang-KV3xDf"
guix shell libyang frrouting
export YANGPATH=$GUIX_ENVIRONMENT/share/yang
mkdir -p share/yang
cp -RL $YANGPATH/* share/yang
#+end_src

* FRR Topotests

Guix does run some tests when it builds =frrouting=, but the =topotests= are not
part of the standard package. The setup is quite involved ... but their [[https://ci1.netdef.org/browse/FRR-FRR-TOPO0U2204AMD64-8746][CI
results are online]] (unfortunately they don't build JSON or Diagrams in CI).

+ These are full-scale integration tests (using virtual networking), so it needs
  running services (see [[https://github.com/frrouting/frr/blob/94e65ba4aeaa7f655615b6b8f3d5c4f3d4307e32/tests/topotests/lib/common_config.py#L377-L430][./tests/topotests/lib/common_config.py]])
+ Defining a JSON Schema for topojson wouldn't hurt... But I keep forgetting
  what =yang= and =netconf= are, really. It's probably just that.
  - [[https://github.com/CESNET/libyang][yanglint (CESNET/libyang)]] and [[https://github.com/mbj4668/pyang][mbj4668/pyang]] can [[https://docs.frrouting.org/projects/dev-guide/en/latest/northbound/yang-tools.html#pyang-cheat-sheet][convert between formats (frr
    dev-guide docs)]], but they mostly handle the schema-as-data
  - libyang has an [[https://github.com/CESNET/libyang/blob/master/tools/lint/examples/README.md][interactive mode]] for specifying multiple modules

*** Where topology is specified by =dot=

#+begin_src shell :results output verbatim raw
frrRepo=/data/ecto/vyos/frr
here=$(pwd)
cd $frrRepo/tests/topotests/
topos=($(find . -name '*.dot' -type f -printf '%p\n'))
dot -Tsvg -O ${topos[@]}
toposGraphs=($(find . -name '*.svg' -type f -printf '%p\n'))
mv ${toposGraphs[@]} $here/img/frr
paste <(echo ${topos[@]} | tr ' ' '\n' | sed -E 's/^.\/(.*)\/.*/\1/g') \
   <(echo ${toposGraphs[@]} | tr ' ' '\n' | sed -E 's/.*\///g') \
   | sort \
   | sed -E 's/(.*)	(.*)/\n\n*** [[https:\/\/github.com\/frrouting\/frr\/tree\/master\/tests\/topotests\/\1][\1]]\n\n[[file:.\/img\/frr\/\2]]/g'
# not really sure I feel like sed-escaping that URL
   #+end_src

#+RESULTS:


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/all_protocol_startup][all_protocol_startup]]

[[file:./img/frr/test_all_protocol_startup.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_bgp_cbit_topo3][bfd_bgp_cbit_topo3]]

[[file:./img/frr/test_bfd_bgp_cbit_topo3.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_profiles_topo1][bfd_profiles_topo1]]

[[file:./img/frr/test_bfd_profiles_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_topo1][bfd_topo1]]

[[file:./img/frr/test_bfd_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_topo2][bfd_topo2]]

[[file:./img/frr/test_bfd_topo2.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_topo3][bfd_topo3]]

[[file:./img/frr/test_bfd_topo3.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bfd_vrf_topo1][bfd_vrf_topo1]]

[[file:./img/frr/test_bfd_vrf_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_ecmp_topo1][bgp_ecmp_topo1]]

[[file:./img/frr/bgp-ecmp-topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_features][bgp_features]]

[[file:./img/frr/test_bgp_features.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_ipv6_rtadv][bgp_ipv6_rtadv]]

[[file:./img/frr/test_bgp_ipv6_rtadv.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_peer_shut][bgp_peer_shut]]

[[file:./img/frr/bgp-peer-shut.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_roles_capability][bgp_roles_capability]]

[[file:./img/frr/roles_capability_stand.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_roles_filtering][bgp_roles_filtering]]

[[file:./img/frr/roles_filtering_stand.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_vrf_lite_ipv6_rtadv][bgp_vrf_lite_ipv6_rtadv]]

[[file:./img/frr/test_bgp_vrf_lite_ipv6_rtadv.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/bgp_vrf_netns][bgp_vrf_netns]]

[[file:./img/frr/bgp-vrf-netns-topo.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/eigrp_topo1][eigrp_topo1]]

[[file:./img/frr/test_eigrp_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/example_test][example_test]]

[[file:./img/frr/test_template.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/isis_snmp][isis_snmp]]

[[file:./img/frr/test_isis_snmp.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/isis_topo1][isis_topo1]]

[[file:./img/frr/test_isis_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/isis_topo1_vrf][isis_topo1_vrf]]

[[file:./img/frr/test_isis_topo1_vrf.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_establish_hello_topo1][ldp_establish_hello_topo1]]

[[file:./img/frr/test_establish_hello_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_oc_acl_topo1][ldp_oc_acl_topo1]]

[[file:./img/frr/test_ldp_oc_acl_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_oc_topo1][ldp_oc_topo1]]

[[file:./img/frr/test_ldp_oc_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_sync_isis_topo1][ldp_sync_isis_topo1]]

[[file:./img/frr/test_ldp_sync_isis_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_sync_ospf_topo1][ldp_sync_ospf_topo1]]

[[file:./img/frr/test_ldp_sync_ospf_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ldp_vpls_topo1][ldp_vpls_topo1]]

[[file:./img/frr/test_ldp_vpls_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/msdp_mesh_topo1][msdp_mesh_topo1]]

[[file:./img/frr/test_msdp_mesh_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/nhrp_redundancy][nhrp_redundancy]]

[[file:./img/frr/test_nhrp_redundancy.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/nhrp_topo][nhrp_topo]]

[[file:./img/frr/test_nhrp_topo.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf6_topo2][ospf6_topo2]]

[[file:./img/frr/test_ospf6_topo2.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf_dual_stack][ospf_dual_stack]]

[[file:./img/frr/test_ospf_dual_stack.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf_netns_vrf][ospf_netns_vrf]]

[[file:./img/frr/test_ospf_netns_vrf.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf_suppress_fa][ospf_suppress_fa]]

[[file:./img/frr/test_ospf_suppress_fa.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf_topo1][ospf_topo1]]

[[file:./img/frr/test_ospf_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ospf_topo2][ospf_topo2]]

[[file:./img/frr/test_ospf_topo2.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/pim_basic_topo2][pim_basic_topo2]]

[[file:./img/frr/test_pim_basic_topo2.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/rip_bfd_topo1][rip_bfd_topo1]]

[[file:./img/frr/test_rip_bfd_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/ripng_topo1][ripng_topo1]]

[[file:./img/frr/test_ripng_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/rip_topo1][rip_topo1]]

[[file:./img/frr/test_rip_topo1.dot.svg]]


*** [[https://github.com/frrouting/frr/tree/master/tests/topotests/sbfd_topo1][sbfd_topo1]]

[[file:./img/frr/sbfd_topo1.dot.svg]]
all_protocol_startup	test_all_protocol_startup.dot.svg
bfd_bgp_cbit_topo3	test_bfd_bgp_cbit_topo3.dot.svg
bfd_profiles_topo1	test_bfd_profiles_topo1.dot.svg
bfd_topo1	test_bfd_topo1.dot.svg
bfd_topo2	test_bfd_topo2.dot.svg
bfd_topo3	test_bfd_topo3.dot.svg
bfd_vrf_topo1	test_bfd_vrf_topo1.dot.svg
bgp_ecmp_topo1	bgp-ecmp-topo1.dot.svg
bgp_features	test_bgp_features.dot.svg
bgp_ipv6_rtadv	test_bgp_ipv6_rtadv.dot.svg
bgp_peer_shut	bgp-peer-shut.dot.svg
bgp_roles_capability	roles_capability_stand.dot.svg
bgp_roles_filtering	roles_filtering_stand.dot.svg
bgp_vrf_lite_ipv6_rtadv	test_bgp_vrf_lite_ipv6_rtadv.dot.svg
bgp_vrf_netns	bgp-vrf-netns-topo.dot.svg
eigrp_topo1	test_eigrp_topo1.dot.svg
example_test	test_template.dot.svg
isis_snmp	test_isis_snmp.dot.svg
isis_topo1	test_isis_topo1.dot.svg
isis_topo1_vrf	test_isis_topo1_vrf.dot.svg
ldp_establish_hello_topo1	test_establish_hello_topo1.dot.svg
ldp_oc_acl_topo1	test_ldp_oc_acl_topo1.dot.svg
ldp_oc_topo1	test_ldp_oc_topo1.dot.svg
ldp_sync_isis_topo1	test_ldp_sync_isis_topo1.dot.svg
ldp_sync_ospf_topo1	test_ldp_sync_ospf_topo1.dot.svg
ldp_vpls_topo1	test_ldp_vpls_topo1.dot.svg
msdp_mesh_topo1	test_msdp_mesh_topo1.dot.svg
nhrp_redundancy	test_nhrp_redundancy.dot.svg
nhrp_topo	test_nhrp_topo.dot.svg
ospf6_topo2	test_ospf6_topo2.dot.svg
ospf_dual_stack	test_ospf_dual_stack.dot.svg
ospf_netns_vrf	test_ospf_netns_vrf.dot.svg
ospf_suppress_fa	test_ospf_suppress_fa.dot.svg
ospf_topo1	test_ospf_topo1.dot.svg
ospf_topo2	test_ospf_topo2.dot.svg
pim_basic_topo2	test_pim_basic_topo2.dot.svg
rip_bfd_topo1	test_rip_bfd_topo1.dot.svg
ripng_topo1	test_ripng_topo1.dot.svg
rip_topo1	test_rip_topo1.dot.svg
sbfd_topo1	sbfd_topo1.dot.svg
* Overview :noexport:

*** vtysh topotests (via python, json, or graphviz)

+ [[https://docs.frrouting.org/projects/dev-guide/en/latest/topotests.html#topotest-file-hierarchy][Topotest File Hierarchy]]
+ See [[https://docs.frrouting.org/projects/dev-guide/en/latest/topotests.html#defining-the-topology][Defining The Topology]] for graphviz

Defining and running a new "topotest" in the =frr= routing suite requres
specifying a topology using: python, json or graphviz.

+ The topotest tooling may also function to convert between topologies
+ While also /providing a standard JSON format for specifying a topology./

This is nice because automating network configuration (esp. for firewalls; esp
in a fairly green-field network) requires enumerating paths through the network.

+ =traceroute= doesn't really work, neither do =netcat= or =nmap=. They provide
  partial validation of the possibility of a path, but you have to be:
  - in the right place, sending packets through the correct port
  - at the right time (on a device with the right session states)
+ But the device itself already knows it's configuration/state. Why can't I just
  ask it? You can get this from the FRR device's configuration, but that only
  applies to specific devices.
+ What I would like is to specify the network in data, particularly the /links/
  and /routes/. Then collect that data, merge it into a topology, define some
  devices/interfaces as being a special type
  - Even finding a data structure that LOOKS like this has been impossible.
  - I should be able to enumerate over the structure and specify possible paths
    between two endpoints (including the hops in between)
+ Spec out a list of hosts and services -- should look like your typical ansible
  =hosts.yml= where those roles would be services -- then combine pairs of hsots
  with the routes (enumerated from the topology), qualifying a list of services
  - This should give you a list of paths over which the traffic should flow (or
    should not flow).
+ From here, you find the closests/farthest hops in common (between all the
  paths or some of the paths) and any edge routers/firewalls. These are the
  points where the least number of firewall rules can make the most difference.
+ Assembling the topology data from actual router state allows you to determine
  dynamically, some potential paths which should be tested by nmap (which may
  not be covered by a firewall.)
  - This helps close gaps where configuration has drifted from the
    expected/assumed implementation of FW policy
+ Assembling the topology data ahead-of-time (during network bootstrap) allows
  you to specify a sensible scheme for your firewall rules, so they can be
  sequenced (iptables, nftables sequence number) and assigned a UUID
  (generated from the configuration, stored in the fw rule description /and/ in
  a hash)
  - look at your Azure/AWS/GCP GUI. I bet you $1,000,000 there's multiple UUID
    beside every object. Different ball-park, but basically the same thing
    (getting UUID consistency across a large network is difficult ... for a
    small network should be simple)

There are other ways to do this: nautobot, YANG, online services proprietary
methods (almost never universal enough to extend their APIs & libs to linux
boxes) ... however, none of these are affordable (waste of time for me to invest
in learning) and none typically function on a dynamic/unstable/adhoc network.


* Container Lab
*** TODO move to topic

Thank the jesus they have a [[https://github.com/srl-labs/containerlab/blob/main/schemas/clab.schema.json][JSON schema]]

I'm mostly interested in:

+ Topology Model
  - maybe my mistake was to assume edges/connections were layer 2+3
+ YANG/Pydantic code generation (probably one-way: read from devices into
  models, run commands via templates)

** Commands

+ [[https://containerlab.dev/cmd/tools/veth/create/#examples][containerlab generate]] create a basis for a clab.yml
+ [[https://containerlab.dev/cmd/graph/][containerlab graph]] render a topology into graphviz, interactive HTML (via
  JSON), Mermaid, drawio.io
+ [[https://containerlab.dev/cmd/tools/veth/create/][containerlab tools veth create]]
  - other objects that require matching configs on multiple devices (VXLAN, ssh,
    Cert/CA/Sign)
+ [[https://containerlab.dev/cmd/exec/][containerlab exec]] distribute commands across nodes

** Topology

+ [[https://github.com/srl-labs/containerlab/tree/main/lab-examples][./lab-examples]]
+ [[https://github.com/srl-labs/containerlab/blob/main/lab-examples/clos02/clos02.clab.yml][./lab-examples/clos02/clos02.clab.yml]]: "5-stage CLOS fabric"

*** Node Types

By example

#+begin_src shell
# LOL that's a work of art
grep -e 'kind: ' /data/ecto/vyos/srl-labs/containerlab/lab-examples/**/*.yml  \
    | rev | sort | sed -e 's/.*:dnik.*:\(lmy.*\)\/sel.*/\1/g' \
    | rev | uniq -c
#+end_src

#+RESULTS:
|  1 | srlvjunos02/srlvjunos02.clab.yml |
|  2 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlcrpd01/srlcrpd01.clab.yml     |
|  1 | srlxrd01/srlxrd01.clab.yml       |
|  1 | freebsd01/freebsd01.clab.yml     |
|  1 | openbsd01/openbsd01.yml          |
|  1 | br01/br01.clab.yml               |
|  1 | ixiac01/ixiac01.clab.yml         |
|  2 | fortigate/fortigate.clab.yml     |
|  1 | srlvjunos01/srlvjunos01.clab.yml |
|  1 | vr04/vr04.clab.yml               |
|  1 | generic_vm01/generic_vm.clab.yml |
|  3 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlceos01/srlceos01.clab.yml     |
|  1 | vr01/vr01.clab.yml               |
|  1 | vr05/vr01.clab.yml               |
|  1 | cert01/cert01.clab.yml           |
|  1 | vr05/sros4.clab.yml              |
|  1 | vxlan01/vxlan-sros.clab.yml      |
|  1 | sonic01/sonic01.clab.yml         |
|  1 | ftdv01/ftdv01.yml                |
|  1 | vr03/vr03.clab.yml               |
|  1 | vr02/vr02.clab.yml               |
|  1 | vxlan01/vxlan-vmx.clab.yml       |
|  1 | vsrx01/vsrx01.yml                |
|  2 | openbsd01/openbsd01.yml          |
|  2 | ftdv01/ftdv01.yml                |
|  2 | vsrx01/vsrx01.yml                |
|  2 | freebsd01/freebsd01.clab.yml     |
|  6 | frr01/frr01.clab.yml             |
|  1 | srlfrr01/srlfrr01.clab.yml       |
|  2 | clos01/clos01.clab.yml           |
|  4 | clos02/clos02.clab.yml           |
|  4 | clos02/setup.clos02.clab.yml     |
|  4 | srl03/srl03.clab.yml             |
|  1 | ost-srl/ost-srl.clab.yml         |
|  1 | cvx01/topo.clab.yml              |
|  1 | cvx02/topo.clab.yml              |
|  1 | ixiac01/ixiac01.clab.yml         |
|  1 | sonic01/sonic01.clab.yml         |
|  1 | k8s_kind01/k8s_kind01.clab.yml   |
|  1 | srlcrpd01/srlcrpd01.clab.yml     |
|  1 | srlxrd01/srlxrd01.clab.yml       |
|  1 | srl01/srl01.clab.yml             |
|  1 | srl-quickstart/srl01.clab.yml    |
|  3 | br01/br01.clab.yml               |
|  1 | srlfrr01/srlfrr01.clab.yml       |
|  1 | vr01/vr01.clab.yml               |
|  1 | vr05/vr01.clab.yml               |
|  1 | srlceos01/srlceos01.clab.yml     |
|  3 | clos01/clos01.clab.yml           |
|  1 | srlvjunos01/srlvjunos01.clab.yml |
|  2 | srl02/srl02.clab.yml             |
|  2 | srl-quickstart/srl02.clab.yml    |
|  1 | vr02/vr02.clab.yml               |
| 10 | clos02/clos02.clab.yml           |
| 10 | clos02/setup.clos02.clab.yml     |
|  1 | srlvjunos02/srlvjunos02.clab.yml |
|  4 | srl03/srl03.clab.yml             |
|  1 | vr03/vr03.clab.yml               |
|  1 | vr04/vr04.clab.yml               |
|  1 | ost-srl/ost-srl.clab.yml         |
|  1 | generic_vm01/generic_vm.clab.yml |
|  1 | cvx01/topo.clab.yml              |
|  1 | cvx02/topo.clab.yml              |

count by =kind=

#+begin_src shell
grep -e 'kind: ' /data/ecto/vyos/srl-labs/containerlab/lab-examples/**/*.yml  \
    | rev | sort | sed -e 's/ :dnik.*//g' \
    | rev | uniq -c
#+end_src

#+RESULTS:
|  1 | juniper_vjunosevolved |
|  2 | k8s-kind              |
|  1 | juniper_crpd          |
|  1 | cisco_xrd             |
|  1 | freebsd               |
|  1 | openbsd               |
|  1 | bridge                |
|  1 | keysight_ixia-c-one   |
|  2 | fortinet_fortigate    |
|  1 | juniper_vjunosswitch  |
|  1 | cisco_xrv9k           |
|  1 | generic_vm            |
|  3 | ext-container         |
|  1 | arista_ceos           |
|  5 | nokia_sros            |
|  1 | sonic-vs              |
|  1 | cisco_ftdv            |
|  1 | cisco_xrv             |
|  2 | juniper_vmx           |
|  1 | juniper_vsrx          |
|  8 | linux                 |
| 17 | linux                 |
|  4 | linux                 |
|  3 | linux                 |
| 52 | nokia_srlinux         |
|  2 | cumulus_cvx           |


** Images

A pretty wide variety of images

| ceos:4.32.0F                                        | praqma/network-multitool:latest           |
| crpd:20.2R1.10                                      | vrnetlab/vr-fortigate:7.0.14              |
| docker-sonic-vs:2020-11-12                          | vrnetlab/vr-freebsd:13.2                  |
| frrouting/frr:v7.5.0                                | vrnetlab/vr-ftdv:7.2.5                    |
| frrouting/frr:v7.5.1                                | vrnetlab/vr-openbsd:7.3                   |
| ghcr.io/hellt/network-multitool                     | vrnetlab/vr-sros:21.2.R1                  |
| ghcr.io/nokia/srlinux                               | vrnetlab/vr-ubuntu:jammy                  |
| ghcr.io/nokia/srlinux:${SRL_VERSION:=latest}        | vrnetlab/vr-vjunosevolved:23.2R1-S1.8-EVO |
| ghcr.io/nokia/srlinux:23.10.1                       | vrnetlab/vr-vjunosswitch:23.2R1.14        |
| ghcr.io/nokia/srlinux:23.3.3                        | vrnetlab/vr-vmx:20.2R1.10                 |
| ghcr.io/nokia/srlinux:23.7.1                        | vrnetlab/vr-vmx:20.4R1.12                 |
| ghcr.io/nokia/srlinux:24.10                         | vrnetlab/vr-vsrx:23.2R1.13                |
| ghcr.io/nokia/srlinux:24.3.2                        | vrnetlab/vr-xrv:6.1.2                     |
| ghcr.io/open-traffic-generator/ixia-c-one:1.28.0-45 | vr-sros:21.2.R1                           |
| networkop/cx:4.3.0                                  | vr-xrv9k:7.2.1                            |
| networkop/host:ifreload                             | wbitt/network-multitool:alpine-extra      |
| nokia_sros:20.10.R1                                 | xrd-control-plane                         |
| ostinato/ostinato:v1.3.0-1                          |                                           |
