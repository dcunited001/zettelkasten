:PROPERTIES:
:ID:       128274ab-334d-4149-b2e4-9db464cbf9d9
:END:
#+TITLE:     Canadian Agile Meetup
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes

* Canadian Agile Meet up

+ Cycle Time :: amount of time from commitment to completion
  - varies from item to item & from sprint to sprint
  - a measure of variability. a histogram of cycle-times forms a useful metric
    - useful for determining why work was not well estimated

** Causes of Friction

+ poor tech
+ multitasking
+ scope-creep
+ everything is a priority
+ wating time
+ **dependencies**
+ tech debt
+ too many meetings/districtons
+ unfamiliar tools
+ misinterpreted req.
+ rework
+ feedback (little to none)
+ too much work in progress
+ hidden complexity
+ pressure to hit deadlines

** Dependencies
*** upstream vs. downstream dependencies
+ cycle time can greatly exacerbate delays in handoffs amongst multiple teams
+ downstream teams should ideally have a short tail in the histogram
+ downstream teams often have poor visibility into the upstream work pipeline
  - golden rule is "whoever is furthest upstream has the responsibility in communicating needs"
*** network of interconnected services
+ at each stage in a team's pipeline segment, there are handoffs
  - to legal team (at demo stage)
  - to firewall team (who reviews pushes to staging that require firewall changes)

*** two approaches to managing dependencies
**** 1) break the dependency
+ this is the preferred mechanism
**** 2) reduce its impact on end-to-end flow

** 17 Dependency Management Practices

1) Planning & Scheduling
   - use a giant gantt chart
   - has too many moving parts
   - doesn't take advantage of parallelism
2) Program Board
   - problem is the assumption that you can predict all dependencies
   - when deliveries are missed, it causes lots of problems
   - not all teams are interchangeable
3) Visualize Blockers & Cluster
   - collect a list of blockers for each sprint and analyze by:
     * type/cause
     * internal/external
   - goal is to reduce either the (1) frequency of a blocktype or (2) its severity/impact
4) Reduce Systemic WIP
   - reducing the numbers of works in progress reduces the impact of potential bottlenecks
5) monitor and reduce systemic waiting time
   - trim the cycle-time histogram tail
6) develop self-serve capability
   - this breaks the dependency and reduces the number of inter-team handoffs
7) Systemic Swarming
   - switch up team members, share ownership of items
   - this gives team members/management more visibilitiy
   - "travelers"
8) Pull Requests
   - this can introduce chokepoints, but helps teams share ownership of products and develop independence
9) fake objects, mocks stubs
10) Queue and Wait
    - introduce a 3rd party who can handle overflow
    - requires review of completed items by developers
11) Backlog Visualization
    - help make team members aware of blockers of upcoming items
12) Manage both ends of the dependency
    - integrate with the other team (attend their ceremonies/etc)
13) Dependency map
14) Use explicit policies to expedite
    - make agreements to expedite work items for other teams to improve synergy
    - works well for feature teams
15) Rearchitect (don't simply manage dependencies, break them)
    - change the structure of teams and/or technology
    - impact of conway's law
16) Remove Environment Contention
    - "free the devops. be free devops."
    - make it easier for developers to run software closer to staging (without having to wait on others)
17) reduce impact of merge hell

** Takeaways
+ visualize (consensus in awareness)
+ measure (cant confidently improve what you can't measure)
+ optimize

https://www.solutioneers.co.uk/dependency-management-hacks
