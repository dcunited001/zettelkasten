@Article{tyagicrump-2022-thehuz-instr-fuzzin,
  author =       {Tyagi, Aakash and Crump, Addison and Sadeghi, Ahmad-Reza and
                  Persyn, Garrett and Rajendran, Jeyavijayan and Jauernig,
                  Patrick and Kande, Rahul},
  title =        {Thehuzz: Instruction Fuzzing of Processors Using
                  Golden-Reference Models for Finding Software-Exploitable
                  Vulnerabilities},
  journal =      {CoRR},
  year =         2022,
  url =          {http://arxiv.org/abs/2201.09941v1},
  abstract =     {The increasing complexity of modern processors poses many
                  challenges to existing hardware verification tools and
                  methodologies for detecting security-critical bugs. Recent
                  attacks on processors have shown the fatal consequences of
                  uncovering and exploiting hardware vulnerabilities.  Fuzzing
                  has emerged as a promising technique for detecting software
                  vulnerabilities. Recently, a few hardware fuzzing techniques
                  have been proposed. However, they suffer from several
                  limitations, including non-applicability to commonly used
                  Hardware Description Languages (HDLs) like Verilog and VHDL,
                  the need for significant human intervention, and inability to
                  capture many intrinsic hardware behaviors, such as signal
                  transitions and floating wires.  In this paper, we present the
                  design and implementation of a novel hardware fuzzer, TheHuzz,
                  that overcomes the aforementioned limitations and
                  significantly improves the state of the art. We analyze the
                  intrinsic behaviors of hardware designs in HDLs and then
                  measure the coverage metrics that model such
                  behaviors. TheHuzz generates assembly-level instructions to
                  increase the desired coverage values, thereby finding many
                  hardware bugs that are exploitable from software. We evaluate
                  TheHuzz on four popular open-source processors and achieve
                  1.98x and 3.33x the speed compared to the industry-standard
                  random regression approach and the state-of-the-art hardware
                  fuzzer, DiffuzRTL, respectively. Using TheHuzz, we detected 11
                  bugs in these processors, including 8 new vulnerabilities, and
                  we demonstrate exploits using the detected bugs. We also show
                  that TheHuzz overcomes the limitations of formal verification
                  tools from the semiconductor industry by comparing its
                  findings to those discovered by the Cadence JasperGold tool.},
  archivePrefix ={arXiv},
  eprint =       {2201.09941},
  primaryClass = {cs.CR},
}

@inbook{oechslin-2003-makin-faster-crypt,
  DATE_ADDED =   {Tue May 28 07:39:07 2024},
  author =       {Philippe Oechslin},
  booktitle =    {Advances in Cryptology - CRYPTO 2003},
  doi =          {10.1007/978-3-540-45146-4_36},
  pages =        {617-630},
  publisher =    {Springer Berlin Heidelberg},
  series =       {Advances in Cryptology - CRYPTO 2003},
  title =        {Making a Faster Cryptanalytic Time-Memory Trade-Off},
  url =          {http://dx.doi.org/10.1007/978-3-540-45146-4_36},
  year =         {2003},
}


@Book{2021-origin-concr-const,
  author =       {},
  title =        {Origins of Concrete Construction in Roman Architecture},
  year =         {2021},
  publisher =    {University of Cambridge ESOL Examinations},
  url =          {https://openlibrary.org/books/OL34770230M},
}

@Book{fog-2024-optim-softw-optim,
  title={Optimizing software in C++: An optimization guide for Windows, Linux and Mac platforms},
  author={Fog, Agner},
  journal={Software optimization resources},
  year={2024}
}

@Book{fog-2024-micro-intel,
  title={The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers},
  author={Fog, Agner},
  journal={Software optimization resources},
  year={2024}
}

@Book{nystrom-2021-craft-inter,
  author          = {Nystrom, Robert},
  title           = {Crafting Interpreters},
  year            = {2021-07-27},
  publisher       = {Genever Benning},
  url             = {https://openlibrary.org/books/OL35260418M},
}

@Book{arpaci-dusseauarpaci-dusseau-2014-operat-system-three,
  author          = {Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau},
  title           = "{Operating Systems: Three Easy Pieces}",
  year            = 2014,
  publisher       = {Arpaci-Dusseau Books},
  edition         = {0.80},
  month           = "August",
}

@Book{grunejacobs-1990-parsin-techn-pract-guide,
  author          = {Grune, D and Jacobs, C},
  title           = {Parsing Techniques - a Practical Guide},
  year            = 1990,
  publisher       = {Ellis Horwood Ltd},
}

@Book{hendrikxde-2024-comput-tensor-decom,
  author          = {Hendrikx, Stijn and De Lathauwer, Lieven},
  publisher       = {KU Leuven - Faculty of Engineering Science},
  title           = {Computing Tensor Decompositions from Incomplete and
                  Implicit Data},
  year            = 2024,
}

@Book{gammahelm-1995-desig,
  author          = {Gamma, Erich and Helm, Richard and Johnson, Ralph and
                  Vlissides, John},
  title           = {Design patterns: elements of reusable object-oriented
                  software},
  year            = 1995,
  publisher       = {Addison-Wesley Longman Publishing Co., Inc},
  address         = {USA},
  isbn            = 0201633612,
}
